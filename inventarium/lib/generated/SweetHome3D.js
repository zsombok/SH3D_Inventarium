var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var HomeView;
(function (HomeView) {
    /**
     * The actions proposed by the view to user.
     * @enum
     * @property {HomeView.ActionType} NEW_HOME
     * @property {HomeView.ActionType} NEW_HOME_FROM_EXAMPLE
     * @property {HomeView.ActionType} CLOSE
     * @property {HomeView.ActionType} OPEN
     * @property {HomeView.ActionType} DELETE_RECENT_HOMES
     * @property {HomeView.ActionType} SAVE
     * @property {HomeView.ActionType} SAVE_AS
     * @property {HomeView.ActionType} SAVE_AND_COMPRESS
     * @property {HomeView.ActionType} PAGE_SETUP
     * @property {HomeView.ActionType} PRINT_PREVIEW
     * @property {HomeView.ActionType} PRINT
     * @property {HomeView.ActionType} PRINT_TO_PDF
     * @property {HomeView.ActionType} PREFERENCES
     * @property {HomeView.ActionType} EXIT
     * @property {HomeView.ActionType} UNDO
     * @property {HomeView.ActionType} REDO
     * @property {HomeView.ActionType} CUT
     * @property {HomeView.ActionType} COPY
     * @property {HomeView.ActionType} PASTE
     * @property {HomeView.ActionType} PASTE_TO_GROUP
     * @property {HomeView.ActionType} PASTE_STYLE
     * @property {HomeView.ActionType} DELETE
     * @property {HomeView.ActionType} SELECT_ALL
     * @property {HomeView.ActionType} SELECT_ALL_AT_ALL_LEVELS
     * @property {HomeView.ActionType} ADD_HOME_FURNITURE
     * @property {HomeView.ActionType} ADD_FURNITURE_TO_GROUP
     * @property {HomeView.ActionType} DELETE_HOME_FURNITURE
     * @property {HomeView.ActionType} MODIFY_FURNITURE
     * @property {HomeView.ActionType} IMPORT_FURNITURE
     * @property {HomeView.ActionType} IMPORT_FURNITURE_LIBRARY
     * @property {HomeView.ActionType} IMPORT_TEXTURE
     * @property {HomeView.ActionType} IMPORT_TEXTURES_LIBRARY
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_CATALOG_ID
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_NAME
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_CREATOR
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_WIDTH
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_DEPTH
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_HEIGHT
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_X
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_Y
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_ELEVATION
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_ANGLE
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_LEVEL
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_MODEL_SIZE
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_COLOR
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_TEXTURE
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_MOVABILITY
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_TYPE
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_VISIBILITY
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_PRICE
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED
     * @property {HomeView.ActionType} SORT_HOME_FURNITURE_BY_DESCENDING_ORDER
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_CATALOG_ID
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_NAME
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_CREATOR
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_WIDTH
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_DEPTH
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_HEIGHT
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_X
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_Y
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_ELEVATION
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_ANGLE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_LEVEL
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_MODEL_SIZE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_COLOR
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_TEXTURE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_MOVABLE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_VISIBLE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_PRICE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX
     * @property {HomeView.ActionType} DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_TOP
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_BOTTOM
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_LEFT
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_RIGHT
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_FRONT_SIDE
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_BACK_SIDE
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_LEFT_SIDE
     * @property {HomeView.ActionType} ALIGN_FURNITURE_ON_RIGHT_SIDE
     * @property {HomeView.ActionType} ALIGN_FURNITURE_SIDE_BY_SIDE
     * @property {HomeView.ActionType} DISTRIBUTE_FURNITURE_HORIZONTALLY
     * @property {HomeView.ActionType} DISTRIBUTE_FURNITURE_VERTICALLY
     * @property {HomeView.ActionType} RESET_FURNITURE_ELEVATION
     * @property {HomeView.ActionType} GROUP_FURNITURE
     * @property {HomeView.ActionType} UNGROUP_FURNITURE
     * @property {HomeView.ActionType} EXPORT_TO_CSV
     * @property {HomeView.ActionType} SELECT
     * @property {HomeView.ActionType} PAN
     * @property {HomeView.ActionType} CREATE_WALLS
     * @property {HomeView.ActionType} CREATE_ROOMS
     * @property {HomeView.ActionType} CREATE_DIMENSION_LINES
     * @property {HomeView.ActionType} CREATE_POLYLINES
     * @property {HomeView.ActionType} CREATE_LABELS
     * @property {HomeView.ActionType} DELETE_SELECTION
     * @property {HomeView.ActionType} LOCK_BASE_PLAN
     * @property {HomeView.ActionType} UNLOCK_BASE_PLAN
     * @property {HomeView.ActionType} ENABLE_MAGNETISM
     * @property {HomeView.ActionType} DISABLE_MAGNETISM
     * @property {HomeView.ActionType} FLIP_HORIZONTALLY
     * @property {HomeView.ActionType} FLIP_VERTICALLY
     * @property {HomeView.ActionType} MODIFY_COMPASS
     * @property {HomeView.ActionType} MODIFY_WALL
     * @property {HomeView.ActionType} JOIN_WALLS
     * @property {HomeView.ActionType} REVERSE_WALL_DIRECTION
     * @property {HomeView.ActionType} SPLIT_WALL
     * @property {HomeView.ActionType} MODIFY_ROOM
     * @property {HomeView.ActionType} ADD_ROOM_POINT
     * @property {HomeView.ActionType} DELETE_ROOM_POINT
     * @property {HomeView.ActionType} MODIFY_POLYLINE
     * @property {HomeView.ActionType} MODIFY_LABEL
     * @property {HomeView.ActionType} INCREASE_TEXT_SIZE
     * @property {HomeView.ActionType} DECREASE_TEXT_SIZE
     * @property {HomeView.ActionType} TOGGLE_BOLD_STYLE
     * @property {HomeView.ActionType} TOGGLE_ITALIC_STYLE
     * @property {HomeView.ActionType} IMPORT_BACKGROUND_IMAGE
     * @property {HomeView.ActionType} MODIFY_BACKGROUND_IMAGE
     * @property {HomeView.ActionType} HIDE_BACKGROUND_IMAGE
     * @property {HomeView.ActionType} SHOW_BACKGROUND_IMAGE
     * @property {HomeView.ActionType} DELETE_BACKGROUND_IMAGE
     * @property {HomeView.ActionType} ADD_LEVEL
     * @property {HomeView.ActionType} ADD_LEVEL_AT_SAME_ELEVATION
     * @property {HomeView.ActionType} MAKE_LEVEL_VIEWABLE
     * @property {HomeView.ActionType} MAKE_LEVEL_UNVIEWABLE
     * @property {HomeView.ActionType} MAKE_LEVEL_ONLY_VIEWABLE_ONE
     * @property {HomeView.ActionType} MAKE_ALL_LEVELS_VIEWABLE
     * @property {HomeView.ActionType} MODIFY_LEVEL
     * @property {HomeView.ActionType} DELETE_LEVEL
     * @property {HomeView.ActionType} ZOOM_OUT
     * @property {HomeView.ActionType} ZOOM_IN
     * @property {HomeView.ActionType} EXPORT_TO_SVG
     * @property {HomeView.ActionType} SELECT_OBJECT
     * @property {HomeView.ActionType} TOGGLE_SELECTION
     * @property {HomeView.ActionType} VIEW_FROM_TOP
     * @property {HomeView.ActionType} VIEW_FROM_OBSERVER
     * @property {HomeView.ActionType} MODIFY_OBSERVER
     * @property {HomeView.ActionType} STORE_POINT_OF_VIEW
     * @property {HomeView.ActionType} DELETE_POINTS_OF_VIEW
     * @property {HomeView.ActionType} CREATE_PHOTOS_AT_POINTS_OF_VIEW
     * @property {HomeView.ActionType} DETACH_3D_VIEW
     * @property {HomeView.ActionType} ATTACH_3D_VIEW
     * @property {HomeView.ActionType} DISPLAY_ALL_LEVELS
     * @property {HomeView.ActionType} DISPLAY_SELECTED_LEVEL
     * @property {HomeView.ActionType} MODIFY_3D_ATTRIBUTES
     * @property {HomeView.ActionType} CREATE_PHOTO
     * @property {HomeView.ActionType} CREATE_VIDEO
     * @property {HomeView.ActionType} EXPORT_TO_OBJ
     * @property {HomeView.ActionType} HELP
     * @property {HomeView.ActionType} ABOUT
     * @class
     */
    var ActionType;
    (function (ActionType) {
        ActionType[ActionType["NEW_HOME"] = 0] = "NEW_HOME";
        ActionType[ActionType["NEW_HOME_FROM_EXAMPLE"] = 1] = "NEW_HOME_FROM_EXAMPLE";
        ActionType[ActionType["CLOSE"] = 2] = "CLOSE";
        ActionType[ActionType["OPEN"] = 3] = "OPEN";
        ActionType[ActionType["DELETE_RECENT_HOMES"] = 4] = "DELETE_RECENT_HOMES";
        ActionType[ActionType["SAVE"] = 5] = "SAVE";
        ActionType[ActionType["SAVE_AS"] = 6] = "SAVE_AS";
        ActionType[ActionType["SAVE_AND_COMPRESS"] = 7] = "SAVE_AND_COMPRESS";
        ActionType[ActionType["PAGE_SETUP"] = 8] = "PAGE_SETUP";
        ActionType[ActionType["PRINT_PREVIEW"] = 9] = "PRINT_PREVIEW";
        ActionType[ActionType["PRINT"] = 10] = "PRINT";
        ActionType[ActionType["PRINT_TO_PDF"] = 11] = "PRINT_TO_PDF";
        ActionType[ActionType["PREFERENCES"] = 12] = "PREFERENCES";
        ActionType[ActionType["EXIT"] = 13] = "EXIT";
        ActionType[ActionType["UNDO"] = 14] = "UNDO";
        ActionType[ActionType["REDO"] = 15] = "REDO";
        ActionType[ActionType["CUT"] = 16] = "CUT";
        ActionType[ActionType["COPY"] = 17] = "COPY";
        ActionType[ActionType["PASTE"] = 18] = "PASTE";
        ActionType[ActionType["PASTE_TO_GROUP"] = 19] = "PASTE_TO_GROUP";
        ActionType[ActionType["PASTE_STYLE"] = 20] = "PASTE_STYLE";
        ActionType[ActionType["DELETE"] = 21] = "DELETE";
        ActionType[ActionType["SELECT_ALL"] = 22] = "SELECT_ALL";
        ActionType[ActionType["SELECT_ALL_AT_ALL_LEVELS"] = 23] = "SELECT_ALL_AT_ALL_LEVELS";
        ActionType[ActionType["ADD_HOME_FURNITURE"] = 24] = "ADD_HOME_FURNITURE";
        ActionType[ActionType["ADD_FURNITURE_TO_GROUP"] = 25] = "ADD_FURNITURE_TO_GROUP";
        ActionType[ActionType["DELETE_HOME_FURNITURE"] = 26] = "DELETE_HOME_FURNITURE";
        ActionType[ActionType["MODIFY_FURNITURE"] = 27] = "MODIFY_FURNITURE";
        ActionType[ActionType["IMPORT_FURNITURE"] = 28] = "IMPORT_FURNITURE";
        ActionType[ActionType["IMPORT_FURNITURE_LIBRARY"] = 29] = "IMPORT_FURNITURE_LIBRARY";
        ActionType[ActionType["IMPORT_TEXTURE"] = 30] = "IMPORT_TEXTURE";
        ActionType[ActionType["IMPORT_TEXTURES_LIBRARY"] = 31] = "IMPORT_TEXTURES_LIBRARY";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_CATALOG_ID"] = 32] = "SORT_HOME_FURNITURE_BY_CATALOG_ID";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_NAME"] = 33] = "SORT_HOME_FURNITURE_BY_NAME";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_CREATOR"] = 34] = "SORT_HOME_FURNITURE_BY_CREATOR";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_WIDTH"] = 35] = "SORT_HOME_FURNITURE_BY_WIDTH";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_DEPTH"] = 36] = "SORT_HOME_FURNITURE_BY_DEPTH";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_HEIGHT"] = 37] = "SORT_HOME_FURNITURE_BY_HEIGHT";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_X"] = 38] = "SORT_HOME_FURNITURE_BY_X";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_Y"] = 39] = "SORT_HOME_FURNITURE_BY_Y";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_ELEVATION"] = 40] = "SORT_HOME_FURNITURE_BY_ELEVATION";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_ANGLE"] = 41] = "SORT_HOME_FURNITURE_BY_ANGLE";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_LEVEL"] = 42] = "SORT_HOME_FURNITURE_BY_LEVEL";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_MODEL_SIZE"] = 43] = "SORT_HOME_FURNITURE_BY_MODEL_SIZE";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_COLOR"] = 44] = "SORT_HOME_FURNITURE_BY_COLOR";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_TEXTURE"] = 45] = "SORT_HOME_FURNITURE_BY_TEXTURE";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_MOVABILITY"] = 46] = "SORT_HOME_FURNITURE_BY_MOVABILITY";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_TYPE"] = 47] = "SORT_HOME_FURNITURE_BY_TYPE";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_VISIBILITY"] = 48] = "SORT_HOME_FURNITURE_BY_VISIBILITY";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_PRICE"] = 49] = "SORT_HOME_FURNITURE_BY_PRICE";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE"] = 50] = "SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX"] = 51] = "SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED"] = 52] = "SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED";
        ActionType[ActionType["SORT_HOME_FURNITURE_BY_DESCENDING_ORDER"] = 53] = "SORT_HOME_FURNITURE_BY_DESCENDING_ORDER";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_CATALOG_ID"] = 54] = "DISPLAY_HOME_FURNITURE_CATALOG_ID";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_NAME"] = 55] = "DISPLAY_HOME_FURNITURE_NAME";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_CREATOR"] = 56] = "DISPLAY_HOME_FURNITURE_CREATOR";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_WIDTH"] = 57] = "DISPLAY_HOME_FURNITURE_WIDTH";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_DEPTH"] = 58] = "DISPLAY_HOME_FURNITURE_DEPTH";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_HEIGHT"] = 59] = "DISPLAY_HOME_FURNITURE_HEIGHT";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_X"] = 60] = "DISPLAY_HOME_FURNITURE_X";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_Y"] = 61] = "DISPLAY_HOME_FURNITURE_Y";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_ELEVATION"] = 62] = "DISPLAY_HOME_FURNITURE_ELEVATION";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_ANGLE"] = 63] = "DISPLAY_HOME_FURNITURE_ANGLE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_LEVEL"] = 64] = "DISPLAY_HOME_FURNITURE_LEVEL";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_MODEL_SIZE"] = 65] = "DISPLAY_HOME_FURNITURE_MODEL_SIZE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_COLOR"] = 66] = "DISPLAY_HOME_FURNITURE_COLOR";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_TEXTURE"] = 67] = "DISPLAY_HOME_FURNITURE_TEXTURE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_MOVABLE"] = 68] = "DISPLAY_HOME_FURNITURE_MOVABLE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW"] = 69] = "DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_VISIBLE"] = 70] = "DISPLAY_HOME_FURNITURE_VISIBLE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_PRICE"] = 71] = "DISPLAY_HOME_FURNITURE_PRICE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE"] = 72] = "DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX"] = 73] = "DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX";
        ActionType[ActionType["DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED"] = 74] = "DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED";
        ActionType[ActionType["ALIGN_FURNITURE_ON_TOP"] = 75] = "ALIGN_FURNITURE_ON_TOP";
        ActionType[ActionType["ALIGN_FURNITURE_ON_BOTTOM"] = 76] = "ALIGN_FURNITURE_ON_BOTTOM";
        ActionType[ActionType["ALIGN_FURNITURE_ON_LEFT"] = 77] = "ALIGN_FURNITURE_ON_LEFT";
        ActionType[ActionType["ALIGN_FURNITURE_ON_RIGHT"] = 78] = "ALIGN_FURNITURE_ON_RIGHT";
        ActionType[ActionType["ALIGN_FURNITURE_ON_FRONT_SIDE"] = 79] = "ALIGN_FURNITURE_ON_FRONT_SIDE";
        ActionType[ActionType["ALIGN_FURNITURE_ON_BACK_SIDE"] = 80] = "ALIGN_FURNITURE_ON_BACK_SIDE";
        ActionType[ActionType["ALIGN_FURNITURE_ON_LEFT_SIDE"] = 81] = "ALIGN_FURNITURE_ON_LEFT_SIDE";
        ActionType[ActionType["ALIGN_FURNITURE_ON_RIGHT_SIDE"] = 82] = "ALIGN_FURNITURE_ON_RIGHT_SIDE";
        ActionType[ActionType["ALIGN_FURNITURE_SIDE_BY_SIDE"] = 83] = "ALIGN_FURNITURE_SIDE_BY_SIDE";
        ActionType[ActionType["DISTRIBUTE_FURNITURE_HORIZONTALLY"] = 84] = "DISTRIBUTE_FURNITURE_HORIZONTALLY";
        ActionType[ActionType["DISTRIBUTE_FURNITURE_VERTICALLY"] = 85] = "DISTRIBUTE_FURNITURE_VERTICALLY";
        ActionType[ActionType["RESET_FURNITURE_ELEVATION"] = 86] = "RESET_FURNITURE_ELEVATION";
        ActionType[ActionType["GROUP_FURNITURE"] = 87] = "GROUP_FURNITURE";
        ActionType[ActionType["UNGROUP_FURNITURE"] = 88] = "UNGROUP_FURNITURE";
        ActionType[ActionType["EXPORT_TO_CSV"] = 89] = "EXPORT_TO_CSV";
        ActionType[ActionType["SELECT"] = 90] = "SELECT";
        ActionType[ActionType["PAN"] = 91] = "PAN";
        ActionType[ActionType["CREATE_WALLS"] = 92] = "CREATE_WALLS";
        ActionType[ActionType["CREATE_ROOMS"] = 93] = "CREATE_ROOMS";
        ActionType[ActionType["CREATE_DIMENSION_LINES"] = 94] = "CREATE_DIMENSION_LINES";
        ActionType[ActionType["CREATE_POLYLINES"] = 95] = "CREATE_POLYLINES";
        ActionType[ActionType["CREATE_LABELS"] = 96] = "CREATE_LABELS";
        ActionType[ActionType["DELETE_SELECTION"] = 97] = "DELETE_SELECTION";
        ActionType[ActionType["LOCK_BASE_PLAN"] = 98] = "LOCK_BASE_PLAN";
        ActionType[ActionType["UNLOCK_BASE_PLAN"] = 99] = "UNLOCK_BASE_PLAN";
        ActionType[ActionType["ENABLE_MAGNETISM"] = 100] = "ENABLE_MAGNETISM";
        ActionType[ActionType["DISABLE_MAGNETISM"] = 101] = "DISABLE_MAGNETISM";
        ActionType[ActionType["FLIP_HORIZONTALLY"] = 102] = "FLIP_HORIZONTALLY";
        ActionType[ActionType["FLIP_VERTICALLY"] = 103] = "FLIP_VERTICALLY";
        ActionType[ActionType["MODIFY_COMPASS"] = 104] = "MODIFY_COMPASS";
        ActionType[ActionType["MODIFY_WALL"] = 105] = "MODIFY_WALL";
        ActionType[ActionType["JOIN_WALLS"] = 106] = "JOIN_WALLS";
        ActionType[ActionType["REVERSE_WALL_DIRECTION"] = 107] = "REVERSE_WALL_DIRECTION";
        ActionType[ActionType["SPLIT_WALL"] = 108] = "SPLIT_WALL";
        ActionType[ActionType["MODIFY_ROOM"] = 109] = "MODIFY_ROOM";
        ActionType[ActionType["ADD_ROOM_POINT"] = 110] = "ADD_ROOM_POINT";
        ActionType[ActionType["DELETE_ROOM_POINT"] = 111] = "DELETE_ROOM_POINT";
        ActionType[ActionType["MODIFY_POLYLINE"] = 112] = "MODIFY_POLYLINE";
        ActionType[ActionType["MODIFY_LABEL"] = 113] = "MODIFY_LABEL";
        ActionType[ActionType["INCREASE_TEXT_SIZE"] = 114] = "INCREASE_TEXT_SIZE";
        ActionType[ActionType["DECREASE_TEXT_SIZE"] = 115] = "DECREASE_TEXT_SIZE";
        ActionType[ActionType["TOGGLE_BOLD_STYLE"] = 116] = "TOGGLE_BOLD_STYLE";
        ActionType[ActionType["TOGGLE_ITALIC_STYLE"] = 117] = "TOGGLE_ITALIC_STYLE";
        ActionType[ActionType["IMPORT_BACKGROUND_IMAGE"] = 118] = "IMPORT_BACKGROUND_IMAGE";
        ActionType[ActionType["MODIFY_BACKGROUND_IMAGE"] = 119] = "MODIFY_BACKGROUND_IMAGE";
        ActionType[ActionType["HIDE_BACKGROUND_IMAGE"] = 120] = "HIDE_BACKGROUND_IMAGE";
        ActionType[ActionType["SHOW_BACKGROUND_IMAGE"] = 121] = "SHOW_BACKGROUND_IMAGE";
        ActionType[ActionType["DELETE_BACKGROUND_IMAGE"] = 122] = "DELETE_BACKGROUND_IMAGE";
        ActionType[ActionType["ADD_LEVEL"] = 123] = "ADD_LEVEL";
        ActionType[ActionType["ADD_LEVEL_AT_SAME_ELEVATION"] = 124] = "ADD_LEVEL_AT_SAME_ELEVATION";
        ActionType[ActionType["MAKE_LEVEL_VIEWABLE"] = 125] = "MAKE_LEVEL_VIEWABLE";
        ActionType[ActionType["MAKE_LEVEL_UNVIEWABLE"] = 126] = "MAKE_LEVEL_UNVIEWABLE";
        ActionType[ActionType["MAKE_LEVEL_ONLY_VIEWABLE_ONE"] = 127] = "MAKE_LEVEL_ONLY_VIEWABLE_ONE";
        ActionType[ActionType["MAKE_ALL_LEVELS_VIEWABLE"] = 128] = "MAKE_ALL_LEVELS_VIEWABLE";
        ActionType[ActionType["MODIFY_LEVEL"] = 129] = "MODIFY_LEVEL";
        ActionType[ActionType["DELETE_LEVEL"] = 130] = "DELETE_LEVEL";
        ActionType[ActionType["ZOOM_OUT"] = 131] = "ZOOM_OUT";
        ActionType[ActionType["ZOOM_IN"] = 132] = "ZOOM_IN";
        ActionType[ActionType["EXPORT_TO_SVG"] = 133] = "EXPORT_TO_SVG";
        ActionType[ActionType["SELECT_OBJECT"] = 134] = "SELECT_OBJECT";
        ActionType[ActionType["TOGGLE_SELECTION"] = 135] = "TOGGLE_SELECTION";
        ActionType[ActionType["VIEW_FROM_TOP"] = 136] = "VIEW_FROM_TOP";
        ActionType[ActionType["VIEW_FROM_OBSERVER"] = 137] = "VIEW_FROM_OBSERVER";
        ActionType[ActionType["MODIFY_OBSERVER"] = 138] = "MODIFY_OBSERVER";
        ActionType[ActionType["STORE_POINT_OF_VIEW"] = 139] = "STORE_POINT_OF_VIEW";
        ActionType[ActionType["DELETE_POINTS_OF_VIEW"] = 140] = "DELETE_POINTS_OF_VIEW";
        ActionType[ActionType["CREATE_PHOTOS_AT_POINTS_OF_VIEW"] = 141] = "CREATE_PHOTOS_AT_POINTS_OF_VIEW";
        ActionType[ActionType["DETACH_3D_VIEW"] = 142] = "DETACH_3D_VIEW";
        ActionType[ActionType["ATTACH_3D_VIEW"] = 143] = "ATTACH_3D_VIEW";
        ActionType[ActionType["DISPLAY_ALL_LEVELS"] = 144] = "DISPLAY_ALL_LEVELS";
        ActionType[ActionType["DISPLAY_SELECTED_LEVEL"] = 145] = "DISPLAY_SELECTED_LEVEL";
        ActionType[ActionType["MODIFY_3D_ATTRIBUTES"] = 146] = "MODIFY_3D_ATTRIBUTES";
        ActionType[ActionType["CREATE_PHOTO"] = 147] = "CREATE_PHOTO";
        ActionType[ActionType["CREATE_VIDEO"] = 148] = "CREATE_VIDEO";
        ActionType[ActionType["EXPORT_TO_OBJ"] = 149] = "EXPORT_TO_OBJ";
        ActionType[ActionType["HELP"] = 150] = "HELP";
        ActionType[ActionType["ABOUT"] = 151] = "ABOUT";
    })(ActionType = HomeView.ActionType || (HomeView.ActionType = {}));
    var SaveAnswer;
    (function (SaveAnswer) {
        SaveAnswer[SaveAnswer["SAVE"] = 0] = "SAVE";
        SaveAnswer[SaveAnswer["CANCEL"] = 1] = "CANCEL";
        SaveAnswer[SaveAnswer["DO_NOT_SAVE"] = 2] = "DO_NOT_SAVE";
    })(SaveAnswer = HomeView.SaveAnswer || (HomeView.SaveAnswer = {}));
    var OpenDamagedHomeAnswer;
    (function (OpenDamagedHomeAnswer) {
        OpenDamagedHomeAnswer[OpenDamagedHomeAnswer["REMOVE_DAMAGED_ITEMS"] = 0] = "REMOVE_DAMAGED_ITEMS";
        OpenDamagedHomeAnswer[OpenDamagedHomeAnswer["REPLACE_DAMAGED_ITEMS"] = 1] = "REPLACE_DAMAGED_ITEMS";
        OpenDamagedHomeAnswer[OpenDamagedHomeAnswer["DO_NOT_OPEN_HOME"] = 2] = "DO_NOT_OPEN_HOME";
    })(OpenDamagedHomeAnswer = HomeView.OpenDamagedHomeAnswer || (HomeView.OpenDamagedHomeAnswer = {}));
})(HomeView || (HomeView = {}));
/**
 * An undoable edit able with a localized presentation name.
 * @author Emmanuel Puybaret
 * @param {UserPreferences} preferences
 * @param {Object} controllerClass
 * @param {string} presentationNameKey
 * @class
 * @extends javax.swing.undo.AbstractUndoableEdit
 * @private
 */
var LocalizedUndoableEdit = /** @class */ (function (_super) {
    __extends(LocalizedUndoableEdit, _super);
    function LocalizedUndoableEdit(preferences, controllerClass, presentationNameKey) {
        var _this = _super.call(this) || this;
        if (_this.preferences === undefined) {
            _this.preferences = null;
        }
        if (_this.controllerClass === undefined) {
            _this.controllerClass = null;
        }
        if (_this.presentationNameKey === undefined) {
            _this.presentationNameKey = null;
        }
        _this.preferences = preferences;
        _this.controllerClass = controllerClass;
        _this.presentationNameKey = presentationNameKey;
        return _this;
    }
    /**
     *
     * @return {string}
     */
    LocalizedUndoableEdit.prototype.getPresentationName = function () {
        return this.preferences.getLocalizedString(this.controllerClass, this.presentationNameKey);
    };
    return LocalizedUndoableEdit;
}(javax.swing.undo.AbstractUndoableEdit));
LocalizedUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.LocalizedUndoableEdit";
LocalizedUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
/**
 * Creates the controller of user preferences view.
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {HomeController} homeController
 * @class
 * @author Emmanuel Puybaret
 */
var UserPreferencesController = /** @class */ (function () {
    function UserPreferencesController(preferences, viewFactory, contentManager, homeController) {
        if (((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null) && ((homeController != null && homeController instanceof HomeController) || homeController === null)) {
            var __args = arguments;
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.homeController === undefined) {
                this.homeController = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.userPreferencesView === undefined) {
                this.userPreferencesView = null;
            }
            if (this.language === undefined) {
                this.language = null;
            }
            if (this.unit === undefined) {
                this.unit = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.valueAddedTaxEnabled === undefined) {
                this.valueAddedTaxEnabled = false;
            }
            if (this.furnitureCatalogViewedInTree === undefined) {
                this.furnitureCatalogViewedInTree = false;
            }
            if (this.navigationPanelVisible === undefined) {
                this.navigationPanelVisible = false;
            }
            if (this.aerialViewCenteredOnSelectionEnabled === undefined) {
                this.aerialViewCenteredOnSelectionEnabled = false;
            }
            if (this.observerCameraSelectedAtChange === undefined) {
                this.observerCameraSelectedAtChange = false;
            }
            if (this.magnetismEnabled === undefined) {
                this.magnetismEnabled = false;
            }
            if (this.rulersVisible === undefined) {
                this.rulersVisible = false;
            }
            if (this.gridVisible === undefined) {
                this.gridVisible = false;
            }
            if (this.defaultFontName === undefined) {
                this.defaultFontName = null;
            }
            if (this.furnitureViewedFromTop === undefined) {
                this.furnitureViewedFromTop = false;
            }
            if (this.furnitureModelIconSize === undefined) {
                this.furnitureModelIconSize = 0;
            }
            if (this.roomFloorColoredOrTextured === undefined) {
                this.roomFloorColoredOrTextured = false;
            }
            if (this.wallPattern === undefined) {
                this.wallPattern = null;
            }
            if (this.newWallPattern === undefined) {
                this.newWallPattern = null;
            }
            if (this.newWallThickness === undefined) {
                this.newWallThickness = 0;
            }
            if (this.newWallHeight === undefined) {
                this.newWallHeight = 0;
            }
            if (this.newFloorThickness === undefined) {
                this.newFloorThickness = 0;
            }
            if (this.checkUpdatesEnabled === undefined) {
                this.checkUpdatesEnabled = false;
            }
            if (this.autoSaveDelayForRecovery === undefined) {
                this.autoSaveDelayForRecovery = 0;
            }
            if (this.autoSaveForRecoveryEnabled === undefined) {
                this.autoSaveForRecoveryEnabled = false;
            }
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.homeController = homeController;
            this.propertyChangeSupport = new PropertyChangeSupport(this);
            this.updateProperties();
        }
        else if (((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null) && homeController === undefined) {
            var __args = arguments;
            {
                var __args_1 = arguments;
                var homeController_1 = null;
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.homeController === undefined) {
                    this.homeController = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (this.userPreferencesView === undefined) {
                    this.userPreferencesView = null;
                }
                if (this.language === undefined) {
                    this.language = null;
                }
                if (this.unit === undefined) {
                    this.unit = null;
                }
                if (this.currency === undefined) {
                    this.currency = null;
                }
                if (this.valueAddedTaxEnabled === undefined) {
                    this.valueAddedTaxEnabled = false;
                }
                if (this.furnitureCatalogViewedInTree === undefined) {
                    this.furnitureCatalogViewedInTree = false;
                }
                if (this.navigationPanelVisible === undefined) {
                    this.navigationPanelVisible = false;
                }
                if (this.aerialViewCenteredOnSelectionEnabled === undefined) {
                    this.aerialViewCenteredOnSelectionEnabled = false;
                }
                if (this.observerCameraSelectedAtChange === undefined) {
                    this.observerCameraSelectedAtChange = false;
                }
                if (this.magnetismEnabled === undefined) {
                    this.magnetismEnabled = false;
                }
                if (this.rulersVisible === undefined) {
                    this.rulersVisible = false;
                }
                if (this.gridVisible === undefined) {
                    this.gridVisible = false;
                }
                if (this.defaultFontName === undefined) {
                    this.defaultFontName = null;
                }
                if (this.furnitureViewedFromTop === undefined) {
                    this.furnitureViewedFromTop = false;
                }
                if (this.furnitureModelIconSize === undefined) {
                    this.furnitureModelIconSize = 0;
                }
                if (this.roomFloorColoredOrTextured === undefined) {
                    this.roomFloorColoredOrTextured = false;
                }
                if (this.wallPattern === undefined) {
                    this.wallPattern = null;
                }
                if (this.newWallPattern === undefined) {
                    this.newWallPattern = null;
                }
                if (this.newWallThickness === undefined) {
                    this.newWallThickness = 0;
                }
                if (this.newWallHeight === undefined) {
                    this.newWallHeight = 0;
                }
                if (this.newFloorThickness === undefined) {
                    this.newFloorThickness = 0;
                }
                if (this.checkUpdatesEnabled === undefined) {
                    this.checkUpdatesEnabled = false;
                }
                if (this.autoSaveDelayForRecovery === undefined) {
                    this.autoSaveDelayForRecovery = 0;
                }
                if (this.autoSaveForRecoveryEnabled === undefined) {
                    this.autoSaveForRecoveryEnabled = false;
                }
                this.preferences = preferences;
                this.viewFactory = viewFactory;
                this.homeController = homeController_1;
                this.propertyChangeSupport = new PropertyChangeSupport(this);
                this.updateProperties();
            }
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.propertyChangeSupport = new PropertyChangeSupport(this);
            this.updateProperties();
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    UserPreferencesController.prototype.getView = function () {
        if (this.userPreferencesView == null) {
            this.userPreferencesView = this.viewFactory.createUserPreferencesView(this.preferences, this);
        }
        return this.userPreferencesView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    UserPreferencesController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    UserPreferencesController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    UserPreferencesController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates preferences properties edited by this controller.
     */
    UserPreferencesController.prototype.updateProperties = function () {
        this.setLanguage(this.preferences.getLanguage());
        this.setUnit(this.preferences.getLengthUnit());
        this.setCurrency(this.preferences.getCurrency());
        this.setValueAddedTaxEnabled(this.preferences.isValueAddedTaxEnabled());
        this.setFurnitureCatalogViewedInTree(this.preferences.isFurnitureCatalogViewedInTree());
        this.setNavigationPanelVisible(this.preferences.isNavigationPanelVisible());
        this.setAerialViewCenteredOnSelectionEnabled(this.preferences.isAerialViewCenteredOnSelectionEnabled());
        this.setObserverCameraSelectedAtChange(this.preferences.isObserverCameraSelectedAtChange());
        this.setMagnetismEnabled(this.preferences.isMagnetismEnabled());
        this.setRulersVisible(this.preferences.isRulersVisible());
        this.setGridVisible(this.preferences.isGridVisible());
        this.setDefaultFontName(this.preferences.getDefaultFontName());
        this.setFurnitureViewedFromTop(this.preferences.isFurnitureViewedFromTop());
        this.setFurnitureModelIconSize(this.preferences.getFurnitureModelIconSize());
        this.setRoomFloorColoredOrTextured(this.preferences.isRoomFloorColoredOrTextured());
        this.setWallPattern(this.preferences.getWallPattern());
        this.setNewWallPattern(this.preferences.getNewWallPattern());
        var minimumLength = this.getUnit().getMinimumLength();
        var maximumLength = this.getUnit().getMaximumLength();
        this.setNewWallThickness(Math.min(Math.max(minimumLength, this.preferences.getNewWallThickness()), maximumLength / 10));
        this.setNewWallHeight(Math.min(Math.max(minimumLength, this.preferences.getNewWallHeight()), maximumLength));
        this.setNewFloorThickness(Math.min(Math.max(minimumLength, this.preferences.getNewFloorThickness()), maximumLength / 10));
        this.setCheckUpdatesEnabled(this.preferences.isCheckUpdatesEnabled());
        this.setAutoSaveDelayForRecovery(this.preferences.getAutoSaveDelayForRecovery());
        this.setAutoSaveForRecoveryEnabled(this.preferences.getAutoSaveDelayForRecovery() > 0);
    };
    /**
     * Returns <code>true</code> if the given <code>property</code> is editable.
     * Depending on whether a property is editable or not, the view associated to this controller
     * may render it differently.
     * The implementation of this method always returns <code>true</code> except for <code>LANGUAGE</code> if it's not editable.
     * @param {string} property
     * @return {boolean}
     */
    UserPreferencesController.prototype.isPropertyEditable = function (property) {
        switch ((property)) {
            case "LANGUAGE":
                return this.preferences.isLanguageEditable();
            default:
                return true;
        }
    };
    /**
     * Sets the edited language.
     * @param {string} language
     */
    UserPreferencesController.prototype.setLanguage = function (language) {
        if (language !== this.language) {
            var oldLanguage = this.language;
            this.language = language;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LANGUAGE", oldLanguage, language);
        }
    };
    /**
     * Returns the edited language.
     * @return {string}
     */
    UserPreferencesController.prototype.getLanguage = function () {
        return this.language;
    };
    /**
     * Sets the edited unit.
     * @param {LengthUnit} unit
     */
    UserPreferencesController.prototype.setUnit = function (unit) {
        if (unit !== this.unit) {
            var oldUnit = this.unit;
            this.unit = unit;
            this.propertyChangeSupport.firePropertyChange(/* name */ "UNIT", oldUnit, unit);
        }
    };
    /**
     * Returns the edited unit.
     * @return {LengthUnit}
     */
    UserPreferencesController.prototype.getUnit = function () {
        return this.unit;
    };
    /**
     * Sets the edited currency.
     * @param {string} currency
     */
    UserPreferencesController.prototype.setCurrency = function (currency) {
        if (currency !== this.currency) {
            var oldCurrency = this.currency;
            this.currency = currency;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CURRENCY", oldCurrency, currency);
            if (currency == null) {
                this.setValueAddedTaxEnabled(false);
            }
        }
    };
    /**
     * Returns the edited currency.
     * @return {string}
     */
    UserPreferencesController.prototype.getCurrency = function () {
        return this.currency;
    };
    /**
     * Sets whether Value Added Tax should be taken in account in prices.
     * @param {boolean} valueAddedTaxEnabled
     */
    UserPreferencesController.prototype.setValueAddedTaxEnabled = function (valueAddedTaxEnabled) {
        if (this.valueAddedTaxEnabled !== valueAddedTaxEnabled) {
            this.valueAddedTaxEnabled = valueAddedTaxEnabled;
            this.propertyChangeSupport.firePropertyChange(/* name */ "VALUE_ADDED_TAX_ENABLED", !valueAddedTaxEnabled, valueAddedTaxEnabled);
        }
    };
    /**
     * Returns <code>true</code> if Value Added Tax should be taken in account in prices.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isValueAddedTaxEnabled = function () {
        return this.valueAddedTaxEnabled;
    };
    /**
     * Sets whether the furniture catalog should be viewed in a tree or a different way.
     * @param {boolean} furnitureCatalogViewedInTree
     */
    UserPreferencesController.prototype.setFurnitureCatalogViewedInTree = function (furnitureCatalogViewedInTree) {
        if (this.furnitureCatalogViewedInTree !== furnitureCatalogViewedInTree) {
            this.furnitureCatalogViewedInTree = furnitureCatalogViewedInTree;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FURNITURE_CATALOG_VIEWED_IN_TREE", !furnitureCatalogViewedInTree, furnitureCatalogViewedInTree);
        }
    };
    /**
     * Returns <code>true</code> if furniture catalog should be viewed in a tree.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isFurnitureCatalogViewedInTree = function () {
        return this.furnitureCatalogViewedInTree;
    };
    /**
     * Sets whether the navigation panel should be displayed or not.
     * @param {boolean} navigationPanelVisible
     */
    UserPreferencesController.prototype.setNavigationPanelVisible = function (navigationPanelVisible) {
        if (this.navigationPanelVisible !== navigationPanelVisible) {
            this.navigationPanelVisible = navigationPanelVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NAVIGATION_PANEL_VISIBLE", !navigationPanelVisible, navigationPanelVisible);
        }
    };
    /**
     * Returns <code>true</code> if the navigation panel should be displayed.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isNavigationPanelVisible = function () {
        return this.navigationPanelVisible;
    };
    /**
     * Sets whether aerial view should be centered on selection or not.
     * @param {boolean} aerialViewCenteredOnSelectionEnabled
     */
    UserPreferencesController.prototype.setAerialViewCenteredOnSelectionEnabled = function (aerialViewCenteredOnSelectionEnabled) {
        if (aerialViewCenteredOnSelectionEnabled !== this.aerialViewCenteredOnSelectionEnabled) {
            this.aerialViewCenteredOnSelectionEnabled = aerialViewCenteredOnSelectionEnabled;
            this.propertyChangeSupport.firePropertyChange(/* name */ "AERIAL_VIEW_CENTERED_ON_SELECTION_ENABLED", !aerialViewCenteredOnSelectionEnabled, aerialViewCenteredOnSelectionEnabled);
        }
    };
    /**
     * Returns whether aerial view should be centered on selection or not.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isAerialViewCenteredOnSelectionEnabled = function () {
        return this.aerialViewCenteredOnSelectionEnabled;
    };
    /**
     * Sets whether the observer camera should be selected at each change.
     * @param {boolean} observerCameraSelectedAtChange
     */
    UserPreferencesController.prototype.setObserverCameraSelectedAtChange = function (observerCameraSelectedAtChange) {
        if (observerCameraSelectedAtChange !== this.observerCameraSelectedAtChange) {
            this.observerCameraSelectedAtChange = observerCameraSelectedAtChange;
            this.propertyChangeSupport.firePropertyChange(/* name */ "OBSERVER_CAMERA_SELECTED_AT_CHANGE", !observerCameraSelectedAtChange, observerCameraSelectedAtChange);
        }
    };
    /**
     * Returns whether the observer camera should be selected at each change.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isObserverCameraSelectedAtChange = function () {
        return this.observerCameraSelectedAtChange;
    };
    /**
     * Sets whether magnetism is enabled or not.
     * @param {boolean} magnetismEnabled
     */
    UserPreferencesController.prototype.setMagnetismEnabled = function (magnetismEnabled) {
        if (magnetismEnabled !== this.magnetismEnabled) {
            this.magnetismEnabled = magnetismEnabled;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MAGNETISM_ENABLED", !magnetismEnabled, magnetismEnabled);
        }
    };
    /**
     * Returns whether magnetism is enabled or not.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isMagnetismEnabled = function () {
        return this.magnetismEnabled;
    };
    /**
     * Sets whether rulers are visible or not.
     * @param {boolean} rulersVisible
     */
    UserPreferencesController.prototype.setRulersVisible = function (rulersVisible) {
        if (rulersVisible !== this.rulersVisible) {
            this.rulersVisible = rulersVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RULERS_VISIBLE", !rulersVisible, rulersVisible);
        }
    };
    /**
     * Returns whether rulers are visible or not.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isRulersVisible = function () {
        return this.rulersVisible;
    };
    /**
     * Sets whether grid is visible or not.
     * @param {boolean} gridVisible
     */
    UserPreferencesController.prototype.setGridVisible = function (gridVisible) {
        if (gridVisible !== this.gridVisible) {
            this.gridVisible = gridVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "GRID_VISIBLE", !gridVisible, gridVisible);
        }
    };
    /**
     * Returns whether grid is visible or not.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isGridVisible = function () {
        return this.gridVisible;
    };
    /**
     * Sets the name of the font that should be used by default.
     * @param {string} defaultFontName
     */
    UserPreferencesController.prototype.setDefaultFontName = function (defaultFontName) {
        if (defaultFontName !== this.defaultFontName && (defaultFontName == null || !(defaultFontName === this.defaultFontName))) {
            var oldName = this.defaultFontName;
            this.defaultFontName = defaultFontName;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DEFAULT_FONT_NAME", oldName, defaultFontName);
        }
    };
    /**
     * Returns the name of the font that should be used by default or <code>null</code>
     * if the default font should be the default one in the application.
     * @return {string}
     */
    UserPreferencesController.prototype.getDefaultFontName = function () {
        return this.defaultFontName;
    };
    /**
     * Sets how furniture should be displayed in plan.
     * @param {boolean} furnitureViewedFromTop
     */
    UserPreferencesController.prototype.setFurnitureViewedFromTop = function (furnitureViewedFromTop) {
        if (this.furnitureViewedFromTop !== furnitureViewedFromTop) {
            this.furnitureViewedFromTop = furnitureViewedFromTop;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FURNITURE_VIEWED_FROM_TOP", !furnitureViewedFromTop, furnitureViewedFromTop);
        }
    };
    /**
     * Returns how furniture should be displayed in plan.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isFurnitureViewedFromTop = function () {
        return this.furnitureViewedFromTop;
    };
    /**
     * Sets the size used to generate icons of furniture viewed from top.
     * @param {number} furnitureModelIconSize
     */
    UserPreferencesController.prototype.setFurnitureModelIconSize = function (furnitureModelIconSize) {
        if (furnitureModelIconSize !== this.furnitureModelIconSize) {
            var oldSize = this.furnitureModelIconSize;
            this.furnitureModelIconSize = furnitureModelIconSize;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FURNITURE_MODEL_ICON_SIZE", oldSize, furnitureModelIconSize);
        }
    };
    /**
     * Returns the size used to generate icons of furniture viewed from top.
     * @return {number}
     */
    UserPreferencesController.prototype.getFurnitureModelIconSize = function () {
        return this.furnitureModelIconSize;
    };
    /**
     * Sets whether floor texture is visible in plan or not.
     * @param {boolean} floorTextureVisible
     */
    UserPreferencesController.prototype.setRoomFloorColoredOrTextured = function (floorTextureVisible) {
        if (this.roomFloorColoredOrTextured !== floorTextureVisible) {
            this.roomFloorColoredOrTextured = floorTextureVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ROOM_FLOOR_COLORED_OR_TEXTURED", !floorTextureVisible, floorTextureVisible);
        }
    };
    /**
     * Returns <code>true</code> if floor texture is visible in plan.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isRoomFloorColoredOrTextured = function () {
        return this.roomFloorColoredOrTextured;
    };
    /**
     * Sets default walls top pattern in plan, and notifies
     * listeners of this change.
     * @param {Object} wallPattern
     */
    UserPreferencesController.prototype.setWallPattern = function (wallPattern) {
        if (this.wallPattern !== wallPattern) {
            var oldWallPattern = this.wallPattern;
            this.wallPattern = wallPattern;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WALL_PATTERN", oldWallPattern, wallPattern);
        }
    };
    /**
     * Returns the default walls top pattern in plan.
     * @return {Object}
     */
    UserPreferencesController.prototype.getWallPattern = function () {
        return this.wallPattern;
    };
    /**
     * Sets the edited new wall top pattern in plan, and notifies
     * listeners of this change.
     * @param {Object} newWallPattern
     */
    UserPreferencesController.prototype.setNewWallPattern = function (newWallPattern) {
        if (this.newWallPattern !== newWallPattern) {
            var oldNewWallPattern = this.newWallPattern;
            this.newWallPattern = newWallPattern;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NEW_WALL_PATTERN", oldNewWallPattern, newWallPattern);
        }
    };
    /**
     * Returns the edited new wall top pattern in plan.
     * @return {Object}
     */
    UserPreferencesController.prototype.getNewWallPattern = function () {
        return this.newWallPattern;
    };
    /**
     * Sets the edited new wall thickness.
     * @param {number} newWallThickness
     */
    UserPreferencesController.prototype.setNewWallThickness = function (newWallThickness) {
        if (newWallThickness !== this.newWallThickness) {
            var oldNewWallThickness = this.newWallThickness;
            this.newWallThickness = newWallThickness;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NEW_WALL_THICKNESS", oldNewWallThickness, newWallThickness);
        }
    };
    /**
     * Returns the edited new wall thickness.
     * @return {number}
     */
    UserPreferencesController.prototype.getNewWallThickness = function () {
        return this.newWallThickness;
    };
    /**
     * Sets the edited new wall height.
     * @param {number} newWallHeight
     */
    UserPreferencesController.prototype.setNewWallHeight = function (newWallHeight) {
        if (newWallHeight !== this.newWallHeight) {
            var oldNewWallHeight = this.newWallHeight;
            this.newWallHeight = newWallHeight;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NEW_WALL_HEIGHT", oldNewWallHeight, newWallHeight);
        }
    };
    /**
     * Returns the edited new wall height.
     * @return {number}
     */
    UserPreferencesController.prototype.getNewWallHeight = function () {
        return this.newWallHeight;
    };
    /**
     * Sets the edited new floor thickness.
     * @param {number} newFloorThickness
     */
    UserPreferencesController.prototype.setNewFloorThickness = function (newFloorThickness) {
        if (newFloorThickness !== this.newFloorThickness) {
            var oldNewFloorThickness = this.newFloorThickness;
            this.newFloorThickness = newFloorThickness;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NEW_FLOOR_THICKNESS", oldNewFloorThickness, newFloorThickness);
        }
    };
    /**
     * Returns the edited new floor thickness.
     * @return {number}
     */
    UserPreferencesController.prototype.getNewFloorThickness = function () {
        return this.newFloorThickness;
    };
    /**
     * Sets whether updates should be checked or not.
     * @param {boolean} updatesChecked
     */
    UserPreferencesController.prototype.setCheckUpdatesEnabled = function (updatesChecked) {
        if (updatesChecked !== this.checkUpdatesEnabled) {
            this.checkUpdatesEnabled = updatesChecked;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CHECK_UPDATES_ENABLED", !updatesChecked, updatesChecked);
        }
    };
    /**
     * Returns <code>true</code> if updates should be checked.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isCheckUpdatesEnabled = function () {
        return this.checkUpdatesEnabled;
    };
    /**
     * Sets the edited auto recovery save delay.
     * @param {number} autoSaveDelayForRecovery
     */
    UserPreferencesController.prototype.setAutoSaveDelayForRecovery = function (autoSaveDelayForRecovery) {
        if (autoSaveDelayForRecovery !== this.autoSaveDelayForRecovery) {
            var oldAutoSaveDelayForRecovery = this.autoSaveDelayForRecovery;
            this.autoSaveDelayForRecovery = autoSaveDelayForRecovery;
            this.propertyChangeSupport.firePropertyChange(/* name */ "AUTO_SAVE_DELAY_FOR_RECOVERY", oldAutoSaveDelayForRecovery, autoSaveDelayForRecovery);
        }
    };
    /**
     * Returns the edited auto recovery save delay.
     * @return {number}
     */
    UserPreferencesController.prototype.getAutoSaveDelayForRecovery = function () {
        return this.autoSaveDelayForRecovery;
    };
    /**
     * Sets whether auto recovery save is enabled or not.
     * @param {boolean} autoSaveForRecoveryEnabled
     */
    UserPreferencesController.prototype.setAutoSaveForRecoveryEnabled = function (autoSaveForRecoveryEnabled) {
        if (autoSaveForRecoveryEnabled !== this.autoSaveForRecoveryEnabled) {
            this.autoSaveForRecoveryEnabled = autoSaveForRecoveryEnabled;
            this.propertyChangeSupport.firePropertyChange(/* name */ "AUTO_SAVE_FOR_RECOVERY_ENABLED", !autoSaveForRecoveryEnabled, autoSaveForRecoveryEnabled);
        }
    };
    /**
     * Returns <code>true</code> if auto recovery save is enabled.
     * @return {boolean}
     */
    UserPreferencesController.prototype.isAutoSaveForRecoveryEnabled = function () {
        return this.autoSaveForRecoveryEnabled;
    };
    /**
     * Resets the displayed flags of action tips.
     */
    UserPreferencesController.prototype.resetDisplayedActionTips = function () {
        this.preferences.resetIgnoredActionTips();
    };
    /**
     * Controls the modification of user preferences.
     */
    UserPreferencesController.prototype.modifyUserPreferences = function () {
        this.preferences.setLanguage(this.getLanguage());
        this.preferences.setUnit(this.getUnit());
        this.preferences.setCurrency(this.getCurrency());
        this.preferences.setValueAddedTaxEnabled(this.isValueAddedTaxEnabled());
        this.preferences.setFurnitureCatalogViewedInTree(this.isFurnitureCatalogViewedInTree());
        this.preferences.setNavigationPanelVisible(this.isNavigationPanelVisible());
        this.preferences.setAerialViewCenteredOnSelectionEnabled(this.isAerialViewCenteredOnSelectionEnabled());
        this.preferences.setObserverCameraSelectedAtChange(this.isObserverCameraSelectedAtChange());
        this.preferences.setMagnetismEnabled(this.isMagnetismEnabled());
        this.preferences.setRulersVisible(this.isRulersVisible());
        this.preferences.setGridVisible(this.isGridVisible());
        this.preferences.setDefaultFontName(this.getDefaultFontName());
        this.preferences.setFurnitureViewedFromTop(this.isFurnitureViewedFromTop());
        this.preferences.setFurnitureModelIconSize(this.getFurnitureModelIconSize());
        this.preferences.setFloorColoredOrTextured(this.isRoomFloorColoredOrTextured());
        this.preferences.setWallPattern(this.getWallPattern());
        this.preferences.setNewWallPattern(this.getNewWallPattern());
        this.preferences.setNewWallThickness(this.getNewWallThickness());
        this.preferences.setNewWallHeight(this.getNewWallHeight());
        this.preferences.setNewFloorThickness(this.getNewFloorThickness());
        this.preferences.setCheckUpdatesEnabled(this.isCheckUpdatesEnabled());
        this.preferences.setAutoSaveDelayForRecovery(this.isAutoSaveForRecoveryEnabled() ? this.getAutoSaveDelayForRecovery() : 0);
    };
    return UserPreferencesController;
}());
UserPreferencesController["__class"] = "com.eteks.sweethome3d.viewcontroller.UserPreferencesController";
UserPreferencesController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
/**
 * An abstract MVC for a wizard view. Subclasses should create a set of wizard steps
 * with subclasses of <code>WizardControllerStepState</code> and
 * and choose the first step with a call to <code>setStepState</code>.
 * The {@link #finish() finish} method will be called if user completes the wizard
 * steps correctly.
 * @author Emmanuel Puybaret
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @class
 */
var WizardController = /** @class */ (function () {
    function WizardController(preferences, viewFactory) {
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.stepStatePropertyChangeListener === undefined) {
            this.stepStatePropertyChangeListener = null;
        }
        if (this.wizardView === undefined) {
            this.wizardView = null;
        }
        if (this.stepState === undefined) {
            this.stepState = null;
        }
        if (this.backStepEnabled === undefined) {
            this.backStepEnabled = false;
        }
        if (this.nextStepEnabled === undefined) {
            this.nextStepEnabled = false;
        }
        if (this.lastStep === undefined) {
            this.lastStep = false;
        }
        if (this.stepView === undefined) {
            this.stepView = null;
        }
        if (this.stepIcon === undefined) {
            this.stepIcon = null;
        }
        if (this.title === undefined) {
            this.title = null;
        }
        if (this.resizable === undefined) {
            this.resizable = false;
        }
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.stepStatePropertyChangeListener = new WizardController.WizardController$0(this);
        this.propertyChangeSupport = new PropertyChangeSupport(this);
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    WizardController.prototype.getView = function () {
        if (this.wizardView == null) {
            this.wizardView = this.viewFactory.createWizardView(this.preferences, this);
        }
        return this.wizardView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    WizardController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    WizardController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    WizardController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Sets whether back step is enabled or not.
     * @param {boolean} backStepEnabled
     * @private
     */
    WizardController.prototype.setBackStepEnabled = function (backStepEnabled) {
        if (backStepEnabled !== this.backStepEnabled) {
            this.backStepEnabled = backStepEnabled;
            this.propertyChangeSupport.firePropertyChange(/* name */ "BACK_STEP_ENABLED", !backStepEnabled, backStepEnabled);
        }
    };
    /**
     * Returns whether back step is enabled or not.
     * @return {boolean}
     */
    WizardController.prototype.isBackStepEnabled = function () {
        return this.backStepEnabled;
    };
    /**
     * Sets whether next step is enabled or not.
     * @param {boolean} nextStepEnabled
     * @private
     */
    WizardController.prototype.setNextStepEnabled = function (nextStepEnabled) {
        if (nextStepEnabled !== this.nextStepEnabled) {
            this.nextStepEnabled = nextStepEnabled;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NEXT_STEP_ENABLED", !nextStepEnabled, nextStepEnabled);
        }
    };
    /**
     * Returns whether next step is enabled or not.
     * @return {boolean}
     */
    WizardController.prototype.isNextStepEnabled = function () {
        return this.nextStepEnabled;
    };
    /**
     * Sets whether this is the last step or not.
     * @param {boolean} lastStep
     * @private
     */
    WizardController.prototype.setLastStep = function (lastStep) {
        if (lastStep !== this.lastStep) {
            this.lastStep = lastStep;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LAST_STEP", !lastStep, lastStep);
        }
    };
    /**
     * Returns whether this is the last step or not.
     * @return {boolean}
     */
    WizardController.prototype.isLastStep = function () {
        return this.lastStep;
    };
    /**
     * Sets the step view.
     * @param {Object} stepView
     * @private
     */
    WizardController.prototype.setStepView = function (stepView) {
        if (stepView !== this.stepView) {
            var oldStepView = this.stepView;
            this.stepView = stepView;
            this.propertyChangeSupport.firePropertyChange(/* name */ "STEP_VIEW", oldStepView, stepView);
        }
    };
    /**
     * Returns the current step view.
     * @return {Object}
     */
    WizardController.prototype.getStepView = function () {
        return this.stepView;
    };
    /**
     * Sets the step icon.
     * @param {string} stepIcon
     * @private
     */
    WizardController.prototype.setStepIcon = function (stepIcon) {
        if (stepIcon !== this.stepIcon) {
            var oldStepIcon = this.stepIcon;
            this.stepIcon = stepIcon;
            this.propertyChangeSupport.firePropertyChange(/* name */ "STEP_ICON", oldStepIcon, stepIcon);
        }
    };
    /**
     * Returns the current step icon.
     * @return {string}
     */
    WizardController.prototype.getStepIcon = function () {
        return this.stepIcon;
    };
    /**
     * Sets the wizard title.
     * @param {string} title
     */
    WizardController.prototype.setTitle = function (title) {
        if (title !== this.title) {
            var oldTitle = this.title;
            this.title = title;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TITLE", oldTitle, title);
        }
    };
    /**
     * Returns the wizard title.
     * @return {string}
     */
    WizardController.prototype.getTitle = function () {
        return this.title;
    };
    /**
     * Sets whether the wizard is resizable or not.
     * @param {boolean} resizable
     */
    WizardController.prototype.setResizable = function (resizable) {
        if (resizable !== this.resizable) {
            this.resizable = resizable;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RESIZABLE", !resizable, resizable);
        }
    };
    /**
     * Returns whether the wizard is resizable or not.
     * @return {boolean}
     */
    WizardController.prototype.isResizable = function () {
        return this.resizable;
    };
    /**
     * Changes current state of controller.
     * @param {WizardController.WizardControllerStepState} stepState
     */
    WizardController.prototype.setStepState = function (stepState) {
        if (this.stepState != null) {
            this.stepState.exit();
            this.stepState.removePropertyChangeListener(this.stepStatePropertyChangeListener);
        }
        this.stepState = stepState;
        this.setBackStepEnabled(!stepState.isFirstStep());
        this.setNextStepEnabled(stepState.isNextStepEnabled());
        this.setStepView(stepState.getView());
        this.setStepIcon(stepState.getIcon());
        this.setLastStep(stepState.isLastStep());
        this.stepState.addPropertyChangeListener(this.stepStatePropertyChangeListener);
        this.stepState.enter();
    };
    WizardController.prototype.getStepState = function () {
        return this.stepState;
    };
    /**
     * Requires to the current step to jump to next step.
     */
    WizardController.prototype.goToNextStep = function () {
        this.stepState.goToNextStep();
    };
    /**
     * Requires to the current step to go back to previous step.
     */
    WizardController.prototype.goBackToPreviousStep = function () {
        this.stepState.goBackToPreviousStep();
    };
    return WizardController;
}());
WizardController["__class"] = "com.eteks.sweethome3d.viewcontroller.WizardController";
WizardController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (WizardController) {
    /**
     * State of a step in wizard.
     * @class
     */
    var WizardControllerStepState = /** @class */ (function () {
        function WizardControllerStepState() {
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.firstStep === undefined) {
                this.firstStep = false;
            }
            if (this.lastStep === undefined) {
                this.lastStep = false;
            }
            if (this.nextStepEnabled === undefined) {
                this.nextStepEnabled = false;
            }
            this.propertyChangeSupport = new PropertyChangeSupport(this);
        }
        /**
         * Adds the property change <code>listener</code> in parameter to this home.
         * @param {PropertyChangeListener} listener
         * @private
         */
        WizardControllerStepState.prototype.addPropertyChangeListener = function (listener) {
            this.propertyChangeSupport.addPropertyChangeListener(listener);
        };
        /**
         * Removes the property change <code>listener</code> in parameter from this home.
         * @param {PropertyChangeListener} listener
         * @private
         */
        WizardControllerStepState.prototype.removePropertyChangeListener = function (listener) {
            this.propertyChangeSupport.removePropertyChangeListener(listener);
        };
        WizardControllerStepState.prototype.enter = function () {
        };
        WizardControllerStepState.prototype.exit = function () {
        };
        WizardControllerStepState.prototype.getIcon = function () {
            return null;
        };
        WizardControllerStepState.prototype.goBackToPreviousStep = function () {
        };
        WizardControllerStepState.prototype.goToNextStep = function () {
        };
        WizardControllerStepState.prototype.isFirstStep = function () {
            return this.firstStep;
        };
        WizardControllerStepState.prototype.setFirstStep = function (firstStep) {
            if (firstStep !== this.firstStep) {
                this.firstStep = firstStep;
                this.propertyChangeSupport.firePropertyChange(/* name */ "FIRST_STEP", !firstStep, firstStep);
            }
        };
        WizardControllerStepState.prototype.isLastStep = function () {
            return this.lastStep;
        };
        WizardControllerStepState.prototype.setLastStep = function (lastStep) {
            if (lastStep !== this.lastStep) {
                this.lastStep = lastStep;
                this.propertyChangeSupport.firePropertyChange(/* name */ "LAST_STEP", !lastStep, lastStep);
            }
        };
        WizardControllerStepState.prototype.isNextStepEnabled = function () {
            return this.nextStepEnabled;
        };
        WizardControllerStepState.prototype.setNextStepEnabled = function (nextStepEnabled) {
            if (nextStepEnabled !== this.nextStepEnabled) {
                this.nextStepEnabled = nextStepEnabled;
                this.propertyChangeSupport.firePropertyChange(/* name */ "NEXT_STEP_ENABLED", !nextStepEnabled, nextStepEnabled);
            }
        };
        return WizardControllerStepState;
    }());
    WizardController.WizardControllerStepState = WizardControllerStepState;
    WizardControllerStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.WizardController.WizardControllerStepState";
    var WizardController$0 = /** @class */ (function () {
        function WizardController$0(__parent) {
            this.__parent = __parent;
        }
        WizardController$0.prototype.propertyChange = function (ev) {
            switch (( /* valueOf */ev.getPropertyName())) {
                case "FIRST_STEP":
                    this.__parent.setBackStepEnabled(!this.__parent.stepState.isFirstStep());
                    break;
                case "LAST_STEP":
                    this.__parent.setLastStep(this.__parent.stepState.isLastStep());
                    break;
                case "NEXT_STEP_ENABLED":
                    this.__parent.setNextStepEnabled(this.__parent.stepState.isNextStepEnabled());
                    break;
            }
        };
        return WizardController$0;
    }());
    WizardController.WizardController$0 = WizardController$0;
})(WizardController || (WizardController = {}));
/**
 * A MVC controller for texture choice.
 * @author Emmanuel Puybaret
 * @param {string} title
 * @param {boolean} rotationSupported
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 */
var TextureChoiceController = /** @class */ (function () {
    function TextureChoiceController(title, rotationSupported, preferences, viewFactory, contentManager) {
        if (((typeof title === 'string') || title === null) && ((typeof rotationSupported === 'boolean') || rotationSupported === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null)) {
            var __args = arguments;
            if (this.title === undefined) {
                this.title = null;
            }
            if (this.rotationSupported === undefined) {
                this.rotationSupported = false;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.textureChoiceView === undefined) {
                this.textureChoiceView = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
            this.title = title;
            this.rotationSupported = rotationSupported;
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.contentManager = contentManager;
            this.propertyChangeSupport = new PropertyChangeSupport(this);
        }
        else if (((typeof title === 'string') || title === null) && ((rotationSupported != null && rotationSupported instanceof UserPreferences) || rotationSupported === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || viewFactory === null) && contentManager === undefined) {
            var __args = arguments;
            var preferences_1 = __args[1];
            var viewFactory_1 = __args[2];
            var contentManager_1 = __args[3];
            {
                var __args_2 = arguments;
                var rotationSupported_1 = true;
                if (this.title === undefined) {
                    this.title = null;
                }
                if (this.rotationSupported === undefined) {
                    this.rotationSupported = false;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (this.textureChoiceView === undefined) {
                    this.textureChoiceView = null;
                }
                if (this.texture === undefined) {
                    this.texture = null;
                }
                this.title = title;
                this.rotationSupported = rotationSupported_1;
                this.preferences = preferences_1;
                this.viewFactory = viewFactory_1;
                this.contentManager = contentManager_1;
                this.propertyChangeSupport = new PropertyChangeSupport(this);
            }
            if (this.title === undefined) {
                this.title = null;
            }
            if (this.rotationSupported === undefined) {
                this.rotationSupported = false;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.textureChoiceView === undefined) {
                this.textureChoiceView = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    TextureChoiceController.prototype.getView = function () {
        if (this.textureChoiceView == null) {
            this.textureChoiceView = this.viewFactory.createTextureChoiceView(this.preferences, this);
        }
        return this.textureChoiceView;
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    TextureChoiceController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    TextureChoiceController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Sets the texture displayed by view and fires a <code>PropertyChangeEvent</code>.
     * @param {HomeTexture} texture
     */
    TextureChoiceController.prototype.setTexture = function (texture) {
        if (this.texture !== texture && (texture == null || !texture.equals(this.texture))) {
            var oldTexture = this.texture;
            this.texture = texture;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TEXTURE", oldTexture, texture);
        }
    };
    /**
     * Returns the texture displayed by view.
     * @return {HomeTexture}
     */
    TextureChoiceController.prototype.getTexture = function () {
        return this.texture;
    };
    /**
     * Returns the text that should be displayed as texture choice dialog title.
     * @return {string}
     */
    TextureChoiceController.prototype.getDialogTitle = function () {
        return this.title;
    };
    /**
     * Returns <code>true</code> if the rotation of the edited texture is supported.
     * @return {boolean}
     */
    TextureChoiceController.prototype.isRotationSupported = function () {
        return this.rotationSupported;
    };
    TextureChoiceController.prototype.importTexture$ = function () {
        new ImportedTextureWizardController(this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
    };
    TextureChoiceController.prototype.importTexture$java_lang_String = function (textureName) {
        new ImportedTextureWizardController(textureName, this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
    };
    /**
     * Controls the import of a texture with a given name.
     * @param {string} textureName
     */
    TextureChoiceController.prototype.importTexture = function (textureName) {
        if (((typeof textureName === 'string') || textureName === null)) {
            return this.importTexture$java_lang_String(textureName);
        }
        else if (textureName === undefined) {
            return this.importTexture$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Controls the modification of a texture.
     * @param {CatalogTexture} texture
     */
    TextureChoiceController.prototype.modifyTexture = function (texture) {
        new ImportedTextureWizardController(texture, this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
    };
    /**
     * Controls the deletion of a texture.
     * @param {CatalogTexture} texture
     */
    TextureChoiceController.prototype.deleteTexture = function (texture) {
        if (this.getView().confirmDeleteSelectedCatalogTexture()) {
            this.preferences.getTexturesCatalog()["delete"](texture);
        }
    };
    /**
     * Adds the given <code>texture</code> to the recent textures set.
     * @param {Object} texture
     */
    TextureChoiceController.prototype.addRecentTexture = function (texture) {
        var recentTextures = (this.preferences.getRecentTextures().slice(0));
        for (var i = 0; i < /* size */ recentTextures.length; i++) {
            {
                var recentTexture = recentTextures[i];
                if ( /* equals */(function (o1, o2) { if (o1 && o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return o1 === o2;
                } })(recentTexture.getImage(), texture.getImage())) {
                    if (i === 0) {
                        return;
                    }
                    else {
                        /* remove */ recentTextures.splice(i, 1)[0];
                        break;
                    }
                }
            }
            ;
        }
        /* add */ recentTextures.splice(0, 0, texture);
        while (( /* size */recentTextures.length > TextureChoiceController.MAX_RECENT_TEXTURES)) {
            {
                /* remove */ recentTextures.splice(/* size */ recentTextures.length - 1, 1)[0];
            }
        }
        ;
        this.preferences.setRecentTextures(recentTextures);
    };
    TextureChoiceController.MAX_RECENT_TEXTURES = 15;
    return TextureChoiceController;
}());
TextureChoiceController["__class"] = "com.eteks.sweethome3d.viewcontroller.TextureChoiceController";
TextureChoiceController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
var ExportableView;
(function (ExportableView) {
    /**
     * Data types.
     * @class
     */
    var FormatType = /** @class */ (function () {
        function FormatType(name) {
            if (this.__name === undefined) {
                this.__name = null;
            }
            this.__name = name;
        }
        FormatType.SVG_$LI$ = function () { if (FormatType.SVG == null) {
            FormatType.SVG = new ExportableView.FormatType("SVG");
        } return FormatType.SVG; };
        FormatType.CSV_$LI$ = function () { if (FormatType.CSV == null) {
            FormatType.CSV = new ExportableView.FormatType("CSV");
        } return FormatType.CSV; };
        FormatType.prototype.name = function () {
            return this.__name;
        };
        /**
         *
         * @return {string}
         */
        FormatType.prototype.toString = function () {
            return this.__name;
        };
        return FormatType;
    }());
    ExportableView.FormatType = FormatType;
    FormatType["__class"] = "com.eteks.sweethome3d.viewcontroller.ExportableView.FormatType";
})(ExportableView || (ExportableView = {}));
/**
 * The controller of the video creation view.
 * @author Emmanuel Puybaret
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 * @ignore
 */
var VideoController = /** @class */ (function () {
    function VideoController(home, preferences, viewFactory, contentManager) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.videoView === undefined) {
            this.videoView = null;
        }
        if (this.aspectRatio === undefined) {
            this.aspectRatio = null;
        }
        if (this.frameRate === undefined) {
            this.frameRate = 0;
        }
        if (this.width === undefined) {
            this.width = 0;
        }
        if (this.height === undefined) {
            this.height = 0;
        }
        if (this.quality === undefined) {
            this.quality = 0;
        }
        if (this.speed === undefined) {
            this.speed = 0;
        }
        if (this.cameraPath === undefined) {
            this.cameraPath = null;
        }
        if (this.time === undefined) {
            this.time = 0;
        }
        if (this.ceilingLightColor === undefined) {
            this.ceilingLightColor = 0;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
        home.getEnvironment().addPropertyChangeListener("CEILING_LIGHT_COLOR", new VideoController.HomeEnvironmentChangeListener(this));
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    VideoController.prototype.getView = function () {
        if (this.videoView == null) {
            this.videoView = this.viewFactory.createVideoView(this.home, this.preferences, this);
        }
        return this.videoView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    VideoController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Returns the content manager of this controller.
     * @return {Object}
     */
    VideoController.prototype.getContentManager = function () {
        return this.contentManager;
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    VideoController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    VideoController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from the video creation preferences.
     */
    VideoController.prototype.updateProperties = function () {
        var homeEnvironment = this.home.getEnvironment();
        this.setFrameRate(homeEnvironment.getVideoFrameRate());
        this.setWidth(homeEnvironment.getVideoWidth(), false);
        this.setHeight(homeEnvironment.getVideoHeight(), false);
        this.setAspectRatio(homeEnvironment.getVideoAspectRatio());
        this.setQuality(homeEnvironment.getVideoQuality());
        this.setSpeed(homeEnvironment.getVideoSpeed());
        var videoCameraPath = homeEnvironment.getVideoCameraPath();
        this.setCameraPath(videoCameraPath);
        this.setTime(/* isEmpty */ (videoCameraPath.length == 0) ? this.home.getCamera().getTime() : /* get */ videoCameraPath[0].getTime());
        this.setCeilingLightColor(homeEnvironment.getCeillingLightColor());
    };
    /**
     * Sets the aspect ratio of the video.
     * @param {AspectRatio} aspectRatio
     */
    VideoController.prototype.setAspectRatio = function (aspectRatio) {
        if (this.aspectRatio !== aspectRatio) {
            var oldAspectRatio = this.aspectRatio;
            this.aspectRatio = aspectRatio;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ASPECT_RATIO", oldAspectRatio, aspectRatio);
            this.home.getEnvironment().setVideoAspectRatio(this.aspectRatio);
            this.setHeight(Math.round(this.width / { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio]), false);
        }
    };
    /**
     * Returns the aspect ratio of the video.
     * @return {AspectRatio}
     */
    VideoController.prototype.getAspectRatio = function () {
        return this.aspectRatio;
    };
    /**
     * Sets the frame rate of the video.
     * @param {number} frameRate
     */
    VideoController.prototype.setFrameRate = function (frameRate) {
        if (this.frameRate !== frameRate) {
            var oldFrameRate = this.frameRate;
            this.frameRate = frameRate;
            this.propertyChangeSupport.firePropertyChange(/* name */ "QUALITY", oldFrameRate, frameRate);
            this.home.getEnvironment().setVideoFrameRate(this.frameRate);
        }
    };
    /**
     * Returns the frame rate of the video.
     * @return {number}
     */
    VideoController.prototype.getFrameRate = function () {
        return this.frameRate;
    };
    VideoController.prototype.setWidth = function (width, updateHeight) {
        if (updateHeight === void 0) { updateHeight = true; }
        if (this.width !== width) {
            var oldWidth = this.width;
            this.width = width;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WIDTH", oldWidth, width);
            if (updateHeight) {
                this.setHeight(Math.round(width / { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio]), false);
            }
            this.home.getEnvironment().setVideoWidth(this.width);
        }
    };
    /**
     * Returns the width of the video.
     * @return {number}
     */
    VideoController.prototype.getWidth = function () {
        return this.width;
    };
    VideoController.prototype.setHeight = function (height, updateWidth) {
        if (updateWidth === void 0) { updateWidth = true; }
        if (this.height !== height) {
            var oldHeight = this.height;
            this.height = height;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
            if (updateWidth) {
                this.setWidth(Math.round(height * { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio]), false);
            }
        }
    };
    /**
     * Returns the height of the video.
     * @return {number}
     */
    VideoController.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the rendering quality of the video.
     * @param {number} quality
     */
    VideoController.prototype.setQuality = function (quality) {
        if (this.quality !== quality) {
            var oldQuality = this.quality;
            this.quality = Math.min(quality, this.getQualityLevelCount() - 1);
            this.propertyChangeSupport.firePropertyChange(/* name */ "QUALITY", oldQuality, quality);
            this.home.getEnvironment().setVideoQuality(this.quality);
        }
    };
    /**
     * Returns the rendering quality of the video.
     * @return {number}
     */
    VideoController.prototype.getQuality = function () {
        return this.quality;
    };
    /**
     * Sets the preferred speed of movements in the video in m/s.
     * @param {number} speed
     */
    VideoController.prototype.setSpeed = function (speed) {
        if (this.speed !== speed) {
            var oldSpeed = this.speed;
            this.speed = speed;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SPEED", oldSpeed, speed);
            this.home.getEnvironment().setVideoSpeed(this.speed);
        }
    };
    /**
     * Returns the preferred speed of movements in the video in m/s.
     * @return {number}
     */
    VideoController.prototype.getSpeed = function () {
        return this.speed;
    };
    /**
     * Returns the maximum value for quality.
     * @return {number}
     */
    VideoController.prototype.getQualityLevelCount = function () {
        return 4;
    };
    /**
     * Returns the camera path of the video.
     * @return {Camera[]}
     */
    VideoController.prototype.getCameraPath = function () {
        return this.cameraPath;
    };
    /**
     * Sets the camera locations of the video.
     * @param {Camera[]} cameraPath
     */
    VideoController.prototype.setCameraPath = function (cameraPath) {
        if (this.cameraPath !== cameraPath) {
            var oldCameraPath = this.cameraPath;
            this.cameraPath = cameraPath;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CAMERA_PATH", oldCameraPath, cameraPath);
            this.home.getEnvironment().setVideoCameraPath(this.cameraPath);
        }
    };
    /**
     * Sets the edited time in UTC time zone.
     * @param {number} time
     */
    VideoController.prototype.setTime = function (time) {
        if (this.time !== time) {
            var oldTime = this.time;
            this.time = time;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TIME", oldTime, time);
            this.home.getCamera().setTime(time);
        }
    };
    /**
     * Returns the edited time in UTC time zone.
     * @return {number}
     */
    VideoController.prototype.getTime = function () {
        return this.time;
    };
    /**
     * Sets the edited ceiling light color.
     * @param {number} ceilingLightColor
     */
    VideoController.prototype.setCeilingLightColor = function (ceilingLightColor) {
        if (this.ceilingLightColor !== ceilingLightColor) {
            var oldCeilingLightColor = this.ceilingLightColor;
            this.ceilingLightColor = ceilingLightColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CEILING_LIGHT_COLOR", oldCeilingLightColor, ceilingLightColor);
            this.home.getEnvironment().setCeillingLightColor(ceilingLightColor);
        }
    };
    /**
     * Returns the edited ceiling light color.
     * @return {number}
     */
    VideoController.prototype.getCeilingLightColor = function () {
        return this.ceilingLightColor;
    };
    /**
     * Controls the change of value of a visual property in home.
     * @deprecated {@link #setVisualProperty(String, Object) setVisualProperty} should be replaced by a call to
     * {@link #setHomeProperty(String, String) setHomeProperty} to ensure the property can be easily saved and read.
     * @param {string} propertyName
     * @param {Object} propertyValue
     */
    VideoController.prototype.setVisualProperty = function (propertyName, propertyValue) {
        this.home.setVisualProperty(propertyName, propertyValue);
    };
    /**
     * Controls the change of value of a property in home.
     * @param {string} propertyName
     * @param {string} propertyValue
     */
    VideoController.prototype.setHomeProperty = function (propertyName, propertyValue) {
        this.home.setProperty(propertyName, propertyValue);
    };
    return VideoController;
}());
VideoController["__class"] = "com.eteks.sweethome3d.viewcontroller.VideoController";
VideoController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (VideoController) {
    /**
     * Home environment listener that updates properties. This listener is bound to this controller
     * with a weak reference to avoid strong link between home and this controller.
     * @param {VideoController} videoController
     * @class
     */
    var HomeEnvironmentChangeListener = /** @class */ (function () {
        function HomeEnvironmentChangeListener(videoController) {
            if (this.videoController === undefined) {
                this.videoController = null;
            }
            this.videoController = (videoController);
        }
        HomeEnvironmentChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.videoController;
            if (controller == null) {
                ev.getSource().removePropertyChangeListener("CEILING_LIGHT_COLOR", this);
            }
            else {
                controller.updateProperties();
            }
        };
        return HomeEnvironmentChangeListener;
    }());
    VideoController.HomeEnvironmentChangeListener = HomeEnvironmentChangeListener;
    HomeEnvironmentChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.VideoController.HomeEnvironmentChangeListener";
})(VideoController || (VideoController = {}));
var ContentManager;
(function (ContentManager) {
    var ContentType;
    (function (ContentType) {
        ContentType[ContentType["SWEET_HOME_3D"] = 0] = "SWEET_HOME_3D";
        ContentType[ContentType["MODEL"] = 1] = "MODEL";
        ContentType[ContentType["IMAGE"] = 2] = "IMAGE";
        ContentType[ContentType["CSV"] = 3] = "CSV";
        ContentType[ContentType["SVG"] = 4] = "SVG";
        ContentType[ContentType["OBJ"] = 5] = "OBJ";
        ContentType[ContentType["PNG"] = 6] = "PNG";
        ContentType[ContentType["JPEG"] = 7] = "JPEG";
        ContentType[ContentType["MOV"] = 8] = "MOV";
        ContentType[ContentType["PDF"] = 9] = "PDF";
        ContentType[ContentType["LANGUAGE_LIBRARY"] = 10] = "LANGUAGE_LIBRARY";
        ContentType[ContentType["TEXTURES_LIBRARY"] = 11] = "TEXTURES_LIBRARY";
        ContentType[ContentType["FURNITURE_LIBRARY"] = 12] = "FURNITURE_LIBRARY";
        ContentType[ContentType["PLUGIN"] = 13] = "PLUGIN";
        ContentType[ContentType["PHOTOS_DIRECTORY"] = 14] = "PHOTOS_DIRECTORY";
        ContentType[ContentType["USER_DEFINED"] = 15] = "USER_DEFINED";
    })(ContentType = ContentManager.ContentType || (ContentManager.ContentType = {}));
})(ContentManager || (ContentManager = {}));
/**
 * The base class for controllers of photo creation views.
 * @author Emmanuel Puybaret
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} view3D
 * @param {Object} contentManager
 * @class
 * @ignore
 */
var AbstractPhotoController = /** @class */ (function () {
    function AbstractPhotoController(home, preferences, view3D, contentManager) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.view3D === undefined) {
            this.view3D = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.aspectRatio === undefined) {
            this.aspectRatio = null;
        }
        if (this.width === undefined) {
            this.width = 0;
        }
        if (this.height === undefined) {
            this.height = 0;
        }
        if (this.quality === undefined) {
            this.quality = 0;
        }
        if (this.view3DAspectRatio === undefined) {
            this.view3DAspectRatio = 0;
        }
        if (this.ceilingLightColor === undefined) {
            this.ceilingLightColor = 0;
        }
        this.home = home;
        this.view3D = view3D;
        this.contentManager = contentManager;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.view3DAspectRatio = 1;
        var listener = new AbstractPhotoController.EnvironmentChangeListener(this);
        home.getEnvironment().addPropertyChangeListener("PHOTO_WIDTH", listener);
        home.getEnvironment().addPropertyChangeListener("PHOTO_HEIGHT", listener);
        home.getEnvironment().addPropertyChangeListener("PHOTO_ASPECT_RATIO", listener);
        home.getEnvironment().addPropertyChangeListener("PHOTO_QUALITY", listener);
        home.getEnvironment().addPropertyChangeListener("CEILING_LIGHT_COLOR", listener);
        this.updateProperties();
    }
    /**
     * Returns the content manager of this controller.
     * @return {Object}
     */
    AbstractPhotoController.prototype.getContentManager = function () {
        return this.contentManager;
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    AbstractPhotoController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    AbstractPhotoController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from the photo creation preferences.
     */
    AbstractPhotoController.prototype.updateProperties = function () {
        var homeEnvironment = this.home.getEnvironment();
        this.setAspectRatio(homeEnvironment.getPhotoAspectRatio());
        this.setWidth(homeEnvironment.getPhotoWidth(), false);
        this.setHeight(homeEnvironment.getPhotoHeight(), false);
        this.setQuality(homeEnvironment.getPhotoQuality());
        this.setCeilingLightColor(homeEnvironment.getCeillingLightColor());
    };
    /**
     * Sets the aspect ratio of the photo.
     * @param {AspectRatio} aspectRatio
     */
    AbstractPhotoController.prototype.setAspectRatio = function (aspectRatio) {
        if (this.aspectRatio !== aspectRatio) {
            var oldAspectRatio = this.aspectRatio;
            this.aspectRatio = aspectRatio;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ASPECT_RATIO", oldAspectRatio, aspectRatio);
            this.home.getEnvironment().setPhotoAspectRatio(this.aspectRatio);
            if (this.aspectRatio === AspectRatio.VIEW_3D_RATIO) {
                if (this.view3DAspectRatio !== Infinity) {
                    this.setHeight(Math.round(this.width / this.view3DAspectRatio), false);
                }
            }
            else if ({ FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio] != null) {
                this.setHeight(Math.round(this.width / { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio]), false);
            }
        }
    };
    /**
     * Returns the aspect ratio of the photo.
     * @return {AspectRatio}
     */
    AbstractPhotoController.prototype.getAspectRatio = function () {
        return this.aspectRatio;
    };
    AbstractPhotoController.prototype.setWidth = function (width, updateHeight) {
        if (updateHeight === void 0) { updateHeight = true; }
        if (this.width !== width) {
            var oldWidth = this.width;
            this.width = width;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WIDTH", oldWidth, width);
            if (updateHeight) {
                if (this.aspectRatio === AspectRatio.VIEW_3D_RATIO) {
                    if (this.view3DAspectRatio !== Infinity) {
                        this.setHeight(Math.round(width / this.view3DAspectRatio), false);
                    }
                }
                else if ({ FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio] != null) {
                    this.setHeight(Math.round(width / { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio]), false);
                }
            }
            this.home.getEnvironment().setPhotoWidth(this.width);
        }
    };
    /**
     * Returns the width of the photo.
     * @return {number}
     */
    AbstractPhotoController.prototype.getWidth = function () {
        return this.width;
    };
    AbstractPhotoController.prototype.setHeight = function (height, updateWidth) {
        if (updateWidth === void 0) { updateWidth = true; }
        if (this.height !== height) {
            var oldHeight = this.height;
            this.height = height;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
            if (updateWidth) {
                if (this.aspectRatio === AspectRatio.VIEW_3D_RATIO) {
                    if (this.view3DAspectRatio !== Infinity) {
                        this.setWidth(Math.round(height * this.view3DAspectRatio), false);
                    }
                }
                else if ({ FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio] != null) {
                    this.setWidth(Math.round(height * { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.aspectRatio]), false);
                }
            }
            this.home.getEnvironment().setPhotoHeight(this.height);
        }
    };
    /**
     * Returns the height of the photo.
     * @return {number}
     */
    AbstractPhotoController.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the rendering quality of the photo.
     * @param {number} quality
     */
    AbstractPhotoController.prototype.setQuality = function (quality) {
        if (this.quality !== quality) {
            var oldQuality = this.quality;
            this.quality = Math.min(quality, this.getQualityLevelCount() - 1);
            this.propertyChangeSupport.firePropertyChange(/* name */ "QUALITY", oldQuality, quality);
            this.home.getEnvironment().setPhotoQuality(this.quality);
        }
    };
    /**
     * Returns the rendering quality of the photo.
     * @return {number}
     */
    AbstractPhotoController.prototype.getQuality = function () {
        return this.quality;
    };
    /**
     * Returns the maximum value for quality.
     * @return {number}
     */
    AbstractPhotoController.prototype.getQualityLevelCount = function () {
        return 4;
    };
    /**
     * Sets the edited ceiling light color.
     * @param {number} ceilingLightColor
     */
    AbstractPhotoController.prototype.setCeilingLightColor = function (ceilingLightColor) {
        if (this.ceilingLightColor !== ceilingLightColor) {
            var oldCeilingLightColor = this.ceilingLightColor;
            this.ceilingLightColor = ceilingLightColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CEILING_LIGHT_COLOR", oldCeilingLightColor, ceilingLightColor);
            this.home.getEnvironment().setCeillingLightColor(ceilingLightColor);
        }
    };
    /**
     * Returns the edited ceiling light color.
     * @return {number}
     */
    AbstractPhotoController.prototype.getCeilingLightColor = function () {
        return this.ceilingLightColor;
    };
    /**
     * Sets the aspect ratio of the 3D view.
     * @param {number} view3DAspectRatio
     */
    AbstractPhotoController.prototype.set3DViewAspectRatio = function (view3DAspectRatio) {
        if (this.view3DAspectRatio !== view3DAspectRatio) {
            var oldAspectRatio = this.view3DAspectRatio;
            this.view3DAspectRatio = view3DAspectRatio;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ASPECT_RATIO", oldAspectRatio, view3DAspectRatio);
            if (this.aspectRatio === AspectRatio.VIEW_3D_RATIO && this.view3DAspectRatio !== Infinity) {
                this.setHeight(Math.round(this.width / this.view3DAspectRatio), false);
            }
        }
    };
    /**
     * Returns the aspect ratio of the 3D view.
     * @return {number}
     */
    AbstractPhotoController.prototype.get3DViewAspectRatio = function () {
        return this.view3DAspectRatio;
    };
    /**
     * Returns the 3D view used to compute aspect ratio bound to it.
     * @return {Object}
     */
    AbstractPhotoController.prototype.get3DView = function () {
        return this.view3D;
    };
    /**
     * Controls the change of value of a visual property in home.
     * @deprecated {@link #setVisualProperty(String, Object) setVisualProperty} should be replaced by a call to
     * {@link #setHomeProperty(String, String)} to ensure the property can be easily saved and read.
     * @param {string} propertyName
     * @param {Object} propertyValue
     */
    AbstractPhotoController.prototype.setVisualProperty = function (propertyName, propertyValue) {
        this.home.setVisualProperty(propertyName, propertyValue);
    };
    /**
     * Controls the change of value of a property in home.
     * @param {string} propertyName
     * @param {string} propertyValue
     */
    AbstractPhotoController.prototype.setHomeProperty = function (propertyName, propertyValue) {
        this.home.setProperty(propertyName, propertyValue);
    };
    return AbstractPhotoController;
}());
AbstractPhotoController["__class"] = "com.eteks.sweethome3d.viewcontroller.AbstractPhotoController";
AbstractPhotoController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (AbstractPhotoController) {
    /**
     * Home environment listener that updates ceiling light color. This listener is bound to this controller
     * with a weak reference to avoid strong link between home and this controller.
     * @param {AbstractPhotoController} photoController
     * @class
     */
    var EnvironmentChangeListener = /** @class */ (function () {
        function EnvironmentChangeListener(photoController) {
            if (this.photoController === undefined) {
                this.photoController = null;
            }
            this.photoController = (photoController);
        }
        EnvironmentChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.photoController;
            if (controller == null) {
                ev.getSource().removePropertyChangeListener("PHOTO_WIDTH", this);
                ev.getSource().removePropertyChangeListener("PHOTO_HEIGHT", this);
                ev.getSource().removePropertyChangeListener("PHOTO_ASPECT_RATIO", this);
                ev.getSource().removePropertyChangeListener("PHOTO_QUALITY", this);
                ev.getSource().removePropertyChangeListener("CEILING_LIGHT_COLOR", this);
            }
            else if ( /* name */"PHOTO_WIDTH" === ev.getPropertyName()) {
                controller.setWidth(ev.getNewValue(), false);
            }
            else if ( /* name */"PHOTO_HEIGHT" === ev.getPropertyName()) {
                controller.setHeight(ev.getNewValue(), false);
            }
            else if ( /* name */"PHOTO_ASPECT_RATIO" === ev.getPropertyName()) {
                controller.setAspectRatio(ev.getNewValue());
            }
            else if ( /* name */"PHOTO_QUALITY" === ev.getPropertyName()) {
                controller.setQuality(ev.getNewValue());
            }
            else if ( /* name */"CEILING_LIGHT_COLOR" === ev.getPropertyName()) {
                controller.setCeilingLightColor(ev.getNewValue());
            }
        };
        return EnvironmentChangeListener;
    }());
    AbstractPhotoController.EnvironmentChangeListener = EnvironmentChangeListener;
    EnvironmentChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.AbstractPhotoController.EnvironmentChangeListener";
})(AbstractPhotoController || (AbstractPhotoController = {}));
var PlanView;
(function (PlanView) {
    /**
     * The cursor types available in plan view.
     * @enum
     * @property {PlanView.CursorType} SELECTION
     * @property {PlanView.CursorType} PANNING
     * @property {PlanView.CursorType} DRAW
     * @property {PlanView.CursorType} ROTATION
     * @property {PlanView.CursorType} ELEVATION
     * @property {PlanView.CursorType} HEIGHT
     * @property {PlanView.CursorType} POWER
     * @property {PlanView.CursorType} RESIZE
     * @property {PlanView.CursorType} DUPLICATION
     * @property {PlanView.CursorType} MOVE
     * @class
     */
    var CursorType;
    (function (CursorType) {
        CursorType[CursorType["SELECTION"] = 0] = "SELECTION";
        CursorType[CursorType["PANNING"] = 1] = "PANNING";
        CursorType[CursorType["DRAW"] = 2] = "DRAW";
        CursorType[CursorType["ROTATION"] = 3] = "ROTATION";
        CursorType[CursorType["ELEVATION"] = 4] = "ELEVATION";
        CursorType[CursorType["HEIGHT"] = 5] = "HEIGHT";
        CursorType[CursorType["POWER"] = 6] = "POWER";
        CursorType[CursorType["RESIZE"] = 7] = "RESIZE";
        CursorType[CursorType["DUPLICATION"] = 8] = "DUPLICATION";
        CursorType[CursorType["MOVE"] = 9] = "MOVE";
    })(CursorType = PlanView.CursorType || (PlanView.CursorType = {}));
})(PlanView || (PlanView = {}));
/**
 * A MVC controller for model materials choice.
 * @author Emmanuel Puybaret
 * @param {string} title
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 */
var ModelMaterialsController = /** @class */ (function () {
    function ModelMaterialsController(title, preferences, viewFactory, contentManager) {
        if (this.title === undefined) {
            this.title = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.materialsChoiceView === undefined) {
            this.materialsChoiceView = null;
        }
        if (this.textureController === undefined) {
            this.textureController = null;
        }
        if (this.model === undefined) {
            this.model = null;
        }
        if (this.modelCreator === undefined) {
            this.modelCreator = null;
        }
        if (this.modelWidth === undefined) {
            this.modelWidth = 0;
        }
        if (this.modelDepth === undefined) {
            this.modelDepth = 0;
        }
        if (this.modelHeight === undefined) {
            this.modelHeight = 0;
        }
        if (this.modelRotation === undefined) {
            this.modelRotation = null;
        }
        if (this.modelTransformations === undefined) {
            this.modelTransformations = null;
        }
        if (this.backFaceShown === undefined) {
            this.backFaceShown = false;
        }
        if (this.materials === undefined) {
            this.materials = null;
        }
        this.title = title;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    ModelMaterialsController.prototype.getView = function () {
        if (this.materialsChoiceView == null) {
            this.materialsChoiceView = this.viewFactory.createModelMaterialsView(this.preferences, this);
        }
        return this.materialsChoiceView;
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    ModelMaterialsController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    ModelMaterialsController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Sets the 3D model which materials are displayed by the view
     * and fires a <code>PropertyChangeEvent</code>.
     * @param {Object} model
     */
    ModelMaterialsController.prototype.setModel = function (model) {
        if (this.model !== model) {
            var oldModel = this.model;
            this.model = model;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODEL", oldModel, model);
        }
    };
    /**
     * Returns the 3D model which materials are displayed by the view.
     * @return {Object}
     */
    ModelMaterialsController.prototype.getModel = function () {
        return this.model;
    };
    /**
     * Sets the creator of the 3D model displayed by the view.
     * @param {string} modelCreator
     */
    ModelMaterialsController.prototype.setModelCreator = function (modelCreator) {
        this.modelCreator = modelCreator;
    };
    /**
     * Returns the creator of the 3D model displayed by the view.
     * @return {string}
     */
    ModelMaterialsController.prototype.getModelCreator = function () {
        return this.modelCreator;
    };
    /**
     * Sets the rotation of the 3D model used to preview materials change.
     * @param {float[][]} modelRotation
     * @private
     */
    ModelMaterialsController.prototype.setModelRotation = function (modelRotation) {
        this.modelRotation = modelRotation;
    };
    /**
     * Returns the rotation of the 3D model used to preview materials change.
     * @return {float[][]}
     */
    ModelMaterialsController.prototype.getModelRotation = function () {
        return this.modelRotation;
    };
    /**
     * Sets the transformations of the 3D model used to preview materials change.
     * @param {com.eteks.sweethome3d.model.Transformation[]} modelTransformations
     * @private
     */
    ModelMaterialsController.prototype.setModelTransformations = function (modelTransformations) {
        this.modelTransformations = modelTransformations;
    };
    /**
     * Returns the transformations of the 3D model used to preview materials change.
     * @return {com.eteks.sweethome3d.model.Transformation[]}
     */
    ModelMaterialsController.prototype.getModelTransformations = function () {
        return this.modelTransformations;
    };
    /**
     * Sets the size of the 3D model used to preview materials change.
     * @param {number} width
     * @param {number} depth
     * @param {number} height
     * @private
     */
    ModelMaterialsController.prototype.setModelSize = function (width, depth, height) {
        this.modelWidth = width;
        this.modelDepth = depth;
        this.modelHeight = height;
    };
    /**
     * Returns the width of the 3D model used to preview materials change.
     * @return {number}
     */
    ModelMaterialsController.prototype.getModelWidth = function () {
        return this.modelWidth;
    };
    /**
     * Returns the depth of the 3D model used to preview materials change.
     * @return {number}
     */
    ModelMaterialsController.prototype.getModelDepth = function () {
        return this.modelDepth;
    };
    /**
     * Returns the height of the 3D model used to preview materials change.
     * @return {number}
     */
    ModelMaterialsController.prototype.getModelHeight = function () {
        return this.modelHeight;
    };
    /**
     * Sets whether the 3D model used to preview materials change should show back face.
     * @param {boolean} backFaceShown
     * @private
     */
    ModelMaterialsController.prototype.setBackFaceShown = function (backFaceShown) {
        this.backFaceShown = backFaceShown;
    };
    /**
     * Returns <code>true</code> if the 3D model used to preview materials change should show back face.
     * @return {boolean}
     */
    ModelMaterialsController.prototype.isBackFaceShown = function () {
        return this.backFaceShown;
    };
    /**
     * Sets the materials displayed by view and fires a <code>PropertyChangeEvent</code>.
     * @param {com.eteks.sweethome3d.model.HomeMaterial[]} materials
     */
    ModelMaterialsController.prototype.setMaterials = function (materials) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(this.materials, materials)) {
            var oldMaterials = this.materials;
            this.materials = materials;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MATERIALS", oldMaterials, materials);
        }
    };
    /**
     * Returns the materials displayed by view.
     * @return {com.eteks.sweethome3d.model.HomeMaterial[]}
     */
    ModelMaterialsController.prototype.getMaterials = function () {
        return this.materials;
    };
    /**
     * Returns the text that should be displayed as materials choice dialog title.
     * @return {string}
     */
    ModelMaterialsController.prototype.getDialogTitle = function () {
        return this.title;
    };
    /**
     * Returns the texture controller of the model materials.
     * @return {TextureChoiceController}
     */
    ModelMaterialsController.prototype.getTextureController = function () {
        if (this.textureController == null) {
            this.textureController = new TextureChoiceController(this.preferences.getLocalizedString(ModelMaterialsController, "textureTitle"), this.preferences, this.viewFactory, this.contentManager);
        }
        return this.textureController;
    };
    return ModelMaterialsController;
}());
ModelMaterialsController["__class"] = "com.eteks.sweethome3d.viewcontroller.ModelMaterialsController";
ModelMaterialsController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
/**
 * Creates the controller of 3D view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @class
 * @author Emmanuel Puybaret
 */
var ObserverCameraController = /** @class */ (function () {
    function ObserverCameraController(home, preferences, viewFactory) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.observerCameraView === undefined) {
            this.observerCameraView = null;
        }
        if (this.x === undefined) {
            this.x = 0;
        }
        if (this.y === undefined) {
            this.y = 0;
        }
        if (this.elevation === undefined) {
            this.elevation = 0;
        }
        if (this.minimumElevation === undefined) {
            this.minimumElevation = 0;
        }
        if (this.yawInDegrees === undefined) {
            this.yawInDegrees = 0;
        }
        if (this.yaw === undefined) {
            this.yaw = 0;
        }
        if (this.pitchInDegrees === undefined) {
            this.pitchInDegrees = 0;
        }
        if (this.pitch === undefined) {
            this.pitch = 0;
        }
        if (this.fieldOfViewInDegrees === undefined) {
            this.fieldOfViewInDegrees = 0;
        }
        if (this.fieldOfView === undefined) {
            this.fieldOfView = 0;
        }
        if (this.elevationAdjusted === undefined) {
            this.elevationAdjusted = false;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    ObserverCameraController.prototype.getView = function () {
        if (this.observerCameraView == null) {
            this.observerCameraView = this.viewFactory.createObserverCameraView(this.preferences, this);
        }
        return this.observerCameraView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    ObserverCameraController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    ObserverCameraController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    ObserverCameraController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from the 3D attributes of the home edited by this controller.
     */
    ObserverCameraController.prototype.updateProperties = function () {
        var observerCamera = this.home.getObserverCamera();
        this.setX(observerCamera.getX());
        this.setY(observerCamera.getY());
        var levels = this.home.getLevels();
        this.setMinimumElevation(/* size */ levels.length === 0 ? 10 : 10 + /* get */ levels[0].getElevation());
        this.setElevation(observerCamera.getZ());
        this.setYaw(observerCamera.getYaw());
        this.setPitch(observerCamera.getPitch());
        this.setFieldOfView(observerCamera.getFieldOfView());
        var homeEnvironment = this.home.getEnvironment();
        this.setElevationAdjusted(homeEnvironment.isObserverCameraElevationAdjusted());
    };
    /**
     * Sets the edited abscissa.
     * @param {number} x
     */
    ObserverCameraController.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.propertyChangeSupport.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the edited abscissa.
     * @return {number}
     */
    ObserverCameraController.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the edited ordinate.
     * @param {number} y
     */
    ObserverCameraController.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.propertyChangeSupport.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the edited ordinate.
     * @return {number}
     */
    ObserverCameraController.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the edited camera elevation.
     * @param {number} elevation
     */
    ObserverCameraController.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldObserverCameraElevation = this.elevation;
            this.elevation = elevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION", oldObserverCameraElevation, elevation);
        }
    };
    /**
     * Returns the edited camera elevation.
     * @return {number}
     */
    ObserverCameraController.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Sets the minimum elevation.
     * @param {number} minimumElevation
     * @private
     */
    ObserverCameraController.prototype.setMinimumElevation = function (minimumElevation) {
        if (minimumElevation !== this.minimumElevation) {
            var oldMinimumElevation = this.minimumElevation;
            this.minimumElevation = minimumElevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MINIMUM_ELEVATION", oldMinimumElevation, minimumElevation);
        }
    };
    /**
     * Returns the minimum elevation.
     * @return {number}
     */
    ObserverCameraController.prototype.getMinimumElevation = function () {
        return this.minimumElevation;
    };
    /**
     * Returns <code>true</code> if the observer elevation should be adjusted according
     * to the elevation of the selected level.
     * @return {boolean}
     */
    ObserverCameraController.prototype.isElevationAdjusted = function () {
        return this.elevationAdjusted;
    };
    /**
     * Sets whether the observer elevation should be adjusted according
     * to the elevation of the selected level.
     * @param {boolean} observerCameraElevationAdjusted
     */
    ObserverCameraController.prototype.setElevationAdjusted = function (observerCameraElevationAdjusted) {
        if (this.elevationAdjusted !== observerCameraElevationAdjusted) {
            this.elevationAdjusted = observerCameraElevationAdjusted;
            this.propertyChangeSupport.firePropertyChange(/* name */ "OBSERVER_CAMERA_ELEVATION_ADJUSTED", !observerCameraElevationAdjusted, observerCameraElevationAdjusted);
            var selectedLevel = this.home.getSelectedLevel();
            if (selectedLevel != null) {
                if (observerCameraElevationAdjusted) {
                    this.setElevation(this.getElevation() - selectedLevel.getElevation());
                }
                else {
                    this.setElevation(this.getElevation() + selectedLevel.getElevation());
                }
            }
        }
    };
    /**
     * Returns <code>true</code> if the adjustment of the observer camera according to the current level is modifiable.
     * @return {boolean}
     */
    ObserverCameraController.prototype.isObserverCameraElevationAdjustedEditable = function () {
        return /* size */ this.home.getLevels().length > 1;
    };
    ObserverCameraController.prototype.setYawInDegrees = function (yawInDegrees, updateYaw) {
        if (updateYaw === void 0) { updateYaw = true; }
        if (yawInDegrees !== this.yawInDegrees) {
            var oldYawInDegrees = this.yawInDegrees;
            this.yawInDegrees = yawInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "YAW_IN_DEGREES", oldYawInDegrees, yawInDegrees);
            if (updateYaw) {
                this.setYaw((function (x) { return x * Math.PI / 180; })(yawInDegrees), false);
            }
        }
    };
    /**
     * Returns the edited yaw in degrees.
     * @return {number}
     */
    ObserverCameraController.prototype.getYawInDegrees = function () {
        return this.yawInDegrees;
    };
    ObserverCameraController.prototype.setYaw = function (yaw, updateYawInDegrees) {
        if (updateYawInDegrees === void 0) { updateYawInDegrees = true; }
        if (yaw !== this.yaw) {
            var oldYaw = this.yaw;
            this.yaw = yaw;
            this.propertyChangeSupport.firePropertyChange(/* name */ "YAW", oldYaw, yaw);
            if (updateYawInDegrees) {
                this.setYawInDegrees((Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(yaw)) | 0), false);
            }
        }
    };
    /**
     * Returns the edited yaw in radians.
     * @return {number}
     */
    ObserverCameraController.prototype.getYaw = function () {
        return this.yaw;
    };
    ObserverCameraController.prototype.setPitchInDegrees = function (pitchInDegrees, updatePitch) {
        if (updatePitch === void 0) { updatePitch = true; }
        if (pitchInDegrees !== this.pitchInDegrees) {
            var oldPitchInDegrees = this.pitchInDegrees;
            this.pitchInDegrees = pitchInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PITCH_IN_DEGREES", oldPitchInDegrees, pitchInDegrees);
            if (updatePitch) {
                this.setPitch((function (x) { return x * Math.PI / 180; })(pitchInDegrees), false);
            }
        }
    };
    /**
     * Returns the edited pitch in degrees.
     * @return {number}
     */
    ObserverCameraController.prototype.getPitchInDegrees = function () {
        return this.pitchInDegrees;
    };
    ObserverCameraController.prototype.setPitch = function (pitch, updatePitchInDegrees) {
        if (updatePitchInDegrees === void 0) { updatePitchInDegrees = true; }
        if (pitch !== this.pitch) {
            var oldPitch = this.pitch;
            this.pitch = pitch;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PITCH", oldPitch, pitch);
            if (updatePitchInDegrees) {
                this.setPitchInDegrees(((Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(pitch))) | 0), false);
            }
        }
    };
    /**
     * Returns the edited pitch in radians.
     * @return {number}
     */
    ObserverCameraController.prototype.getPitch = function () {
        return this.pitch;
    };
    ObserverCameraController.prototype.setFieldOfViewInDegrees = function (fieldOfViewInDegrees, updateFieldOfView) {
        if (updateFieldOfView === void 0) { updateFieldOfView = true; }
        if (fieldOfViewInDegrees !== this.fieldOfViewInDegrees) {
            var oldFieldOfViewInDegrees = this.fieldOfViewInDegrees;
            this.fieldOfViewInDegrees = fieldOfViewInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FIELD_OF_VIEW_IN_DEGREES", oldFieldOfViewInDegrees, fieldOfViewInDegrees);
            if (updateFieldOfView) {
                this.setFieldOfView((function (x) { return x * Math.PI / 180; })(fieldOfViewInDegrees), false);
            }
        }
    };
    /**
     * Returns the edited observer field of view in degrees.
     * @return {number}
     */
    ObserverCameraController.prototype.getFieldOfViewInDegrees = function () {
        return this.fieldOfViewInDegrees;
    };
    ObserverCameraController.prototype.setFieldOfView = function (fieldOfView, updateFieldOfViewInDegrees) {
        if (updateFieldOfViewInDegrees === void 0) { updateFieldOfViewInDegrees = true; }
        if (fieldOfView !== this.fieldOfView) {
            var oldFieldOfView = this.fieldOfView;
            this.fieldOfView = fieldOfView;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FIELD_OF_VIEW", oldFieldOfView, fieldOfView);
            if (updateFieldOfViewInDegrees) {
                this.setFieldOfViewInDegrees(((Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(fieldOfView))) | 0), false);
            }
        }
    };
    /**
     * Returns the edited observer field of view in radians.
     * @return {number}
     */
    ObserverCameraController.prototype.getFieldOfView = function () {
        return this.fieldOfView;
    };
    /**
     * Controls the modification of the observer camera of the edited home.
     */
    ObserverCameraController.prototype.modifyObserverCamera = function () {
        var x = this.getX();
        var y = this.getY();
        var z = this.getElevation();
        var observerCameraElevationAdjusted = this.isElevationAdjusted();
        var selectedLevel = this.home.getSelectedLevel();
        if (observerCameraElevationAdjusted && selectedLevel != null) {
            z += selectedLevel.getElevation();
            var levels = this.home.getLevels();
            z = Math.max(z, /* size */ levels.length === 0 ? 10 : 10 + /* get */ levels[0].getElevation());
        }
        var yaw = this.getYaw();
        var pitch = this.getPitch();
        var fieldOfView = this.getFieldOfView();
        var observerCamera = this.home.getObserverCamera();
        observerCamera.setX(x);
        observerCamera.setY(y);
        observerCamera.setZ(z);
        observerCamera.setYaw(yaw);
        observerCamera.setPitch(pitch);
        observerCamera.setFieldOfView(fieldOfView);
        var homeEnvironment = this.home.getEnvironment();
        homeEnvironment.setObserverCameraElevationAdjusted(observerCameraElevationAdjusted);
    };
    return ObserverCameraController;
}());
ObserverCameraController["__class"] = "com.eteks.sweethome3d.viewcontroller.ObserverCameraController";
ObserverCameraController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
/**
 * Creates a controller of the furniture catalog view.
 * @param {FurnitureCatalog} catalog the furniture catalog of the application
 * @param {UserPreferences} preferences application user preferences
 * @param {Object} viewFactory a factory able to create the furniture view managed by this controller
 * @param {Object} contentManager content manager for furniture import
 * @class
 * @author Emmanuel Puybaret
 */
var FurnitureCatalogController = /** @class */ (function () {
    function FurnitureCatalogController(catalog, preferences, viewFactory, contentManager) {
        if (((catalog != null && catalog instanceof FurnitureCatalog) || catalog === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null)) {
            var __args = arguments;
            if (this.catalog === undefined) {
                this.catalog = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.selectedFurniture === undefined) {
                this.selectedFurniture = null;
            }
            if (this.catalogView === undefined) {
                this.catalogView = null;
            }
            this.catalog = catalog;
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.contentManager = contentManager;
            this.selectionListeners = ([]);
            this.selectedFurniture = /* emptyList */ [];
            this.catalog.addFurnitureListener((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(new FurnitureCatalogController.FurnitureCatalogChangeListener(this)));
            if (preferences != null) {
                preferences.addPropertyChangeListener("FURNITURE_CATALOG_VIEWED_IN_TREE", new FurnitureCatalogController.FurnitureCatalogViewChangeListener(this));
            }
        }
        else if (((catalog != null && catalog instanceof FurnitureCatalog) || catalog === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && viewFactory === undefined && contentManager === undefined) {
            var __args = arguments;
            var viewFactory_2 = __args[1];
            {
                var __args_3 = arguments;
                var preferences_2 = null;
                var contentManager_2 = null;
                if (this.catalog === undefined) {
                    this.catalog = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.selectionListeners === undefined) {
                    this.selectionListeners = null;
                }
                if (this.selectedFurniture === undefined) {
                    this.selectedFurniture = null;
                }
                if (this.catalogView === undefined) {
                    this.catalogView = null;
                }
                this.catalog = catalog;
                this.preferences = preferences_2;
                this.viewFactory = viewFactory_2;
                this.contentManager = contentManager_2;
                this.selectionListeners = ([]);
                this.selectedFurniture = /* emptyList */ [];
                this.catalog.addFurnitureListener((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                    return funcInst;
                } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(new FurnitureCatalogController.FurnitureCatalogChangeListener(this)));
                if (preferences_2 != null) {
                    preferences_2.addPropertyChangeListener("FURNITURE_CATALOG_VIEWED_IN_TREE", new FurnitureCatalogController.FurnitureCatalogViewChangeListener(this));
                }
            }
            if (this.catalog === undefined) {
                this.catalog = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.selectedFurniture === undefined) {
                this.selectedFurniture = null;
            }
            if (this.catalogView === undefined) {
                this.catalogView = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    FurnitureCatalogController.prototype.getView = function () {
        if (this.catalogView == null) {
            this.catalogView = this.viewFactory.createFurnitureCatalogView(this.catalog, this.preferences, this);
        }
        return this.catalogView;
    };
    /**
     * Adds the selection <code>listener</code> in parameter to this controller.
     * @param {Object} listener
     */
    FurnitureCatalogController.prototype.addSelectionListener = function (listener) {
        /* add */ (this.selectionListeners.push(listener) > 0);
    };
    /**
     * Removes the selection <code>listener</code> in parameter from this controller.
     * @param {Object} listener
     */
    FurnitureCatalogController.prototype.removeSelectionListener = function (listener) {
        /* remove */ (function (a) { var index = a.indexOf(listener); if (index >= 0) {
            a.splice(index, 1);
            return true;
        }
        else {
            return false;
        } })(this.selectionListeners);
    };
    /**
     * Returns a list of the selected furniture in catalog.
     * @return {CatalogPieceOfFurniture[]}
     */
    FurnitureCatalogController.prototype.getSelectedFurniture = function () {
        return /* unmodifiableList */ this.selectedFurniture.slice(0);
    };
    /**
     * Updates the selected furniture in catalog and notifies listeners selection change.
     * @param {CatalogPieceOfFurniture[]} selectedFurniture
     */
    FurnitureCatalogController.prototype.setSelectedFurniture = function (selectedFurniture) {
        this.selectedFurniture = (selectedFurniture.slice(0));
        if (!(this.selectionListeners.length == 0)) {
            var selectionEvent = new SelectionEvent(this, this.getSelectedFurniture());
            var listeners = this.selectionListeners.slice(0);
            for (var index = 0; index < listeners.length; index++) {
                var listener = listeners[index];
                {
                    listener.selectionChanged(selectionEvent);
                }
            }
        }
    };
    /**
     * Removes <code>piece</code> from selected furniture.
     * @param {CatalogPieceOfFurniture} piece
     * @private
     */
    FurnitureCatalogController.prototype.deselectPieceOfFurniture = function (piece) {
        var pieceSelectionIndex = this.selectedFurniture.indexOf(piece);
        if (pieceSelectionIndex !== -1) {
            var selectedItems = (this.getSelectedFurniture().slice(0));
            /* remove */ selectedItems.splice(pieceSelectionIndex, 1)[0];
            this.setSelectedFurniture(selectedItems);
        }
    };
    /**
     * Displays the wizard that helps to change the selected piece of furniture.
     */
    FurnitureCatalogController.prototype.modifySelectedFurniture = function () {
        if (this.preferences != null) {
            if ( /* size */this.selectedFurniture.length > 0) {
                var piece = this.selectedFurniture[0];
                if (piece.isModifiable()) {
                    var addedFurnitureListener = new FurnitureCatalogController.AddedFurnitureSelector(this);
                    this.preferences.getFurnitureCatalog().addFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                        return funcInst;
                    } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
                    new ImportedFurnitureWizardController(piece, this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
                    addedFurnitureListener.selectAddedFurniture();
                    this.preferences.getFurnitureCatalog().removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                        return funcInst;
                    } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
                }
            }
        }
    };
    FurnitureCatalogController.prototype.importFurniture$ = function () {
        if (this.preferences != null) {
            var addedFurnitureListener = new FurnitureCatalogController.AddedFurnitureSelector(this);
            this.preferences.getFurnitureCatalog().addFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
            new ImportedFurnitureWizardController(this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
            addedFurnitureListener.selectAddedFurniture();
            this.preferences.getFurnitureCatalog().removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
        }
    };
    FurnitureCatalogController.prototype.importFurniture$java_lang_String = function (modelName) {
        if (this.preferences != null) {
            new ImportedFurnitureWizardController(modelName, this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
        }
    };
    /**
     * Displays the wizard that helps to import furniture to catalog.
     * @param {string} modelName
     * @private
     */
    FurnitureCatalogController.prototype.importFurniture = function (modelName) {
        if (((typeof modelName === 'string') || modelName === null)) {
            return this.importFurniture$java_lang_String(modelName);
        }
        else if (modelName === undefined) {
            return this.importFurniture$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Deletes selected catalog furniture.
     */
    FurnitureCatalogController.prototype.deleteSelection = function () {
        for (var index = 0; index < this.selectedFurniture.length; index++) {
            var piece = this.selectedFurniture[index];
            {
                if (piece.isModifiable()) {
                    this.catalog["delete"](piece);
                }
            }
        }
    };
    /**
     * Adds dropped files to catalog.
     * @param {string[]} importableModels
     */
    FurnitureCatalogController.prototype.dropFiles = function (importableModels) {
        var addedFurnitureListener = new FurnitureCatalogController.AddedFurnitureSelector(this);
        this.preferences.getFurnitureCatalog().addFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
        for (var index = 0; index < importableModels.length; index++) {
            var model = importableModels[index];
            {
                this.importFurniture$java_lang_String(model);
            }
        }
        addedFurnitureListener.selectAddedFurniture();
        this.preferences.getFurnitureCatalog().removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
    };
    return FurnitureCatalogController;
}());
FurnitureCatalogController["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureCatalogController";
FurnitureCatalogController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (FurnitureCatalogController) {
    /**
     * Furniture catalog listener that deselects a piece removed from catalog.
     * @param {FurnitureCatalogController} furnitureCatalogController
     * @class
     */
    var FurnitureCatalogChangeListener = /** @class */ (function () {
        function FurnitureCatalogChangeListener(furnitureCatalogController) {
            if (this.furnitureCatalogController === undefined) {
                this.furnitureCatalogController = null;
            }
            this.furnitureCatalogController = (furnitureCatalogController);
        }
        FurnitureCatalogChangeListener.prototype.collectionChanged = function (ev) {
            var controller = this.furnitureCatalogController;
            if (controller == null) {
                ev.getSource().removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                    return funcInst;
                } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this)));
            }
            else if (ev.getType() === CollectionEvent.Type.DELETE) {
                controller.deselectPieceOfFurniture(ev.getItem());
            }
        };
        return FurnitureCatalogChangeListener;
    }());
    FurnitureCatalogController.FurnitureCatalogChangeListener = FurnitureCatalogChangeListener;
    FurnitureCatalogChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureCatalogController.FurnitureCatalogChangeListener";
    FurnitureCatalogChangeListener["__interfaces"] = ["com.eteks.sweethome3d.model.CollectionListener"];
    /**
     * Preferences listener that reset view when furniture catalog view should change.
     * @param {FurnitureCatalogController} controller
     * @class
     */
    var FurnitureCatalogViewChangeListener = /** @class */ (function () {
        function FurnitureCatalogViewChangeListener(controller) {
            if (this.controller === undefined) {
                this.controller = null;
            }
            this.controller = (controller);
        }
        FurnitureCatalogViewChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.controller;
            if (controller == null) {
                (ev.getSource()).removePropertyChangeListener("FURNITURE_CATALOG_VIEWED_IN_TREE", this);
            }
            else {
                controller.catalogView = null;
            }
        };
        return FurnitureCatalogViewChangeListener;
    }());
    FurnitureCatalogController.FurnitureCatalogViewChangeListener = FurnitureCatalogViewChangeListener;
    FurnitureCatalogViewChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureCatalogController.FurnitureCatalogViewChangeListener";
    /**
     * Listener that keeps track of the furniture added to catalog.
     * @class
     */
    var AddedFurnitureSelector = /** @class */ (function () {
        function AddedFurnitureSelector(__parent) {
            this.__parent = __parent;
            this.addedFurniture = ([]);
        }
        AddedFurnitureSelector.prototype.collectionChanged = function (ev) {
            if (ev.getType() === CollectionEvent.Type.ADD) {
                /* add */ (this.addedFurniture.push(ev.getItem()) > 0);
            }
        };
        AddedFurnitureSelector.prototype.selectAddedFurniture = function () {
            if ( /* size */this.addedFurniture.length > 0) {
                this.__parent.setSelectedFurniture(this.addedFurniture);
            }
        };
        return AddedFurnitureSelector;
    }());
    FurnitureCatalogController.AddedFurnitureSelector = AddedFurnitureSelector;
    AddedFurnitureSelector["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureCatalogController.AddedFurnitureSelector";
    AddedFurnitureSelector["__interfaces"] = ["com.eteks.sweethome3d.model.CollectionListener"];
})(FurnitureCatalogController || (FurnitureCatalogController = {}));
var TransferableView;
(function (TransferableView) {
    /**
     * Data types.
     * @class
     */
    var DataType = /** @class */ (function () {
        function DataType(name) {
            if (this.__name === undefined) {
                this.__name = null;
            }
            this.__name = name;
        }
        DataType.PLAN_IMAGE_$LI$ = function () { if (DataType.PLAN_IMAGE == null) {
            DataType.PLAN_IMAGE = new TransferableView.DataType("PLAN_IMAGE");
        } return DataType.PLAN_IMAGE; };
        DataType.FURNITURE_LIST_$LI$ = function () { if (DataType.FURNITURE_LIST == null) {
            DataType.FURNITURE_LIST = new TransferableView.DataType("FURNITURE_LIST");
        } return DataType.FURNITURE_LIST; };
        DataType.prototype.name = function () {
            return this.__name;
        };
        /**
         *
         * @return {string}
         */
        DataType.prototype.toString = function () {
            return this.__name;
        };
        return DataType;
    }());
    TransferableView.DataType = DataType;
    DataType["__class"] = "com.eteks.sweethome3d.viewcontroller.TransferableView.DataType";
})(TransferableView || (TransferableView = {}));
/**
 * Creates the controller of room view with undo support.
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 * @author Emmanuel Puybaret
 */
var BaseboardChoiceController = /** @class */ (function () {
    function BaseboardChoiceController(preferences, viewFactory, contentManager) {
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.textureController === undefined) {
            this.textureController = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.view === undefined) {
            this.view = null;
        }
        if (this.visible === undefined) {
            this.visible = null;
        }
        if (this.thickness === undefined) {
            this.thickness = null;
        }
        if (this.height === undefined) {
            this.height = null;
        }
        if (this.maxHeight === undefined) {
            this.maxHeight = null;
        }
        if (this.color === undefined) {
            this.color = null;
        }
        if (this.paint === undefined) {
            this.paint = null;
        }
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
    }
    /**
     * Returns the texture controller of the baseboard.
     * @return {TextureChoiceController}
     */
    BaseboardChoiceController.prototype.getTextureController = function () {
        if (this.textureController == null) {
            this.textureController = new TextureChoiceController(this.preferences.getLocalizedString(BaseboardChoiceController, "baseboardTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.textureController.addPropertyChangeListener("TEXTURE", new BaseboardChoiceController.BaseboardChoiceController$0(this));
        }
        return this.textureController;
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    BaseboardChoiceController.prototype.getView = function () {
        if (this.view == null) {
            this.view = this.viewFactory.createBaseboardChoiceView(this.preferences, this);
        }
        return this.view;
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    BaseboardChoiceController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    BaseboardChoiceController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Returns <code>true</code> if the baseboard should be visible.
     * @return {boolean}
     */
    BaseboardChoiceController.prototype.getVisible = function () {
        return this.visible;
    };
    /**
     * Sets whether the baseboard should be visible.
     * @param {boolean} baseboardVisible
     */
    BaseboardChoiceController.prototype.setVisible = function (baseboardVisible) {
        if (baseboardVisible !== this.visible) {
            var oldVisible = this.visible;
            this.visible = baseboardVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "VISIBLE", oldVisible, baseboardVisible);
        }
    };
    /**
     * Sets the edited thickness of the baseboard.
     * @param {number} baseboardThickness
     */
    BaseboardChoiceController.prototype.setThickness = function (baseboardThickness) {
        if (baseboardThickness !== this.thickness) {
            var oldThickness = this.thickness;
            this.thickness = baseboardThickness;
            this.propertyChangeSupport.firePropertyChange(/* name */ "THICKNESS", oldThickness, baseboardThickness);
        }
    };
    /**
     * Returns the edited thickness of the baseboard.
     * @return {number}
     */
    BaseboardChoiceController.prototype.getThickness = function () {
        return this.thickness;
    };
    /**
     * Sets the edited height of the baseboard.
     * @param {number} baseboardHeight
     */
    BaseboardChoiceController.prototype.setHeight = function (baseboardHeight) {
        if (baseboardHeight !== this.height) {
            var oldHeight = this.height;
            this.height = baseboardHeight;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, baseboardHeight);
        }
    };
    /**
     * Returns the edited height of the baseboard.
     * @return {number}
     */
    BaseboardChoiceController.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the maximum height allowed for the edited baseboard.
     * @param {number} maxHeight
     */
    BaseboardChoiceController.prototype.setMaxHeight = function (maxHeight) {
        if (this.maxHeight == null || maxHeight !== this.maxHeight) {
            var oldMaxHeight = this.maxHeight;
            this.maxHeight = maxHeight;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MAX_HEIGHT", oldMaxHeight, maxHeight);
        }
    };
    /**
     * Returns the maximum height allowed for the edited baseboard.
     * @return {number}
     */
    BaseboardChoiceController.prototype.getMaxHeight = function () {
        return this.maxHeight;
    };
    /**
     * Sets the edited color of the baseboard.
     * @param {number} baseboardColor
     */
    BaseboardChoiceController.prototype.setColor = function (baseboardColor) {
        if (baseboardColor !== this.color) {
            var oldColor = this.color;
            this.color = baseboardColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "COLOR", oldColor, baseboardColor);
            this.setPaint(BaseboardChoiceController.BaseboardPaint.COLORED);
        }
    };
    /**
     * Returns the edited color of the baseboard.
     * @return {number}
     */
    BaseboardChoiceController.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets whether the baseboard is as its wall, colored, textured or unknown painted.
     * @param {BaseboardChoiceController.BaseboardPaint} baseboardPaint
     */
    BaseboardChoiceController.prototype.setPaint = function (baseboardPaint) {
        if (baseboardPaint !== this.paint) {
            var oldPaint = this.paint;
            this.paint = baseboardPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PAINT", oldPaint, baseboardPaint);
        }
    };
    /**
     * Returns whether the baseboard side is colored, textured or unknown painted.
     * @return {BaseboardChoiceController.BaseboardPaint} {@link BaseboardPaint#DEFAULT}, {@link BaseboardPaint#COLORED}, {@link BaseboardPaint#TEXTURED} or <code>null</code>
     */
    BaseboardChoiceController.prototype.getPaint = function () {
        return this.paint;
    };
    /**
     * Set controller properties from the given <code>baseboard</code>.
     * @param {Baseboard} baseboard
     */
    BaseboardChoiceController.prototype.setBaseboard = function (baseboard) {
        if (baseboard == null) {
            this.setVisible(false);
            this.setThickness(null);
            this.setHeight(null);
            this.setColor(null);
            this.getTextureController().setTexture(null);
            this.setPaint(null);
        }
        else {
            this.setVisible(true);
            this.setThickness(baseboard.getThickness());
            this.setHeight(baseboard.getHeight());
            if (baseboard.getTexture() != null) {
                this.setColor(null);
                this.getTextureController().setTexture(baseboard.getTexture());
                this.setPaint(BaseboardChoiceController.BaseboardPaint.TEXTURED);
            }
            else if (baseboard.getColor() != null) {
                this.getTextureController().setTexture(null);
                this.setColor(baseboard.getColor());
            }
            else {
                this.setColor(null);
                this.getTextureController().setTexture(null);
                this.setPaint(BaseboardChoiceController.BaseboardPaint.DEFAULT);
            }
        }
    };
    return BaseboardChoiceController;
}());
BaseboardChoiceController["__class"] = "com.eteks.sweethome3d.viewcontroller.BaseboardChoiceController";
BaseboardChoiceController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (BaseboardChoiceController) {
    /**
     * The possible values for {@linkplain #getPaint() paint type}.
     * @enum
     * @property {BaseboardChoiceController.BaseboardPaint} DEFAULT
     * @property {BaseboardChoiceController.BaseboardPaint} COLORED
     * @property {BaseboardChoiceController.BaseboardPaint} TEXTURED
     * @class
     */
    var BaseboardPaint;
    (function (BaseboardPaint) {
        BaseboardPaint[BaseboardPaint["DEFAULT"] = 0] = "DEFAULT";
        BaseboardPaint[BaseboardPaint["COLORED"] = 1] = "COLORED";
        BaseboardPaint[BaseboardPaint["TEXTURED"] = 2] = "TEXTURED";
    })(BaseboardPaint = BaseboardChoiceController.BaseboardPaint || (BaseboardChoiceController.BaseboardPaint = {}));
    var BaseboardChoiceController$0 = /** @class */ (function () {
        function BaseboardChoiceController$0(__parent) {
            this.__parent = __parent;
        }
        BaseboardChoiceController$0.prototype.propertyChange = function (ev) {
            this.__parent.setPaint(BaseboardChoiceController.BaseboardPaint.TEXTURED);
        };
        return BaseboardChoiceController$0;
    }());
    BaseboardChoiceController.BaseboardChoiceController$0 = BaseboardChoiceController$0;
})(BaseboardChoiceController || (BaseboardChoiceController = {}));
var View;
(function (View) {
    /**
     * The pointer types that the user may use to interact with the plan
     * @enum
     * @property {View.PointerType} MOUSE
     * @property {View.PointerType} TOUCH
     * @class
     */
    var PointerType;
    (function (PointerType) {
        PointerType[PointerType["MOUSE"] = 0] = "MOUSE";
        PointerType[PointerType["TOUCH"] = 1] = "TOUCH";
    })(PointerType = View.PointerType || (View.PointerType = {}));
})(View || (View = {}));
/**
 * Creates the controller of home 3D view.
 * @param {Home} home the home edited by this controller and its view
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var HomeController3D = /** @class */ (function () {
    function HomeController3D(home, preferences, viewFactory, contentManager, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.home3DView === undefined) {
            this.home3DView = null;
        }
        if (this.topCameraState === undefined) {
            this.topCameraState = null;
        }
        if (this.observerCameraState === undefined) {
            this.observerCameraState = null;
        }
        if (this.cameraState === undefined) {
            this.cameraState = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.undoSupport = undoSupport;
        this.topCameraState = new HomeController3D.TopCameraState(this, preferences);
        this.observerCameraState = new HomeController3D.ObserverCameraState(this);
        this.setCameraState(home.getCamera() === home.getTopCamera() ? this.topCameraState : this.observerCameraState);
        this.addModelListeners(home);
    }
    /**
     * Add listeners to model to update camera position accordingly.
     * @param {Home} home
     * @private
     */
    HomeController3D.prototype.addModelListeners = function (home) {
        home.addPropertyChangeListener("CAMERA", new HomeController3D.HomeController3D$0(this, home));
        var levelElevationChangeListener = new HomeController3D.HomeController3D$1(this, home);
        var selectedLevel = home.getSelectedLevel();
        if (selectedLevel != null) {
            selectedLevel.addPropertyChangeListener(levelElevationChangeListener);
        }
        home.addPropertyChangeListener("SELECTED_LEVEL", new HomeController3D.HomeController3D$2(this, home, levelElevationChangeListener));
        var selectedLevelListener = new HomeController3D.HomeController3D$3(this, home);
        home.addPropertyChangeListener("SELECTED_LEVEL", selectedLevelListener);
        home.getEnvironment().addPropertyChangeListener("ALL_LEVELS_VISIBLE", selectedLevelListener);
    };
    HomeController3D.prototype.getObserverCameraMinimumElevation = function (home) {
        var levels = home.getLevels();
        var minimumElevation = levels.length === 0 ? 10 : 10 + /* get */ levels[0].getElevation();
        return minimumElevation;
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    HomeController3D.prototype.getView = function () {
        if (this.home3DView == null) {
            this.home3DView = this.viewFactory.createView3D(this.home, this.preferences, this);
        }
        return this.home3DView;
    };
    /**
     * Changes home camera for {@link Home#getTopCamera() top camera}.
     */
    HomeController3D.prototype.viewFromTop = function () {
        this.home.setCamera(this.home.getTopCamera());
    };
    /**
     * Changes home camera for {@link Home#getObserverCamera() observer camera}.
     */
    HomeController3D.prototype.viewFromObserver = function () {
        this.home.setCamera(this.home.getObserverCamera());
    };
    /**
     * Stores a clone of the current camera in home under the given <code>name</code>.
     * @param {string} name
     */
    HomeController3D.prototype.storeCamera = function (name) {
        var camera = this.home.getCamera().duplicate();
        camera.setName(name);
        var homeStoredCameras = this.home.getStoredCameras();
        var storedCameras = ([]);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(storedCameras, homeStoredCameras);
        for (var i = storedCameras.length - 1; i >= 0; i--) {
            {
                var storedCamera = storedCameras[i];
                if ((name === storedCamera.getName()) || (camera.getX() === storedCamera.getX() && camera.getY() === storedCamera.getY() && camera.getZ() === storedCamera.getZ() && camera.getPitch() === storedCamera.getPitch() && camera.getYaw() === storedCamera.getYaw() && camera.getFieldOfView() === storedCamera.getFieldOfView() && camera.getTime() === storedCamera.getTime() && camera.getLens() === storedCamera.getLens())) {
                    /* remove */ storedCameras.splice(i, 1)[0];
                }
            }
            ;
        }
        /* add */ storedCameras.splice(0, 0, camera);
        while (( /* size */storedCameras.length > this.preferences.getStoredCamerasMaxCount())) {
            {
                /* remove */ storedCameras.splice(/* size */ storedCameras.length - 1, 1)[0];
            }
        }
        ;
        this.home.setStoredCameras(storedCameras);
    };
    /**
     * Switches to observer or top camera and move camera to the values as the current camera.
     * @param {Camera} camera
     */
    HomeController3D.prototype.goToCamera = function (camera) {
        if (camera != null && camera instanceof ObserverCamera) {
            this.viewFromObserver();
        }
        else {
            this.viewFromTop();
        }
        this.cameraState.goToCamera(camera);
        var storedCameras = (this.home.getStoredCameras().slice(0));
        /* remove */ (function (a) { var index = a.indexOf(camera); if (index >= 0) {
            a.splice(index, 1);
            return true;
        }
        else {
            return false;
        } })(storedCameras);
        /* add */ storedCameras.splice(0, 0, camera);
        this.home.setStoredCameras(storedCameras);
    };
    /**
     * Deletes the given list of cameras from the ones stored in home.
     * @param {Camera[]} cameras
     */
    HomeController3D.prototype.deleteCameras = function (cameras) {
        var homeStoredCameras = this.home.getStoredCameras();
        var storedCameras = ([]);
        for (var index = 0; index < homeStoredCameras.length; index++) {
            var camera = homeStoredCameras[index];
            {
                if (!(cameras.indexOf((camera)) >= 0)) {
                    /* add */ (storedCameras.push(camera) > 0);
                }
            }
        }
        this.home.setStoredCameras(storedCameras);
    };
    /**
     * Makes all levels visible.
     */
    HomeController3D.prototype.displayAllLevels = function () {
        this.home.getEnvironment().setAllLevelsVisible(true);
    };
    /**
     * Makes the selected level and below visible.
     */
    HomeController3D.prototype.displaySelectedLevel = function () {
        this.home.getEnvironment().setAllLevelsVisible(false);
    };
    /**
     * Controls the edition of 3D attributes.
     */
    HomeController3D.prototype.modifyAttributes = function () {
        new Home3DAttributesController(this.home, this.preferences, this.viewFactory, this.contentManager, this.undoSupport).displayView(this.getView());
    };
    /**
     * Changes current state of controller.
     * @param {HomeController3D.CameraControllerState} state
     */
    HomeController3D.prototype.setCameraState = function (state) {
        if (this.cameraState != null) {
            this.cameraState.exit();
        }
        this.cameraState = state;
        this.cameraState.enter();
    };
    /**
     * Moves home camera of <code>delta</code>.
     * @param {number} delta  the value in cm that the camera should move forward
     * (with a negative delta) or backward (with a positive delta)
     */
    HomeController3D.prototype.moveCamera = function (delta) {
        this.cameraState.moveCamera(delta);
    };
    /**
     * Moves home camera sideways of <code>delta</code>.
     * @param {number} delta  the value in cm that the camera should move left
     * (with a negative delta) or right (with a positive delta)
     */
    HomeController3D.prototype.moveCameraSideways = function (delta) {
        this.cameraState.moveCameraSideways(delta);
    };
    /**
     * Elevates home camera of <code>delta</code>.
     * @param {number} delta the value in cm that the camera should move down
     * (with a negative delta) or up (with a positive delta)
     */
    HomeController3D.prototype.elevateCamera = function (delta) {
        this.cameraState.elevateCamera(delta);
    };
    /**
     * Rotates home camera yaw angle of <code>delta</code> radians.
     * @param {number} delta  the value in rad that the camera should turn around yaw axis
     */
    HomeController3D.prototype.rotateCameraYaw = function (delta) {
        this.cameraState.rotateCameraYaw(delta);
    };
    /**
     * Rotates home camera pitch angle of <code>delta</code> radians.
     * @param {number} delta  the value in rad that the camera should turn around pitch axis
     */
    HomeController3D.prototype.rotateCameraPitch = function (delta) {
        this.cameraState.rotateCameraPitch(delta);
    };
    /**
     * Modifies home camera field of view of <code>delta</code>.
     * @param {number} delta  the value in rad that should be added the field of view
     * to get a narrower view (with a negative delta) or a wider view (with a positive delta)
     */
    HomeController3D.prototype.modifyFieldOfView = function (delta) {
        this.cameraState.modifyFieldOfView(delta);
    };
    /**
     * Returns the observer camera state.
     * @return {HomeController3D.CameraControllerState}
     */
    HomeController3D.prototype.getObserverCameraState = function () {
        return this.observerCameraState;
    };
    /**
     * Returns the top camera state.
     * @return {HomeController3D.CameraControllerState}
     */
    HomeController3D.prototype.getTopCameraState = function () {
        return this.topCameraState;
    };
    return HomeController3D;
}());
HomeController3D["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController3D";
HomeController3D["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (HomeController3D) {
    /**
     * Controller state classes super class.
     * @class
     */
    var CameraControllerState = /** @class */ (function () {
        function CameraControllerState() {
        }
        CameraControllerState.prototype.enter = function () {
        };
        CameraControllerState.prototype.exit = function () {
        };
        CameraControllerState.prototype.moveCamera = function (delta) {
        };
        CameraControllerState.prototype.moveCameraSideways = function (delta) {
        };
        CameraControllerState.prototype.elevateCamera = function (delta) {
        };
        CameraControllerState.prototype.rotateCameraYaw = function (delta) {
        };
        CameraControllerState.prototype.rotateCameraPitch = function (delta) {
        };
        CameraControllerState.prototype.modifyFieldOfView = function (delta) {
        };
        CameraControllerState.prototype.goToCamera = function (camera) {
        };
        return CameraControllerState;
    }());
    HomeController3D.CameraControllerState = CameraControllerState;
    CameraControllerState["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController3D.CameraControllerState";
    /**
     * Preferences property listener bound to top camera state with a weak reference to avoid
     * strong link between user preferences and top camera state.
     * @param {HomeController3D.TopCameraState} topCameraState
     * @class
     */
    var UserPreferencesChangeListener = /** @class */ (function () {
        function UserPreferencesChangeListener(topCameraState) {
            if (this.topCameraState === undefined) {
                this.topCameraState = null;
            }
            this.topCameraState = (topCameraState);
        }
        UserPreferencesChangeListener.prototype.propertyChange = function (ev) {
            var topCameraState = this.topCameraState;
            var preferences = ev.getSource();
            if (topCameraState == null) {
                preferences.removePropertyChangeListener(/* valueOf */ ev.getPropertyName(), this);
            }
            else {
                topCameraState.setAerialViewCenteredOnSelectionEnabled(preferences.isAerialViewCenteredOnSelectionEnabled());
            }
        };
        return UserPreferencesChangeListener;
    }());
    HomeController3D.UserPreferencesChangeListener = UserPreferencesChangeListener;
    UserPreferencesChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController3D.UserPreferencesChangeListener";
    /**
     * Top camera controller state.
     * @param {UserPreferences} preferences
     * @class
     * @extends HomeController3D.CameraControllerState
     */
    var TopCameraState = /** @class */ (function (_super) {
        __extends(TopCameraState, _super);
        function TopCameraState(__parent, preferences) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            _this.MIN_WIDTH = 100;
            _this.MIN_DEPTH = _this.MIN_WIDTH;
            _this.MIN_HEIGHT = 20;
            if (_this.topCamera === undefined) {
                _this.topCamera = null;
            }
            if (_this.aerialViewBoundsLowerPoint === undefined) {
                _this.aerialViewBoundsLowerPoint = null;
            }
            if (_this.aerialViewBoundsUpperPoint === undefined) {
                _this.aerialViewBoundsUpperPoint = null;
            }
            if (_this.minDistanceToAerialViewCenter === undefined) {
                _this.minDistanceToAerialViewCenter = 0;
            }
            if (_this.maxDistanceToAerialViewCenter === undefined) {
                _this.maxDistanceToAerialViewCenter = 0;
            }
            if (_this.aerialViewCenteredOnSelectionEnabled === undefined) {
                _this.aerialViewCenteredOnSelectionEnabled = false;
            }
            if (_this.previousSelectionEmpty === undefined) {
                _this.previousSelectionEmpty = false;
            }
            _this.distanceToCenterWithSelection = -1;
            _this.objectChangeListener = new TopCameraState.TopCameraState$0(_this);
            _this.levelsListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    ev.getItem().addPropertyChangeListener(_this.objectChangeListener);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    ev.getItem().removePropertyChangeListener(_this.objectChangeListener);
                }
                _this.updateCameraFromHomeBounds(false, false);
            };
            _this.wallsListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    ev.getItem().addPropertyChangeListener(_this.objectChangeListener);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    ev.getItem().removePropertyChangeListener(_this.objectChangeListener);
                }
                _this.updateCameraFromHomeBounds(false, false);
            };
            _this.furnitureListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    _this.addPropertyChangeListener(ev.getItem(), _this.objectChangeListener);
                    _this.updateCameraFromHomeBounds(/* size */ __parent.home.getFurniture().length === 1 && /* isEmpty */ (__parent.home.getWalls().length == 0) && /* isEmpty */ (__parent.home.getRooms().length == 0), false);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    _this.removePropertyChangeListener(ev.getItem(), _this.objectChangeListener);
                    _this.updateCameraFromHomeBounds(false, false);
                }
            };
            _this.roomsListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    ev.getItem().addPropertyChangeListener(_this.objectChangeListener);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    ev.getItem().removePropertyChangeListener(_this.objectChangeListener);
                }
                _this.updateCameraFromHomeBounds(false, false);
            };
            _this.polylinesListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    ev.getItem().addPropertyChangeListener(_this.objectChangeListener);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    ev.getItem().removePropertyChangeListener(_this.objectChangeListener);
                }
                _this.updateCameraFromHomeBounds(false, false);
            };
            _this.labelsListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    ev.getItem().addPropertyChangeListener(_this.objectChangeListener);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    ev.getItem().removePropertyChangeListener(_this.objectChangeListener);
                }
                _this.updateCameraFromHomeBounds(false, false);
            };
            _this.selectionListener = new TopCameraState.TopCameraState$1(_this);
            if (_this.userPreferencesChangeListener === undefined) {
                _this.userPreferencesChangeListener = null;
            }
            _this.userPreferencesChangeListener = new HomeController3D.UserPreferencesChangeListener(_this);
            return _this;
        }
        TopCameraState.prototype.addPropertyChangeListener = function (piece, listener) {
            if (piece != null && piece instanceof HomeFurnitureGroup) {
                {
                    var array = piece.getFurniture();
                    for (var index = 0; index < array.length; index++) {
                        var child = array[index];
                        {
                            this.addPropertyChangeListener(child, listener);
                        }
                    }
                }
            }
            else {
                piece.addPropertyChangeListener(listener);
            }
        };
        TopCameraState.prototype.removePropertyChangeListener = function (piece, listener) {
            if (piece != null && piece instanceof HomeFurnitureGroup) {
                {
                    var array = piece.getFurniture();
                    for (var index = 0; index < array.length; index++) {
                        var child = array[index];
                        {
                            this.removePropertyChangeListener(child, listener);
                        }
                    }
                }
            }
            else {
                piece.removePropertyChangeListener(listener);
            }
        };
        /**
         *
         */
        TopCameraState.prototype.enter = function () {
            this.topCamera = this.__parent.home.getCamera();
            this.previousSelectionEmpty = /* isEmpty */ (this.__parent.home.getSelectedItems().length == 0);
            this.aerialViewCenteredOnSelectionEnabled = this.__parent.preferences.isAerialViewCenteredOnSelectionEnabled();
            this.updateCameraFromHomeBounds(false, false);
            {
                var array = this.__parent.home.getLevels();
                for (var index = 0; index < array.length; index++) {
                    var level = array[index];
                    {
                        level.addPropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.addLevelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.levelsListener)));
            {
                var array = this.__parent.home.getWalls();
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        wall.addPropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.addWallsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.wallsListener)));
            {
                var array = this.__parent.home.getFurniture();
                for (var index = 0; index < array.length; index++) {
                    var piece = array[index];
                    {
                        this.addPropertyChangeListener(piece, this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.addFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.furnitureListener)));
            {
                var array = this.__parent.home.getRooms();
                for (var index = 0; index < array.length; index++) {
                    var room = array[index];
                    {
                        room.addPropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.addRoomsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.roomsListener)));
            {
                var array = this.__parent.home.getPolylines();
                for (var index = 0; index < array.length; index++) {
                    var polyline = array[index];
                    {
                        polyline.addPropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.addPolylinesListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.polylinesListener)));
            {
                var array = this.__parent.home.getLabels();
                for (var index = 0; index < array.length; index++) {
                    var label = array[index];
                    {
                        label.addPropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.addLabelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.labelsListener)));
            this.__parent.home.addSelectionListener(this.selectionListener);
            this.__parent.preferences.addPropertyChangeListener("AERIAL_VIEW_CENTERED_ON_SELECTION_ENABLED", this.userPreferencesChangeListener);
        };
        /**
         * Sets whether aerial view should be centered on selection or not.
         * @param {boolean} aerialViewCenteredOnSelectionEnabled
         */
        TopCameraState.prototype.setAerialViewCenteredOnSelectionEnabled = function (aerialViewCenteredOnSelectionEnabled) {
            this.aerialViewCenteredOnSelectionEnabled = aerialViewCenteredOnSelectionEnabled;
            this.updateCameraFromHomeBounds(false, false);
        };
        /**
         * Updates camera location from home bounds.
         * @param {boolean} firstPieceOfFurnitureAddedToEmptyHome
         * @param {boolean} selectionChange
         * @private
         */
        TopCameraState.prototype.updateCameraFromHomeBounds = function (firstPieceOfFurnitureAddedToEmptyHome, selectionChange) {
            if (this.aerialViewBoundsLowerPoint == null) {
                this.updateAerialViewBoundsFromHomeBounds(this.aerialViewCenteredOnSelectionEnabled);
            }
            var distanceToCenter;
            if (selectionChange && this.__parent.preferences.isAerialViewCenteredOnSelectionEnabled() && this.distanceToCenterWithSelection !== -1) {
                distanceToCenter = this.distanceToCenterWithSelection;
            }
            else {
                distanceToCenter = this.getCameraToAerialViewCenterDistance();
            }
            if (!(this.__parent.home.getSelectedItems().length == 0)) {
                this.distanceToCenterWithSelection = distanceToCenter;
            }
            this.updateAerialViewBoundsFromHomeBounds(this.aerialViewCenteredOnSelectionEnabled);
            this.updateCameraIntervalToAerialViewCenter();
            this.placeCameraAt(distanceToCenter, firstPieceOfFurnitureAddedToEmptyHome);
        };
        /**
         * Returns the distance between the current camera location and home bounds center.
         * @return {number}
         * @private
         */
        TopCameraState.prototype.getCameraToAerialViewCenterDistance = function () {
            return Math.sqrt(Math.pow((this.aerialViewBoundsLowerPoint[0] + this.aerialViewBoundsUpperPoint[0]) / 2 - this.topCamera.getX(), 2) + Math.pow((this.aerialViewBoundsLowerPoint[1] + this.aerialViewBoundsUpperPoint[1]) / 2 - this.topCamera.getY(), 2) + Math.pow((this.aerialViewBoundsLowerPoint[2] + this.aerialViewBoundsUpperPoint[2]) / 2 - this.topCamera.getZ(), 2));
        };
        /**
         * Sets the bounds that includes walls, furniture and rooms, or only selected items
         * if <code>centerOnSelection</code> is <code>true</code>.
         * @param {boolean} centerOnSelection
         * @private
         */
        TopCameraState.prototype.updateAerialViewBoundsFromHomeBounds = function (centerOnSelection) {
            this.aerialViewBoundsLowerPoint = this.aerialViewBoundsUpperPoint = null;
            var selectedItems = [];
            if (centerOnSelection) {
                selectedItems = ([]);
                {
                    var array = this.__parent.home.getSelectedItems();
                    for (var index = 0; index < array.length; index++) {
                        var item = array[index];
                        {
                            if ((item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) && this.isItemAtVisibleLevel(item) && (!(item != null && item instanceof HomePieceOfFurniture) || item.isVisible()) && (!(item != null && item instanceof Label) || item.getPitch() != null)) {
                                /* add */ (selectedItems.push(item) > 0);
                            }
                        }
                    }
                }
            }
            var selectionEmpty = selectedItems.length === 0 || !centerOnSelection;
            var containsVisibleWalls = false;
            {
                var array = selectionEmpty ? this.__parent.home.getWalls() : Home.getWallsSubList(selectedItems);
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        if (this.isItemAtVisibleLevel(wall)) {
                            containsVisibleWalls = true;
                            var wallElevation = wall.getLevel() != null ? wall.getLevel().getElevation() : 0;
                            var minZ = selectionEmpty ? 0 : wallElevation;
                            var height = wall.getHeight();
                            var maxZ = void 0;
                            if (height != null) {
                                maxZ = wallElevation + height;
                            }
                            else {
                                maxZ = wallElevation + this.__parent.home.getWallHeight();
                            }
                            var heightAtEnd = wall.getHeightAtEnd();
                            if (heightAtEnd != null) {
                                maxZ = Math.max(maxZ, wallElevation + heightAtEnd);
                            }
                            {
                                var array1 = wall.getPoints$();
                                for (var index1 = 0; index1 < array1.length; index1++) {
                                    var point = array1[index1];
                                    {
                                        this.updateAerialViewBounds(point[0], point[1], minZ, maxZ);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                var array = selectionEmpty ? this.__parent.home.getFurniture() : Home.getFurnitureSubList(selectedItems);
                for (var index = 0; index < array.length; index++) {
                    var piece = array[index];
                    {
                        if (piece.isVisible() && this.isItemAtVisibleLevel(piece)) {
                            var minZ = void 0;
                            var maxZ = void 0;
                            if (selectionEmpty) {
                                minZ = Math.max(0, piece.getGroundElevation());
                                maxZ = Math.max(0, piece.getGroundElevation() + piece.getHeightInPlan());
                            }
                            else {
                                minZ = piece.getGroundElevation();
                                maxZ = piece.getGroundElevation() + piece.getHeightInPlan();
                            }
                            {
                                var array1 = piece.getPoints();
                                for (var index1 = 0; index1 < array1.length; index1++) {
                                    var point = array1[index1];
                                    {
                                        this.updateAerialViewBounds(point[0], point[1], minZ, maxZ);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                var array = selectionEmpty ? this.__parent.home.getRooms() : Home.getRoomsSubList(selectedItems);
                for (var index = 0; index < array.length; index++) {
                    var room = array[index];
                    {
                        if (this.isItemAtVisibleLevel(room)) {
                            var minZ = 0;
                            var maxZ = this.MIN_HEIGHT;
                            var roomLevel = room.getLevel();
                            if (roomLevel != null) {
                                minZ = roomLevel.getElevation() - roomLevel.getFloorThickness();
                                maxZ = roomLevel.getElevation();
                                if (selectionEmpty) {
                                    minZ = Math.max(0, minZ);
                                    maxZ = Math.max(this.MIN_HEIGHT, roomLevel.getElevation());
                                }
                            }
                            {
                                var array1 = room.getPoints();
                                for (var index1 = 0; index1 < array1.length; index1++) {
                                    var point = array1[index1];
                                    {
                                        this.updateAerialViewBounds(point[0], point[1], minZ, maxZ);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                var array = selectionEmpty ? this.__parent.home.getPolylines() : Home.getPolylinesSubList(selectedItems);
                for (var index = 0; index < array.length; index++) {
                    var polyline = array[index];
                    {
                        if (polyline.isVisibleIn3D() && this.isItemAtVisibleLevel(polyline)) {
                            var minZ = void 0;
                            var maxZ = void 0;
                            if (selectionEmpty) {
                                minZ = Math.max(0, polyline.getGroundElevation());
                                maxZ = Math.max(this.MIN_HEIGHT, polyline.getGroundElevation());
                            }
                            else {
                                minZ = maxZ = polyline.getGroundElevation();
                            }
                            {
                                var array1 = polyline.getPoints();
                                for (var index1 = 0; index1 < array1.length; index1++) {
                                    var point = array1[index1];
                                    {
                                        this.updateAerialViewBounds(point[0], point[1], minZ, maxZ);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            {
                var array = selectionEmpty ? this.__parent.home.getLabels() : Home.getLabelsSubList(selectedItems);
                for (var index = 0; index < array.length; index++) {
                    var label = array[index];
                    {
                        if (label.getPitch() != null && this.isItemAtVisibleLevel(label)) {
                            var minZ = void 0;
                            var maxZ = void 0;
                            if (selectionEmpty) {
                                minZ = Math.max(0, label.getGroundElevation());
                                maxZ = Math.max(this.MIN_HEIGHT, label.getGroundElevation());
                            }
                            else {
                                minZ = maxZ = label.getGroundElevation();
                            }
                            {
                                var array1 = label.getPoints();
                                for (var index1 = 0; index1 < array1.length; index1++) {
                                    var point = array1[index1];
                                    {
                                        this.updateAerialViewBounds(point[0], point[1], minZ, maxZ);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (this.aerialViewBoundsLowerPoint == null) {
                this.aerialViewBoundsLowerPoint = [0, 0, 0];
                this.aerialViewBoundsUpperPoint = [this.MIN_WIDTH, this.MIN_DEPTH, this.MIN_HEIGHT];
            }
            else if (containsVisibleWalls && selectionEmpty) {
                if (this.MIN_WIDTH > this.aerialViewBoundsUpperPoint[0] - this.aerialViewBoundsLowerPoint[0]) {
                    this.aerialViewBoundsLowerPoint[0] = (this.aerialViewBoundsLowerPoint[0] + this.aerialViewBoundsUpperPoint[0]) / 2 - this.MIN_WIDTH / 2;
                    this.aerialViewBoundsUpperPoint[0] = this.aerialViewBoundsLowerPoint[0] + this.MIN_WIDTH;
                }
                if (this.MIN_DEPTH > this.aerialViewBoundsUpperPoint[1] - this.aerialViewBoundsLowerPoint[1]) {
                    this.aerialViewBoundsLowerPoint[1] = (this.aerialViewBoundsLowerPoint[1] + this.aerialViewBoundsUpperPoint[1]) / 2 - this.MIN_DEPTH / 2;
                    this.aerialViewBoundsUpperPoint[1] = this.aerialViewBoundsLowerPoint[1] + this.MIN_DEPTH;
                }
                if (this.MIN_HEIGHT > this.aerialViewBoundsUpperPoint[2] - this.aerialViewBoundsLowerPoint[2]) {
                    this.aerialViewBoundsLowerPoint[2] = (this.aerialViewBoundsLowerPoint[2] + this.aerialViewBoundsUpperPoint[2]) / 2 - this.MIN_HEIGHT / 2;
                    this.aerialViewBoundsUpperPoint[2] = this.aerialViewBoundsLowerPoint[2] + this.MIN_HEIGHT;
                }
            }
        };
        /**
         * Adds the point at the given coordinates to aerial view bounds.
         * @param {number} x
         * @param {number} y
         * @param {number} minZ
         * @param {number} maxZ
         * @private
         */
        TopCameraState.prototype.updateAerialViewBounds = function (x, y, minZ, maxZ) {
            if (this.aerialViewBoundsLowerPoint == null) {
                this.aerialViewBoundsLowerPoint = [x, y, minZ];
                this.aerialViewBoundsUpperPoint = [x, y, maxZ];
            }
            else {
                this.aerialViewBoundsLowerPoint[0] = Math.min(this.aerialViewBoundsLowerPoint[0], x);
                this.aerialViewBoundsUpperPoint[0] = Math.max(this.aerialViewBoundsUpperPoint[0], x);
                this.aerialViewBoundsLowerPoint[1] = Math.min(this.aerialViewBoundsLowerPoint[1], y);
                this.aerialViewBoundsUpperPoint[1] = Math.max(this.aerialViewBoundsUpperPoint[1], y);
                this.aerialViewBoundsLowerPoint[2] = Math.min(this.aerialViewBoundsLowerPoint[2], minZ);
                this.aerialViewBoundsUpperPoint[2] = Math.max(this.aerialViewBoundsUpperPoint[2], maxZ);
            }
        };
        /**
         * Returns <code>true</code> if the given <code>item</code> is at a visible level.
         * @param {Object} item
         * @return {boolean}
         * @private
         */
        TopCameraState.prototype.isItemAtVisibleLevel = function (item) {
            return item.getLevel() == null || item.getLevel().isViewableAndVisible();
        };
        /**
         * Updates the minimum and maximum distances of the camera to the center of the aerial view.
         * @private
         */
        TopCameraState.prototype.updateCameraIntervalToAerialViewCenter = function () {
            var homeBoundsWidth = this.aerialViewBoundsUpperPoint[0] - this.aerialViewBoundsLowerPoint[0];
            var homeBoundsDepth = this.aerialViewBoundsUpperPoint[1] - this.aerialViewBoundsLowerPoint[1];
            var homeBoundsHeight = this.aerialViewBoundsUpperPoint[2] - this.aerialViewBoundsLowerPoint[2];
            var halfDiagonal = Math.sqrt(homeBoundsWidth * homeBoundsWidth + homeBoundsDepth * homeBoundsDepth + homeBoundsHeight * homeBoundsHeight) / 2;
            this.minDistanceToAerialViewCenter = halfDiagonal * 1.05;
            this.maxDistanceToAerialViewCenter = Math.max(5 * this.minDistanceToAerialViewCenter, 5000);
        };
        /**
         *
         * @param {number} delta
         */
        TopCameraState.prototype.moveCamera = function (delta) {
            delta *= 5;
            var newDistanceToCenter = this.getCameraToAerialViewCenterDistance() - delta;
            this.placeCameraAt(newDistanceToCenter, false);
        };
        TopCameraState.prototype.placeCameraAt = function (distanceToCenter, firstPieceOfFurnitureAddedToEmptyHome) {
            distanceToCenter = Math.max(distanceToCenter, this.minDistanceToAerialViewCenter);
            distanceToCenter = Math.min(distanceToCenter, this.maxDistanceToAerialViewCenter);
            if (firstPieceOfFurnitureAddedToEmptyHome) {
                distanceToCenter = Math.min(distanceToCenter, 3 * this.minDistanceToAerialViewCenter);
            }
            var distanceToCenterAtGroundLevel = distanceToCenter * Math.cos(this.topCamera.getPitch());
            this.topCamera.setX((this.aerialViewBoundsLowerPoint[0] + this.aerialViewBoundsUpperPoint[0]) / 2 + (Math.sin(this.topCamera.getYaw()) * distanceToCenterAtGroundLevel));
            this.topCamera.setY((this.aerialViewBoundsLowerPoint[1] + this.aerialViewBoundsUpperPoint[1]) / 2 - (Math.cos(this.topCamera.getYaw()) * distanceToCenterAtGroundLevel));
            this.topCamera.setZ((this.aerialViewBoundsLowerPoint[2] + this.aerialViewBoundsUpperPoint[2]) / 2 + Math.sin(this.topCamera.getPitch()) * distanceToCenter);
        };
        /**
         *
         * @param {number} delta
         */
        TopCameraState.prototype.rotateCameraYaw = function (delta) {
            var newYaw = this.topCamera.getYaw() + delta;
            var distanceToCenterAtGroundLevel = this.getCameraToAerialViewCenterDistance() * Math.cos(this.topCamera.getPitch());
            this.topCamera.setYaw(newYaw);
            this.topCamera.setX((this.aerialViewBoundsLowerPoint[0] + this.aerialViewBoundsUpperPoint[0]) / 2 + (Math.sin(newYaw) * distanceToCenterAtGroundLevel));
            this.topCamera.setY((this.aerialViewBoundsLowerPoint[1] + this.aerialViewBoundsUpperPoint[1]) / 2 - (Math.cos(newYaw) * distanceToCenterAtGroundLevel));
        };
        /**
         *
         * @param {number} delta
         */
        TopCameraState.prototype.rotateCameraPitch = function (delta) {
            var newPitch = this.topCamera.getPitch() + delta;
            newPitch = Math.max(newPitch, 0);
            newPitch = Math.min(newPitch, Math.PI / 2);
            var distanceToCenter = this.getCameraToAerialViewCenterDistance();
            var distanceToCenterAtGroundLevel = distanceToCenter * Math.cos(newPitch);
            this.topCamera.setPitch(newPitch);
            this.topCamera.setX((this.aerialViewBoundsLowerPoint[0] + this.aerialViewBoundsUpperPoint[0]) / 2 + (Math.sin(this.topCamera.getYaw()) * distanceToCenterAtGroundLevel));
            this.topCamera.setY((this.aerialViewBoundsLowerPoint[1] + this.aerialViewBoundsUpperPoint[1]) / 2 - (Math.cos(this.topCamera.getYaw()) * distanceToCenterAtGroundLevel));
            this.topCamera.setZ((this.aerialViewBoundsLowerPoint[2] + this.aerialViewBoundsUpperPoint[2]) / 2 + (distanceToCenter * Math.sin(newPitch)));
        };
        /**
         *
         * @param {Camera} camera
         */
        TopCameraState.prototype.goToCamera = function (camera) {
            this.topCamera.setCamera(camera);
            this.topCamera.setTime(camera.getTime());
            this.topCamera.setLens(camera.getLens());
            this.updateCameraFromHomeBounds(false, false);
        };
        /**
         *
         */
        TopCameraState.prototype.exit = function () {
            this.topCamera = null;
            {
                var array = this.__parent.home.getWalls();
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        wall.removePropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.removeWallsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.wallsListener)));
            {
                var array = this.__parent.home.getFurniture();
                for (var index = 0; index < array.length; index++) {
                    var piece = array[index];
                    {
                        this.removePropertyChangeListener(piece, this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.furnitureListener)));
            {
                var array = this.__parent.home.getRooms();
                for (var index = 0; index < array.length; index++) {
                    var room = array[index];
                    {
                        room.removePropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.removeRoomsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.roomsListener)));
            {
                var array = this.__parent.home.getPolylines();
                for (var index = 0; index < array.length; index++) {
                    var polyline = array[index];
                    {
                        polyline.removePropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.removePolylinesListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.polylinesListener)));
            {
                var array = this.__parent.home.getLabels();
                for (var index = 0; index < array.length; index++) {
                    var label = array[index];
                    {
                        label.removePropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.removeLabelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.labelsListener)));
            {
                var array = this.__parent.home.getLevels();
                for (var index = 0; index < array.length; index++) {
                    var level = array[index];
                    {
                        level.removePropertyChangeListener(this.objectChangeListener);
                    }
                }
            }
            this.__parent.home.removeLevelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.levelsListener)));
            this.__parent.home.removeSelectionListener(this.selectionListener);
            this.__parent.preferences.removePropertyChangeListener("AERIAL_VIEW_CENTERED_ON_SELECTION_ENABLED", this.userPreferencesChangeListener);
        };
        return TopCameraState;
    }(HomeController3D.CameraControllerState));
    HomeController3D.TopCameraState = TopCameraState;
    TopCameraState["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController3D.TopCameraState";
    (function (TopCameraState) {
        var TopCameraState$0 = /** @class */ (function () {
            function TopCameraState$0(__parent) {
                this.__parent = __parent;
            }
            TopCameraState$0.prototype.propertyChange = function (ev) {
                this.__parent.updateCameraFromHomeBounds(false, false);
            };
            return TopCameraState$0;
        }());
        TopCameraState.TopCameraState$0 = TopCameraState$0;
        var TopCameraState$1 = /** @class */ (function () {
            function TopCameraState$1(__parent) {
                this.__parent = __parent;
            }
            TopCameraState$1.prototype.selectionChanged = function (ev) {
                var selectionEmpty = (ev.getSelectedItems().length == 0);
                this.__parent.updateCameraFromHomeBounds(false, this.__parent.previousSelectionEmpty && !selectionEmpty);
                this.__parent.previousSelectionEmpty = selectionEmpty;
            };
            return TopCameraState$1;
        }());
        TopCameraState.TopCameraState$1 = TopCameraState$1;
        TopCameraState$1["__interfaces"] = ["com.eteks.sweethome3d.model.SelectionListener"];
    })(TopCameraState = HomeController3D.TopCameraState || (HomeController3D.TopCameraState = {}));
    /**
     * Observer camera controller state.
     * @extends HomeController3D.CameraControllerState
     * @class
     */
    var ObserverCameraState = /** @class */ (function (_super) {
        __extends(ObserverCameraState, _super);
        function ObserverCameraState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.observerCamera === undefined) {
                _this.observerCamera = null;
            }
            _this.levelElevationChangeListener = new ObserverCameraState.ObserverCameraState$0(_this);
            _this.levelsListener = function (ev) {
                if (ev.getType() === CollectionEvent.Type.ADD) {
                    ev.getItem().addPropertyChangeListener(_this.levelElevationChangeListener);
                }
                else if (ev.getType() === CollectionEvent.Type.DELETE) {
                    ev.getItem().removePropertyChangeListener(_this.levelElevationChangeListener);
                }
                _this.updateCameraMinimumElevation();
            };
            return _this;
        }
        /**
         *
         */
        ObserverCameraState.prototype.enter = function () {
            this.observerCamera = this.__parent.home.getCamera();
            {
                var array = this.__parent.home.getLevels();
                for (var index = 0; index < array.length; index++) {
                    var level = array[index];
                    {
                        level.addPropertyChangeListener(this.levelElevationChangeListener);
                    }
                }
            }
            this.__parent.home.addLevelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.levelsListener)));
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        /**
         *
         * @param {number} delta
         */
        ObserverCameraState.prototype.moveCamera = function (delta) {
            this.observerCamera.setX(this.observerCamera.getX() - Math.sin(this.observerCamera.getYaw()) * delta);
            this.observerCamera.setY(this.observerCamera.getY() + Math.cos(this.observerCamera.getYaw()) * delta);
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        /**
         *
         * @param {number} delta
         */
        ObserverCameraState.prototype.moveCameraSideways = function (delta) {
            this.observerCamera.setX(this.observerCamera.getX() - Math.cos(this.observerCamera.getYaw()) * delta);
            this.observerCamera.setY(this.observerCamera.getY() - Math.sin(this.observerCamera.getYaw()) * delta);
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        /**
         *
         * @param {number} delta
         */
        ObserverCameraState.prototype.elevateCamera = function (delta) {
            var newElevation = this.observerCamera.getZ() + delta;
            newElevation = Math.min(Math.max(newElevation, this.getMinimumElevation()), this.__parent.preferences.getLengthUnit().getMaximumElevation());
            this.observerCamera.setZ(newElevation);
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        ObserverCameraState.prototype.updateCameraMinimumElevation = function () {
            this.observerCamera.setZ(Math.max(this.observerCamera.getZ(), this.getMinimumElevation()));
        };
        ObserverCameraState.prototype.getMinimumElevation = function () {
            var levels = this.__parent.home.getLevels();
            if ( /* size */levels.length > 0) {
                return 10 + /* get */ levels[0].getElevation();
            }
            else {
                return 10;
            }
        };
        /**
         *
         * @param {number} delta
         */
        ObserverCameraState.prototype.rotateCameraYaw = function (delta) {
            this.observerCamera.setYaw(this.observerCamera.getYaw() + delta);
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        /**
         *
         * @param {number} delta
         */
        ObserverCameraState.prototype.rotateCameraPitch = function (delta) {
            var newPitch = this.observerCamera.getPitch() + delta;
            newPitch = Math.min(Math.max(-Math.PI / 2, newPitch), Math.PI / 2);
            this.observerCamera.setPitch(newPitch);
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        /**
         *
         * @param {number} delta
         */
        ObserverCameraState.prototype.modifyFieldOfView = function (delta) {
            var newFieldOfView = this.observerCamera.getFieldOfView() + delta;
            newFieldOfView = Math.min(Math.max(/* toRadians */ (function (x) { return x * Math.PI / 180; })(2), newFieldOfView), /* toRadians */ (function (x) { return x * Math.PI / 180; })(120));
            this.observerCamera.setFieldOfView(newFieldOfView);
            if (this.__parent.preferences.isObserverCameraSelectedAtChange()) {
                this.__parent.home.setSelectedItems(/* asList */ [this.observerCamera].slice(0));
            }
        };
        /**
         *
         * @param {Camera} camera
         */
        ObserverCameraState.prototype.goToCamera = function (camera) {
            this.observerCamera.setCamera(camera);
            this.observerCamera.setTime(camera.getTime());
            this.observerCamera.setLens(camera.getLens());
        };
        /**
         *
         */
        ObserverCameraState.prototype.exit = function () {
            var _this = this;
            var selectedItems = this.__parent.home.getSelectedItems();
            if ( /* contains */(selectedItems.indexOf((this.observerCamera)) >= 0)) {
                selectedItems = (selectedItems.slice(0));
                /* remove */ (function (a) { var index = a.indexOf(_this.observerCamera); if (index >= 0) {
                    a.splice(index, 1);
                    return true;
                }
                else {
                    return false;
                } })(selectedItems);
                this.__parent.home.setSelectedItems(selectedItems);
            }
            {
                var array = this.__parent.home.getLevels();
                for (var index = 0; index < array.length; index++) {
                    var level = array[index];
                    {
                        level.removePropertyChangeListener(this.levelElevationChangeListener);
                    }
                }
            }
            this.__parent.home.removeLevelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                return funcInst;
            } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this.levelsListener)));
            this.observerCamera = null;
        };
        return ObserverCameraState;
    }(HomeController3D.CameraControllerState));
    HomeController3D.ObserverCameraState = ObserverCameraState;
    ObserverCameraState["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController3D.ObserverCameraState";
    (function (ObserverCameraState) {
        var ObserverCameraState$0 = /** @class */ (function () {
            function ObserverCameraState$0(__parent) {
                this.__parent = __parent;
            }
            ObserverCameraState$0.prototype.propertyChange = function (ev) {
                if ( /* name */"ELEVATION" === ev.getPropertyName()) {
                    this.__parent.updateCameraMinimumElevation();
                }
            };
            return ObserverCameraState$0;
        }());
        ObserverCameraState.ObserverCameraState$0 = ObserverCameraState$0;
    })(ObserverCameraState = HomeController3D.ObserverCameraState || (HomeController3D.ObserverCameraState = {}));
    var HomeController3D$0 = /** @class */ (function () {
        function HomeController3D$0(__parent, home) {
            this.home = home;
            this.__parent = __parent;
        }
        HomeController3D$0.prototype.propertyChange = function (ev) {
            this.__parent.setCameraState(this.home.getCamera() === this.home.getTopCamera() ? this.__parent.topCameraState : this.__parent.observerCameraState);
        };
        return HomeController3D$0;
    }());
    HomeController3D.HomeController3D$0 = HomeController3D$0;
    var HomeController3D$1 = /** @class */ (function () {
        function HomeController3D$1(__parent, home) {
            this.home = home;
            this.__parent = __parent;
        }
        HomeController3D$1.prototype.propertyChange = function (ev) {
            if (( /* name */"ELEVATION" === ev.getPropertyName()) && this.home.getEnvironment().isObserverCameraElevationAdjusted()) {
                this.home.getObserverCamera().setZ(Math.max(this.__parent.getObserverCameraMinimumElevation(this.home), this.home.getObserverCamera().getZ() + ev.getNewValue() - ev.getOldValue()));
            }
        };
        return HomeController3D$1;
    }());
    HomeController3D.HomeController3D$1 = HomeController3D$1;
    var HomeController3D$2 = /** @class */ (function () {
        function HomeController3D$2(__parent, home, levelElevationChangeListener) {
            this.home = home;
            this.levelElevationChangeListener = levelElevationChangeListener;
            this.__parent = __parent;
        }
        HomeController3D$2.prototype.propertyChange = function (ev) {
            var oldSelectedLevel = ev.getOldValue();
            var selectedLevel = this.home.getSelectedLevel();
            if (this.home.getEnvironment().isObserverCameraElevationAdjusted()) {
                this.home.getObserverCamera().setZ(Math.max(this.__parent.getObserverCameraMinimumElevation(this.home), this.home.getObserverCamera().getZ() + (selectedLevel == null ? 0 : selectedLevel.getElevation()) - (oldSelectedLevel == null ? 0 : oldSelectedLevel.getElevation())));
            }
            if (oldSelectedLevel != null) {
                oldSelectedLevel.removePropertyChangeListener(this.levelElevationChangeListener);
            }
            if (selectedLevel != null) {
                selectedLevel.addPropertyChangeListener(this.levelElevationChangeListener);
            }
        };
        return HomeController3D$2;
    }());
    HomeController3D.HomeController3D$2 = HomeController3D$2;
    var HomeController3D$3 = /** @class */ (function () {
        function HomeController3D$3(__parent, home) {
            this.home = home;
            this.__parent = __parent;
        }
        HomeController3D$3.prototype.propertyChange = function (ev) {
            var levels = this.home.getLevels();
            var selectedLevel = this.home.getSelectedLevel();
            var visible = true;
            for (var i = 0; i < /* size */ levels.length; i++) {
                {
                    /* get */ levels[i].setVisible(visible);
                    if ( /* get */levels[i] === selectedLevel && !this.home.getEnvironment().isAllLevelsVisible()) {
                        visible = false;
                    }
                }
                ;
            }
        };
        return HomeController3D$3;
    }());
    HomeController3D.HomeController3D$3 = HomeController3D$3;
})(HomeController3D || (HomeController3D = {}));
/**
 * Create a print attributes for home from the given parameters.
 * @param {HomePrint.PaperOrientation} paperOrientation
 * @param {number} paperWidth
 * @param {number} paperHeight
 * @param {number} paperTopMargin
 * @param {number} paperLeftMargin
 * @param {number} paperBottomMargin
 * @param {number} paperRightMargin
 * @param {boolean} furniturePrinted
 * @param {boolean} planPrinted
 * @param {boolean} view3DPrinted
 * @param {number} planScale
 * @param {string} headerFormat
 * @param {string} footerFormat
 * @class
 * @author Emmanuel Puybaret
 */
var HomePrint = /** @class */ (function () {
    function HomePrint(paperOrientation, paperWidth, paperHeight, paperTopMargin, paperLeftMargin, paperBottomMargin, paperRightMargin, furniturePrinted, planPrinted, view3DPrinted, planScale, headerFormat, footerFormat) {
        if (this.paperOrientation === undefined) {
            this.paperOrientation = null;
        }
        if (this.paperWidth === undefined) {
            this.paperWidth = 0;
        }
        if (this.paperHeight === undefined) {
            this.paperHeight = 0;
        }
        if (this.paperTopMargin === undefined) {
            this.paperTopMargin = 0;
        }
        if (this.paperLeftMargin === undefined) {
            this.paperLeftMargin = 0;
        }
        if (this.paperBottomMargin === undefined) {
            this.paperBottomMargin = 0;
        }
        if (this.paperRightMargin === undefined) {
            this.paperRightMargin = 0;
        }
        if (this.furniturePrinted === undefined) {
            this.furniturePrinted = false;
        }
        if (this.planPrinted === undefined) {
            this.planPrinted = false;
        }
        if (this.view3DPrinted === undefined) {
            this.view3DPrinted = false;
        }
        if (this.planScale === undefined) {
            this.planScale = null;
        }
        if (this.headerFormat === undefined) {
            this.headerFormat = null;
        }
        if (this.footerFormat === undefined) {
            this.footerFormat = null;
        }
        this.paperOrientation = paperOrientation;
        this.paperWidth = paperWidth;
        this.paperHeight = paperHeight;
        this.paperTopMargin = paperTopMargin;
        this.paperLeftMargin = paperLeftMargin;
        this.paperBottomMargin = paperBottomMargin;
        this.paperRightMargin = paperRightMargin;
        this.furniturePrinted = furniturePrinted;
        this.planPrinted = planPrinted;
        this.view3DPrinted = view3DPrinted;
        this.planScale = planScale;
        this.headerFormat = headerFormat;
        this.footerFormat = footerFormat;
    }
    /**
     * Returns the paper orientation.
     * @return {HomePrint.PaperOrientation}
     */
    HomePrint.prototype.getPaperOrientation = function () {
        return this.paperOrientation;
    };
    /**
     * Returns the margin at paper bottom in 1/72nds of an inch.
     * @return {number}
     */
    HomePrint.prototype.getPaperBottomMargin = function () {
        return this.paperBottomMargin;
    };
    /**
     * Returns the paper height in 1/72nds of an inch.
     * @return {number}
     */
    HomePrint.prototype.getPaperHeight = function () {
        return this.paperHeight;
    };
    /**
     * Returns the margin at paper left in 1/72nds of an inch.
     * @return {number}
     */
    HomePrint.prototype.getPaperLeftMargin = function () {
        return this.paperLeftMargin;
    };
    /**
     * Returns the margin at paper right in 1/72nds of an inch.
     * @return {number}
     */
    HomePrint.prototype.getPaperRightMargin = function () {
        return this.paperRightMargin;
    };
    /**
     * Returns the margin at paper top in 1/72nds of an inch.
     * @return {number}
     */
    HomePrint.prototype.getPaperTopMargin = function () {
        return this.paperTopMargin;
    };
    /**
     * Returns the paper width in 1/72nds of an inch.
     * @return {number}
     */
    HomePrint.prototype.getPaperWidth = function () {
        return this.paperWidth;
    };
    /**
     * Returns whether home furniture should be printed or not.
     * @return {boolean}
     */
    HomePrint.prototype.isFurniturePrinted = function () {
        return this.furniturePrinted;
    };
    /**
     * Returns whether home plan should be printed or not.
     * @return {boolean}
     */
    HomePrint.prototype.isPlanPrinted = function () {
        return this.planPrinted;
    };
    /**
     * Returns whether home 3D view should be printed or not.
     * @return {boolean}
     */
    HomePrint.prototype.isView3DPrinted = function () {
        return this.view3DPrinted;
    };
    /**
     * Returns the scale used to print home plan or
     * <code>null</code> if no special scale is desired.
     * @return {number}
     */
    HomePrint.prototype.getPlanScale = function () {
        return this.planScale;
    };
    /**
     * Returns the string format used to print page headers.
     * @return {string}
     */
    HomePrint.prototype.getHeaderFormat = function () {
        return this.headerFormat;
    };
    /**
     * Returns the string format used to print page footers.
     * @return {string}
     */
    HomePrint.prototype.getFooterFormat = function () {
        return this.footerFormat;
    };
    return HomePrint;
}());
HomePrint["__class"] = "com.eteks.sweethome3d.model.HomePrint";
(function (HomePrint) {
    /**
     * Paper orientation.
     * @enum
     * @property {HomePrint.PaperOrientation} PORTRAIT
     * @property {HomePrint.PaperOrientation} LANDSCAPE
     * @property {HomePrint.PaperOrientation} REVERSE_LANDSCAPE
     * @class
     */
    var PaperOrientation;
    (function (PaperOrientation) {
        PaperOrientation[PaperOrientation["PORTRAIT"] = 0] = "PORTRAIT";
        PaperOrientation[PaperOrientation["LANDSCAPE"] = 1] = "LANDSCAPE";
        PaperOrientation[PaperOrientation["REVERSE_LANDSCAPE"] = 2] = "REVERSE_LANDSCAPE";
    })(PaperOrientation = HomePrint.PaperOrientation || (HomePrint.PaperOrientation = {}));
})(HomePrint || (HomePrint = {}));
/**
 * Creates a new light source.
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} color
 * @param {number} diameter
 * @class
 * @author Emmanuel Puybaret
 */
var LightSource = /** @class */ (function () {
    function LightSource(x, y, z, color, diameter) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof color === 'number') || color === null) && ((typeof diameter === 'number') || diameter === null)) {
            var __args = arguments;
            if (this.x === undefined) {
                this.x = 0;
            }
            if (this.y === undefined) {
                this.y = 0;
            }
            if (this.z === undefined) {
                this.z = 0;
            }
            if (this.color === undefined) {
                this.color = 0;
            }
            if (this.diameter === undefined) {
                this.diameter = null;
            }
            this.x = x;
            this.y = y;
            this.z = z;
            this.color = color;
            this.diameter = diameter;
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof color === 'number') || color === null) && diameter === undefined) {
            var __args = arguments;
            {
                var __args_4 = arguments;
                var diameter_1 = null;
                if (this.x === undefined) {
                    this.x = 0;
                }
                if (this.y === undefined) {
                    this.y = 0;
                }
                if (this.z === undefined) {
                    this.z = 0;
                }
                if (this.color === undefined) {
                    this.color = 0;
                }
                if (this.diameter === undefined) {
                    this.diameter = null;
                }
                this.x = x;
                this.y = y;
                this.z = z;
                this.color = color;
                this.diameter = diameter_1;
            }
            if (this.x === undefined) {
                this.x = 0;
            }
            if (this.y === undefined) {
                this.y = 0;
            }
            if (this.z === undefined) {
                this.z = 0;
            }
            if (this.color === undefined) {
                this.color = 0;
            }
            if (this.diameter === undefined) {
                this.diameter = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the abscissa of this source.
     * @return {number}
     */
    LightSource.prototype.getX = function () {
        return this.x;
    };
    /**
     * Returns the ordinate of this source.
     * @return {number}
     */
    LightSource.prototype.getY = function () {
        return this.y;
    };
    /**
     * Returns the elevation of this source.
     * @return {number}
     */
    LightSource.prototype.getZ = function () {
        return this.z;
    };
    /**
     * Returns the RGB color code of this source.
     * @return {number}
     */
    LightSource.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Returns the diameter of this source or <code>null</code> if it's not defined.
     * @return {number}
     */
    LightSource.prototype.getDiameter = function () {
        return this.diameter;
    };
    return LightSource;
}());
LightSource["__class"] = "com.eteks.sweethome3d.model.LightSource";
/**
 * Create a category.
 * @param {string} name the name of the category.
 * @class
 * @author Emmanuel Puybaret
 */
var TexturesCategory = /** @class */ (function () {
    function TexturesCategory(name) {
        if (this.name === undefined) {
            this.name = null;
        }
        if (this.textures === undefined) {
            this.textures = null;
        }
        this.name = name;
        this.textures = ([]);
    }
    TexturesCategory.COMPARATOR_$LI$ = function () { if (TexturesCategory.COMPARATOR == null) {
        TexturesCategory.COMPARATOR = /* getInstance */ { compare: function (o1, o2) { return o1.toString().localeCompare(o2.toString()); }, equals: function (o1, o2) { return o1.toString().localeCompare(o2.toString()) === 0; } };
    } return TexturesCategory.COMPARATOR; };
    /**
     * Returns the name of this category.
     * @return {string}
     */
    TexturesCategory.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the textures list of this category sorted by name.
     * @return {CatalogTexture[]} a list of furniture.
     */
    TexturesCategory.prototype.getTextures = function () {
        return /* unmodifiableList */ this.textures.slice(0);
    };
    /**
     * Returns the count of textures in this category.
     * @return {number}
     */
    TexturesCategory.prototype.getTexturesCount = function () {
        return /* size */ this.textures.length;
    };
    /**
     * Returns the texture at a given <code>index</code>.
     * @param {number} index
     * @return {CatalogTexture}
     */
    TexturesCategory.prototype.getTexture = function (index) {
        return /* get */ this.textures[index];
    };
    /**
     * Returns the index of the given <code>texture</code>.
     * @param {CatalogTexture} texture
     * @return {number}
     */
    TexturesCategory.prototype.getIndexOfTexture = function (texture) {
        return this.textures.indexOf(texture);
    };
    /**
     * Adds a texture to this category.
     * @param {CatalogTexture} texture the texture to add.
     * @private
     */
    TexturesCategory.prototype.add = function (texture) {
        texture.setCategory(this);
        var index = (function (l, key) { var comp = function (a, b) { if (a.compareTo)
            return a.compareTo(b);
        else
            return a.localeCompare(b); }; var low = 0; var high = l.length - 1; while (low <= high) {
            var mid = (low + high) >>> 1;
            var midVal = l[mid];
            var cmp = comp(midVal, key);
            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid;
        } return -(low + 1); })(this.textures, texture);
        if (index < 0) {
            index = -index - 1;
        }
        /* add */ this.textures.splice(index, 0, texture);
    };
    /**
     * Deletes a texture from this category.
     * @param {CatalogTexture} texture the texture to remove.
     * @throws IllegalArgumentException if the texture doesn't exist in this category.
     * @private
     */
    TexturesCategory.prototype["delete"] = function (texture) {
        var textureIndex = this.textures.indexOf(texture);
        if (textureIndex === -1) {
            throw new IllegalArgumentException(this.name + " doesn\'t contain texture " + texture.getName());
        }
        this.textures = (this.textures.slice(0));
        /* remove */ this.textures.splice(textureIndex, 1)[0];
    };
    /**
     * Returns true if this category and the one in parameter have the same name.
     * @param {Object} obj
     * @return {boolean}
     */
    TexturesCategory.prototype.equals = function (obj) {
        return (obj != null && obj instanceof TexturesCategory) && TexturesCategory.COMPARATOR_$LI$().equals(this.name, obj.name);
    };
    /**
     *
     * @return {number}
     */
    TexturesCategory.prototype.hashCode = function () {
        return /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this.name);
    };
    /**
     * Compares the names of this category and the one in parameter.
     * @param {TexturesCategory} category
     * @return {number}
     */
    TexturesCategory.prototype.compareTo = function (category) {
        return TexturesCategory.COMPARATOR_$LI$().compare(this.name, category.name);
    };
    return TexturesCategory;
}());
TexturesCategory["__class"] = "com.eteks.sweethome3d.model.TexturesCategory";
/**
 * Textures catalog.
 * @author Emmanuel Puybaret
 * @class
 */
var TexturesCatalog = /** @class */ (function () {
    function TexturesCatalog() {
        this.categories = ([]);
        this.texturesChangeSupport = (new CollectionChangeSupport(this));
    }
    /**
     * Returns the categories list sorted by name.
     * @return {TexturesCategory[]} a list of categories.
     */
    TexturesCatalog.prototype.getCategories = function () {
        return /* unmodifiableList */ this.categories.slice(0);
    };
    /**
     * Returns the count of categories in this catalog.
     * @return {number}
     */
    TexturesCatalog.prototype.getCategoriesCount = function () {
        return /* size */ this.categories.length;
    };
    /**
     * Returns the category at a given <code>index</code>.
     * @param {number} index
     * @return {TexturesCategory}
     */
    TexturesCatalog.prototype.getCategory = function (index) {
        return /* get */ this.categories[index];
    };
    /**
     * Adds the texture <code>listener</code> in parameter to this catalog.
     * @param {Object} listener
     */
    TexturesCatalog.prototype.addTexturesListener = function (listener) {
        this.texturesChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the texture <code>listener</code> in parameter from this catalog.
     * @param {Object} listener
     */
    TexturesCatalog.prototype.removeTexturesListener = function (listener) {
        this.texturesChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Adds <code>texture</code> of a given <code>category</code> to this catalog.
     * Once the <code>texture</code> is added, texture listeners added to this catalog will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged} notification.
     * @param {TexturesCategory} category the category of the texture.
     * @param {CatalogTexture} texture  a texture.
     */
    TexturesCatalog.prototype.add = function (category, texture) {
        var index = (function (l, key) { var comp = function (a, b) { if (a.compareTo)
            return a.compareTo(b);
        else
            return a.localeCompare(b); }; var low = 0; var high = l.length - 1; while (low <= high) {
            var mid = (low + high) >>> 1;
            var midVal = l[mid];
            var cmp = comp(midVal, key);
            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid;
        } return -(low + 1); })(this.categories, category);
        if (index < 0) {
            category = new TexturesCategory(category.getName());
            /* add */ this.categories.splice(-index - 1, 0, category);
        }
        else {
            category = /* get */ this.categories[index];
        }
        category.add(texture);
        this.texturesChangeSupport.fireCollectionChanged(texture, category.getIndexOfTexture(texture), CollectionEvent.Type.ADD);
    };
    /**
     * Deletes the <code>texture</code> from this catalog.
     * If then texture category is empty, it will be removed from the categories of this catalog.
     * Once the <code>texture</code> is deleted, texture listeners added to this catalog will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged} notification.
     * @param {CatalogTexture} texture a texture.
     */
    TexturesCatalog.prototype["delete"] = function (texture) {
        var category = texture.getCategory();
        if (category != null) {
            var textureIndex = category.getIndexOfTexture(texture);
            if (textureIndex >= 0) {
                category["delete"](texture);
                if (category.getTexturesCount() === 0) {
                    this.categories = (this.categories.slice(0));
                    /* remove */ (function (a) { var index = a.indexOf(category); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(this.categories);
                }
                this.texturesChangeSupport.fireCollectionChanged(texture, textureIndex, CollectionEvent.Type.DELETE);
                return;
            }
        }
        throw new IllegalArgumentException("catalog doesn\'t contain texture " + texture.getName());
    };
    return TexturesCatalog;
}());
TexturesCatalog["__class"] = "com.eteks.sweethome3d.model.TexturesCatalog";
var HomeRecorder;
(function (HomeRecorder) {
    /**
     * Recorder type used as a hint to select a home recorder.
     * @enum
     * @property {HomeRecorder.Type} DEFAULT
     * The default recorder type.
     * @property {HomeRecorder.Type} COMPRESSED
     * A recorder type able to compress home data.
     * @class
     */
    var Type;
    (function (Type) {
        /**
         * The default recorder type.
         */
        Type[Type["DEFAULT"] = 0] = "DEFAULT";
        /**
         * A recorder type able to compress home data.
         */
        Type[Type["COMPRESSED"] = 1] = "COMPRESSED";
    })(Type = HomeRecorder.Type || (HomeRecorder.Type = {}));
})(HomeRecorder || (HomeRecorder = {}));
/**
 * Application managing a list of homes displayed at screen.
 * @author Emmanuel Puybaret
 * @class
 */
var HomeApplication = /** @class */ (function () {
    function HomeApplication() {
        this.homes = ([]);
        this.homesChangeSupport = (new CollectionChangeSupport(this));
    }
    /**
     * Adds the home <code>listener</code> in parameter to this application.
     * @param {Object} listener
     */
    HomeApplication.prototype.addHomesListener = function (listener) {
        this.homesChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the home <code>listener</code> in parameter from this application.
     * @param {Object} listener
     */
    HomeApplication.prototype.removeHomesListener = function (listener) {
        this.homesChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a new home.
     * @return {Home} a new home with wall heights equal to the one in user preferences.
     */
    HomeApplication.prototype.createHome = function () {
        return new Home(this.getUserPreferences().getNewWallHeight());
    };
    /**
     * Returns a collection of the homes of this application.
     * @return {Home[]}
     */
    HomeApplication.prototype.getHomes = function () {
        return /* unmodifiableList */ this.homes.slice(0);
    };
    /**
     * Adds a given <code>home</code> to the homes list of this application.
     * Once the <code>home</code> is added, home listeners added
     * to this application will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {Home} home
     */
    HomeApplication.prototype.addHome = function (home) {
        this.homes = (this.homes.slice(0));
        /* add */ (this.homes.push(home) > 0);
        this.homesChangeSupport.fireCollectionChanged(home, /* size */ this.homes.length - 1, CollectionEvent.Type.ADD);
    };
    /**
     * Removes a given <code>home</code> from the homes list  of this application.
     * Once the <code>home</code> is removed, home listeners added
     * to this application will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * @param {Home} home
     */
    HomeApplication.prototype.deleteHome = function (home) {
        var index = this.homes.indexOf(home);
        if (index !== -1) {
            this.homes = (this.homes.slice(0));
            /* remove */ this.homes.splice(index, 1)[0];
            this.homesChangeSupport.fireCollectionChanged(home, index, CollectionEvent.Type.DELETE);
        }
    };
    HomeApplication.prototype.getHomeRecorder$ = function () { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };
    HomeApplication.prototype.getHomeRecorder$com_eteks_sweethome3d_model_HomeRecorder_Type = function (type) {
        return this.getHomeRecorder$();
    };
    /**
     * Returns a recorder of a given <code>type</code> able to write and read homes.
     * Subclasses may override this method to return a recorder matching <code>type</code>.
     * @param {HomeRecorder.Type} type  a hint for the application to choose the returned recorder.
     * @return {Object} the default recorder able to write and read homes.
     */
    HomeApplication.prototype.getHomeRecorder = function (type) {
        if (((typeof type === 'number') || type === null)) {
            return this.getHomeRecorder$com_eteks_sweethome3d_model_HomeRecorder_Type(type);
        }
        else if (type === undefined) {
            return this.getHomeRecorder$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the name of this application. Default implementation returns <i>Sweet Home 3D</i>.
     * @return {string}
     */
    HomeApplication.prototype.getName = function () {
        return "Sweet Home 3D";
    };
    /**
     * Returns information about the version of this application.
     * Default implementation returns an empty string.
     * @return {string}
     */
    HomeApplication.prototype.getVersion = function () {
        return "";
    };
    /**
     * Returns the id of this application.
     * Default implementation returns null.
     * @return {string}
     */
    HomeApplication.prototype.getId = function () {
        return null;
    };
    return HomeApplication;
}());
HomeApplication["__class"] = "com.eteks.sweethome3d.model.HomeApplication";
/**
 * Creates a patterns catalog.
 * @param {*[]} patterns
 * @class
 * @author Emmanuel Puybaret
 */
var PatternsCatalog = /** @class */ (function () {
    function PatternsCatalog(patterns) {
        if (this.patterns === undefined) {
            this.patterns = null;
        }
        this.patterns = (patterns.slice(0));
    }
    /**
     * Returns the patterns list.
     * @return {*[]} a list of furniture.
     */
    PatternsCatalog.prototype.getPatterns = function () {
        return /* unmodifiableList */ this.patterns.slice(0);
    };
    /**
     * Returns the count of patterns in this category.
     * @return {number}
     */
    PatternsCatalog.prototype.getPatternsCount = function () {
        return /* size */ this.patterns.length;
    };
    PatternsCatalog.prototype.getPattern$int = function (index) {
        return /* get */ this.patterns[index];
    };
    PatternsCatalog.prototype.getPattern$java_lang_String = function (name) {
        for (var index = 0; index < this.patterns.length; index++) {
            var pattern = this.patterns[index];
            {
                if (name === pattern.getName()) {
                    return pattern;
                }
            }
        }
        throw new IllegalArgumentException("No pattern with name " + name);
    };
    /**
     * Returns the pattern with a given <code>name</code>.
     * @throws IllegalArgumentException if no pattern with the given <code>name</code> exists
     * @param {string} name
     * @return {Object}
     */
    PatternsCatalog.prototype.getPattern = function (name) {
        if (((typeof name === 'string') || name === null)) {
            return this.getPattern$java_lang_String(name);
        }
        else if (((typeof name === 'number') || name === null)) {
            return this.getPattern$int(name);
        }
        else
            throw new Error('invalid overload');
    };
    return PatternsCatalog;
}());
PatternsCatalog["__class"] = "com.eteks.sweethome3d.model.PatternsCatalog";
/**
 * Creates a home descriptor.
 * @param {string} name name of the home
 * @param {Object} content content that allows to read home data
 * @param {Object} icon icon of the home
 * @class
 * @author Emmanuel Puybaret
 */
var HomeDescriptor = /** @class */ (function () {
    function HomeDescriptor(name, content, icon) {
        if (this.name === undefined) {
            this.name = null;
        }
        if (this.content === undefined) {
            this.content = null;
        }
        if (this.icon === undefined) {
            this.icon = null;
        }
        this.name = name;
        this.content = content;
        this.icon = icon;
    }
    /**
     * Returns the name of this home.
     * @return {string}
     */
    HomeDescriptor.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the content to read this home.
     * @return {Object}
     */
    HomeDescriptor.prototype.getContent = function () {
        return this.content;
    };
    /**
     * Returns the icon of this home.
     * @return {Object}
     */
    HomeDescriptor.prototype.getIcon = function () {
        return this.icon;
    };
    return HomeDescriptor;
}());
HomeDescriptor["__class"] = "com.eteks.sweethome3d.model.HomeDescriptor";
/**
 * Creates an event for an item with its index.
 * @param {Object} source the object to which an item was added or deleted
 * @param {Object} item   the added or deleted item
 * @param {number} index  the index at which the item was added or deleted, or -1 if unknown
 * @param {CollectionEvent.Type} type   <code>CollectionEvent.Type.ADD</code> or <code>CollectionEvent.Type.DELETE</code>
 * @class
 * @extends EventObject
 * @author Emmanuel Puybaret
 */
var CollectionEvent = /** @class */ (function (_super) {
    __extends(CollectionEvent, _super);
    function CollectionEvent(source, item, index, type) {
        var _this = this;
        if (((source != null) || source === null) && ((item != null) || item === null) && ((typeof index === 'number') || index === null) && ((typeof type === 'number') || type === null)) {
            var __args = arguments;
            _this = _super.call(this, source) || this;
            if (_this.item === undefined) {
                _this.item = null;
            }
            if (_this.index === undefined) {
                _this.index = 0;
            }
            if (_this.type === undefined) {
                _this.type = null;
            }
            _this.item = item;
            _this.index = index;
            _this.type = type;
        }
        else if (((source != null) || source === null) && ((item != null) || item === null) && ((typeof index === 'number') || index === null) && type === undefined) {
            var __args = arguments;
            var type_1 = __args[2];
            {
                var __args_5 = arguments;
                var index_1 = -1;
                _this = _super.call(this, source) || this;
                if (_this.item === undefined) {
                    _this.item = null;
                }
                if (_this.index === undefined) {
                    _this.index = 0;
                }
                if (_this.type === undefined) {
                    _this.type = null;
                }
                _this.item = item;
                _this.index = index_1;
                _this.type = type_1;
            }
            if (_this.item === undefined) {
                _this.item = null;
            }
            if (_this.index === undefined) {
                _this.index = 0;
            }
            if (_this.type === undefined) {
                _this.type = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the added or deleted item.
     * @return {Object}
     */
    CollectionEvent.prototype.getItem = function () {
        return this.item;
    };
    /**
     * Returns the index of the item in collection or -1 if this index is unknown.
     * @return {number}
     */
    CollectionEvent.prototype.getIndex = function () {
        return this.index;
    };
    /**
     * Returns the type of event.
     * @return {CollectionEvent.Type}
     */
    CollectionEvent.prototype.getType = function () {
        return this.type;
    };
    return CollectionEvent;
}(EventObject));
CollectionEvent["__class"] = "com.eteks.sweethome3d.model.CollectionEvent";
(function (CollectionEvent) {
    /**
     * The type of change in the collection.
     * @enum
     * @property {CollectionEvent.Type} ADD
     * @property {CollectionEvent.Type} DELETE
     * @class
     */
    var Type;
    (function (Type) {
        Type[Type["ADD"] = 0] = "ADD";
        Type[Type["DELETE"] = 1] = "DELETE";
    })(Type = CollectionEvent.Type || (CollectionEvent.Type = {}));
})(CollectionEvent || (CollectionEvent = {}));
CollectionEvent['__transients'] = ['source'];
/**
 * Creates an event with an associated list of selected items.
 * @param {Object} source
 * @param {? extends java.lang.Object[]} selectedItems
 * @class
 * @extends EventObject
 * @author Emmanuel Puybaret
 */
var SelectionEvent = /** @class */ (function (_super) {
    __extends(SelectionEvent, _super);
    function SelectionEvent(source, selectedItems) {
        var _this = _super.call(this, source) || this;
        if (_this.selectedItems === undefined) {
            _this.selectedItems = null;
        }
        _this.selectedItems = selectedItems;
        return _this;
    }
    /**
     * Returns the selected items.
     * @return {? extends java.lang.Object[]}
     */
    SelectionEvent.prototype.getSelectedItems = function () {
        return this.selectedItems;
    };
    return SelectionEvent;
}(EventObject));
SelectionEvent["__class"] = "com.eteks.sweethome3d.model.SelectionEvent";
SelectionEvent['__transients'] = ['source'];
/**
 * Creates a baseboard.
 * @param {number} thickness
 * @param {number} height
 * @param {number} color
 * @param {HomeTexture} texture
 * @class
 * @author Emmanuel Puybaret
 */
var Baseboard = /** @class */ (function () {
    function Baseboard(thickness, height, color, texture, cached) {
        if (((typeof thickness === 'number') || thickness === null) && ((typeof height === 'number') || height === null) && ((typeof color === 'number') || color === null) && ((texture != null && texture instanceof HomeTexture) || texture === null) && ((typeof cached === 'boolean') || cached === null)) {
            var __args = arguments;
            if (this.thickness === undefined) {
                this.thickness = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
            this.height = height;
            this.thickness = thickness;
            this.color = color;
            this.texture = texture;
            if (cached) {
                /* add */ (Baseboard.baseboardsCache_$LI$().push(this) > 0);
            }
        }
        else if (((typeof thickness === 'number') || thickness === null) && ((typeof height === 'number') || height === null) && ((typeof color === 'number') || color === null) && ((texture != null && texture instanceof HomeTexture) || texture === null) && cached === undefined) {
            var __args = arguments;
            {
                var __args_6 = arguments;
                var thickness_1 = __args_6[1];
                var height_1 = __args_6[0];
                var cached_1 = true;
                if (this.thickness === undefined) {
                    this.thickness = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.texture === undefined) {
                    this.texture = null;
                }
                this.height = height_1;
                this.thickness = thickness_1;
                this.color = color;
                this.texture = texture;
                if (cached_1) {
                    /* add */ (Baseboard.baseboardsCache_$LI$().push(this) > 0);
                }
            }
            if (this.thickness === undefined) {
                this.thickness = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    Baseboard.baseboardsCache_$LI$ = function () { if (Baseboard.baseboardsCache == null) {
        Baseboard.baseboardsCache = ([]);
    } return Baseboard.baseboardsCache; };
    /**
     * Returns an instance of this class matching the given parameters.
     * @param {number} thickness
     * @param {number} height
     * @param {number} color
     * @param {HomeTexture} texture
     * @return {Baseboard}
     */
    Baseboard.getInstance = function (thickness, height, color, texture) {
        var baseboard = new Baseboard(thickness, height, color, texture, false);
        for (var i = Baseboard.baseboardsCache_$LI$().length - 1; i >= 0; i--) {
            {
                var cachedBaseboard = Baseboard.baseboardsCache_$LI$()[i];
                if (cachedBaseboard == null) {
                    /* remove */ Baseboard.baseboardsCache_$LI$().splice(i, 1)[0];
                }
                else if (cachedBaseboard.equals(baseboard)) {
                    return baseboard;
                }
            }
            ;
        }
        /* add */ (Baseboard.baseboardsCache_$LI$().push(baseboard) > 0);
        return baseboard;
    };
    /**
     * Returns the thickness of this baseboard.
     * @return {number}
     */
    Baseboard.prototype.getThickness = function () {
        return this.thickness;
    };
    /**
     * Returns the height of this baseboard.
     * @return {number}
     */
    Baseboard.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Returns the color of this baseboard.
     * @return {number}
     */
    Baseboard.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Returns the texture of this baseboard.
     * @return {HomeTexture}
     */
    Baseboard.prototype.getTexture = function () {
        return this.texture;
    };
    /**
     * Returns <code>true</code> if this baseboard is equal to <code>object</code>.
     * @param {Object} object
     * @return {boolean}
     */
    Baseboard.prototype.equals = function (object) {
        if (object != null && object instanceof Baseboard) {
            var baseboard = object;
            return baseboard.thickness === this.thickness && baseboard.height === this.height && (baseboard.color === this.color || baseboard.color != null && (baseboard.color === this.color)) && (baseboard.texture === this.texture || baseboard.texture != null && baseboard.texture.equals(this.texture));
        }
        return false;
    };
    /**
     * Returns a hash code for this baseboard.
     * @return {number}
     */
    Baseboard.prototype.hashCode = function () {
        var hashCode = (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.thickness) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.height);
        if (this.color != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.color);
        }
        if (this.texture != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.texture);
        }
        return hashCode;
    };
    return Baseboard;
}());
Baseboard["__class"] = "com.eteks.sweethome3d.model.Baseboard";
var PieceOfFurniture;
(function (PieceOfFurniture) {
    /**
     * The default cut out shape that covers a 1 unit wide square.
     */
    PieceOfFurniture.DEFAULT_CUT_OUT_SHAPE = "M0,0 v1 h1 v-1 z";
    function IDENTITY_ROTATION_$LI$() { if (PieceOfFurniture.IDENTITY_ROTATION == null) {
        PieceOfFurniture.IDENTITY_ROTATION = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
    } return PieceOfFurniture.IDENTITY_ROTATION; }
    PieceOfFurniture.IDENTITY_ROTATION_$LI$ = IDENTITY_ROTATION_$LI$;
    ;
})(PieceOfFurniture || (PieceOfFurniture = {}));
/**
 * Creates a background image.
 * @param {Object} image
 * @param {number} scaleDistance
 * @param {number} scaleDistanceXStart
 * @param {number} scaleDistanceYStart
 * @param {number} scaleDistanceXEnd
 * @param {number} scaleDistanceYEnd
 * @param {number} xOrigin
 * @param {number} yOrigin
 * @param {boolean} visible
 * @class
 * @author Emmanuel Puybaret
 */
var BackgroundImage = /** @class */ (function () {
    function BackgroundImage(image, scaleDistance, scaleDistanceXStart, scaleDistanceYStart, scaleDistanceXEnd, scaleDistanceYEnd, xOrigin, yOrigin, visible) {
        if (((image != null && (image.constructor != null && image.constructor["__interfaces"] != null && image.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || image === null) && ((typeof scaleDistance === 'number') || scaleDistance === null) && ((typeof scaleDistanceXStart === 'number') || scaleDistanceXStart === null) && ((typeof scaleDistanceYStart === 'number') || scaleDistanceYStart === null) && ((typeof scaleDistanceXEnd === 'number') || scaleDistanceXEnd === null) && ((typeof scaleDistanceYEnd === 'number') || scaleDistanceYEnd === null) && ((typeof xOrigin === 'number') || xOrigin === null) && ((typeof yOrigin === 'number') || yOrigin === null) && ((typeof visible === 'boolean') || visible === null)) {
            var __args = arguments;
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.scaleDistance === undefined) {
                this.scaleDistance = 0;
            }
            if (this.scaleDistanceXStart === undefined) {
                this.scaleDistanceXStart = 0;
            }
            if (this.scaleDistanceYStart === undefined) {
                this.scaleDistanceYStart = 0;
            }
            if (this.scaleDistanceXEnd === undefined) {
                this.scaleDistanceXEnd = 0;
            }
            if (this.scaleDistanceYEnd === undefined) {
                this.scaleDistanceYEnd = 0;
            }
            if (this.xOrigin === undefined) {
                this.xOrigin = 0;
            }
            if (this.yOrigin === undefined) {
                this.yOrigin = 0;
            }
            if (this.invisible === undefined) {
                this.invisible = false;
            }
            this.image = image;
            this.scaleDistance = scaleDistance;
            this.scaleDistanceXStart = scaleDistanceXStart;
            this.scaleDistanceYStart = scaleDistanceYStart;
            this.scaleDistanceXEnd = scaleDistanceXEnd;
            this.scaleDistanceYEnd = scaleDistanceYEnd;
            this.xOrigin = xOrigin;
            this.yOrigin = yOrigin;
            this.invisible = !visible;
        }
        else if (((image != null && (image.constructor != null && image.constructor["__interfaces"] != null && image.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || image === null) && ((typeof scaleDistance === 'number') || scaleDistance === null) && ((typeof scaleDistanceXStart === 'number') || scaleDistanceXStart === null) && ((typeof scaleDistanceYStart === 'number') || scaleDistanceYStart === null) && ((typeof scaleDistanceXEnd === 'number') || scaleDistanceXEnd === null) && ((typeof scaleDistanceYEnd === 'number') || scaleDistanceYEnd === null) && ((typeof xOrigin === 'number') || xOrigin === null) && ((typeof yOrigin === 'number') || yOrigin === null) && visible === undefined) {
            var __args = arguments;
            {
                var __args_7 = arguments;
                var visible_1 = true;
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.scaleDistance === undefined) {
                    this.scaleDistance = 0;
                }
                if (this.scaleDistanceXStart === undefined) {
                    this.scaleDistanceXStart = 0;
                }
                if (this.scaleDistanceYStart === undefined) {
                    this.scaleDistanceYStart = 0;
                }
                if (this.scaleDistanceXEnd === undefined) {
                    this.scaleDistanceXEnd = 0;
                }
                if (this.scaleDistanceYEnd === undefined) {
                    this.scaleDistanceYEnd = 0;
                }
                if (this.xOrigin === undefined) {
                    this.xOrigin = 0;
                }
                if (this.yOrigin === undefined) {
                    this.yOrigin = 0;
                }
                if (this.invisible === undefined) {
                    this.invisible = false;
                }
                this.image = image;
                this.scaleDistance = scaleDistance;
                this.scaleDistanceXStart = scaleDistanceXStart;
                this.scaleDistanceYStart = scaleDistanceYStart;
                this.scaleDistanceXEnd = scaleDistanceXEnd;
                this.scaleDistanceYEnd = scaleDistanceYEnd;
                this.xOrigin = xOrigin;
                this.yOrigin = yOrigin;
                this.invisible = !visible_1;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.scaleDistance === undefined) {
                this.scaleDistance = 0;
            }
            if (this.scaleDistanceXStart === undefined) {
                this.scaleDistanceXStart = 0;
            }
            if (this.scaleDistanceYStart === undefined) {
                this.scaleDistanceYStart = 0;
            }
            if (this.scaleDistanceXEnd === undefined) {
                this.scaleDistanceXEnd = 0;
            }
            if (this.scaleDistanceYEnd === undefined) {
                this.scaleDistanceYEnd = 0;
            }
            if (this.xOrigin === undefined) {
                this.xOrigin = 0;
            }
            if (this.yOrigin === undefined) {
                this.yOrigin = 0;
            }
            if (this.invisible === undefined) {
                this.invisible = false;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the image content of this background image.
     * @return {Object}
     */
    BackgroundImage.prototype.getImage = function () {
        return this.image;
    };
    /**
     * Returns the distance used to compute the scale of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getScaleDistance = function () {
        return this.scaleDistance;
    };
    /**
     * Returns the abscissa of the start point used to compute
     * the scale of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getScaleDistanceXStart = function () {
        return this.scaleDistanceXStart;
    };
    /**
     * Returns the ordinate of the start point used to compute
     * the scale of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getScaleDistanceYStart = function () {
        return this.scaleDistanceYStart;
    };
    /**
     * Returns the abscissa of the end point used to compute
     * the scale of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getScaleDistanceXEnd = function () {
        return this.scaleDistanceXEnd;
    };
    /**
     * Returns the ordinate of the end point used to compute
     * the scale of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getScaleDistanceYEnd = function () {
        return this.scaleDistanceYEnd;
    };
    /**
     * Returns the scale of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getScale = function () {
        return BackgroundImage.getScale(this.scaleDistance, this.scaleDistanceXStart, this.scaleDistanceYStart, this.scaleDistanceXEnd, this.scaleDistanceYEnd);
    };
    /**
     * Returns the scale equal to <code>scaleDistance</code> divided
     * by the distance between the points
     * (<code>scaleDistanceXStart</code>, <code>scaleDistanceYStart</code>)
     * and (<code>scaleDistanceXEnd</code>, <code>scaleDistanceYEnd</code>).
     * @param {number} scaleDistance
     * @param {number} scaleDistanceXStart
     * @param {number} scaleDistanceYStart
     * @param {number} scaleDistanceXEnd
     * @param {number} scaleDistanceYEnd
     * @return {number}
     */
    BackgroundImage.getScale = function (scaleDistance, scaleDistanceXStart, scaleDistanceYStart, scaleDistanceXEnd, scaleDistanceYEnd) {
        return (scaleDistance / java.awt.geom.Point2D.distance(scaleDistanceXStart, scaleDistanceYStart, scaleDistanceXEnd, scaleDistanceYEnd));
    };
    /**
     * Returns the origin abscissa of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getXOrigin = function () {
        return this.xOrigin;
    };
    /**
     * Returns the origin ordinate of this image.
     * @return {number}
     */
    BackgroundImage.prototype.getYOrigin = function () {
        return this.yOrigin;
    };
    /**
     * Returns <code>true</code> if this image is visible in plan.
     * @return {boolean}
     */
    BackgroundImage.prototype.isVisible = function () {
        return !this.invisible;
    };
    return BackgroundImage;
}());
BackgroundImage["__class"] = "com.eteks.sweethome3d.model.BackgroundImage";
/**
 * Create a category.
 * @param {string} name the name of the category.
 * @class
 * @author Emmanuel Puybaret
 */
var FurnitureCategory = /** @class */ (function () {
    function FurnitureCategory(name) {
        if (this.name === undefined) {
            this.name = null;
        }
        if (this.furniture === undefined) {
            this.furniture = null;
        }
        this.name = name;
        this.furniture = ([]);
    }
    FurnitureCategory.COMPARATOR_$LI$ = function () { if (FurnitureCategory.COMPARATOR == null) {
        FurnitureCategory.COMPARATOR = /* getInstance */ { compare: function (o1, o2) { return o1.toString().localeCompare(o2.toString()); }, equals: function (o1, o2) { return o1.toString().localeCompare(o2.toString()) === 0; } };
    } return FurnitureCategory.COMPARATOR; };
    /**
     * Returns the name of this category.
     * @return {string}
     */
    FurnitureCategory.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the furniture list of this category sorted by name.
     * @return {CatalogPieceOfFurniture[]} a list of furniture.
     */
    FurnitureCategory.prototype.getFurniture = function () {
        return /* unmodifiableList */ this.furniture.slice(0);
    };
    /**
     * Returns the count of furniture in this category.
     * @return {number}
     */
    FurnitureCategory.prototype.getFurnitureCount = function () {
        return /* size */ this.furniture.length;
    };
    /**
     * Returns the piece of furniture at a given <code>index</code>.
     * @param {number} index
     * @return {CatalogPieceOfFurniture}
     */
    FurnitureCategory.prototype.getPieceOfFurniture = function (index) {
        return /* get */ this.furniture[index];
    };
    /**
     * Returns the index of the given <code>piece</code> of furniture.
     * @param {CatalogPieceOfFurniture} piece
     * @return {number}
     */
    FurnitureCategory.prototype.getIndexOfPieceOfFurniture = function (piece) {
        return this.furniture.indexOf(piece);
    };
    /**
     * Adds a piece of furniture to this category.
     * @param {CatalogPieceOfFurniture} piece the piece to add.
     * @private
     */
    FurnitureCategory.prototype.add = function (piece) {
        piece.setCategory(this);
        var index = (function (l, key) { var comp = function (a, b) { if (a.compareTo)
            return a.compareTo(b);
        else
            return a.localeCompare(b); }; var low = 0; var high = l.length - 1; while (low <= high) {
            var mid = (low + high) >>> 1;
            var midVal = l[mid];
            var cmp = comp(midVal, key);
            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid;
        } return -(low + 1); })(this.furniture, piece);
        if (index < 0) {
            index = -index - 1;
        }
        /* add */ this.furniture.splice(index, 0, piece);
    };
    /**
     * Deletes a piece of furniture from this category.
     * @param {CatalogPieceOfFurniture} piece the piece to remove.
     * @throws IllegalArgumentException if the piece doesn't exist in this category.
     * @private
     */
    FurnitureCategory.prototype["delete"] = function (piece) {
        var pieceIndex = this.furniture.indexOf(piece);
        if (pieceIndex === -1) {
            throw new IllegalArgumentException(this.name + " doesn\'t contain piece " + piece.getName());
        }
        this.furniture = (this.furniture.slice(0));
        /* remove */ this.furniture.splice(pieceIndex, 1)[0];
    };
    /**
     * Returns <code>true</code> if this category and the one in parameter have the same name.
     * @param {Object} obj
     * @return {boolean}
     */
    FurnitureCategory.prototype.equals = function (obj) {
        return (obj != null && obj instanceof FurnitureCategory) && FurnitureCategory.COMPARATOR_$LI$().equals(this.name, obj.name);
    };
    /**
     *
     * @return {number}
     */
    FurnitureCategory.prototype.hashCode = function () {
        return /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this.name);
    };
    /**
     * Compares the names of this category and the one in parameter.
     * @param {FurnitureCategory} category
     * @return {number}
     */
    FurnitureCategory.prototype.compareTo = function (category) {
        return FurnitureCategory.COMPARATOR_$LI$().compare(this.name, category.name);
    };
    return FurnitureCategory;
}());
FurnitureCategory["__class"] = "com.eteks.sweethome3d.model.FurnitureCategory";
/**
 * Creates a <code>IllegalHomonymException</code> with its message.
 * @param {string} s
 * @class
 * @extends Error
 * @author Emmanuel Puybaret
 * @ignore
 */
var IllegalHomonymException = /** @class */ (function () {
    function IllegalHomonymException(s) {
        if (((typeof s === 'string') || s === null)) {
            var __args = arguments;
        }
        else if (s === undefined) {
            var __args = arguments;
        }
        else
            throw new Error('invalid overload');
    }
    return IllegalHomonymException;
}());
IllegalHomonymException["__class"] = "com.eteks.sweethome3d.model.IllegalHomonymException";
/**
 * Creates a window sash.
 * @param {number} xAxis
 * @param {number} yAxis
 * @param {number} width
 * @param {number} startAngle
 * @param {number} endAngle
 * @class
 * @author Emmanuel Puybaret
 */
var Sash = /** @class */ (function () {
    function Sash(xAxis, yAxis, width, startAngle, endAngle) {
        if (this.xAxis === undefined) {
            this.xAxis = 0;
        }
        if (this.yAxis === undefined) {
            this.yAxis = 0;
        }
        if (this.width === undefined) {
            this.width = 0;
        }
        if (this.startAngle === undefined) {
            this.startAngle = 0;
        }
        if (this.endAngle === undefined) {
            this.endAngle = 0;
        }
        this.xAxis = xAxis;
        this.yAxis = yAxis;
        this.width = width;
        this.startAngle = startAngle;
        this.endAngle = endAngle;
    }
    /**
     * Returns the abscissa of the axis around which this sash turns, relatively to
     * the top left corner of the window or the door.
     * @return {number} a value in percentage of the width of the door or the window.
     */
    Sash.prototype.getXAxis = function () {
        return this.xAxis;
    };
    /**
     * Returns the ordinate of the axis around which this sash turns, relatively to
     * the top left corner of the window or the door.
     * @return {number} a value in percentage of the depth of the door or the window.
     */
    Sash.prototype.getYAxis = function () {
        return this.yAxis;
    };
    /**
     * Returns the width of this sash.
     * @return {number} a value in percentage of the width of the door or the window.
     */
    Sash.prototype.getWidth = function () {
        return this.width;
    };
    /**
     * Returns the opening start angle of this sash.
     * @return {number} an angle in radians.
     */
    Sash.prototype.getStartAngle = function () {
        return this.startAngle;
    };
    /**
     * Returns the opening end angle of this sash.
     * @return {number} an angle in radians.
     */
    Sash.prototype.getEndAngle = function () {
        return this.endAngle;
    };
    return Sash;
}());
Sash["__class"] = "com.eteks.sweethome3d.model.Sash";
/**
 * Creates a material instance from parameters.
 * @param {string} name
 * @param {string} key
 * @param {number} color
 * @param {HomeTexture} texture
 * @param {number} shininess
 * @class
 * @author Emmanuel Puybaret
 */
var HomeMaterial = /** @class */ (function () {
    function HomeMaterial(name, key, color, texture, shininess) {
        if (((typeof name === 'string') || name === null) && ((typeof key === 'string') || key === null) && ((typeof color === 'number') || color === null) && ((texture != null && texture instanceof HomeTexture) || texture === null) && ((typeof shininess === 'number') || shininess === null)) {
            var __args = arguments;
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.key === undefined) {
                this.key = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
            if (this.shininess === undefined) {
                this.shininess = null;
            }
            this.name = name;
            this.key = key;
            this.color = color;
            this.texture = texture;
            this.shininess = shininess;
        }
        else if (((typeof name === 'string') || name === null) && ((typeof key === 'number') || key === null) && ((color != null && color instanceof HomeTexture) || color === null) && ((typeof texture === 'number') || texture === null) && shininess === undefined) {
            var __args = arguments;
            var color_1 = __args[1];
            var texture_1 = __args[2];
            var shininess_1 = __args[3];
            {
                var __args_8 = arguments;
                var key_1 = null;
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.key === undefined) {
                    this.key = null;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.texture === undefined) {
                    this.texture = null;
                }
                if (this.shininess === undefined) {
                    this.shininess = null;
                }
                this.name = name;
                this.key = key_1;
                this.color = color_1;
                this.texture = texture_1;
                this.shininess = shininess_1;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.key === undefined) {
                this.key = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
            if (this.shininess === undefined) {
                this.shininess = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the name of this material.
     * @return {string} the name of the material or <code>null</code> if material has no name.
     */
    HomeMaterial.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the key of this material. If not <code>null</code>, this key should be used
     * as the unique identifier to find this material among the ones available on a model,
     * rather than the name of this material.
     * @return {string} the key of the material or <code>null</code> if material has no key.
     */
    HomeMaterial.prototype.getKey = function () {
        return this.key;
    };
    /**
     * Returns the color of this material.
     * @return {number} the color of the material as RGB code or <code>null</code> if material color is unchanged.
     */
    HomeMaterial.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Returns the texture of this material.
     * @return {HomeTexture} the texture of the material or <code>null</code> if material texture is unchanged.
     */
    HomeMaterial.prototype.getTexture = function () {
        return this.texture;
    };
    /**
     * Returns the shininess of this material.
     * @return {number} a value between 0 (matt) and 1 (very shiny) or <code>null</code> if material shininess is unchanged.
     */
    HomeMaterial.prototype.getShininess = function () {
        return this.shininess;
    };
    /**
     * Returns <code>true</code> if this material is equal to <code>object</code>.
     * @param {Object} object
     * @return {boolean}
     */
    HomeMaterial.prototype.equals = function (object) {
        if (object != null && object instanceof HomeMaterial) {
            var material = object;
            return (material.name === this.name || (material.name != null && (material.name === this.name))) && (material.key === this.key || (material.key != null && (material.key === this.name))) && (material.color === this.color || (material.color != null && (material.color === this.color))) && (material.texture === this.texture || (material.texture != null && material.texture.equals(this.texture))) && (material.shininess === this.shininess || (material.shininess != null && (material.shininess === this.shininess)));
        }
        return false;
    };
    /**
     * Returns a hash code for this material.
     * @return {number}
     */
    HomeMaterial.prototype.hashCode = function () {
        var hashCode = 0;
        if (this.name != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.name);
        }
        if (this.key != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.key);
        }
        if (this.color != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.color);
        }
        if (this.texture != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.texture);
        }
        if (this.shininess != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.shininess);
        }
        return hashCode;
    };
    return HomeMaterial;
}());
HomeMaterial["__class"] = "com.eteks.sweethome3d.model.HomeMaterial";
/**
 * Furniture catalog.
 * @author Emmanuel Puybaret
 * @class
 */
var FurnitureCatalog = /** @class */ (function () {
    function FurnitureCatalog() {
        this.categories = ([]);
        this.furnitureChangeSupport = (new CollectionChangeSupport(this));
    }
    /**
     * Returns the categories list sorted by name.
     * @return {FurnitureCategory[]} a list of categories.
     */
    FurnitureCatalog.prototype.getCategories = function () {
        return /* unmodifiableList */ this.categories.slice(0);
    };
    /**
     * Returns the count of categories in this catalog.
     * @return {number}
     */
    FurnitureCatalog.prototype.getCategoriesCount = function () {
        return /* size */ this.categories.length;
    };
    /**
     * Returns the category at a given <code>index</code>.
     * @param {number} index
     * @return {FurnitureCategory}
     */
    FurnitureCatalog.prototype.getCategory = function (index) {
        return /* get */ this.categories[index];
    };
    /**
     * Adds the furniture <code>listener</code> in parameter to this catalog.
     * @param {Object} listener
     */
    FurnitureCatalog.prototype.addFurnitureListener = function (listener) {
        this.furnitureChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the furniture <code>listener</code> in parameter from this catalog.
     * @param {Object} listener
     */
    FurnitureCatalog.prototype.removeFurnitureListener = function (listener) {
        this.furnitureChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Adds <code>piece</code> of a given <code>category</code> to this catalog.
     * Once the <code>piece</code> is added, furniture listeners added to this catalog will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification.
     * @param {FurnitureCategory} category the category of the piece.
     * @param {CatalogPieceOfFurniture} piece    a piece of furniture.
     */
    FurnitureCatalog.prototype.add = function (category, piece) {
        var index = (function (l, key) { var comp = function (a, b) { if (a.compareTo)
            return a.compareTo(b);
        else
            return a.localeCompare(b); }; var low = 0; var high = l.length - 1; while (low <= high) {
            var mid = (low + high) >>> 1;
            var midVal = l[mid];
            var cmp = comp(midVal, key);
            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid;
        } return -(low + 1); })(this.categories, category);
        if (index < 0) {
            category = new FurnitureCategory(category.getName());
            /* add */ this.categories.splice(-index - 1, 0, category);
        }
        else {
            category = /* get */ this.categories[index];
        }
        category.add(piece);
        this.furnitureChangeSupport.fireCollectionChanged(piece, category.getIndexOfPieceOfFurniture(piece), CollectionEvent.Type.ADD);
    };
    /**
     * Deletes the <code>piece</code> from this catalog.
     * If then piece category is empty, it will be removed from the categories of this catalog.
     * Once the <code>piece</code> is deleted, furniture listeners added to this catalog will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification.
     * @param {CatalogPieceOfFurniture} piece a piece of furniture in that category.
     */
    FurnitureCatalog.prototype["delete"] = function (piece) {
        var category = piece.getCategory();
        if (category != null) {
            var pieceIndex = category.getIndexOfPieceOfFurniture(piece);
            if (pieceIndex >= 0) {
                category["delete"](piece);
                if (category.getFurnitureCount() === 0) {
                    this.categories = (this.categories.slice(0));
                    /* remove */ (function (a) { var index = a.indexOf(category); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(this.categories);
                }
                this.furnitureChangeSupport.fireCollectionChanged(piece, pieceIndex, CollectionEvent.Type.DELETE);
                return;
            }
        }
        throw new IllegalArgumentException("catalog doesn\'t contain piece " + piece.getName());
    };
    return FurnitureCatalog;
}());
FurnitureCatalog["__class"] = "com.eteks.sweethome3d.model.FurnitureCatalog";
/**
 * Creates a text style from its font's name, its size, style and alignment.
 * @param {string} fontName
 * @param {number} fontSize
 * @param {boolean} bold
 * @param {boolean} italic
 * @param {TextStyle.Alignment} alignment
 * @class
 * @author Emmanuel Puybaret
 */
var TextStyle = /** @class */ (function () {
    function TextStyle(fontName, fontSize, bold, italic, alignment, cached) {
        if (((typeof fontName === 'string') || fontName === null) && ((typeof fontSize === 'number') || fontSize === null) && ((typeof bold === 'boolean') || bold === null) && ((typeof italic === 'boolean') || italic === null) && ((typeof alignment === 'number') || alignment === null) && ((typeof cached === 'boolean') || cached === null)) {
            var __args = arguments;
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontSize === undefined) {
                this.fontSize = 0;
            }
            if (this.bold === undefined) {
                this.bold = false;
            }
            if (this.italic === undefined) {
                this.italic = false;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
            this.fontName = fontName;
            this.fontSize = fontSize;
            this.bold = bold;
            this.italic = italic;
            this.alignment = alignment;
            if (cached) {
                /* add */ (TextStyle.textStylesCache_$LI$().push(this) > 0);
            }
        }
        else if (((typeof fontName === 'string') || fontName === null) && ((typeof fontSize === 'number') || fontSize === null) && ((typeof bold === 'boolean') || bold === null) && ((typeof italic === 'boolean') || italic === null) && ((typeof alignment === 'number') || alignment === null) && cached === undefined) {
            var __args = arguments;
            {
                var __args_9 = arguments;
                var cached_2 = true;
                if (this.fontName === undefined) {
                    this.fontName = null;
                }
                if (this.fontSize === undefined) {
                    this.fontSize = 0;
                }
                if (this.bold === undefined) {
                    this.bold = false;
                }
                if (this.italic === undefined) {
                    this.italic = false;
                }
                if (this.alignment === undefined) {
                    this.alignment = null;
                }
                this.fontName = fontName;
                this.fontSize = fontSize;
                this.bold = bold;
                this.italic = italic;
                this.alignment = alignment;
                if (cached_2) {
                    /* add */ (TextStyle.textStylesCache_$LI$().push(this) > 0);
                }
            }
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontSize === undefined) {
                this.fontSize = 0;
            }
            if (this.bold === undefined) {
                this.bold = false;
            }
            if (this.italic === undefined) {
                this.italic = false;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
        }
        else if (((typeof fontName === 'string') || fontName === null) && ((typeof fontSize === 'number') || fontSize === null) && ((typeof bold === 'boolean') || bold === null) && ((typeof italic === 'boolean') || italic === null) && alignment === undefined && cached === undefined) {
            var __args = arguments;
            {
                var __args_10 = arguments;
                var alignment_1 = TextStyle.Alignment.CENTER;
                {
                    var __args_11 = arguments;
                    var cached_3 = true;
                    if (this.fontName === undefined) {
                        this.fontName = null;
                    }
                    if (this.fontSize === undefined) {
                        this.fontSize = 0;
                    }
                    if (this.bold === undefined) {
                        this.bold = false;
                    }
                    if (this.italic === undefined) {
                        this.italic = false;
                    }
                    if (this.alignment === undefined) {
                        this.alignment = null;
                    }
                    this.fontName = fontName;
                    this.fontSize = fontSize;
                    this.bold = bold;
                    this.italic = italic;
                    this.alignment = alignment_1;
                    if (cached_3) {
                        /* add */ (TextStyle.textStylesCache_$LI$().push(this) > 0);
                    }
                }
                if (this.fontName === undefined) {
                    this.fontName = null;
                }
                if (this.fontSize === undefined) {
                    this.fontSize = 0;
                }
                if (this.bold === undefined) {
                    this.bold = false;
                }
                if (this.italic === undefined) {
                    this.italic = false;
                }
                if (this.alignment === undefined) {
                    this.alignment = null;
                }
            }
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontSize === undefined) {
                this.fontSize = 0;
            }
            if (this.bold === undefined) {
                this.bold = false;
            }
            if (this.italic === undefined) {
                this.italic = false;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
        }
        else if (((typeof fontName === 'number') || fontName === null) && ((typeof fontSize === 'boolean') || fontSize === null) && ((typeof bold === 'boolean') || bold === null) && italic === undefined && alignment === undefined && cached === undefined) {
            var __args = arguments;
            var fontSize_1 = __args[0];
            var bold_1 = __args[1];
            var italic_1 = __args[2];
            {
                var __args_12 = arguments;
                var fontName_1 = null;
                {
                    var __args_13 = arguments;
                    var alignment_2 = TextStyle.Alignment.CENTER;
                    {
                        var __args_14 = arguments;
                        var cached_4 = true;
                        if (this.fontName === undefined) {
                            this.fontName = null;
                        }
                        if (this.fontSize === undefined) {
                            this.fontSize = 0;
                        }
                        if (this.bold === undefined) {
                            this.bold = false;
                        }
                        if (this.italic === undefined) {
                            this.italic = false;
                        }
                        if (this.alignment === undefined) {
                            this.alignment = null;
                        }
                        this.fontName = fontName_1;
                        this.fontSize = fontSize_1;
                        this.bold = bold_1;
                        this.italic = italic_1;
                        this.alignment = alignment_2;
                        if (cached_4) {
                            /* add */ (TextStyle.textStylesCache_$LI$().push(this) > 0);
                        }
                    }
                    if (this.fontName === undefined) {
                        this.fontName = null;
                    }
                    if (this.fontSize === undefined) {
                        this.fontSize = 0;
                    }
                    if (this.bold === undefined) {
                        this.bold = false;
                    }
                    if (this.italic === undefined) {
                        this.italic = false;
                    }
                    if (this.alignment === undefined) {
                        this.alignment = null;
                    }
                }
                if (this.fontName === undefined) {
                    this.fontName = null;
                }
                if (this.fontSize === undefined) {
                    this.fontSize = 0;
                }
                if (this.bold === undefined) {
                    this.bold = false;
                }
                if (this.italic === undefined) {
                    this.italic = false;
                }
                if (this.alignment === undefined) {
                    this.alignment = null;
                }
            }
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontSize === undefined) {
                this.fontSize = 0;
            }
            if (this.bold === undefined) {
                this.bold = false;
            }
            if (this.italic === undefined) {
                this.italic = false;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
        }
        else if (((typeof fontName === 'number') || fontName === null) && fontSize === undefined && bold === undefined && italic === undefined && alignment === undefined && cached === undefined) {
            var __args = arguments;
            var fontSize_2 = __args[0];
            {
                var __args_15 = arguments;
                var bold_2 = false;
                var italic_2 = false;
                {
                    var __args_16 = arguments;
                    var fontName_2 = null;
                    {
                        var __args_17 = arguments;
                        var alignment_3 = TextStyle.Alignment.CENTER;
                        {
                            var __args_18 = arguments;
                            var cached_5 = true;
                            if (this.fontName === undefined) {
                                this.fontName = null;
                            }
                            if (this.fontSize === undefined) {
                                this.fontSize = 0;
                            }
                            if (this.bold === undefined) {
                                this.bold = false;
                            }
                            if (this.italic === undefined) {
                                this.italic = false;
                            }
                            if (this.alignment === undefined) {
                                this.alignment = null;
                            }
                            this.fontName = fontName_2;
                            this.fontSize = fontSize_2;
                            this.bold = bold_2;
                            this.italic = italic_2;
                            this.alignment = alignment_3;
                            if (cached_5) {
                                /* add */ (TextStyle.textStylesCache_$LI$().push(this) > 0);
                            }
                        }
                        if (this.fontName === undefined) {
                            this.fontName = null;
                        }
                        if (this.fontSize === undefined) {
                            this.fontSize = 0;
                        }
                        if (this.bold === undefined) {
                            this.bold = false;
                        }
                        if (this.italic === undefined) {
                            this.italic = false;
                        }
                        if (this.alignment === undefined) {
                            this.alignment = null;
                        }
                    }
                    if (this.fontName === undefined) {
                        this.fontName = null;
                    }
                    if (this.fontSize === undefined) {
                        this.fontSize = 0;
                    }
                    if (this.bold === undefined) {
                        this.bold = false;
                    }
                    if (this.italic === undefined) {
                        this.italic = false;
                    }
                    if (this.alignment === undefined) {
                        this.alignment = null;
                    }
                }
                if (this.fontName === undefined) {
                    this.fontName = null;
                }
                if (this.fontSize === undefined) {
                    this.fontSize = 0;
                }
                if (this.bold === undefined) {
                    this.bold = false;
                }
                if (this.italic === undefined) {
                    this.italic = false;
                }
                if (this.alignment === undefined) {
                    this.alignment = null;
                }
            }
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontSize === undefined) {
                this.fontSize = 0;
            }
            if (this.bold === undefined) {
                this.bold = false;
            }
            if (this.italic === undefined) {
                this.italic = false;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    TextStyle.textStylesCache_$LI$ = function () { if (TextStyle.textStylesCache == null) {
        TextStyle.textStylesCache = ([]);
    } return TextStyle.textStylesCache; };
    /**
     * Returns the text style instance matching the given parameters.
     * @param {string} fontName
     * @param {number} fontSize
     * @param {boolean} bold
     * @param {boolean} italic
     * @param {TextStyle.Alignment} alignment
     * @return {TextStyle}
     * @private
     */
    TextStyle.prototype.getInstance = function (fontName, fontSize, bold, italic, alignment) {
        var textStyle = new TextStyle(fontName, fontSize, bold, italic, alignment, false);
        for (var i = TextStyle.textStylesCache_$LI$().length - 1; i >= 0; i--) {
            {
                var cachedTextStyle = TextStyle.textStylesCache_$LI$()[i];
                if (cachedTextStyle == null) {
                    /* remove */ TextStyle.textStylesCache_$LI$().splice(i, 1)[0];
                }
                else if (cachedTextStyle.equals(textStyle)) {
                    return textStyle;
                }
            }
            ;
        }
        /* add */ (TextStyle.textStylesCache_$LI$().push(textStyle) > 0);
        return textStyle;
    };
    /**
     * Returns the font name of this text style.
     * @return {string}
     */
    TextStyle.prototype.getFontName = function () {
        return this.fontName;
    };
    /**
     * Returns the font size of this text style.
     * @return {number}
     */
    TextStyle.prototype.getFontSize = function () {
        return this.fontSize;
    };
    /**
     * Returns whether this text style is bold or not.
     * @return {boolean}
     */
    TextStyle.prototype.isBold = function () {
        return this.bold;
    };
    /**
     * Returns whether this text style is italic or not.
     * @return {boolean}
     */
    TextStyle.prototype.isItalic = function () {
        return this.italic;
    };
    /**
     * Returns the alignment applied on text using this style.
     * @return {TextStyle.Alignment}
     */
    TextStyle.prototype.getAlignment = function () {
        return this.alignment;
    };
    TextStyle.prototype.deriveStyle$java_lang_String = function (fontName) {
        if (this.getFontName() === fontName || (fontName != null && (fontName === this.getFontName()))) {
            return this;
        }
        else {
            return this.getInstance(fontName, this.getFontSize(), this.isBold(), this.isItalic(), this.getAlignment());
        }
    };
    /**
     * Returns a derived style of this text style with a given font name.
     * @param {string} fontName
     * @return {TextStyle}
     */
    TextStyle.prototype.deriveStyle = function (fontName) {
        if (((typeof fontName === 'string') || fontName === null)) {
            return this.deriveStyle$java_lang_String(fontName);
        }
        else if (((typeof fontName === 'number') || fontName === null)) {
            return this.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(fontName);
        }
        else if (((typeof fontName === 'number') || fontName === null)) {
            return this.deriveStyle$float(fontName);
        }
        else
            throw new Error('invalid overload');
    };
    TextStyle.prototype.deriveStyle$float = function (fontSize) {
        if (this.getFontSize() === fontSize) {
            return this;
        }
        else {
            return this.getInstance(this.getFontName(), fontSize, this.isBold(), this.isItalic(), this.getAlignment());
        }
    };
    TextStyle.prototype.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment = function (alignment) {
        if (this.getAlignment() === alignment) {
            return this;
        }
        else {
            return this.getInstance(this.getFontName(), this.getFontSize(), this.isBold(), this.isItalic(), alignment);
        }
    };
    /**
     * Returns a derived style of this text style with a given bold style.
     * @param {boolean} bold
     * @return {TextStyle}
     */
    TextStyle.prototype.deriveBoldStyle = function (bold) {
        if (this.isBold() === bold) {
            return this;
        }
        else {
            return this.getInstance(this.getFontName(), this.getFontSize(), bold, this.isItalic(), this.getAlignment());
        }
    };
    /**
     * Returns a derived style of this text style with a given italic style.
     * @param {boolean} italic
     * @return {TextStyle}
     */
    TextStyle.prototype.deriveItalicStyle = function (italic) {
        if (this.isItalic() === italic) {
            return this;
        }
        else {
            return this.getInstance(this.getFontName(), this.getFontSize(), this.isBold(), italic, this.getAlignment());
        }
    };
    /**
     * Returns <code>true</code> if this text style is equal to <code>object</code>.
     * @param {Object} object
     * @return {boolean}
     */
    TextStyle.prototype.equals = function (object) {
        if (object != null && object instanceof TextStyle) {
            var textStyle = object;
            return (textStyle.fontName === this.fontName || (textStyle.fontName != null && (textStyle.fontName === this.fontName))) && textStyle.fontSize === this.fontSize && textStyle.bold === this.bold && textStyle.italic === this.italic && textStyle.alignment === this.alignment;
        }
        return false;
    };
    /**
     * Returns a hash code for this text style.
     * @return {number}
     */
    TextStyle.prototype.hashCode = function () {
        var hashCode = (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.fontSize);
        if (this.fontName != null) {
            hashCode += /* hashCode */ (function (o) { if (o.hashCode) {
                return o.hashCode();
            }
            else {
                return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
            } })(this.fontName);
        }
        if (this.bold) {
            hashCode++;
        }
        if (this.italic) {
            hashCode++;
        }
        hashCode += 0;
        return hashCode;
    };
    return TextStyle;
}());
TextStyle["__class"] = "com.eteks.sweethome3d.model.TextStyle";
(function (TextStyle) {
    var Alignment;
    (function (Alignment) {
        Alignment[Alignment["LEFT"] = 0] = "LEFT";
        Alignment[Alignment["CENTER"] = 1] = "CENTER";
        Alignment[Alignment["RIGHT"] = 2] = "RIGHT";
    })(Alignment = TextStyle.Alignment || (TextStyle.Alignment = {}));
})(TextStyle || (TextStyle = {}));
/**
 * The aspect ratio of pictures.
 * @enum
 * @property {AspectRatio} FREE_RATIO
 * @property {AspectRatio} VIEW_3D_RATIO
 * @property {AspectRatio} RATIO_4_3
 * @property {AspectRatio} RATIO_3_2
 * @property {AspectRatio} RATIO_16_9
 * @property {AspectRatio} RATIO_2_1
 * @property {AspectRatio} RATIO_24_10
 * @property {AspectRatio} SQUARE_RATIO
 * @class
 */
var AspectRatio;
(function (AspectRatio) {
    AspectRatio[AspectRatio["FREE_RATIO"] = 0] = "FREE_RATIO";
    AspectRatio[AspectRatio["VIEW_3D_RATIO"] = 1] = "VIEW_3D_RATIO";
    AspectRatio[AspectRatio["RATIO_4_3"] = 2] = "RATIO_4_3";
    AspectRatio[AspectRatio["RATIO_3_2"] = 3] = "RATIO_3_2";
    AspectRatio[AspectRatio["RATIO_16_9"] = 4] = "RATIO_16_9";
    AspectRatio[AspectRatio["RATIO_2_1"] = 5] = "RATIO_2_1";
    AspectRatio[AspectRatio["RATIO_24_10"] = 6] = "RATIO_24_10";
    AspectRatio[AspectRatio["SQUARE_RATIO"] = 7] = "SQUARE_RATIO";
})(AspectRatio || (AspectRatio = {}));
/** @ignore */
var AspectRatio_$WRAPPER = /** @class */ (function () {
    function AspectRatio_$WRAPPER(_$ordinal, _$name, value) {
        this._$ordinal = _$ordinal;
        this._$name = _$name;
        if (this.value === undefined) {
            this.value = null;
        }
        this.value = value;
    }
    /**
     * Returns the value of this aspect ratio (width / height) or <code>null</code> if it's not known.
     * @return {number}
     */
    AspectRatio_$WRAPPER.prototype.getValue = function () {
        return this.value;
    };
    AspectRatio_$WRAPPER.prototype.name = function () { return this._$name; };
    AspectRatio_$WRAPPER.prototype.ordinal = function () { return this._$ordinal; };
    AspectRatio_$WRAPPER.prototype.compareTo = function (other) { return this._$ordinal - (isNaN(other) ? other._$ordinal : other); };
    return AspectRatio_$WRAPPER;
}());
AspectRatio["__class"] = "com.eteks.sweethome3d.model.AspectRatio";
AspectRatio["_$wrappers"] = { 0: new AspectRatio_$WRAPPER(0, "FREE_RATIO", null), 1: new AspectRatio_$WRAPPER(1, "VIEW_3D_RATIO", null), 2: new AspectRatio_$WRAPPER(2, "RATIO_4_3", 4.0 / 3), 3: new AspectRatio_$WRAPPER(3, "RATIO_3_2", 1.5), 4: new AspectRatio_$WRAPPER(4, "RATIO_16_9", 16.0 / 9), 5: new AspectRatio_$WRAPPER(5, "RATIO_2_1", 2.0 / 1.0), 6: new AspectRatio_$WRAPPER(6, "RATIO_24_10", 2.4), 7: new AspectRatio_$WRAPPER(7, "SQUARE_RATIO", 1.0) };
/**
 * Creates a material instance from parameters.
 * @param {string} name
 * @param {float[][]} matrix
 * @class
 * @author Emmanuel Puybaret
 */
var Transformation = /** @class */ (function () {
    function Transformation(name, matrix) {
        if (this.name === undefined) {
            this.name = null;
        }
        if (this.matrix === undefined) {
            this.matrix = null;
        }
        this.name = name;
        this.matrix = matrix;
    }
    /**
     * Returns the name of this transformation.
     * @return {string} the name of the transformation.
     */
    Transformation.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the matrix of this transformation.
     * @return {float[][]} a 4x3 float array.
     */
    Transformation.prototype.getMatrix = function () {
        return [[this.matrix[0][0], this.matrix[0][1], this.matrix[0][2], this.matrix[0][3]], [this.matrix[1][0], this.matrix[1][1], this.matrix[1][2], this.matrix[1][3]], [this.matrix[2][0], this.matrix[2][1], this.matrix[2][2], this.matrix[2][3]]];
    };
    /**
     * Returns <code>true</code> if this transformation is equal to <code>object</code>.
     * @param {Object} object
     * @return {boolean}
     */
    Transformation.prototype.equals = function (object) {
        if (object != null && object instanceof Transformation) {
            var transformation = object;
            if (transformation.name === this.name) {
                for (var i = 0; i < this.matrix.length; i++) {
                    {
                        for (var j = 0; j < this.matrix[i].length; j++) {
                            {
                                if (transformation.matrix[i][j] !== this.matrix[i][j]) {
                                    return false;
                                }
                            }
                            ;
                        }
                    }
                    ;
                }
                return true;
            }
        }
        return false;
    };
    /**
     * Returns a hash code for this transformation.
     * @return {number}
     */
    Transformation.prototype.hashCode = function () {
        return /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this.name) + /* deepHashCode */ (function (array) { function deepHashCode(array) { if (array == null)
            return 0; var hashCode = 1; for (var i = 0; i < array.length; i++) {
            var elementHashCode = 1;
            if (Array.isArray(array[i]))
                elementHashCode = deepHashCode(array[i]);
            else if (typeof array[i] == 'number')
                elementHashCode = (array[i] * 1000) | 0;
            hashCode = 31 * hashCode + elementHashCode;
        } return hashCode; } return deepHashCode; })(this.matrix);
    };
    return Transformation;
}());
Transformation["__class"] = "com.eteks.sweethome3d.model.Transformation";
/**
 * Creates a collection change support.
 * @param {Object} source  the collection to which data will be added.
 * @class
 * @author Emmanuel Puybaret
 */
var CollectionChangeSupport = /** @class */ (function () {
    function CollectionChangeSupport(source) {
        if (this.source === undefined) {
            this.source = null;
        }
        if (this.collectionListeners === undefined) {
            this.collectionListeners = null;
        }
        this.source = source;
        this.collectionListeners = ([]);
    }
    /**
     * Adds the <code>listener</code> in parameter to the list of listeners that may be notified.
     * @param {Object} listener  the listener to add
     */
    CollectionChangeSupport.prototype.addCollectionListener = function (listener) {
        /* add */ (this.collectionListeners.push(listener) > 0);
    };
    /**
     * Removes the <code>listener</code> in parameter to the list of listeners that may be notified.
     * @param {Object} listener  the listener to remove. If it doesn't exist, it's simply ignored.
     */
    CollectionChangeSupport.prototype.removeCollectionListener = function (listener) {
        /* remove */ (function (a) { var index = a.indexOf(listener); if (index >= 0) {
            a.splice(index, 1);
            return true;
        }
        else {
            return false;
        } })(this.collectionListeners);
    };
    CollectionChangeSupport.prototype.fireCollectionChanged$java_lang_Object$com_eteks_sweethome3d_model_CollectionEvent_Type = function (item, eventType) {
        this.fireCollectionChanged(item, -1, eventType);
    };
    CollectionChangeSupport.prototype.fireCollectionChanged$java_lang_Object$int$com_eteks_sweethome3d_model_CollectionEvent_Type = function (item, index, eventType) {
        if (!(this.collectionListeners.length == 0)) {
            var event_1 = (new CollectionEvent(this.source, item, index, eventType));
            var listeners = this.collectionListeners.slice(0);
            for (var index1 = 0; index1 < listeners.length; index1++) {
                var listener = listeners[index1];
                {
                    listener(event_1);
                }
            }
        }
    };
    /**
     * Fires a collection event about <code>item</code> at a given <code>index</code>.
     * @param {Object} item     the added ore deleted item
     * @param {number} index    the optional index at which the item was added or deleted
     * @param {CollectionEvent.Type} eventType <code>CollectionEvent.Type.ADD</code> or <code>CollectionEvent.Type.DELETE</code>
     */
    CollectionChangeSupport.prototype.fireCollectionChanged = function (item, index, eventType) {
        if (((item != null) || item === null) && ((typeof index === 'number') || index === null) && ((typeof eventType === 'number') || eventType === null)) {
            return this.fireCollectionChanged$java_lang_Object$int$com_eteks_sweethome3d_model_CollectionEvent_Type(item, index, eventType);
        }
        else if (((item != null) || item === null) && ((typeof index === 'number') || index === null) && eventType === undefined) {
            return this.fireCollectionChanged$java_lang_Object$com_eteks_sweethome3d_model_CollectionEvent_Type(item, index);
        }
        else
            throw new Error('invalid overload');
    };
    return CollectionChangeSupport;
}());
CollectionChangeSupport["__class"] = "com.eteks.sweethome3d.model.CollectionChangeSupport";
/**
 * Creates a new object with a unique ID prefixed by <code>object-</code>.
 * @class
 * @author Emmanuel Puybaret
 */
var HomeObject = /** @class */ (function () {
    function HomeObject(id) {
        if (((typeof id === 'string') || id === null)) {
            var __args = arguments;
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (id == null) {
                throw new IllegalArgumentException("ID must exist");
            }
            this.id = id;
        }
        else if (id === undefined) {
            var __args = arguments;
            {
                var __args_19 = arguments;
                var id_1 = HomeObject.createId(HomeObject.ID_DEFAULT_PREFIX);
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (id_1 == null) {
                    throw new IllegalArgumentException("ID must exist");
                }
                this.id = id_1;
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns a new ID prefixed by the given string.
     * @param {string} prefix
     * @return {string}
     */
    HomeObject.createId = function (prefix) {
        return prefix + "-" + UUID.randomUUID();
    };
    HomeObject.prototype.addPropertyChangeListener = function (propertyName, listener) { if (this.propertyChangeSupport == null) {
        this.propertyChangeSupport = new PropertyChangeSupport(this);
    } if (listener === undefined) {
        this.propertyChangeSupport.addPropertyChangeListener(propertyName);
    }
    else {
        this.propertyChangeSupport.addPropertyChangeListener(propertyName, listener);
    } };
    HomeObject.prototype.removePropertyChangeListener = function (propertyName, listener) { if (this.propertyChangeSupport != null) {
        if (listener === undefined) {
            this.propertyChangeSupport.removePropertyChangeListener(propertyName);
        }
        else {
            this.propertyChangeSupport.removePropertyChangeListener(propertyName, listener);
        }
        if (this.propertyChangeSupport.getPropertyChangeListeners().length === 0) {
            this.propertyChangeSupport = null;
        }
    } };
    /**
     * Fires a property change of {@link PropertyChangeEvent} class to listeners.
     * @param {string} propertyName
     * @param {Object} oldValue
     * @param {Object} newValue
     */
    HomeObject.prototype.firePropertyChange = function (propertyName, oldValue, newValue) {
        if (this.propertyChangeSupport != null) {
            this.propertyChangeSupport.firePropertyChange(propertyName, oldValue, newValue);
        }
    };
    /**
     * Returns the ID of this object.
     * @return {string} a unique ID
     */
    HomeObject.prototype.getId = function () {
        return this.id;
    };
    /**
     * Returns the value of the property <code>name</code> associated with this object.
     * @return {string} the value of the property or <code>null</code> if it doesn't exist.
     * @param {string} name
     */
    HomeObject.prototype.getProperty = function (name) {
        if (this.properties != null) {
            return /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.properties, name);
        }
        else {
            return null;
        }
    };
    /**
     * Sets a property associated with this object. Once the property is updated,
     * listeners added to this object will receive a change event of
     * {@link UserPropertyChangeEvent} class.<br>
     * To avoid any issue with existing or future properties of Sweet Home 3D classes,
     * do not use property names written with only upper case letters.
     * @param {string} name   the name of the property to set
     * @param {string} value  the new value of the property or <code>null</code> to remove an existing property
     */
    HomeObject.prototype.setProperty = function (name, value) {
        var _this = this;
        var oldValue = this.properties != null ? /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.properties, name) : null;
        if (value == null) {
            if (this.properties != null && oldValue != null) {
                try {
                    /* remove */ (function (map) { var deleted = _this.properties[name]; delete _this.properties[name]; return deleted; })(this.properties);
                    if ( /* size */Object.keys(this.properties).length === 0) {
                        this.properties = null;
                    }
                }
                catch (ex) {
                    this.properties = null;
                }
                this.firePropertyChange(name, oldValue, null);
            }
        }
        else {
            if (this.properties == null || ( /* size */Object.keys(this.properties).length === 1 && oldValue != null)) {
                this.properties = /* singletonMap */ (function (k) { var o = {}; o[k] = value; return o; })(name);
            }
            else {
                if ( /* size */Object.keys(this.properties).length === 1) {
                    this.properties = ((function (o) { var r = {}; for (var p in o)
                        r[p] = o[p]; return r; })(this.properties));
                }
                /* put */ (this.properties[name] = value);
            }
            this.firePropertyChange(name, oldValue, value);
        }
    };
    /**
     * Returns the property names.
     * @return {string[]} a collection of all the names of the properties set with {@link #setProperty(String, String) setProperty}
     */
    HomeObject.prototype.getPropertyNames = function () {
        if (this.properties != null) {
            return /* keySet */ Object.keys(this.properties);
        }
        else {
            return /* emptySet */ [];
        }
    };
    /**
     * Returns a copy of this object with a new id.
     * @return {HomeObject}
     */
    HomeObject.prototype.duplicate = function () {
        var copy = (function (o) { if (o.clone != undefined) {
            return o.clone();
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(this);
        var index = 0;
        var c;
        while ((index < this.id.length && (function (c) { return c.charCodeAt == null ? c : c.charCodeAt(0); })((c = /* toLowerCase */ this.id.charAt(index).toLowerCase())) >= 'a'.charCodeAt(0) && (function (c) { return c.charCodeAt == null ? c : c.charCodeAt(0); })(c) <= 'z'.charCodeAt(0))) {
            {
                index++;
            }
        }
        ;
        var prefix = index >= 0 ? this.id.substring(0, index) : HomeObject.ID_DEFAULT_PREFIX;
        copy.id = HomeObject.createId(prefix);
        return copy;
    };
    /**
     * Returns a clone of this object.
     * The returned object has the same id as this object.
     * @return {HomeObject}
     */
    HomeObject.prototype.clone = function () {
        var _this = this;
        try {
            var clone = (function (o) { var clone = Object.create(o); for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            } return clone; })(this);
            if (this.properties != null) {
                clone.properties = /* size */ Object.keys(clone.properties).length === 1 ? /* singletonMap */ (function (k) { var o = {}; o[k] = /* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(_this.properties)).next(); return o; })(/* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* keySet */ Object.keys(this.properties)).next()) : ((function (o) { var r = {}; for (var p in o)
                    r[p] = o[p]; return r; })(this.properties));
            }
            clone.propertyChangeSupport = null;
            return clone;
        }
        catch (ex) {
            throw new IllegalStateException("Super class isn\'t cloneable");
        }
    };
    HomeObject.ID_DEFAULT_PREFIX = "object";
    return HomeObject;
}());
HomeObject["__class"] = "com.eteks.sweethome3d.model.HomeObject";
HomeObject['__transients'] = ['propertyChangeSupport'];
/**
 * Creates a home texture from an existing one with customized angle and offset.
 * @param {Object} texture the texture from which data are copied
 * @param {number} xOffset the offset applied to the texture along X axis in percentage of its width
 * @param {number} yOffset the offset applied to the texture along Y axis in percentage of its height
 * @param {number} angle   the rotation angle applied to the texture
 * @param {number} scale   the scale applied to the texture
 * @param {boolean} leftToRightOriented orientation used on the texture when applied on objects seen from front
 * @class
 * @author Emmanuel Puybaret
 */
var HomeTexture = /** @class */ (function () {
    function HomeTexture(texture, xOffset, yOffset, angle, scale, leftToRightOriented) {
        if (((texture != null && (texture.constructor != null && texture.constructor["__interfaces"] != null && texture.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || texture === null) && ((typeof xOffset === 'number') || xOffset === null) && ((typeof yOffset === 'number') || yOffset === null) && ((typeof angle === 'number') || angle === null) && ((typeof scale === 'number') || scale === null) && ((typeof leftToRightOriented === 'boolean') || leftToRightOriented === null)) {
            var __args = arguments;
            if (this.catalogId === undefined) {
                this.catalogId = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.xOffset === undefined) {
                this.xOffset = 0;
            }
            if (this.yOffset === undefined) {
                this.yOffset = 0;
            }
            if (this.angle === undefined) {
                this.angle = 0;
            }
            if (this.scale === undefined) {
                this.scale = 0;
            }
            if (this.leftToRightOriented === undefined) {
                this.leftToRightOriented = false;
            }
            this.name = texture.getName();
            this.creator = texture.getCreator();
            this.image = texture.getImage();
            this.width = texture.getWidth();
            this.height = texture.getHeight();
            this.xOffset = xOffset;
            this.yOffset = yOffset;
            this.angle = angle;
            this.scale = scale;
            this.leftToRightOriented = leftToRightOriented;
            if (texture != null && texture instanceof HomeTexture) {
                this.catalogId = texture.getCatalogId();
            }
            else if (texture != null && texture instanceof CatalogTexture) {
                this.catalogId = texture.getId();
            }
            else {
                this.catalogId = null;
            }
        }
        else if (((texture != null && (texture.constructor != null && texture.constructor["__interfaces"] != null && texture.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || texture === null) && ((typeof xOffset === 'number') || xOffset === null) && ((typeof yOffset === 'number') || yOffset === null) && ((typeof angle === 'boolean') || angle === null) && scale === undefined && leftToRightOriented === undefined) {
            var __args = arguments;
            var angle_1 = __args[1];
            var scale_1 = __args[2];
            var leftToRightOriented_1 = __args[3];
            {
                var __args_20 = arguments;
                var xOffset_1 = 0;
                var yOffset_1 = 0;
                if (this.catalogId === undefined) {
                    this.catalogId = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.xOffset === undefined) {
                    this.xOffset = 0;
                }
                if (this.yOffset === undefined) {
                    this.yOffset = 0;
                }
                if (this.angle === undefined) {
                    this.angle = 0;
                }
                if (this.scale === undefined) {
                    this.scale = 0;
                }
                if (this.leftToRightOriented === undefined) {
                    this.leftToRightOriented = false;
                }
                this.name = texture.getName();
                this.creator = texture.getCreator();
                this.image = texture.getImage();
                this.width = texture.getWidth();
                this.height = texture.getHeight();
                this.xOffset = xOffset_1;
                this.yOffset = yOffset_1;
                this.angle = angle_1;
                this.scale = scale_1;
                this.leftToRightOriented = leftToRightOriented_1;
                if (texture != null && texture instanceof HomeTexture) {
                    this.catalogId = texture.getCatalogId();
                }
                else if (texture != null && texture instanceof CatalogTexture) {
                    this.catalogId = texture.getId();
                }
                else {
                    this.catalogId = null;
                }
            }
            if (this.catalogId === undefined) {
                this.catalogId = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.xOffset === undefined) {
                this.xOffset = 0;
            }
            if (this.yOffset === undefined) {
                this.yOffset = 0;
            }
            if (this.angle === undefined) {
                this.angle = 0;
            }
            if (this.scale === undefined) {
                this.scale = 0;
            }
            if (this.leftToRightOriented === undefined) {
                this.leftToRightOriented = false;
            }
        }
        else if (((texture != null && (texture.constructor != null && texture.constructor["__interfaces"] != null && texture.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || texture === null) && ((typeof xOffset === 'number') || xOffset === null) && ((typeof yOffset === 'boolean') || yOffset === null) && angle === undefined && scale === undefined && leftToRightOriented === undefined) {
            var __args = arguments;
            var angle_2 = __args[1];
            var leftToRightOriented_2 = __args[2];
            {
                var __args_21 = arguments;
                var scale_2 = 1;
                {
                    var __args_22 = arguments;
                    var xOffset_2 = 0;
                    var yOffset_2 = 0;
                    if (this.catalogId === undefined) {
                        this.catalogId = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.creator === undefined) {
                        this.creator = null;
                    }
                    if (this.image === undefined) {
                        this.image = null;
                    }
                    if (this.width === undefined) {
                        this.width = 0;
                    }
                    if (this.height === undefined) {
                        this.height = 0;
                    }
                    if (this.xOffset === undefined) {
                        this.xOffset = 0;
                    }
                    if (this.yOffset === undefined) {
                        this.yOffset = 0;
                    }
                    if (this.angle === undefined) {
                        this.angle = 0;
                    }
                    if (this.scale === undefined) {
                        this.scale = 0;
                    }
                    if (this.leftToRightOriented === undefined) {
                        this.leftToRightOriented = false;
                    }
                    this.name = texture.getName();
                    this.creator = texture.getCreator();
                    this.image = texture.getImage();
                    this.width = texture.getWidth();
                    this.height = texture.getHeight();
                    this.xOffset = xOffset_2;
                    this.yOffset = yOffset_2;
                    this.angle = angle_2;
                    this.scale = scale_2;
                    this.leftToRightOriented = leftToRightOriented_2;
                    if (texture != null && texture instanceof HomeTexture) {
                        this.catalogId = texture.getCatalogId();
                    }
                    else if (texture != null && texture instanceof CatalogTexture) {
                        this.catalogId = texture.getId();
                    }
                    else {
                        this.catalogId = null;
                    }
                }
                if (this.catalogId === undefined) {
                    this.catalogId = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.xOffset === undefined) {
                    this.xOffset = 0;
                }
                if (this.yOffset === undefined) {
                    this.yOffset = 0;
                }
                if (this.angle === undefined) {
                    this.angle = 0;
                }
                if (this.scale === undefined) {
                    this.scale = 0;
                }
                if (this.leftToRightOriented === undefined) {
                    this.leftToRightOriented = false;
                }
            }
            if (this.catalogId === undefined) {
                this.catalogId = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.xOffset === undefined) {
                this.xOffset = 0;
            }
            if (this.yOffset === undefined) {
                this.yOffset = 0;
            }
            if (this.angle === undefined) {
                this.angle = 0;
            }
            if (this.scale === undefined) {
                this.scale = 0;
            }
            if (this.leftToRightOriented === undefined) {
                this.leftToRightOriented = false;
            }
        }
        else if (((texture != null && (texture.constructor != null && texture.constructor["__interfaces"] != null && texture.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || texture === null) && ((typeof xOffset === 'number') || xOffset === null) && yOffset === undefined && angle === undefined && scale === undefined && leftToRightOriented === undefined) {
            var __args = arguments;
            var angle_3 = __args[1];
            {
                var __args_23 = arguments;
                var leftToRightOriented_3 = true;
                {
                    var __args_24 = arguments;
                    var scale_3 = 1;
                    {
                        var __args_25 = arguments;
                        var xOffset_3 = 0;
                        var yOffset_3 = 0;
                        if (this.catalogId === undefined) {
                            this.catalogId = null;
                        }
                        if (this.name === undefined) {
                            this.name = null;
                        }
                        if (this.creator === undefined) {
                            this.creator = null;
                        }
                        if (this.image === undefined) {
                            this.image = null;
                        }
                        if (this.width === undefined) {
                            this.width = 0;
                        }
                        if (this.height === undefined) {
                            this.height = 0;
                        }
                        if (this.xOffset === undefined) {
                            this.xOffset = 0;
                        }
                        if (this.yOffset === undefined) {
                            this.yOffset = 0;
                        }
                        if (this.angle === undefined) {
                            this.angle = 0;
                        }
                        if (this.scale === undefined) {
                            this.scale = 0;
                        }
                        if (this.leftToRightOriented === undefined) {
                            this.leftToRightOriented = false;
                        }
                        this.name = texture.getName();
                        this.creator = texture.getCreator();
                        this.image = texture.getImage();
                        this.width = texture.getWidth();
                        this.height = texture.getHeight();
                        this.xOffset = xOffset_3;
                        this.yOffset = yOffset_3;
                        this.angle = angle_3;
                        this.scale = scale_3;
                        this.leftToRightOriented = leftToRightOriented_3;
                        if (texture != null && texture instanceof HomeTexture) {
                            this.catalogId = texture.getCatalogId();
                        }
                        else if (texture != null && texture instanceof CatalogTexture) {
                            this.catalogId = texture.getId();
                        }
                        else {
                            this.catalogId = null;
                        }
                    }
                    if (this.catalogId === undefined) {
                        this.catalogId = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.creator === undefined) {
                        this.creator = null;
                    }
                    if (this.image === undefined) {
                        this.image = null;
                    }
                    if (this.width === undefined) {
                        this.width = 0;
                    }
                    if (this.height === undefined) {
                        this.height = 0;
                    }
                    if (this.xOffset === undefined) {
                        this.xOffset = 0;
                    }
                    if (this.yOffset === undefined) {
                        this.yOffset = 0;
                    }
                    if (this.angle === undefined) {
                        this.angle = 0;
                    }
                    if (this.scale === undefined) {
                        this.scale = 0;
                    }
                    if (this.leftToRightOriented === undefined) {
                        this.leftToRightOriented = false;
                    }
                }
                if (this.catalogId === undefined) {
                    this.catalogId = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.xOffset === undefined) {
                    this.xOffset = 0;
                }
                if (this.yOffset === undefined) {
                    this.yOffset = 0;
                }
                if (this.angle === undefined) {
                    this.angle = 0;
                }
                if (this.scale === undefined) {
                    this.scale = 0;
                }
                if (this.leftToRightOriented === undefined) {
                    this.leftToRightOriented = false;
                }
            }
            if (this.catalogId === undefined) {
                this.catalogId = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.xOffset === undefined) {
                this.xOffset = 0;
            }
            if (this.yOffset === undefined) {
                this.yOffset = 0;
            }
            if (this.angle === undefined) {
                this.angle = 0;
            }
            if (this.scale === undefined) {
                this.scale = 0;
            }
            if (this.leftToRightOriented === undefined) {
                this.leftToRightOriented = false;
            }
        }
        else if (((texture != null && (texture.constructor != null && texture.constructor["__interfaces"] != null && texture.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || texture === null) && xOffset === undefined && yOffset === undefined && angle === undefined && scale === undefined && leftToRightOriented === undefined) {
            var __args = arguments;
            {
                var __args_26 = arguments;
                var angle_4 = 0;
                {
                    var __args_27 = arguments;
                    var leftToRightOriented_4 = true;
                    {
                        var __args_28 = arguments;
                        var scale_4 = 1;
                        {
                            var __args_29 = arguments;
                            var xOffset_4 = 0;
                            var yOffset_4 = 0;
                            if (this.catalogId === undefined) {
                                this.catalogId = null;
                            }
                            if (this.name === undefined) {
                                this.name = null;
                            }
                            if (this.creator === undefined) {
                                this.creator = null;
                            }
                            if (this.image === undefined) {
                                this.image = null;
                            }
                            if (this.width === undefined) {
                                this.width = 0;
                            }
                            if (this.height === undefined) {
                                this.height = 0;
                            }
                            if (this.xOffset === undefined) {
                                this.xOffset = 0;
                            }
                            if (this.yOffset === undefined) {
                                this.yOffset = 0;
                            }
                            if (this.angle === undefined) {
                                this.angle = 0;
                            }
                            if (this.scale === undefined) {
                                this.scale = 0;
                            }
                            if (this.leftToRightOriented === undefined) {
                                this.leftToRightOriented = false;
                            }
                            this.name = texture.getName();
                            this.creator = texture.getCreator();
                            this.image = texture.getImage();
                            this.width = texture.getWidth();
                            this.height = texture.getHeight();
                            this.xOffset = xOffset_4;
                            this.yOffset = yOffset_4;
                            this.angle = angle_4;
                            this.scale = scale_4;
                            this.leftToRightOriented = leftToRightOriented_4;
                            if (texture != null && texture instanceof HomeTexture) {
                                this.catalogId = texture.getCatalogId();
                            }
                            else if (texture != null && texture instanceof CatalogTexture) {
                                this.catalogId = texture.getId();
                            }
                            else {
                                this.catalogId = null;
                            }
                        }
                        if (this.catalogId === undefined) {
                            this.catalogId = null;
                        }
                        if (this.name === undefined) {
                            this.name = null;
                        }
                        if (this.creator === undefined) {
                            this.creator = null;
                        }
                        if (this.image === undefined) {
                            this.image = null;
                        }
                        if (this.width === undefined) {
                            this.width = 0;
                        }
                        if (this.height === undefined) {
                            this.height = 0;
                        }
                        if (this.xOffset === undefined) {
                            this.xOffset = 0;
                        }
                        if (this.yOffset === undefined) {
                            this.yOffset = 0;
                        }
                        if (this.angle === undefined) {
                            this.angle = 0;
                        }
                        if (this.scale === undefined) {
                            this.scale = 0;
                        }
                        if (this.leftToRightOriented === undefined) {
                            this.leftToRightOriented = false;
                        }
                    }
                    if (this.catalogId === undefined) {
                        this.catalogId = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.creator === undefined) {
                        this.creator = null;
                    }
                    if (this.image === undefined) {
                        this.image = null;
                    }
                    if (this.width === undefined) {
                        this.width = 0;
                    }
                    if (this.height === undefined) {
                        this.height = 0;
                    }
                    if (this.xOffset === undefined) {
                        this.xOffset = 0;
                    }
                    if (this.yOffset === undefined) {
                        this.yOffset = 0;
                    }
                    if (this.angle === undefined) {
                        this.angle = 0;
                    }
                    if (this.scale === undefined) {
                        this.scale = 0;
                    }
                    if (this.leftToRightOriented === undefined) {
                        this.leftToRightOriented = false;
                    }
                }
                if (this.catalogId === undefined) {
                    this.catalogId = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.xOffset === undefined) {
                    this.xOffset = 0;
                }
                if (this.yOffset === undefined) {
                    this.yOffset = 0;
                }
                if (this.angle === undefined) {
                    this.angle = 0;
                }
                if (this.scale === undefined) {
                    this.scale = 0;
                }
                if (this.leftToRightOriented === undefined) {
                    this.leftToRightOriented = false;
                }
            }
            if (this.catalogId === undefined) {
                this.catalogId = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.xOffset === undefined) {
                this.xOffset = 0;
            }
            if (this.yOffset === undefined) {
                this.yOffset = 0;
            }
            if (this.angle === undefined) {
                this.angle = 0;
            }
            if (this.scale === undefined) {
                this.scale = 0;
            }
            if (this.leftToRightOriented === undefined) {
                this.leftToRightOriented = false;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the catalog ID of this texture or <code>null</code> if it doesn't exist.
     * @return {string}
     */
    HomeTexture.prototype.getCatalogId = function () {
        return this.catalogId;
    };
    /**
     * Returns the name of this texture.
     * @return {string}
     */
    HomeTexture.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the creator of this texture.
     * @return {string}
     */
    HomeTexture.prototype.getCreator = function () {
        return this.creator;
    };
    /**
     * Returns the content of the image used for this texture.
     * @return {Object}
     */
    HomeTexture.prototype.getImage = function () {
        return this.image;
    };
    /**
     * Returns the width of the image in centimeters.
     * @return {number}
     */
    HomeTexture.prototype.getWidth = function () {
        return this.width;
    };
    /**
     * Returns the height of the image in centimeters.
     * @return {number}
     */
    HomeTexture.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Returns the offset applied to the texture along X axis in percentage of its width.
     * @return {number}
     */
    HomeTexture.prototype.getXOffset = function () {
        return this.xOffset;
    };
    /**
     * Returns the offset applied to the texture along Y axis in percentage of its height.
     * @return {number}
     */
    HomeTexture.prototype.getYOffset = function () {
        return this.yOffset;
    };
    /**
     * Returns the angle of rotation in radians applied to this texture.
     * @return {number}
     */
    HomeTexture.prototype.getAngle = function () {
        return this.angle;
    };
    /**
     * Returns the scale applied to this texture.
     * @return {number}
     */
    HomeTexture.prototype.getScale = function () {
        return this.scale;
    };
    /**
     * Returns <code>true</code> if the objects using this texture should take into account
     * the orientation of the texture.
     * @return {boolean}
     */
    HomeTexture.prototype.isLeftToRightOriented = function () {
        return this.leftToRightOriented;
    };
    /**
     * Returns <code>true</code> if the object in parameter is equal to this texture.
     * @param {Object} obj
     * @return {boolean}
     */
    HomeTexture.prototype.equals = function (obj) {
        if (obj === this) {
            return true;
        }
        else if (obj != null && obj instanceof HomeTexture) {
            var texture = obj;
            return (texture.name === this.name || texture.name != null && (texture.name === this.name)) && (texture.image === this.image || texture.image != null && /* equals */ (function (o1, o2) { if (o1 && o1.equals) {
                return o1.equals(o2);
            }
            else {
                return o1 === o2;
            } })(texture.image, this.image)) && texture.width === this.width && texture.height === this.height && texture.xOffset === this.xOffset && texture.yOffset === this.yOffset && texture.leftToRightOriented === this.leftToRightOriented && texture.angle === this.angle && texture.scale === this.scale;
        }
        else {
            return false;
        }
    };
    /**
     * Returns a hash code for this texture.
     * @return {number}
     */
    HomeTexture.prototype.hashCode = function () {
        return (this.name != null ? /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this.name) : 0) + (this.image != null ? /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this.image) : 0) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.width) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.height) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.xOffset) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.yOffset) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.angle) + /* floatToIntBits */ (function (f) { var buf = new ArrayBuffer(4); (new Float32Array(buf))[0] = f; return (new Uint32Array(buf))[0]; })(this.scale);
    };
    return HomeTexture;
}());
HomeTexture["__class"] = "com.eteks.sweethome3d.model.HomeTexture";
HomeTexture["__interfaces"] = ["com.eteks.sweethome3d.model.TextureImage"];
/**
 * Creates a catalog piece of furniture of the default catalog.
 * <br>Caution: The constructor of <code>CatalogPieceOfFurniture</code> was modified in version 5.5 with incompatible changes with previous versions and might require some changes in your program.
 * @param {string} id    the id of the new piece or <code>null</code>
 * @param {string} name  the name of the new piece
 * @param {string} description the description of the new piece
 * @param {string} information additional information associated to the new piece
 * @param {java.lang.String[]} tags tags associated to the new piece
 * @param {number} creationDate creation date of the new piece in milliseconds since the epoch
 * @param {number} grade grade of the piece of furniture or <code>null</code>
 * @param {Object} icon content of the icon of the new piece
 * @param {Object} planIcon content of the icon of the new piece displayed in plan
 * @param {Object} model content of the 3D model of the new piece
 * @param {number} width  the width in centimeters of the new piece
 * @param {number} depth  the depth in centimeters of the new piece
 * @param {number} height  the height in centimeters of the new piece
 * @param {number} elevation  the elevation in centimeters of the new piece
 * @param {number} dropOnTopElevation  a percentage of the height at which should be placed
 * an object dropped on the new piece
 * @param {boolean} movable if <code>true</code>, the new piece is movable
 * @param {string} staircaseCutOutShape the shape used to cut out upper levels when they intersect
 * with the piece like a staircase
 * @param {float[][]} modelRotation the rotation 3 by 3 matrix applied to the piece model
 * @param {boolean} backFaceShown <code>true</code> if back face should be shown instead of front faces
 * @param {number} modelSize size of the 3D model of the new piece
 * @param {string} creator the creator of the model
 * @param {boolean} resizable if <code>true</code>, the size of the new piece may be edited
 * @param {boolean} deformable if <code>true</code>, the width, depth and height of the new piece may
 * change independently from each other
 * @param {boolean} texturable if <code>false</code> this piece should always keep the same color or texture
 * @param {boolean} horizontallyRotatable if <code>false</code> this piece
 * should not rotate around an horizontal axis
 * @param {Big} price the price of the new piece or <code>null</code>
 * @param {Big} valueAddedTaxPercentage the Value Added Tax percentage applied to the
 * price of the new piece or <code>null</code>
 * @param {string} currency the price currency, noted with ISO 4217 code, or <code>null</code>
 * @param {Object} properties additional properties associating a key to a value or <code>null</code>
 * @class
 * @author Emmanuel Puybaret
 */
var CatalogPieceOfFurniture = /** @class */ (function () {
    function CatalogPieceOfFurniture(id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, doorOrWindow, staircaseCutOutShape, color, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, horizontallyRotatable, price, valueAddedTaxPercentage, currency, properties, iconYaw, proportional, modifiable) {
        if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((typeof doorOrWindow === 'boolean') || doorOrWindow === null) && ((typeof staircaseCutOutShape === 'string') || staircaseCutOutShape === null) && ((typeof color === 'number') || color === null) && ((modelRotation != null && modelRotation instanceof Array && (modelRotation.length == 0 || modelRotation[0] == null || modelRotation[0] instanceof Array)) || modelRotation === null) && ((typeof backFaceShown === 'boolean') || backFaceShown === null) && ((typeof modelSize === 'number') || modelSize === null) && ((typeof creator === 'string') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((typeof texturable === 'boolean') || texturable === null) && ((typeof horizontallyRotatable === 'boolean') || horizontallyRotatable === null) && ((price != null && price instanceof Big) || price === null) && ((valueAddedTaxPercentage != null && valueAddedTaxPercentage instanceof Big) || valueAddedTaxPercentage === null) && ((typeof currency === 'string') || currency === null) && ((properties != null && (properties instanceof Object)) || properties === null) && ((typeof iconYaw === 'number') || iconYaw === null) && ((typeof proportional === 'boolean') || proportional === null) && ((typeof modifiable === 'boolean') || modifiable === null)) {
            var __args = arguments;
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
            this.id = id;
            this.name = name;
            this.description = description;
            this.information = information;
            this.tags = tags;
            this.creationDate = creationDate;
            this.grade = grade;
            this.icon = icon;
            this.planIcon = planIcon;
            this.model = model;
            this.width = width;
            this.depth = depth;
            this.height = height;
            this.elevation = elevation;
            this.dropOnTopElevation = dropOnTopElevation;
            this.movable = movable;
            this.doorOrWindow = doorOrWindow;
            this.color = color;
            this.staircaseCutOutShape = staircaseCutOutShape;
            this.creator = creator;
            this.horizontallyRotatable = horizontallyRotatable;
            this.price = price;
            this.valueAddedTaxPercentage = valueAddedTaxPercentage;
            this.currency = currency;
            this.properties = properties == null || /* size */ Object.keys(properties).length === 0 ? /* emptyMap */ {} : ( /* size */Object.keys(properties).length === 1 ? /* singletonMap */ (function (k) { var o = {}; o[k] = /* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(properties)).next(); return o; })(/* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* keySet */ Object.keys(properties)).next()) : ((function (o) { var r = {}; for (var p in o)
                r[p] = o[p]; return r; })(properties)));
            if (modelRotation == null) {
                this.modelRotation = PieceOfFurniture.IDENTITY_ROTATION_$LI$();
            }
            else {
                this.modelRotation = CatalogPieceOfFurniture.deepClone(modelRotation);
            }
            this.backFaceShown = backFaceShown;
            this.modelSize = modelSize;
            this.resizable = resizable;
            this.deformable = deformable;
            this.texturable = texturable;
            this.iconYaw = iconYaw;
            this.proportional = proportional;
            this.modifiable = modifiable;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((typeof doorOrWindow === 'string') || doorOrWindow === null) && ((staircaseCutOutShape != null && staircaseCutOutShape instanceof Array && (staircaseCutOutShape.length == 0 || staircaseCutOutShape[0] == null || staircaseCutOutShape[0] instanceof Array)) || staircaseCutOutShape === null) && ((typeof color === 'boolean') || color === null) && ((typeof modelRotation === 'number') || modelRotation === null) && ((typeof backFaceShown === 'string') || backFaceShown === null) && ((typeof modelSize === 'boolean') || modelSize === null) && ((typeof creator === 'boolean') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((texturable != null && texturable instanceof Big) || texturable === null) && ((horizontallyRotatable != null && horizontallyRotatable instanceof Big) || horizontallyRotatable === null) && ((typeof price === 'string') || price === null) && ((valueAddedTaxPercentage != null && (valueAddedTaxPercentage instanceof Object)) || valueAddedTaxPercentage === null) && currency === undefined && properties === undefined && iconYaw === undefined && proportional === undefined && modifiable === undefined) {
            var __args = arguments;
            var staircaseCutOutShape_1 = __args[16];
            var modelRotation_1 = __args[17];
            var backFaceShown_1 = __args[18];
            var modelSize_1 = __args[19];
            var creator_1 = __args[20];
            var resizable_1 = __args[21];
            var deformable_1 = __args[22];
            var texturable_1 = __args[23];
            var horizontallyRotatable_1 = __args[24];
            var price_1 = __args[25];
            var valueAddedTaxPercentage_1 = __args[26];
            var currency_1 = __args[27];
            var properties_1 = __args[28];
            {
                var __args_30 = arguments;
                var doorOrWindow_1 = false;
                var color_2 = null;
                var iconYaw_1 = Math.PI / 8;
                var proportional_1 = true;
                var modifiable_1 = false;
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.description === undefined) {
                    this.description = null;
                }
                if (this.information === undefined) {
                    this.information = null;
                }
                if (this.tags === undefined) {
                    this.tags = null;
                }
                if (this.creationDate === undefined) {
                    this.creationDate = null;
                }
                if (this.grade === undefined) {
                    this.grade = null;
                }
                if (this.icon === undefined) {
                    this.icon = null;
                }
                if (this.planIcon === undefined) {
                    this.planIcon = null;
                }
                if (this.model === undefined) {
                    this.model = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.depth === undefined) {
                    this.depth = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.proportional === undefined) {
                    this.proportional = false;
                }
                if (this.elevation === undefined) {
                    this.elevation = 0;
                }
                if (this.dropOnTopElevation === undefined) {
                    this.dropOnTopElevation = 0;
                }
                if (this.movable === undefined) {
                    this.movable = false;
                }
                if (this.doorOrWindow === undefined) {
                    this.doorOrWindow = false;
                }
                if (this.staircaseCutOutShape === undefined) {
                    this.staircaseCutOutShape = null;
                }
                if (this.modelRotation === undefined) {
                    this.modelRotation = null;
                }
                if (this.modelSize === undefined) {
                    this.modelSize = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.backFaceShown === undefined) {
                    this.backFaceShown = false;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.iconYaw === undefined) {
                    this.iconYaw = 0;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.resizable === undefined) {
                    this.resizable = false;
                }
                if (this.deformable === undefined) {
                    this.deformable = false;
                }
                if (this.texturable === undefined) {
                    this.texturable = false;
                }
                if (this.horizontallyRotatable === undefined) {
                    this.horizontallyRotatable = false;
                }
                if (this.price === undefined) {
                    this.price = null;
                }
                if (this.valueAddedTaxPercentage === undefined) {
                    this.valueAddedTaxPercentage = null;
                }
                if (this.currency === undefined) {
                    this.currency = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
                this.id = id;
                this.name = name;
                this.description = description;
                this.information = information;
                this.tags = tags;
                this.creationDate = creationDate;
                this.grade = grade;
                this.icon = icon;
                this.planIcon = planIcon;
                this.model = model;
                this.width = width;
                this.depth = depth;
                this.height = height;
                this.elevation = elevation;
                this.dropOnTopElevation = dropOnTopElevation;
                this.movable = movable;
                this.doorOrWindow = doorOrWindow_1;
                this.color = color_2;
                this.staircaseCutOutShape = staircaseCutOutShape_1;
                this.creator = creator_1;
                this.horizontallyRotatable = horizontallyRotatable_1;
                this.price = price_1;
                this.valueAddedTaxPercentage = valueAddedTaxPercentage_1;
                this.currency = currency_1;
                this.properties = properties_1 == null || /* size */ Object.keys(properties_1).length === 0 ? /* emptyMap */ {} : ( /* size */Object.keys(properties_1).length === 1 ? /* singletonMap */ (function (k) { var o = {}; o[k] = /* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(properties_1)).next(); return o; })(/* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* keySet */ Object.keys(properties_1)).next()) : ((function (o) { var r = {}; for (var p in o)
                    r[p] = o[p]; return r; })(properties_1)));
                if (modelRotation_1 == null) {
                    this.modelRotation = PieceOfFurniture.IDENTITY_ROTATION_$LI$();
                }
                else {
                    this.modelRotation = CatalogPieceOfFurniture.deepClone(modelRotation_1);
                }
                this.backFaceShown = backFaceShown_1;
                this.modelSize = modelSize_1;
                this.resizable = resizable_1;
                this.deformable = deformable_1;
                this.texturable = texturable_1;
                this.iconYaw = iconYaw_1;
                this.proportional = proportional_1;
                this.modifiable = modifiable_1;
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((typeof doorOrWindow === 'string') || doorOrWindow === null) && ((staircaseCutOutShape != null && staircaseCutOutShape instanceof Array && (staircaseCutOutShape.length == 0 || staircaseCutOutShape[0] == null || staircaseCutOutShape[0] instanceof Array)) || staircaseCutOutShape === null) && ((typeof color === 'boolean') || color === null) && ((typeof modelRotation === 'number') || modelRotation === null) && ((typeof backFaceShown === 'string') || backFaceShown === null) && ((typeof modelSize === 'boolean') || modelSize === null) && ((typeof creator === 'boolean') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((texturable != null && texturable instanceof Big) || texturable === null) && ((horizontallyRotatable != null && horizontallyRotatable instanceof Big) || horizontallyRotatable === null) && ((typeof price === 'string') || price === null) && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined && iconYaw === undefined && proportional === undefined && modifiable === undefined) {
            var __args = arguments;
            var staircaseCutOutShape_2 = __args[16];
            var modelRotation_2 = __args[17];
            var backFaceShown_2 = __args[18];
            var modelSize_2 = __args[19];
            var creator_2 = __args[20];
            var resizable_2 = __args[21];
            var deformable_2 = __args[22];
            var texturable_2 = __args[23];
            var horizontallyRotatable_2 = __args[24];
            var price_2 = __args[25];
            var valueAddedTaxPercentage_2 = __args[26];
            var currency_2 = __args[27];
            {
                var __args_31 = arguments;
                var properties_2 = null;
                {
                    var __args_32 = arguments;
                    var doorOrWindow_2 = false;
                    var color_3 = null;
                    var iconYaw_2 = Math.PI / 8;
                    var proportional_2 = true;
                    var modifiable_2 = false;
                    if (this.id === undefined) {
                        this.id = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.description === undefined) {
                        this.description = null;
                    }
                    if (this.information === undefined) {
                        this.information = null;
                    }
                    if (this.tags === undefined) {
                        this.tags = null;
                    }
                    if (this.creationDate === undefined) {
                        this.creationDate = null;
                    }
                    if (this.grade === undefined) {
                        this.grade = null;
                    }
                    if (this.icon === undefined) {
                        this.icon = null;
                    }
                    if (this.planIcon === undefined) {
                        this.planIcon = null;
                    }
                    if (this.model === undefined) {
                        this.model = null;
                    }
                    if (this.width === undefined) {
                        this.width = 0;
                    }
                    if (this.depth === undefined) {
                        this.depth = 0;
                    }
                    if (this.height === undefined) {
                        this.height = 0;
                    }
                    if (this.proportional === undefined) {
                        this.proportional = false;
                    }
                    if (this.elevation === undefined) {
                        this.elevation = 0;
                    }
                    if (this.dropOnTopElevation === undefined) {
                        this.dropOnTopElevation = 0;
                    }
                    if (this.movable === undefined) {
                        this.movable = false;
                    }
                    if (this.doorOrWindow === undefined) {
                        this.doorOrWindow = false;
                    }
                    if (this.staircaseCutOutShape === undefined) {
                        this.staircaseCutOutShape = null;
                    }
                    if (this.modelRotation === undefined) {
                        this.modelRotation = null;
                    }
                    if (this.modelSize === undefined) {
                        this.modelSize = null;
                    }
                    if (this.creator === undefined) {
                        this.creator = null;
                    }
                    if (this.backFaceShown === undefined) {
                        this.backFaceShown = false;
                    }
                    if (this.color === undefined) {
                        this.color = null;
                    }
                    if (this.iconYaw === undefined) {
                        this.iconYaw = 0;
                    }
                    if (this.modifiable === undefined) {
                        this.modifiable = false;
                    }
                    if (this.resizable === undefined) {
                        this.resizable = false;
                    }
                    if (this.deformable === undefined) {
                        this.deformable = false;
                    }
                    if (this.texturable === undefined) {
                        this.texturable = false;
                    }
                    if (this.horizontallyRotatable === undefined) {
                        this.horizontallyRotatable = false;
                    }
                    if (this.price === undefined) {
                        this.price = null;
                    }
                    if (this.valueAddedTaxPercentage === undefined) {
                        this.valueAddedTaxPercentage = null;
                    }
                    if (this.currency === undefined) {
                        this.currency = null;
                    }
                    if (this.properties === undefined) {
                        this.properties = null;
                    }
                    if (this.category === undefined) {
                        this.category = null;
                    }
                    if (this.filterCollationKey === undefined) {
                        this.filterCollationKey = null;
                    }
                    this.id = id;
                    this.name = name;
                    this.description = description;
                    this.information = information;
                    this.tags = tags;
                    this.creationDate = creationDate;
                    this.grade = grade;
                    this.icon = icon;
                    this.planIcon = planIcon;
                    this.model = model;
                    this.width = width;
                    this.depth = depth;
                    this.height = height;
                    this.elevation = elevation;
                    this.dropOnTopElevation = dropOnTopElevation;
                    this.movable = movable;
                    this.doorOrWindow = doorOrWindow_2;
                    this.color = color_3;
                    this.staircaseCutOutShape = staircaseCutOutShape_2;
                    this.creator = creator_2;
                    this.horizontallyRotatable = horizontallyRotatable_2;
                    this.price = price_2;
                    this.valueAddedTaxPercentage = valueAddedTaxPercentage_2;
                    this.currency = currency_2;
                    this.properties = properties_2 == null || /* size */ Object.keys(properties_2).length === 0 ? /* emptyMap */ {} : ( /* size */Object.keys(properties_2).length === 1 ? /* singletonMap */ (function (k) { var o = {}; o[k] = /* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(properties_2)).next(); return o; })(/* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* keySet */ Object.keys(properties_2)).next()) : ((function (o) { var r = {}; for (var p in o)
                        r[p] = o[p]; return r; })(properties_2)));
                    if (modelRotation_2 == null) {
                        this.modelRotation = PieceOfFurniture.IDENTITY_ROTATION_$LI$();
                    }
                    else {
                        this.modelRotation = CatalogPieceOfFurniture.deepClone(modelRotation_2);
                    }
                    this.backFaceShown = backFaceShown_2;
                    this.modelSize = modelSize_2;
                    this.resizable = resizable_2;
                    this.deformable = deformable_2;
                    this.texturable = texturable_2;
                    this.iconYaw = iconYaw_2;
                    this.proportional = proportional_2;
                    this.modifiable = modifiable_2;
                }
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.description === undefined) {
                    this.description = null;
                }
                if (this.information === undefined) {
                    this.information = null;
                }
                if (this.tags === undefined) {
                    this.tags = null;
                }
                if (this.creationDate === undefined) {
                    this.creationDate = null;
                }
                if (this.grade === undefined) {
                    this.grade = null;
                }
                if (this.icon === undefined) {
                    this.icon = null;
                }
                if (this.planIcon === undefined) {
                    this.planIcon = null;
                }
                if (this.model === undefined) {
                    this.model = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.depth === undefined) {
                    this.depth = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.proportional === undefined) {
                    this.proportional = false;
                }
                if (this.elevation === undefined) {
                    this.elevation = 0;
                }
                if (this.dropOnTopElevation === undefined) {
                    this.dropOnTopElevation = 0;
                }
                if (this.movable === undefined) {
                    this.movable = false;
                }
                if (this.doorOrWindow === undefined) {
                    this.doorOrWindow = false;
                }
                if (this.staircaseCutOutShape === undefined) {
                    this.staircaseCutOutShape = null;
                }
                if (this.modelRotation === undefined) {
                    this.modelRotation = null;
                }
                if (this.modelSize === undefined) {
                    this.modelSize = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.backFaceShown === undefined) {
                    this.backFaceShown = false;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.iconYaw === undefined) {
                    this.iconYaw = 0;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.resizable === undefined) {
                    this.resizable = false;
                }
                if (this.deformable === undefined) {
                    this.deformable = false;
                }
                if (this.texturable === undefined) {
                    this.texturable = false;
                }
                if (this.horizontallyRotatable === undefined) {
                    this.horizontallyRotatable = false;
                }
                if (this.price === undefined) {
                    this.price = null;
                }
                if (this.valueAddedTaxPercentage === undefined) {
                    this.valueAddedTaxPercentage = null;
                }
                if (this.currency === undefined) {
                    this.currency = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((typeof doorOrWindow === 'string') || doorOrWindow === null) && ((staircaseCutOutShape != null && staircaseCutOutShape instanceof Array && (staircaseCutOutShape.length == 0 || staircaseCutOutShape[0] == null || staircaseCutOutShape[0] instanceof Array)) || staircaseCutOutShape === null) && ((typeof color === 'boolean') || color === null) && ((typeof modelRotation === 'string') || modelRotation === null) && ((typeof backFaceShown === 'boolean') || backFaceShown === null) && ((typeof modelSize === 'boolean') || modelSize === null) && ((typeof creator === 'boolean') || creator === null) && ((resizable != null && resizable instanceof Big) || resizable === null) && ((deformable != null && deformable instanceof Big) || deformable === null) && ((typeof texturable === 'string') || texturable === null) && horizontallyRotatable === undefined && price === undefined && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined && iconYaw === undefined && proportional === undefined && modifiable === undefined) {
            var __args = arguments;
            var staircaseCutOutShape_3 = __args[16];
            var modelRotation_3 = __args[17];
            var backFaceShown_3 = __args[18];
            var creator_3 = __args[19];
            var resizable_3 = __args[20];
            var deformable_3 = __args[21];
            var texturable_3 = __args[22];
            var price_3 = __args[23];
            var valueAddedTaxPercentage_3 = __args[24];
            var currency_3 = __args[25];
            {
                var __args_33 = arguments;
                var modelSize_3 = null;
                var horizontallyRotatable_3 = true;
                {
                    var __args_34 = arguments;
                    var properties_3 = null;
                    {
                        var __args_35 = arguments;
                        var doorOrWindow_3 = false;
                        var color_4 = null;
                        var iconYaw_3 = Math.PI / 8;
                        var proportional_3 = true;
                        var modifiable_3 = false;
                        if (this.id === undefined) {
                            this.id = null;
                        }
                        if (this.name === undefined) {
                            this.name = null;
                        }
                        if (this.description === undefined) {
                            this.description = null;
                        }
                        if (this.information === undefined) {
                            this.information = null;
                        }
                        if (this.tags === undefined) {
                            this.tags = null;
                        }
                        if (this.creationDate === undefined) {
                            this.creationDate = null;
                        }
                        if (this.grade === undefined) {
                            this.grade = null;
                        }
                        if (this.icon === undefined) {
                            this.icon = null;
                        }
                        if (this.planIcon === undefined) {
                            this.planIcon = null;
                        }
                        if (this.model === undefined) {
                            this.model = null;
                        }
                        if (this.width === undefined) {
                            this.width = 0;
                        }
                        if (this.depth === undefined) {
                            this.depth = 0;
                        }
                        if (this.height === undefined) {
                            this.height = 0;
                        }
                        if (this.proportional === undefined) {
                            this.proportional = false;
                        }
                        if (this.elevation === undefined) {
                            this.elevation = 0;
                        }
                        if (this.dropOnTopElevation === undefined) {
                            this.dropOnTopElevation = 0;
                        }
                        if (this.movable === undefined) {
                            this.movable = false;
                        }
                        if (this.doorOrWindow === undefined) {
                            this.doorOrWindow = false;
                        }
                        if (this.staircaseCutOutShape === undefined) {
                            this.staircaseCutOutShape = null;
                        }
                        if (this.modelRotation === undefined) {
                            this.modelRotation = null;
                        }
                        if (this.modelSize === undefined) {
                            this.modelSize = null;
                        }
                        if (this.creator === undefined) {
                            this.creator = null;
                        }
                        if (this.backFaceShown === undefined) {
                            this.backFaceShown = false;
                        }
                        if (this.color === undefined) {
                            this.color = null;
                        }
                        if (this.iconYaw === undefined) {
                            this.iconYaw = 0;
                        }
                        if (this.modifiable === undefined) {
                            this.modifiable = false;
                        }
                        if (this.resizable === undefined) {
                            this.resizable = false;
                        }
                        if (this.deformable === undefined) {
                            this.deformable = false;
                        }
                        if (this.texturable === undefined) {
                            this.texturable = false;
                        }
                        if (this.horizontallyRotatable === undefined) {
                            this.horizontallyRotatable = false;
                        }
                        if (this.price === undefined) {
                            this.price = null;
                        }
                        if (this.valueAddedTaxPercentage === undefined) {
                            this.valueAddedTaxPercentage = null;
                        }
                        if (this.currency === undefined) {
                            this.currency = null;
                        }
                        if (this.properties === undefined) {
                            this.properties = null;
                        }
                        if (this.category === undefined) {
                            this.category = null;
                        }
                        if (this.filterCollationKey === undefined) {
                            this.filterCollationKey = null;
                        }
                        this.id = id;
                        this.name = name;
                        this.description = description;
                        this.information = information;
                        this.tags = tags;
                        this.creationDate = creationDate;
                        this.grade = grade;
                        this.icon = icon;
                        this.planIcon = planIcon;
                        this.model = model;
                        this.width = width;
                        this.depth = depth;
                        this.height = height;
                        this.elevation = elevation;
                        this.dropOnTopElevation = dropOnTopElevation;
                        this.movable = movable;
                        this.doorOrWindow = doorOrWindow_3;
                        this.color = color_4;
                        this.staircaseCutOutShape = staircaseCutOutShape_3;
                        this.creator = creator_3;
                        this.horizontallyRotatable = horizontallyRotatable_3;
                        this.price = price_3;
                        this.valueAddedTaxPercentage = valueAddedTaxPercentage_3;
                        this.currency = currency_3;
                        this.properties = properties_3 == null || /* size */ Object.keys(properties_3).length === 0 ? /* emptyMap */ {} : ( /* size */Object.keys(properties_3).length === 1 ? /* singletonMap */ (function (k) { var o = {}; o[k] = /* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(properties_3)).next(); return o; })(/* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* keySet */ Object.keys(properties_3)).next()) : ((function (o) { var r = {}; for (var p in o)
                            r[p] = o[p]; return r; })(properties_3)));
                        if (modelRotation_3 == null) {
                            this.modelRotation = PieceOfFurniture.IDENTITY_ROTATION_$LI$();
                        }
                        else {
                            this.modelRotation = CatalogPieceOfFurniture.deepClone(modelRotation_3);
                        }
                        this.backFaceShown = backFaceShown_3;
                        this.modelSize = modelSize_3;
                        this.resizable = resizable_3;
                        this.deformable = deformable_3;
                        this.texturable = texturable_3;
                        this.iconYaw = iconYaw_3;
                        this.proportional = proportional_3;
                        this.modifiable = modifiable_3;
                    }
                    if (this.id === undefined) {
                        this.id = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.description === undefined) {
                        this.description = null;
                    }
                    if (this.information === undefined) {
                        this.information = null;
                    }
                    if (this.tags === undefined) {
                        this.tags = null;
                    }
                    if (this.creationDate === undefined) {
                        this.creationDate = null;
                    }
                    if (this.grade === undefined) {
                        this.grade = null;
                    }
                    if (this.icon === undefined) {
                        this.icon = null;
                    }
                    if (this.planIcon === undefined) {
                        this.planIcon = null;
                    }
                    if (this.model === undefined) {
                        this.model = null;
                    }
                    if (this.width === undefined) {
                        this.width = 0;
                    }
                    if (this.depth === undefined) {
                        this.depth = 0;
                    }
                    if (this.height === undefined) {
                        this.height = 0;
                    }
                    if (this.proportional === undefined) {
                        this.proportional = false;
                    }
                    if (this.elevation === undefined) {
                        this.elevation = 0;
                    }
                    if (this.dropOnTopElevation === undefined) {
                        this.dropOnTopElevation = 0;
                    }
                    if (this.movable === undefined) {
                        this.movable = false;
                    }
                    if (this.doorOrWindow === undefined) {
                        this.doorOrWindow = false;
                    }
                    if (this.staircaseCutOutShape === undefined) {
                        this.staircaseCutOutShape = null;
                    }
                    if (this.modelRotation === undefined) {
                        this.modelRotation = null;
                    }
                    if (this.modelSize === undefined) {
                        this.modelSize = null;
                    }
                    if (this.creator === undefined) {
                        this.creator = null;
                    }
                    if (this.backFaceShown === undefined) {
                        this.backFaceShown = false;
                    }
                    if (this.color === undefined) {
                        this.color = null;
                    }
                    if (this.iconYaw === undefined) {
                        this.iconYaw = 0;
                    }
                    if (this.modifiable === undefined) {
                        this.modifiable = false;
                    }
                    if (this.resizable === undefined) {
                        this.resizable = false;
                    }
                    if (this.deformable === undefined) {
                        this.deformable = false;
                    }
                    if (this.texturable === undefined) {
                        this.texturable = false;
                    }
                    if (this.horizontallyRotatable === undefined) {
                        this.horizontallyRotatable = false;
                    }
                    if (this.price === undefined) {
                        this.price = null;
                    }
                    if (this.valueAddedTaxPercentage === undefined) {
                        this.valueAddedTaxPercentage = null;
                    }
                    if (this.currency === undefined) {
                        this.currency = null;
                    }
                    if (this.properties === undefined) {
                        this.properties = null;
                    }
                    if (this.category === undefined) {
                        this.category = null;
                    }
                    if (this.filterCollationKey === undefined) {
                        this.filterCollationKey = null;
                    }
                }
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.description === undefined) {
                    this.description = null;
                }
                if (this.information === undefined) {
                    this.information = null;
                }
                if (this.tags === undefined) {
                    this.tags = null;
                }
                if (this.creationDate === undefined) {
                    this.creationDate = null;
                }
                if (this.grade === undefined) {
                    this.grade = null;
                }
                if (this.icon === undefined) {
                    this.icon = null;
                }
                if (this.planIcon === undefined) {
                    this.planIcon = null;
                }
                if (this.model === undefined) {
                    this.model = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.depth === undefined) {
                    this.depth = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.proportional === undefined) {
                    this.proportional = false;
                }
                if (this.elevation === undefined) {
                    this.elevation = 0;
                }
                if (this.dropOnTopElevation === undefined) {
                    this.dropOnTopElevation = 0;
                }
                if (this.movable === undefined) {
                    this.movable = false;
                }
                if (this.doorOrWindow === undefined) {
                    this.doorOrWindow = false;
                }
                if (this.staircaseCutOutShape === undefined) {
                    this.staircaseCutOutShape = null;
                }
                if (this.modelRotation === undefined) {
                    this.modelRotation = null;
                }
                if (this.modelSize === undefined) {
                    this.modelSize = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.backFaceShown === undefined) {
                    this.backFaceShown = false;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.iconYaw === undefined) {
                    this.iconYaw = 0;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.resizable === undefined) {
                    this.resizable = false;
                }
                if (this.deformable === undefined) {
                    this.deformable = false;
                }
                if (this.texturable === undefined) {
                    this.texturable = false;
                }
                if (this.horizontallyRotatable === undefined) {
                    this.horizontallyRotatable = false;
                }
                if (this.price === undefined) {
                    this.price = null;
                }
                if (this.valueAddedTaxPercentage === undefined) {
                    this.valueAddedTaxPercentage = null;
                }
                if (this.currency === undefined) {
                    this.currency = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((information != null && (information.constructor != null && information.constructor["__interfaces"] != null && information.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || information === null) && ((tags != null && (tags.constructor != null && tags.constructor["__interfaces"] != null && tags.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || tags === null) && ((creationDate != null && (creationDate.constructor != null && creationDate.constructor["__interfaces"] != null && creationDate.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((typeof icon === 'number') || icon === null) && ((typeof planIcon === 'number') || planIcon === null) && ((typeof model === 'number') || model === null) && ((typeof width === 'boolean') || width === null) && ((depth != null && depth instanceof Array && (depth.length == 0 || depth[0] == null || depth[0] instanceof Array)) || depth === null) && ((typeof height === 'string') || height === null) && ((typeof elevation === 'boolean') || elevation === null) && ((dropOnTopElevation != null && dropOnTopElevation instanceof Big) || dropOnTopElevation === null) && ((movable != null && movable instanceof Big) || movable === null) && doorOrWindow === undefined && staircaseCutOutShape === undefined && color === undefined && modelRotation === undefined && backFaceShown === undefined && modelSize === undefined && creator === undefined && resizable === undefined && deformable === undefined && texturable === undefined && horizontallyRotatable === undefined && price === undefined && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined && iconYaw === undefined && proportional === undefined && modifiable === undefined) {
            var __args = arguments;
            var icon_1 = __args[3];
            var planIcon_1 = __args[4];
            var model_1 = __args[5];
            var width_1 = __args[6];
            var depth_1 = __args[7];
            var height_2 = __args[8];
            var elevation_1 = __args[9];
            var movable_1 = __args[10];
            var modelRotation_4 = __args[11];
            var creator_4 = __args[12];
            var resizable_4 = __args[13];
            var price_4 = __args[14];
            var valueAddedTaxPercentage_4 = __args[15];
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((information != null && (information.constructor != null && information.constructor["__interfaces"] != null && information.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || information === null) && ((tags != null && (tags.constructor != null && tags.constructor["__interfaces"] != null && tags.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((typeof icon === 'number') || icon === null) && ((typeof planIcon === 'number') || planIcon === null) && ((typeof model === 'boolean') || model === null) && ((typeof width === 'boolean') || width === null) && ((depth != null && depth instanceof Array && (depth.length == 0 || depth[0] == null || depth[0] instanceof Array)) || depth === null) && ((typeof height === 'string') || height === null) && ((typeof elevation === 'boolean') || elevation === null) && ((dropOnTopElevation != null && dropOnTopElevation instanceof Big) || dropOnTopElevation === null) && ((movable != null && movable instanceof Big) || movable === null) && doorOrWindow === undefined && staircaseCutOutShape === undefined && color === undefined && modelRotation === undefined && backFaceShown === undefined && modelSize === undefined && creator === undefined && resizable === undefined && deformable === undefined && texturable === undefined && horizontallyRotatable === undefined && price === undefined && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined && iconYaw === undefined && proportional === undefined && modifiable === undefined) {
            var __args = arguments;
            var icon_2 = __args[3];
            var model_2 = __args[4];
            var width_2 = __args[5];
            var depth_2 = __args[6];
            var height_3 = __args[7];
            var elevation_2 = __args[8];
            var movable_2 = __args[9];
            var doorOrWindow_4 = __args[10];
            var modelRotation_5 = __args[11];
            var creator_5 = __args[12];
            var resizable_5 = __args[13];
            var price_5 = __args[14];
            var valueAddedTaxPercentage_5 = __args[15];
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((name != null && (name.constructor != null && name.constructor["__interfaces"] != null && name.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || name === null) && ((description != null && (description.constructor != null && description.constructor["__interfaces"] != null && description.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || description === null) && ((typeof information === 'number') || information === null) && ((typeof tags === 'number') || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((typeof icon === 'boolean') || icon === null) && ((typeof planIcon === 'string') || planIcon === null) && ((typeof model === 'number') || model === null) && ((width != null && width instanceof Array && (width.length == 0 || width[0] == null || width[0] instanceof Array)) || width === null) && ((typeof depth === 'boolean') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'string') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && doorOrWindow === undefined && staircaseCutOutShape === undefined && color === undefined && modelRotation === undefined && backFaceShown === undefined && modelSize === undefined && creator === undefined && resizable === undefined && deformable === undefined && texturable === undefined && horizontallyRotatable === undefined && price === undefined && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined && iconYaw === undefined && proportional === undefined && modifiable === undefined) {
            var __args = arguments;
            var name_1 = __args[0];
            var icon_3 = __args[1];
            var model_3 = __args[2];
            var width_3 = __args[3];
            var depth_3 = __args[4];
            var height_4 = __args[5];
            var elevation_3 = __args[6];
            var movable_3 = __args[7];
            var staircaseCutOutShape_4 = __args[8];
            var color_5 = __args[9];
            var modelRotation_6 = __args[10];
            var backFaceShown_4 = __args[11];
            var modelSize_4 = __args[12];
            var creator_6 = __args[13];
            var iconYaw_4 = __args[14];
            var proportional_4 = __args[15];
            {
                var __args_36 = arguments;
                var id_2 = null;
                var description_1 = null;
                var information_1 = null;
                var tags_1 = [];
                var creationDate_1 = Date.now();
                var grade_1 = null;
                var planIcon_2 = null;
                var dropOnTopElevation_1 = 1.0;
                var doorOrWindow_5 = false;
                var resizable_6 = true;
                var deformable_4 = true;
                var texturable_4 = true;
                var horizontallyRotatable_4 = true;
                var price_6 = null;
                var valueAddedTaxPercentage_6 = null;
                var currency_4 = null;
                var properties_4 = null;
                var modifiable_4 = true;
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.description === undefined) {
                    this.description = null;
                }
                if (this.information === undefined) {
                    this.information = null;
                }
                if (this.tags === undefined) {
                    this.tags = null;
                }
                if (this.creationDate === undefined) {
                    this.creationDate = null;
                }
                if (this.grade === undefined) {
                    this.grade = null;
                }
                if (this.icon === undefined) {
                    this.icon = null;
                }
                if (this.planIcon === undefined) {
                    this.planIcon = null;
                }
                if (this.model === undefined) {
                    this.model = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.depth === undefined) {
                    this.depth = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.proportional === undefined) {
                    this.proportional = false;
                }
                if (this.elevation === undefined) {
                    this.elevation = 0;
                }
                if (this.dropOnTopElevation === undefined) {
                    this.dropOnTopElevation = 0;
                }
                if (this.movable === undefined) {
                    this.movable = false;
                }
                if (this.doorOrWindow === undefined) {
                    this.doorOrWindow = false;
                }
                if (this.staircaseCutOutShape === undefined) {
                    this.staircaseCutOutShape = null;
                }
                if (this.modelRotation === undefined) {
                    this.modelRotation = null;
                }
                if (this.modelSize === undefined) {
                    this.modelSize = null;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.backFaceShown === undefined) {
                    this.backFaceShown = false;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.iconYaw === undefined) {
                    this.iconYaw = 0;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.resizable === undefined) {
                    this.resizable = false;
                }
                if (this.deformable === undefined) {
                    this.deformable = false;
                }
                if (this.texturable === undefined) {
                    this.texturable = false;
                }
                if (this.horizontallyRotatable === undefined) {
                    this.horizontallyRotatable = false;
                }
                if (this.price === undefined) {
                    this.price = null;
                }
                if (this.valueAddedTaxPercentage === undefined) {
                    this.valueAddedTaxPercentage = null;
                }
                if (this.currency === undefined) {
                    this.currency = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
                this.id = id_2;
                this.name = name_1;
                this.description = description_1;
                this.information = information_1;
                this.tags = tags_1;
                this.creationDate = creationDate_1;
                this.grade = grade_1;
                this.icon = icon_3;
                this.planIcon = planIcon_2;
                this.model = model_3;
                this.width = width_3;
                this.depth = depth_3;
                this.height = height_4;
                this.elevation = elevation_3;
                this.dropOnTopElevation = dropOnTopElevation_1;
                this.movable = movable_3;
                this.doorOrWindow = doorOrWindow_5;
                this.color = color_5;
                this.staircaseCutOutShape = staircaseCutOutShape_4;
                this.creator = creator_6;
                this.horizontallyRotatable = horizontallyRotatable_4;
                this.price = price_6;
                this.valueAddedTaxPercentage = valueAddedTaxPercentage_6;
                this.currency = currency_4;
                this.properties = properties_4 == null || /* size */ Object.keys(properties_4).length === 0 ? /* emptyMap */ {} : ( /* size */Object.keys(properties_4).length === 1 ? /* singletonMap */ (function (k) { var o = {}; o[k] = /* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(properties_4)).next(); return o; })(/* iterator */ (function (a) { var i = 0; return { next: function () { return i < a.length ? a[i++] : null; }, hasNext: function () { return i < a.length; } }; })(/* keySet */ Object.keys(properties_4)).next()) : ((function (o) { var r = {}; for (var p in o)
                    r[p] = o[p]; return r; })(properties_4)));
                if (modelRotation_6 == null) {
                    this.modelRotation = PieceOfFurniture.IDENTITY_ROTATION_$LI$();
                }
                else {
                    this.modelRotation = CatalogPieceOfFurniture.deepClone(modelRotation_6);
                }
                this.backFaceShown = backFaceShown_4;
                this.modelSize = modelSize_4;
                this.resizable = resizable_6;
                this.deformable = deformable_4;
                this.texturable = texturable_4;
                this.iconYaw = iconYaw_4;
                this.proportional = proportional_4;
                this.modifiable = modifiable_4;
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.information === undefined) {
                this.information = null;
            }
            if (this.tags === undefined) {
                this.tags = null;
            }
            if (this.creationDate === undefined) {
                this.creationDate = null;
            }
            if (this.grade === undefined) {
                this.grade = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.planIcon === undefined) {
                this.planIcon = null;
            }
            if (this.model === undefined) {
                this.model = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.dropOnTopElevation === undefined) {
                this.dropOnTopElevation = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.staircaseCutOutShape === undefined) {
                this.staircaseCutOutShape = null;
            }
            if (this.modelRotation === undefined) {
                this.modelRotation = null;
            }
            if (this.modelSize === undefined) {
                this.modelSize = null;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.backFaceShown === undefined) {
                this.backFaceShown = false;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.iconYaw === undefined) {
                this.iconYaw = 0;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.horizontallyRotatable === undefined) {
                this.horizontallyRotatable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    CatalogPieceOfFurniture.__static_initialize = function () { if (!CatalogPieceOfFurniture.__static_initialized) {
        CatalogPieceOfFurniture.__static_initialized = true;
        CatalogPieceOfFurniture.__static_initializer_0();
    } };
    CatalogPieceOfFurniture.EMPTY_CRITERIA_$LI$ = function () { CatalogPieceOfFurniture.__static_initialize(); if (CatalogPieceOfFurniture.EMPTY_CRITERIA == null) {
        CatalogPieceOfFurniture.EMPTY_CRITERIA = [];
    } return CatalogPieceOfFurniture.EMPTY_CRITERIA; };
    CatalogPieceOfFurniture.COMPARATOR_$LI$ = function () { CatalogPieceOfFurniture.__static_initialize(); return CatalogPieceOfFurniture.COMPARATOR; };
    CatalogPieceOfFurniture.recentFilters_$LI$ = function () { CatalogPieceOfFurniture.__static_initialize(); return CatalogPieceOfFurniture.recentFilters; };
    CatalogPieceOfFurniture.__static_initializer_0 = function () {
        CatalogPieceOfFurniture.COMPARATOR = /* getInstance */ { compare: function (o1, o2) { return o1.toString().localeCompare(o2.toString()); }, equals: function (o1, o2) { return o1.toString().localeCompare(o2.toString()) === 0; } };
        /* setStrength */ CatalogPieceOfFurniture.COMPARATOR_$LI$();
        CatalogPieceOfFurniture.recentFilters = ({});
    };
    /**
     * Returns the ID of this piece of furniture or <code>null</code>.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getId = function () {
        return this.id;
    };
    /**
     * Returns the name of this piece of furniture.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the description of this piece of furniture.
     * The returned value may be <code>null</code>.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getDescription = function () {
        return this.description;
    };
    /**
     * Returns the additional information associated to this piece, or <code>null</code>.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getInformation = function () {
        return this.information;
    };
    /**
     * Returns the tags associated to this piece.
     * @return {java.lang.String[]}
     */
    CatalogPieceOfFurniture.prototype.getTags = function () {
        return this.tags;
    };
    /**
     * Returns the creation date of this piece in milliseconds since the epoch,
     * or <code>null</code> if no date is given to this piece.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getCreationDate = function () {
        return this.creationDate;
    };
    /**
     * Returns the grade of this piece, or <code>null</code> if no grade is given to this piece.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getGrade = function () {
        return this.grade;
    };
    /**
     * Returns the depth of this piece of furniture.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getDepth = function () {
        return this.depth;
    };
    /**
     * Returns the height of this piece of furniture.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Returns the width of this piece of furniture.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getWidth = function () {
        return this.width;
    };
    /**
     * Returns the elevation of this piece of furniture.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Returns the elevation at which should be placed an object dropped on this piece.
     * @return {number} a percentage of the height of this piece. A negative value means that the piece
     * should be ignored when an object is dropped on it.
     */
    CatalogPieceOfFurniture.prototype.getDropOnTopElevation = function () {
        return this.dropOnTopElevation;
    };
    /**
     * Returns <code>true</code> if this piece of furniture is movable.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isMovable = function () {
        return this.movable;
    };
    /**
     * Returns <code>true</code> if this piece of furniture is a door or a window.
     * As this method existed before {@linkplain CatalogDoorOrWindow CatalogDoorOrWindow} class,
     * you shouldn't rely on the value returned by this method to guess if a piece
     * is an instance of <code>DoorOrWindow</code> class.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isDoorOrWindow = function () {
        return this.doorOrWindow;
    };
    /**
     * Returns the icon of this piece of furniture.
     * @return {Object}
     */
    CatalogPieceOfFurniture.prototype.getIcon = function () {
        return this.icon;
    };
    /**
     * Returns the icon of this piece of furniture displayed in plan or <code>null</code>.
     * @return {Object}
     */
    CatalogPieceOfFurniture.prototype.getPlanIcon = function () {
        return this.planIcon;
    };
    /**
     * Returns the 3D model of this piece of furniture.
     * @return {Object}
     */
    CatalogPieceOfFurniture.prototype.getModel = function () {
        return this.model;
    };
    /**
     * Returns the size of the 3D model of this piece of furniture.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getModelSize = function () {
        return this.modelSize;
    };
    /**
     * Returns the rotation 3 by 3 matrix of this piece of furniture that ensures
     * its model is correctly oriented.
     * @return {float[][]}
     */
    CatalogPieceOfFurniture.prototype.getModelRotation = function () {
        return CatalogPieceOfFurniture.deepClone(this.modelRotation);
    };
    /**
     * Returns a deep copy of the given 3 by 3 matrix.
     * @param {float[][]} modelRotation
     * @return {float[][]}
     * @private
     */
    CatalogPieceOfFurniture.deepClone = function (modelRotation) {
        return [[modelRotation[0][0], modelRotation[0][1], modelRotation[0][2]], [modelRotation[1][0], modelRotation[1][1], modelRotation[1][2]], [modelRotation[2][0], modelRotation[2][1], modelRotation[2][2]]];
    };
    /**
     * Returns the shape used to cut out upper levels when they intersect with the piece
     * like a staircase.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getStaircaseCutOutShape = function () {
        return this.staircaseCutOutShape;
    };
    /**
     * Returns the creator of this piece.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getCreator = function () {
        return this.creator;
    };
    /**
     * Returns <code>true</code> if the back face of the piece of furniture
     * model should be displayed.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isBackFaceShown = function () {
        return this.backFaceShown;
    };
    /**
     * Returns the color of this piece of furniture.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Returns the yaw angle used to create the piece icon.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.getIconYaw = function () {
        return this.iconYaw;
    };
    /**
     * Returns <code>true</code> if size proportions should be kept.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isProportional = function () {
        return this.proportional;
    };
    /**
     * Returns <code>true</code> if this piece is modifiable (not read from resources).
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isModifiable = function () {
        return this.modifiable;
    };
    /**
     * Returns <code>true</code> if this piece is resizable.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isResizable = function () {
        return this.resizable;
    };
    /**
     * Returns <code>true</code> if this piece is deformable.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isDeformable = function () {
        return this.deformable;
    };
    /**
     * Returns <code>true</code> if this piece is deformable.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isWidthDepthDeformable = function () {
        return this.isDeformable();
    };
    /**
     * Returns <code>false</code> if this piece should always keep the same color or texture.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isTexturable = function () {
        return this.texturable;
    };
    /**
     * Returns <code>false</code> if this piece should not rotate around an horizontal axis.
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.isHorizontallyRotatable = function () {
        return this.horizontallyRotatable;
    };
    /**
     * Returns the price of this piece of furniture or <code>null</code>.
     * @return {Big}
     */
    CatalogPieceOfFurniture.prototype.getPrice = function () {
        return this.price;
    };
    /**
     * Returns the Value Added Tax percentage applied to the price of this piece of furniture.
     * @return {Big}
     */
    CatalogPieceOfFurniture.prototype.getValueAddedTaxPercentage = function () {
        return this.valueAddedTaxPercentage;
    };
    /**
     * Returns the price currency, noted with ISO 4217 code, or <code>null</code>
     * if it has no price or default currency should be used.
     * @return {string}
     */
    CatalogPieceOfFurniture.prototype.getCurrency = function () {
        return this.currency;
    };
    /**
     * Returns the value of an additional property <code>name</code> of this piece.
     * @return {string} the value of the property or <code>null</code> if it doesn't exist.
     * @param {string} name
     */
    CatalogPieceOfFurniture.prototype.getProperty = function (name) {
        return /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.properties, name);
    };
    /**
     * Returns the names of the additional properties of this piece.
     * @return {string[]} a collection of all the names of the properties
     */
    CatalogPieceOfFurniture.prototype.getPropertyNames = function () {
        return /* keySet */ Object.keys(this.properties);
    };
    /**
     * Returns the category of this piece of furniture.
     * @return {FurnitureCategory}
     */
    CatalogPieceOfFurniture.prototype.getCategory = function () {
        return this.category;
    };
    /**
     * Sets the category of this piece of furniture.
     * @param {FurnitureCategory} category
     * @private
     */
    CatalogPieceOfFurniture.prototype.setCategory = function (category) {
        this.category = category;
    };
    /**
     * Returns <code>true</code> if this piece and the one in parameter are the same objects.
     * Note that, from version 3.6, two pieces of furniture can have the same name.
     * @param {Object} obj
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.equals = function (obj) {
        return /* equals */ (function (o1, o2) { return o1 && o1.equals ? o1.equals(o2) : o1 === o2; })(this, obj);
    };
    /**
     * Returns default hash code.
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.hashCode = function () {
        return /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this);
    };
    /**
     * Compares the names of this piece and the one in parameter.
     * @param {CatalogPieceOfFurniture} piece
     * @return {number}
     */
    CatalogPieceOfFurniture.prototype.compareTo = function (piece) {
        var nameComparison = CatalogPieceOfFurniture.COMPARATOR_$LI$().compare(this.name, piece.name);
        if (nameComparison !== 0) {
            return nameComparison;
        }
        else {
            return this.modifiable === piece.modifiable ? 0 : (this.modifiable ? 1 : -1);
        }
    };
    /**
     * Returns <code>true</code> if this piece matches the given <code>filter</code> text.
     * Each substring of the <code>filter</code> is considered as a search criterion that can match
     * the name, the category name, the creator, the description or the tags of this piece.
     * @param {string} filter
     * @return {boolean}
     */
    CatalogPieceOfFurniture.prototype.matchesFilter = function (filter) {
        var filterCriteriaCollationKeys = this.getFilterCollationKeys(filter);
        var checkedCriteria = 0;
        if (filterCriteriaCollationKeys.length > 0) {
            var furnitureCollationKey = this.getPieceOfFurnitureCollationKey();
            for (var i = 0; i < filterCriteriaCollationKeys.length; i++) {
                {
                    if (this.isSubCollationKey(furnitureCollationKey, filterCriteriaCollationKeys[i], 0)) {
                        checkedCriteria++;
                    }
                    else {
                        break;
                    }
                }
                ;
            }
        }
        return checkedCriteria === filterCriteriaCollationKeys.length;
    };
    /**
     * Returns the collation key bytes of each criterion in the given <code>filter</code>.
     * @param {string} filter
     * @return {byte[][]}
     * @private
     */
    /*private*/ CatalogPieceOfFurniture.prototype.getFilterCollationKeys = function (filter) {
        if (filter.length === 0) {
            return CatalogPieceOfFurniture.EMPTY_CRITERIA_$LI$();
        }
        var filterCollationKeys = (function (m, k) { return m[k] === undefined ? null : m[k]; })(CatalogPieceOfFurniture.recentFilters_$LI$(), filter);
        if (filterCollationKeys == null) {
            var filterCriteria = filter.split("\\s|\\p{Punct}|\\|");
            var filterCriteriaCollationKeys = ([]);
            for (var index = 0; index < filterCriteria.length; index++) {
                var criterion = filterCriteria[index];
                {
                    if (criterion.length > 0) {
                        /* add */ (filterCriteriaCollationKeys.push(CatalogPieceOfFurniture.COMPARATOR_$LI$().getCollationKey(criterion).toByteArray()) > 0);
                    }
                }
            }
            if ( /* size */filterCriteriaCollationKeys.length === 0) {
                filterCollationKeys = CatalogPieceOfFurniture.EMPTY_CRITERIA_$LI$();
            }
            else {
                filterCollationKeys = /* toArray */ filterCriteriaCollationKeys.slice(0);
            }
            /* put */ (CatalogPieceOfFurniture.recentFilters_$LI$()[filter] = filterCollationKeys);
        }
        return filterCollationKeys;
    };
    /**
     * Returns the collation key bytes used to compare the given <code>piece</code> with filter.
     * @return {byte[]}
     * @private
     */
    /*private*/ CatalogPieceOfFurniture.prototype.getPieceOfFurnitureCollationKey = function () {
        if (this.filterCollationKey == null) {
            var search = { str: "", toString: function () { return this.str; } };
            {
                var array = this.getFilterCriteria();
                var _loop_1 = function (index) {
                    var criterion = array[index];
                    {
                        if ( /* length */search.str.length !== 0) {
                            /* append */ (function (sb) { sb.str += '|'; return sb; })(search);
                        }
                        /* append */ (function (sb) { sb.str += criterion; return sb; })(search);
                    }
                };
                for (var index = 0; index < array.length; index++) {
                    _loop_1(index);
                }
            }
            this.filterCollationKey = CatalogPieceOfFurniture.COMPARATOR_$LI$().getCollationKey(/* toString */ search.str).toByteArray();
        }
        return this.filterCollationKey;
    };
    /**
     * Returns the strings used as criteria for filtering (name, category, creator, description and tags).
     * @see CatalogPieceOfFurniture#matchesFilter(String)
     * @return {java.lang.String[]}
     */
    CatalogPieceOfFurniture.prototype.getFilterCriteria = function () {
        var criteria = ([]);
        /* add */ (criteria.push(this.getName()) > 0);
        if (this.getCategory() != null) {
            /* add */ (criteria.push(this.getCategory().getName()) > 0);
        }
        if (this.getCreator() != null) {
            /* add */ (criteria.push(this.getCreator()) > 0);
        }
        if (this.getDescription() != null) {
            /* add */ (criteria.push(this.getDescription()) > 0);
        }
        {
            var array = this.getTags();
            for (var index = 0; index < array.length; index++) {
                var tag = array[index];
                {
                    /* add */ (criteria.push(tag) > 0);
                }
            }
        }
        return /* toArray */ criteria.slice(0);
    };
    /**
     * Returns <code>true</code> if the given filter collation key is a sub part of the first array collator key.
     * @param {byte[]} collationKey
     * @param {byte[]} filterCollationKey
     * @param {number} start
     * @return {boolean}
     * @private
     */
    /*private*/ CatalogPieceOfFurniture.prototype.isSubCollationKey = function (collationKey, filterCollationKey, start) {
        for (var i = start, n = collationKey.length - 4, m = filterCollationKey.length - 4; i < n && i < n - m + 1; i++) {
            {
                if (collationKey[i] === filterCollationKey[0]) {
                    for (var j = 1; j < m; j++) {
                        {
                            if (collationKey[i + j] !== filterCollationKey[j]) {
                                return this.isSubCollationKey(collationKey, filterCollationKey, i + 1);
                            }
                        }
                        ;
                    }
                    return true;
                }
            }
            ;
        }
        return false;
    };
    /**
     * Returns a clone of this piece.
     * @return {CatalogPieceOfFurniture}
     */
    CatalogPieceOfFurniture.prototype.clone = function () {
        try {
            var clone = (function (o) { var clone = Object.create(o); for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            } return clone; })(this);
            clone.category = null;
            return clone;
        }
        catch (ex) {
            throw new IllegalStateException("Super class isn\'t cloneable");
        }
    };
    CatalogPieceOfFurniture.__static_initialized = false;
    return CatalogPieceOfFurniture;
}());
CatalogPieceOfFurniture["__class"] = "com.eteks.sweethome3d.model.CatalogPieceOfFurniture";
CatalogPieceOfFurniture["__interfaces"] = ["com.eteks.sweethome3d.model.CatalogItem", "com.eteks.sweethome3d.model.PieceOfFurniture"];
/**
 * Creates a <code>RecorderException</code> with its message
 * and the internal cause that initiated this exception.
 * @param {string} message
 * @param {Error} cause
 * @class
 * @extends Error
 * @author Emmanuel Puybaret
 * @ignore
 */
var RecorderException = /** @class */ (function (_super) {
    __extends(RecorderException, _super);
    function RecorderException(message, cause) {
        var _this = this;
        if (((typeof message === 'string') || message === null) && ((cause != null && (cause["__classes"] && cause["__classes"].indexOf("java.lang.Throwable") >= 0) || cause != null && cause instanceof Error) || cause === null)) {
            var __args = arguments;
            _this = _super.call(this, message) || this;
            _this.message = message;
        }
        else if (((typeof message === 'string') || message === null) && cause === undefined) {
            var __args = arguments;
            _this = _super.call(this, message) || this;
            _this.message = message;
        }
        else if (message === undefined && cause === undefined) {
            var __args = arguments;
            _this = _super.call(this) || this;
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    return RecorderException;
}(Error));
RecorderException["__class"] = "com.eteks.sweethome3d.model.RecorderException";
/**
 * Creates a catalog texture.
 * @param {string} id the ID of this texture
 * @param {string} name the name of this texture
 * @param {Object} image the content of the image used for this texture
 * @param {number} width the width of the texture in centimeters
 * @param {number} height the height of the texture in centimeters
 * @param {boolean} modifiable <code>true</code> if this texture can be modified
 * @param {string} creator
 * @class
 * @author Emmanuel Puybaret
 */
var CatalogTexture = /** @class */ (function () {
    function CatalogTexture(id, name, image, width, height, creator, modifiable) {
        if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((image != null && (image.constructor != null && image.constructor["__interfaces"] != null && image.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || image === null) && ((typeof width === 'number') || width === null) && ((typeof height === 'number') || height === null) && ((typeof creator === 'string') || creator === null) && ((typeof modifiable === 'boolean') || modifiable === null)) {
            var __args = arguments;
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
            this.id = id;
            this.name = name;
            this.image = image;
            this.width = width;
            this.height = height;
            this.creator = creator;
            this.modifiable = modifiable;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((image != null && (image.constructor != null && image.constructor["__interfaces"] != null && image.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || image === null) && ((typeof width === 'number') || width === null) && ((typeof height === 'number') || height === null) && ((typeof creator === 'string') || creator === null) && modifiable === undefined) {
            var __args = arguments;
            {
                var __args_37 = arguments;
                var modifiable_5 = false;
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
                this.id = id;
                this.name = name;
                this.image = image;
                this.width = width;
                this.height = height;
                this.creator = creator;
                this.modifiable = modifiable_5;
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((name != null && (name.constructor != null && name.constructor["__interfaces"] != null && name.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || name === null) && ((typeof image === 'number') || image === null) && ((typeof width === 'number') || width === null) && ((typeof height === 'boolean') || height === null) && creator === undefined && modifiable === undefined) {
            var __args = arguments;
            var name_2 = __args[0];
            var image_1 = __args[1];
            var width_4 = __args[2];
            var height_5 = __args[3];
            var modifiable_6 = __args[4];
            {
                var __args_38 = arguments;
                var id_3 = null;
                var creator_7 = null;
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
                this.id = id_3;
                this.name = name_2;
                this.image = image_1;
                this.width = width_4;
                this.height = height_5;
                this.creator = creator_7;
                this.modifiable = modifiable_6;
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((name != null && (name.constructor != null && name.constructor["__interfaces"] != null && name.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || name === null) && ((typeof image === 'number') || image === null) && ((typeof width === 'number') || width === null) && height === undefined && creator === undefined && modifiable === undefined) {
            var __args = arguments;
            var name_3 = __args[0];
            var image_2 = __args[1];
            var width_5 = __args[2];
            var height_6 = __args[3];
            {
                var __args_39 = arguments;
                var id_4 = null;
                var creator_8 = null;
                {
                    var __args_40 = arguments;
                    var modifiable_7 = false;
                    if (this.id === undefined) {
                        this.id = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.image === undefined) {
                        this.image = null;
                    }
                    if (this.width === undefined) {
                        this.width = 0;
                    }
                    if (this.height === undefined) {
                        this.height = 0;
                    }
                    if (this.creator === undefined) {
                        this.creator = null;
                    }
                    if (this.modifiable === undefined) {
                        this.modifiable = false;
                    }
                    if (this.category === undefined) {
                        this.category = null;
                    }
                    if (this.filterCollationKey === undefined) {
                        this.filterCollationKey = null;
                    }
                    this.id = id_4;
                    this.name = name_3;
                    this.image = image_2;
                    this.width = width_5;
                    this.height = height_6;
                    this.creator = creator_8;
                    this.modifiable = modifiable_7;
                }
                if (this.id === undefined) {
                    this.id = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.image === undefined) {
                    this.image = null;
                }
                if (this.width === undefined) {
                    this.width = 0;
                }
                if (this.height === undefined) {
                    this.height = 0;
                }
                if (this.creator === undefined) {
                    this.creator = null;
                }
                if (this.modifiable === undefined) {
                    this.modifiable = false;
                }
                if (this.category === undefined) {
                    this.category = null;
                }
                if (this.filterCollationKey === undefined) {
                    this.filterCollationKey = null;
                }
            }
            if (this.id === undefined) {
                this.id = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.image === undefined) {
                this.image = null;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.creator === undefined) {
                this.creator = null;
            }
            if (this.modifiable === undefined) {
                this.modifiable = false;
            }
            if (this.category === undefined) {
                this.category = null;
            }
            if (this.filterCollationKey === undefined) {
                this.filterCollationKey = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    CatalogTexture.__static_initialize = function () { if (!CatalogTexture.__static_initialized) {
        CatalogTexture.__static_initialized = true;
        CatalogTexture.__static_initializer_0();
    } };
    CatalogTexture.EMPTY_CRITERIA_$LI$ = function () { CatalogTexture.__static_initialize(); if (CatalogTexture.EMPTY_CRITERIA == null) {
        CatalogTexture.EMPTY_CRITERIA = [];
    } return CatalogTexture.EMPTY_CRITERIA; };
    CatalogTexture.COMPARATOR_$LI$ = function () { CatalogTexture.__static_initialize(); return CatalogTexture.COMPARATOR; };
    CatalogTexture.recentFilters_$LI$ = function () { CatalogTexture.__static_initialize(); return CatalogTexture.recentFilters; };
    CatalogTexture.__static_initializer_0 = function () {
        CatalogTexture.COMPARATOR = /* getInstance */ { compare: function (o1, o2) { return o1.toString().localeCompare(o2.toString()); }, equals: function (o1, o2) { return o1.toString().localeCompare(o2.toString()) === 0; } };
        /* setStrength */ CatalogTexture.COMPARATOR_$LI$();
        CatalogTexture.recentFilters = ({});
    };
    /**
     * Returns the ID of this texture or <code>null</code>.
     * @return {string}
     */
    CatalogTexture.prototype.getId = function () {
        return this.id;
    };
    /**
     * Returns the name of this texture.
     * @return {string}
     */
    CatalogTexture.prototype.getName = function () {
        return this.name;
    };
    /**
     * Returns the content of the image used for this texture.
     * @return {Object}
     */
    CatalogTexture.prototype.getImage = function () {
        return this.image;
    };
    /**
     * Returns the icon of this texture.
     * @return {Object} the image of this texture.
     */
    CatalogTexture.prototype.getIcon = function () {
        return this.getImage();
    };
    /**
     * Returns the width of the image in centimeters.
     * @return {number}
     */
    CatalogTexture.prototype.getWidth = function () {
        return this.width;
    };
    /**
     * Returns the height of the image in centimeters.
     * @return {number}
     */
    CatalogTexture.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Returns the creator of this texture or <code>null</code>.
     * @return {string}
     */
    CatalogTexture.prototype.getCreator = function () {
        return this.creator;
    };
    /**
     * Returns <code>true</code> if this texture is modifiable (not read from resources).
     * @return {boolean}
     */
    CatalogTexture.prototype.isModifiable = function () {
        return this.modifiable;
    };
    /**
     * Returns the category of this texture.
     * @return {TexturesCategory}
     */
    CatalogTexture.prototype.getCategory = function () {
        return this.category;
    };
    /**
     * Sets the category of this texture.
     * @param {TexturesCategory} category
     * @private
     */
    CatalogTexture.prototype.setCategory = function (category) {
        this.category = category;
    };
    /**
     *
     * Returns true if this texture and the one in parameter are the same objects.
     * Note that, from version 3.6, two textures can have the same name.
     * @param {Object} obj
     * @return {boolean}
     */
    CatalogTexture.prototype.equals = function (obj) {
        return /* equals */ (function (o1, o2) { return o1 && o1.equals ? o1.equals(o2) : o1 === o2; })(this, obj);
    };
    /**
     *
     * Returns default hash code.
     * @return {number}
     */
    CatalogTexture.prototype.hashCode = function () {
        return /* hashCode */ (function (o) { if (o.hashCode) {
            return o.hashCode();
        }
        else {
            return o.toString().split('').reduce(function (prevHash, currVal) { return (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0; }, 0);
        } })(this);
    };
    /**
     *
     * Compares the names of this texture and the one in parameter.
     * @param {CatalogTexture} texture
     * @return {number}
     */
    CatalogTexture.prototype.compareTo = function (texture) {
        var nameComparison = CatalogTexture.COMPARATOR_$LI$().compare(this.name, texture.name);
        if (nameComparison !== 0) {
            return nameComparison;
        }
        else {
            return this.modifiable === texture.modifiable ? 0 : (this.modifiable ? 1 : -1);
        }
    };
    /**
     * Returns <code>true</code> if this texture matches the given <code>filter</code> text.
     * Each substring of the <code>filter</code> is considered as a search criterion that can match
     * the name, the category name or the creator of this texture.
     * @param {string} filter
     * @return {boolean}
     */
    CatalogTexture.prototype.matchesFilter = function (filter) {
        var filterCriteriaCollationKeys = this.getFilterCollationKeys(filter);
        var checkedCriteria = 0;
        if (filterCriteriaCollationKeys.length > 0) {
            var furnitureCollationKey = this.getTextureCollationKey();
            for (var i = 0; i < filterCriteriaCollationKeys.length; i++) {
                {
                    if (this.isSubCollationKey(furnitureCollationKey, filterCriteriaCollationKeys[i], 0)) {
                        checkedCriteria++;
                    }
                    else {
                        break;
                    }
                }
                ;
            }
        }
        return checkedCriteria === filterCriteriaCollationKeys.length;
    };
    /**
     * Returns the collation key bytes of each criterion in the given <code>filter</code>.
     * @param {string} filter
     * @return {byte[][]}
     * @private
     */
    /*private*/ CatalogTexture.prototype.getFilterCollationKeys = function (filter) {
        if (filter.length === 0) {
            return CatalogTexture.EMPTY_CRITERIA_$LI$();
        }
        var filterCollationKeys = (function (m, k) { return m[k] === undefined ? null : m[k]; })(CatalogTexture.recentFilters_$LI$(), filter);
        if (filterCollationKeys == null) {
            var filterCriteria = filter.split("\\s|\\p{Punct}|\\|");
            var filterCriteriaCollationKeys = ([]);
            for (var index = 0; index < filterCriteria.length; index++) {
                var criterion = filterCriteria[index];
                {
                    if (criterion.length > 0) {
                        /* add */ (filterCriteriaCollationKeys.push(CatalogTexture.COMPARATOR_$LI$().getCollationKey(criterion).toByteArray()) > 0);
                    }
                }
            }
            if ( /* size */filterCriteriaCollationKeys.length === 0) {
                filterCollationKeys = CatalogTexture.EMPTY_CRITERIA_$LI$();
            }
            else {
                filterCollationKeys = /* toArray */ filterCriteriaCollationKeys.slice(0);
            }
            /* put */ (CatalogTexture.recentFilters_$LI$()[filter] = filterCollationKeys);
        }
        return filterCollationKeys;
    };
    /**
     * Returns the collation key bytes used to compare the given <code>texture</code> with filter.
     * @return {byte[]}
     * @private
     */
    /*private*/ CatalogTexture.prototype.getTextureCollationKey = function () {
        var _this = this;
        if (this.filterCollationKey == null) {
            var search = { str: "", toString: function () { return this.str; } };
            /* append */ (function (sb) { sb.str += _this.getName(); return sb; })(search);
            /* append */ (function (sb) { sb.str += '|'; return sb; })(search);
            if (this.getCategory() != null) {
                /* append */ (function (sb) { sb.str += _this.getCategory().getName(); return sb; })(search);
                /* append */ (function (sb) { sb.str += '|'; return sb; })(search);
            }
            if (this.getCreator() != null) {
                /* append */ (function (sb) { sb.str += _this.getCreator(); return sb; })(search);
                /* append */ (function (sb) { sb.str += '|'; return sb; })(search);
            }
            this.filterCollationKey = CatalogTexture.COMPARATOR_$LI$().getCollationKey(/* toString */ search.str).toByteArray();
        }
        return this.filterCollationKey;
    };
    /**
     * Returns <code>true</code> if the given filter collation key is a sub part of the first array collator key.
     * @param {byte[]} collationKey
     * @param {byte[]} filterCollationKey
     * @param {number} start
     * @return {boolean}
     * @private
     */
    /*private*/ CatalogTexture.prototype.isSubCollationKey = function (collationKey, filterCollationKey, start) {
        for (var i = start, n = collationKey.length - 4, m = filterCollationKey.length - 4; i < n && i < n - m + 1; i++) {
            {
                if (collationKey[i] === filterCollationKey[0]) {
                    for (var j = 1; j < m; j++) {
                        {
                            if (collationKey[i + j] !== filterCollationKey[j]) {
                                return this.isSubCollationKey(collationKey, filterCollationKey, i + 1);
                            }
                        }
                        ;
                    }
                    return true;
                }
            }
            ;
        }
        return false;
    };
    CatalogTexture.__static_initialized = false;
    return CatalogTexture;
}());
CatalogTexture["__class"] = "com.eteks.sweethome3d.model.CatalogTexture";
CatalogTexture["__interfaces"] = ["com.eteks.sweethome3d.model.CatalogItem", "com.eteks.sweethome3d.model.TextureImage"];
/**
 * SAX handler for Sweet Home 3D XML stream. Read home should respect the following DTD:<pre>
 * &lt;!ELEMENT home (property*, furnitureVisibleProperty*, environment?, backgroundImage?, print?, compass?, (camera | observerCamera)*, level*,
 * (pieceOfFurniture | doorOrWindow | furnitureGroup | light)*, wall*, room*, polyline*, dimensionLine*, label*)>
 * &lt;!ATTLIST home
 * version CDATA #IMPLIED
 * name CDATA #IMPLIED
 * camera (observerCamera | topCamera) "topCamera"
 * selectedLevel CDATA #IMPLIED
 * wallHeight CDATA #IMPLIED
 * basePlanLocked (false | true) "false"
 * furnitureSortedProperty CDATA #IMPLIED
 * furnitureDescendingSorted (false | true) "false">
 *
 * &lt;!ELEMENT property EMPTY>
 * &lt;!ATTLIST property
 * name CDATA #REQUIRED
 * value CDATA #REQUIRED>
 *
 * &lt;!ELEMENT furnitureVisibleProperty EMPTY>
 * &lt;!ATTLIST furnitureVisibleProperty name CDATA #REQUIRED>
 *
 * &lt;!ELEMENT environment (property*, (camera | observerCamera)*, texture?, texture?) >
 * &lt;!ATTLIST environment
 * groundColor CDATA #IMPLIED
 * backgroundImageVisibleOnGround3D (false | true) "false"
 * skyColor CDATA #IMPLIED
 * lightColor CDATA #IMPLIED
 * wallsAlpha CDATA "0"
 * allLevelsVisible (false | true) "false"
 * observerCameraElevationAdjusted (false | true) "true"
 * ceillingLightColor CDATA #IMPLIED
 * drawingMode (FILL | OUTLINE | FILL_AND_OUTLINE) "FILL"
 * subpartSizeUnderLight CDATA "0"
 * photoWidth CDATA "400"
 * photoHeight CDATA "300"
 * photoAspectRatio (FREE_RATIO | VIEW_3D_RATIO | RATIO_4_3 | RATIO_3_2 | RATIO_16_9 | RATIO_2_1 | RATIO_24_10 | SQUARE_RATIO) "VIEW_3D_RATIO"
 * photoQuality CDATA "0"
 * videoWidth CDATA "320"
 * videoAspectRatio (RATIO_4_3 | RATIO_16_9 | RATIO_24_10) "RATIO_4_3"
 * videoQuality CDATA "0"
 * videoSpeed CDATA #IMPLIED
 * videoFrameRate CDATA "25">
 *
 * &lt;!ELEMENT backgroundImage EMPTY>
 * &lt;!ATTLIST backgroundImage
 * image CDATA #REQUIRED
 * scaleDistance CDATA #REQUIRED
 * scaleDistanceXStart CDATA #REQUIRED
 * scaleDistanceYStart CDATA #REQUIRED
 * scaleDistanceXEnd CDATA #REQUIRED
 * scaleDistanceYEnd CDATA #REQUIRED
 * xOrigin CDATA "0"
 * yOrigin CDATA "0"
 * visible (false | true) "true">
 *
 * &lt;!ELEMENT print EMPTY>
 * &lt;!ATTLIST print
 * headerFormat CDATA #IMPLIED
 * footerFormat CDATA #IMPLIED
 * planScale CDATA #IMPLIED
 * furniturePrinted (false | true) "true"
 * planPrinted (false | true) "true"
 * view3DPrinted (false | true) "true"
 * paperWidth CDATA #REQUIRED
 * paperHeight CDATA #REQUIRED
 * paperTopMargin CDATA #REQUIRED
 * paperLeftMargin CDATA #REQUIRED
 * paperBottomMargin CDATA #REQUIRED
 * paperRightMargin CDATA #REQUIRED
 * paperOrientation (PORTRAIT | LANDSCAPE | REVERSE_LANDSCAPE) #REQUIRED>
 *
 * &lt;!ELEMENT compass (property*)>
 * &lt;!ATTLIST compass
 * x CDATA #REQUIRED
 * y CDATA #REQUIRED
 * diameter CDATA #REQUIRED
 * northDirection CDATA "0"
 * longitude CDATA #IMPLIED
 * latitude CDATA #IMPLIED
 * timeZone CDATA #IMPLIED
 * visible (false | true) "true">
 *
 * &lt;!ENTITY % cameraCommonAttributes
 * 'id ID #IMPLIED
 * name CDATA #IMPLIED
 * lens (PINHOLE | NORMAL | FISHEYE | SPHERICAL) "PINHOLE"
 * x CDATA #REQUIRED
 * y CDATA #REQUIRED
 * z CDATA #REQUIRED
 * yaw CDATA #REQUIRED
 * pitch CDATA #REQUIRED
 * time CDATA #IMPLIED
 * fieldOfView CDATA #REQUIRED'>
 *
 * &lt;!ELEMENT camera (property*)>
 * &lt;!ATTLIST camera
 * %cameraCommonAttributes;
 * attribute (topCamera | storedCamera | cameraPath) #REQUIRED>
 *
 * &lt;!ELEMENT observerCamera (property*)>
 * &lt;!ATTLIST observerCamera
 * %cameraCommonAttributes;
 * attribute (observerCamera | storedCamera | cameraPath) #REQUIRED
 * fixedSize (false | true) "false">
 *
 * &lt;!ELEMENT level (property*, backgroundImage?)>
 * &lt;!ATTLIST level
 * id ID #REQUIRED
 * name CDATA #REQUIRED
 * elevation CDATA #REQUIRED
 * floorThickness CDATA #REQUIRED
 * height CDATA #REQUIRED
 * elevationIndex CDATA "-1"
 * visible (false | true) "true"
 * viewable (false | true) "true">
 *
 * &lt;!ENTITY % furnitureCommonAttributes
 * 'id ID #IMPLIED
 * name CDATA #REQUIRED
 * angle CDATA "0"
 * visible (false | true) "true"
 * movable (false | true) "true"
 * description CDATA #IMPLIED
 * modelMirrored (false | true) "false"
 * nameVisible (false | true) "false"
 * nameAngle CDATA "0"
 * nameXOffset CDATA "0"
 * nameYOffset CDATA "0"
 * price CDATA #IMPLIED'>
 *
 * &lt;!ELEMENT furnitureGroup ((pieceOfFurniture | doorOrWindow | furnitureGroup | light)*, property*, textStyle?)>
 * &lt;!ATTLIST furnitureGroup
 * %furnitureCommonAttributes;
 * level IDREF #IMPLIED
 * x CDATA #IMPLIED
 * y CDATA #IMPLIED
 * elevation CDATA #IMPLIED
 * width CDATA #IMPLIED
 * depth CDATA #IMPLIED
 * height CDATA #IMPLIED
 * dropOnTopElevation CDATA #IMPLIED>
 *
 * &lt;!ENTITY % pieceOfFurnitureCommonAttributes
 * 'level IDREF #IMPLIED
 * catalogId CDATA #IMPLIED
 * x CDATA #REQUIRED
 * y CDATA #REQUIRED
 * elevation CDATA "0"
 * width CDATA #REQUIRED
 * depth CDATA #REQUIRED
 * height CDATA #REQUIRED
 * dropOnTopElevation CDATA "1"
 * information CDATA #IMPLIED
 * model CDATA #IMPLIED
 * icon CDATA #IMPLIED
 * planIcon CDATA #IMPLIED
 * modelRotation CDATA "1 0 0 0 1 0 0 0 1"
 * modelCenteredAtOrigin CDATA #IMPLIED
 * backFaceShown (false | true) "false"
 * modelSize CDATA #IMPLIED
 * doorOrWindow (false | true) "false"
 * resizable (false | true) "true"
 * deformable (false | true) "true"
 * texturable (false | true) "true"
 * staircaseCutOutShape CDATA #IMPLIED
 * color CDATA #IMPLIED
 * shininess CDATA #IMPLIED
 * creator CDATA #IMPLIED
 * valueAddedTaxPercentage CDATA #IMPLIED
 * currency CDATA #IMPLIED'>
 *
 * &lt;!ENTITY % pieceOfFurnitureHorizontalRotationAttributes
 * 'horizontallyRotatable (false | true) "true"
 * pitch CDATA "0"
 * roll CDATA "0"
 * widthInPlan CDATA #IMPLIED
 * depthInPlan CDATA #IMPLIED
 * heightInPlan CDATA #IMPLIED'>
 *
 * &lt;!ELEMENT pieceOfFurniture (property*, textStyle?, texture?, material*, transformation*)>
 * &lt;!ATTLIST pieceOfFurniture
 * %furnitureCommonAttributes;
 * %pieceOfFurnitureCommonAttributes;
 * %pieceOfFurnitureHorizontalRotationAttributes;>
 *
 * &lt;!ELEMENT doorOrWindow (sash*, property*, textStyle?, texture?, material*, transformation*)>
 * &lt;!ATTLIST doorOrWindow
 * %furnitureCommonAttributes;
 * %pieceOfFurnitureCommonAttributes;
 * wallThickness CDATA "1"
 * wallDistance CDATA "0"
 * wallWidth CDATA "1"
 * wallLeft CDATA "0"
 * wallHeight CDATA "1"
 * wallTop CDATA "0"
 * wallCutOutOnBothSides (false | true) "false"
 * widthDepthDeformable (false | true) "true"
 * cutOutShape CDATA #IMPLIED
 * boundToWall (false | true) "true">
 *
 * &lt;!ELEMENT sash EMPTY>
 * &lt;!ATTLIST sash
 * xAxis CDATA #REQUIRED
 * yAxis CDATA #REQUIRED
 * width CDATA #REQUIRED
 * startAngle CDATA #REQUIRED
 * endAngle CDATA #REQUIRED>
 *
 * &lt;!ELEMENT light (lightSource*, property*, textStyle?, texture?, material*, transformation*)>
 * &lt;!ATTLIST light
 * %furnitureCommonAttributes;
 * %pieceOfFurnitureCommonAttributes;
 * %pieceOfFurnitureHorizontalRotationAttributes;
 * power CDATA "0.5">
 *
 * &lt;!ELEMENT lightSource EMPTY>
 * &lt;!ATTLIST lightSource
 * x CDATA #REQUIRED
 * y CDATA #REQUIRED
 * z CDATA #REQUIRED
 * color CDATA #REQUIRED
 * diameter CDATA #IMPLIED>
 *
 * &lt;!ELEMENT textStyle EMPTY>
 * &lt;!ATTLIST textStyle
 * attribute (nameStyle | areaStyle | lengthStyle) #IMPLIED
 * fontName CDATA #IMPLIED
 * fontSize CDATA #REQUIRED
 * bold (false | true) "false"
 * italic (false | true) "false"
 * alignment (LEFT | CENTER | RIGHT) "CENTER">
 *
 * &lt;!ELEMENT texture EMPTY>
 * &lt;!ATTLIST texture
 * attribute (groundTexture | skyTexture | leftSideTexture | rightSideTexture | floorTexture | ceilingTexture) #IMPLIED
 * catalogId CDATA #IMPLIED
 * name CDATA #REQUIRED
 * width CDATA #REQUIRED
 * height CDATA #REQUIRED
 * xOffset CDATA "0"
 * yOffset CDATA "0"
 * angle CDATA "0"
 * scale CDATA "1"
 * creator CDATA #IMPLIED
 * leftToRightOriented (true | false) "true"
 * image CDATA #REQUIRED>
 *
 * &lt;!ELEMENT material (texture?)>
 * &lt;!ATTLIST material
 * name CDATA #REQUIRED
 * key CDATA #IMPLIED
 * color CDATA #IMPLIED
 * shininess CDATA #IMPLIED>
 *
 * &lt;!ELEMENT transformation EMPTY>
 * &lt;!ATTLIST transformation
 * name CDATA #REQUIRED
 * matrix CDATA #REQUIRED>
 *
 * &lt;!ELEMENT wall (property*, texture?, texture?, baseboard?, baseboard?)>
 * &lt;!ATTLIST wall
 * id ID #REQUIRED
 * level IDREF #IMPLIED
 * wallAtStart IDREF #IMPLIED
 * wallAtEnd IDREF #IMPLIED
 * xStart CDATA #REQUIRED
 * yStart CDATA #REQUIRED
 * xEnd CDATA #REQUIRED
 * yEnd CDATA #REQUIRED
 * height CDATA #IMPLIED
 * heightAtEnd CDATA #IMPLIED
 * thickness CDATA #REQUIRED
 * arcExtent CDATA #IMPLIED
 * pattern CDATA #IMPLIED
 * topColor CDATA #IMPLIED
 * leftSideColor CDATA #IMPLIED
 * leftSideShininess CDATA "0"
 * rightSideColor CDATA #IMPLIED
 * rightSideShininess CDATA "0">
 *
 * &lt;!ELEMENT baseboard (texture?)>
 * &lt;!ATTLIST baseboard
 * attribute (leftSideBaseboard | rightSideBaseboard) #REQUIRED
 * thickness CDATA #REQUIRED
 * height CDATA #REQUIRED
 * color CDATA #IMPLIED>
 *
 * &lt;!ELEMENT room (property*, textStyle?, textStyle?, texture?, texture?, point+)>
 * &lt;!ATTLIST room
 * id ID #IMPLIED
 * level IDREF #IMPLIED
 * name CDATA #IMPLIED
 * nameAngle CDATA "0"
 * nameXOffset CDATA "0"
 * nameYOffset CDATA "-40"
 * areaVisible (false | true) "false"
 * areaAngle CDATA "0"
 * areaXOffset CDATA "0"
 * areaYOffset CDATA "0"
 * floorVisible (false | true) "true"
 * floorColor CDATA #IMPLIED
 * floorShininess CDATA "0"
 * ceilingVisible (false | true) "true"
 * ceilingColor CDATA #IMPLIED
 * ceilingShininess CDATA "0">
 *
 * &lt;!ELEMENT point EMPTY>
 * &lt;!ATTLIST point
 * x CDATA #REQUIRED
 * y CDATA #REQUIRED>
 *
 * &lt;!ELEMENT polyline (property*, point+)>
 * &lt;!ATTLIST polyline
 * id ID #IMPLIED
 * level IDREF #IMPLIED
 * thickness CDATA "1"
 * capStyle (BUTT | SQUARE | ROUND) "BUTT"
 * joinStyle (BEVEL | MITER | ROUND | CURVED) "MITER"
 * dashStyle (SOLID | DOT | DASH | DASH_DOT | DASH_DOT_DOT | CUSTOMIZED) "SOLID"
 * dashPattern CDATA #IMPLIED
 * dashOffset CDATA "0"
 * startArrowStyle (NONE | DELTA | OPEN | DISC) "NONE"
 * endArrowStyle (NONE | DELTA | OPEN | DISC) "NONE"
 * elevation CDATA #IMPLIED
 * color CDATA #IMPLIED
 * closedPath (false | true) "false">
 *
 * &lt;!ELEMENT dimensionLine (property*, textStyle?)>
 * &lt;!ATTLIST dimensionLine
 * id ID #IMPLIED
 * level IDREF #IMPLIED
 * xStart CDATA #REQUIRED
 * yStart CDATA #REQUIRED
 * xEnd CDATA #REQUIRED
 * yEnd CDATA #REQUIRED
 * offset CDATA #REQUIRED>
 *
 * &lt;!ELEMENT label (property*, textStyle?, text)>
 * &lt;!ATTLIST label
 * id ID #IMPLIED
 * level IDREF #IMPLIED
 * x CDATA #REQUIRED
 * y CDATA #REQUIRED
 * angle CDATA "0"
 * elevation CDATA "0"
 * pitch CDATA #IMPLIED
 * color CDATA #IMPLIED
 * outlineColor CDATA #IMPLIED>
 *
 * &lt;!ELEMENT text (#PCDATA)>
 * </pre>
 * with <code>home</code> as root element.
 * Attributes named <code>attribute</code> indicate the names of the object fields
 * where some elements should be stored.
 * @author Emmanuel Puybaret
 * @param {UserPreferences} preferences
 * @class
 * @extends DefaultHandler
 */
var HomeXMLHandler = /** @class */ (function (_super) {
    __extends(HomeXMLHandler, _super);
    function HomeXMLHandler(preferences) {
        var _this = this;
        if (((preferences != null && preferences instanceof UserPreferences) || preferences === null)) {
            var __args = arguments;
            _this = _super.call(this) || this;
            if (_this.preferences === undefined) {
                _this.preferences = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.homeElementName === undefined) {
                _this.homeElementName = null;
            }
            if (_this.labelText === undefined) {
                _this.labelText = null;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.homeBackgroundImage === undefined) {
                _this.homeBackgroundImage = null;
            }
            if (_this.backgroundImage === undefined) {
                _this.backgroundImage = null;
            }
            if (_this.materialTexture === undefined) {
                _this.materialTexture = null;
            }
            _this.buffer = { str: "", toString: function () { return this.str; } };
            _this.elements = ([]);
            _this.attributes = ([]);
            _this.groupsFurniture = ([]);
            _this.properties = ([]);
            _this.textStyles = ([]);
            _this.levels = ({});
            _this.joinedWalls = ({});
            _this.textures = ({});
            _this.materials = ([]);
            _this.transformations = ([]);
            _this.sashes = ([]);
            _this.lightSources = ([]);
            _this.points = ([]);
            _this.furnitureVisibleProperties = ([]);
            _this.preferences = preferences != null ? preferences : new DefaultUserPreferences(false, null);
        }
        else if (preferences === undefined) {
            var __args = arguments;
            {
                var __args_41 = arguments;
                var preferences_3 = null;
                _this = _super.call(this) || this;
                if (_this.preferences === undefined) {
                    _this.preferences = null;
                }
                if (_this.home === undefined) {
                    _this.home = null;
                }
                if (_this.homeElementName === undefined) {
                    _this.homeElementName = null;
                }
                if (_this.labelText === undefined) {
                    _this.labelText = null;
                }
                if (_this.leftSideBaseboard === undefined) {
                    _this.leftSideBaseboard = null;
                }
                if (_this.rightSideBaseboard === undefined) {
                    _this.rightSideBaseboard = null;
                }
                if (_this.homeBackgroundImage === undefined) {
                    _this.homeBackgroundImage = null;
                }
                if (_this.backgroundImage === undefined) {
                    _this.backgroundImage = null;
                }
                if (_this.materialTexture === undefined) {
                    _this.materialTexture = null;
                }
                _this.buffer = { str: "", toString: function () { return this.str; } };
                _this.elements = ([]);
                _this.attributes = ([]);
                _this.groupsFurniture = ([]);
                _this.properties = ([]);
                _this.textStyles = ([]);
                _this.levels = ({});
                _this.joinedWalls = ({});
                _this.textures = ({});
                _this.materials = ([]);
                _this.transformations = ([]);
                _this.sashes = ([]);
                _this.lightSources = ([]);
                _this.points = ([]);
                _this.furnitureVisibleProperties = ([]);
                _this.preferences = preferences_3 != null ? preferences_3 : new DefaultUserPreferences(false, null);
            }
            if (_this.preferences === undefined) {
                _this.preferences = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.homeElementName === undefined) {
                _this.homeElementName = null;
            }
            if (_this.labelText === undefined) {
                _this.labelText = null;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.homeBackgroundImage === undefined) {
                _this.homeBackgroundImage = null;
            }
            if (_this.backgroundImage === undefined) {
                _this.backgroundImage = null;
            }
            if (_this.materialTexture === undefined) {
                _this.materialTexture = null;
            }
            _this.buffer = { str: "", toString: function () { return this.str; } };
            _this.elements = ([]);
            _this.attributes = ([]);
            _this.groupsFurniture = ([]);
            _this.properties = ([]);
            _this.textStyles = ([]);
            _this.levels = ({});
            _this.joinedWalls = ({});
            _this.textures = ({});
            _this.materials = ([]);
            _this.transformations = ([]);
            _this.sashes = ([]);
            _this.lightSources = ([]);
            _this.points = ([]);
            _this.furnitureVisibleProperties = ([]);
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     *
     */
    HomeXMLHandler.prototype.startDocument = function () {
        this.home = null;
        /* clear */ (this.elements.length = 0);
        /* clear */ (this.attributes.length = 0);
        /* clear */ (this.groupsFurniture.length = 0);
        /* clear */ (function (obj) { for (var member in obj)
            delete obj[member]; })(this.levels);
        /* clear */ (function (obj) { for (var member in obj)
            delete obj[member]; })(this.joinedWalls);
    };
    /**
     *
     * @param {string} uri
     * @param {string} localName
     * @param {string} name
     * @param {Attributes} attributes
     */
    HomeXMLHandler.prototype.startElement = function (uri, localName, name, attributes) {
        var _this = this;
        /* setLength */ (function (sb, length) { return sb.str = sb.str.substring(0, length); })(this.buffer, 0);
        /* push */ (this.elements.push(name) > 0);
        var attributesMap = ({});
        for (var i = 0; i < attributes.getLength(); i++) {
            {
                /* put */ (attributesMap[attributes.getQName(i)] = attributes.getValue(i).replace("&quot;", "\"").replace("&lt;", "<").replace("&gt;", ">").replace("&amp;", "&"));
            }
            ;
        }
        /* push */ (this.attributes.push(attributesMap) > 0);
        if (!("property" === name) && !("furnitureVisibleProperty" === name) && !("textStyle" === name)) {
            /* push */ (this.properties.push({}) > 0);
            /* push */ (this.textStyles.push({}) > 0);
        }
        if ("home" === name) {
            this.setHome(this.createHome(name, attributesMap));
            /* clear */ (this.furnitureVisibleProperties.length = 0);
            this.homeBackgroundImage = null;
        }
        else if ("environment" === name) {
            /* clear */ (function (obj) { for (var member in obj)
                delete obj[member]; })(this.textures);
        }
        else if ("level" === name) {
            this.backgroundImage = null;
        }
        else if (("pieceOfFurniture" === name) || ("doorOrWindow" === name) || ("light" === name) || ("furnitureGroup" === name)) {
            /* clear */ (function (obj) { for (var member in obj)
                delete obj[member]; })(this.textures);
            /* clear */ (this.materials.length = 0);
            /* clear */ (this.transformations.length = 0);
            /* clear */ (this.sashes.length = 0);
            /* clear */ (this.lightSources.length = 0);
            if ("furnitureGroup" === name) {
                /* push */ (this.groupsFurniture.push([]) > 0);
            }
        }
        else if ("room" === name) {
            /* clear */ (function (obj) { for (var member in obj)
                delete obj[member]; })(this.textures);
            /* clear */ (this.points.length = 0);
        }
        else if ("polyline" === name) {
            /* clear */ (this.points.length = 0);
        }
        else if ("label" === name) {
            this.labelText = null;
        }
        else if ("wall" === name) {
            /* clear */ (function (obj) { for (var member in obj)
                delete obj[member]; })(this.textures);
            this.leftSideBaseboard = null;
            this.rightSideBaseboard = null;
        }
        else if ("baseboard" === name) {
            /* remove */ (function (map) { var deleted = _this.textures[HomeXMLHandler.UNIQUE_ATTRIBUTE]; delete _this.textures[HomeXMLHandler.UNIQUE_ATTRIBUTE]; return deleted; })(this.textures);
        }
        else if ("material" === name) {
            this.materialTexture = null;
        }
    };
    /**
     *
     * @param {char[]} ch
     * @param {number} start
     * @param {number} length
     */
    HomeXMLHandler.prototype.characters = function (ch, start, length) {
        /* append */ (function (sb) { sb.str += ch.substr(start, length); return sb; })(this.buffer);
    };
    /**
     *
     * @param {string} uri
     * @param {string} localName
     * @param {string} name
     */
    HomeXMLHandler.prototype.endElement = function (uri, localName, name) {
        /* pop */ this.elements.pop();
        var parent = (this.elements.length == 0) ? null : /* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.elements);
        var attributesMap = this.attributes.pop();
        if (this.homeElementName != null && (this.homeElementName === name)) {
            this.setHomeAttributes(this.home, name, attributesMap);
        }
        else if ("furnitureVisibleProperty" === name) {
            try {
                if ( /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "name") == null) {
                    throw new SAXException("Missing name attribute");
                }
                /* add */ (this.furnitureVisibleProperties.push(/* valueOf */ /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "name")) > 0);
            }
            catch (ex) {
            }
        }
        else if ("environment" === name) {
            this.setEnvironmentAttributes(this.home.getEnvironment(), name, attributesMap);
        }
        else if ("compass" === name) {
            this.setCompassAttributes(this.home.getCompass(), name, attributesMap);
        }
        else if ("print" === name) {
            this.home.setPrint(this.createPrint(attributesMap));
        }
        else if ("level" === name) {
            var level = this.createLevel(name, attributesMap);
            this.setLevelAttributes(level, name, attributesMap);
            /* put */ (this.levels[ /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "id")] = level);
            this.home.addLevel(level);
        }
        else if (("camera" === name) || ("observerCamera" === name)) {
            var camera = this.createCamera(name, attributesMap);
            this.setCameraAttributes(camera, name, attributesMap);
            var attribute = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "attribute");
            if ("cameraPath" === attribute) {
                var cameraPath = (this.home.getEnvironment().getVideoCameraPath().slice(0));
                /* add */ (cameraPath.push(camera) > 0);
                this.home.getEnvironment().setVideoCameraPath(cameraPath);
            }
            else if ("topCamera" === attribute) {
                var topCamera = this.home.getTopCamera();
                topCamera.setCamera(camera);
                topCamera.setTime(camera.getTime());
                topCamera.setLens(camera.getLens());
            }
            else if ("observerCamera" === attribute) {
                var observerCamera = this.home.getObserverCamera();
                observerCamera.setCamera(camera);
                observerCamera.setTime(camera.getTime());
                observerCamera.setLens(camera.getLens());
                observerCamera.setFixedSize(camera.isFixedSize());
            }
            else if ("storedCamera" === attribute) {
                var storedCameras = (this.home.getStoredCameras().slice(0));
                /* add */ (storedCameras.push(camera) > 0);
                this.home.setStoredCameras(storedCameras);
            }
        }
        else if (("pieceOfFurniture" === name) || ("doorOrWindow" === name) || ("light" === name) || ("furnitureGroup" === name)) {
            var piece = "furnitureGroup" === name ? this.createFurnitureGroup(name, attributesMap, /* pop */ this.groupsFurniture.pop()) : this.createPieceOfFurniture(name, attributesMap);
            this.setPieceOfFurnitureAttributes(piece, name, attributesMap);
            if (this.homeElementName != null && (this.homeElementName === parent)) {
                this.home.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture(piece);
                var levelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "level");
                if (levelId != null) {
                    piece.setLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, levelId));
                }
            }
            else if ("furnitureGroup" === parent) {
                /* add */ ( /* peek */(function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.groupsFurniture).push(piece) > 0);
            }
        }
        else if ("wall" === name) {
            var wall = this.createWall(name, attributesMap);
            /* put */ (this.joinedWalls[ /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "id")] = new HomeXMLHandler.JoinedWall(wall, /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "wallAtStart"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "wallAtEnd")));
            this.setWallAttributes(wall, name, attributesMap);
            this.home.addWall(wall);
            var levelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "level");
            if (levelId != null) {
                wall.setLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, levelId));
            }
        }
        else if ("baseboard" === name) {
            var baseboard = this.createBaseboard(name, attributesMap);
            if ("leftSideBaseboard" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "attribute")) {
                this.leftSideBaseboard = baseboard;
            }
            else {
                this.rightSideBaseboard = baseboard;
            }
        }
        else if ("room" === name) {
            var room = this.createRoom(name, attributesMap, /* toArray */ this.points.slice(0));
            this.setRoomAttributes(room, name, attributesMap);
            this.home.addRoom$com_eteks_sweethome3d_model_Room(room);
            var levelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "level");
            if (levelId != null) {
                room.setLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, levelId));
            }
        }
        else if ("polyline" === name) {
            var polyline = this.createPolyline(name, attributesMap, /* toArray */ this.points.slice(0));
            this.setPolylineAttributes(polyline, name, attributesMap);
            this.home.addPolyline$com_eteks_sweethome3d_model_Polyline(polyline);
            var levelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "level");
            if (levelId != null) {
                polyline.setLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, levelId));
            }
        }
        else if ("dimensionLine" === name) {
            var dimensionLine = this.createDimensionLine(name, attributesMap);
            this.setDimensionLineAttributes(dimensionLine, name, attributesMap);
            this.home.addDimensionLine(dimensionLine);
            var levelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "level");
            if (levelId != null) {
                dimensionLine.setLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, levelId));
            }
        }
        else if ("label" === name) {
            var label = this.createLabel(name, attributesMap, this.labelText);
            this.setLabelAttributes(label, name, attributesMap);
            this.home.addLabel(label);
            var levelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "level");
            if (levelId != null) {
                label.setLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, levelId));
            }
        }
        else if ("text" === name) {
            this.labelText = this.getCharacters();
        }
        else if ("textStyle" === name) {
            var attribute = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "attribute");
            /* put */ ( /* peek */(function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.textStyles)[attribute != null ? attribute : HomeXMLHandler.UNIQUE_ATTRIBUTE] = this.createTextStyle(name, attributesMap));
        }
        else if ("texture" === name) {
            if ("material" === parent) {
                this.materialTexture = this.createTexture(name, attributesMap);
            }
            else {
                var attribute = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "attribute");
                /* put */ (this.textures[attribute != null ? attribute : HomeXMLHandler.UNIQUE_ATTRIBUTE] = this.createTexture(name, attributesMap));
            }
        }
        else if ("material" === name) {
            /* add */ (this.materials.push(this.createMaterial(name, attributesMap)) > 0);
        }
        else if ("transformation" === name) {
            var matrixAttribute = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "matrix");
            if (matrixAttribute == null) {
                throw new SAXException("Missing attribute matrix");
            }
            else {
                var values = matrixAttribute.split(" ", 12);
                if (values.length < 12) {
                    throw new SAXException("Missing values for attribute matrix");
                }
                try {
                    var matrix = [[/* parseFloat */ parseFloat(values[0]), /* parseFloat */ parseFloat(values[1]), /* parseFloat */ parseFloat(values[2]), /* parseFloat */ parseFloat(values[3])], [/* parseFloat */ parseFloat(values[4]), /* parseFloat */ parseFloat(values[5]), /* parseFloat */ parseFloat(values[6]), /* parseFloat */ parseFloat(values[7])], [/* parseFloat */ parseFloat(values[8]), /* parseFloat */ parseFloat(values[9]), /* parseFloat */ parseFloat(values[10]), /* parseFloat */ parseFloat(values[11])]];
                    var transformation = new Transformation(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "name"), matrix);
                    /* add */ (this.transformations.push(this.resolveObject(transformation, name, attributesMap)) > 0);
                }
                catch (ex) {
                    throw new SAXException("Invalid value for attribute matrix", ex);
                }
            }
        }
        else if ("point" === name) {
            /* add */ (this.points.push([this.parseFloat(attributesMap, "x"), this.parseFloat(attributesMap, "y")]) > 0);
        }
        else if ("sash" === name) {
            var sash = new Sash(this.parseFloat(attributesMap, "xAxis"), this.parseFloat(attributesMap, "yAxis"), this.parseFloat(attributesMap, "width"), this.parseFloat(attributesMap, "startAngle"), this.parseFloat(attributesMap, "endAngle"));
            /* add */ (this.sashes.push(this.resolveObject(sash, name, attributesMap)) > 0);
        }
        else if ("lightSource" === name) {
            var lightSource = new LightSource(this.parseFloat(attributesMap, "x"), this.parseFloat(attributesMap, "y"), this.parseFloat(attributesMap, "z"), this.parseOptionalColor(attributesMap, "color"), this.parseOptionalFloat(attributesMap, "diameter"));
            /* add */ (this.lightSources.push(this.resolveObject(lightSource, name, attributesMap)) > 0);
        }
        else if ("backgroundImage" === name) {
            var backgroundImage = new BackgroundImage(this.parseContent(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "image"), null, false), this.parseFloat(attributesMap, "scaleDistance"), this.parseFloat(attributesMap, "scaleDistanceXStart"), this.parseFloat(attributesMap, "scaleDistanceYStart"), this.parseFloat(attributesMap, "scaleDistanceXEnd"), this.parseFloat(attributesMap, "scaleDistanceYEnd"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "xOrigin") != null ? this.parseFloat(attributesMap, "xOrigin") : 0, /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "yOrigin") != null ? this.parseFloat(attributesMap, "yOrigin") : 0, !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "visible")));
            backgroundImage = this.resolveObject(backgroundImage, name, attributesMap);
            if (this.homeElementName != null && (this.homeElementName === parent)) {
                this.homeBackgroundImage = backgroundImage;
            }
            else {
                this.backgroundImage = backgroundImage;
            }
        }
        else if ("property" === name) {
            if (this.homeElementName != null) {
                /* put */ ( /* peek */(function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.properties)[ /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "name")] = /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributesMap, "value"));
            }
        }
        if (!("property" === name) && !("furnitureVisibleProperty" === name) && !("textStyle" === name)) {
            /* pop */ this.properties.pop();
            /* pop */ this.textStyles.pop();
        }
    };
    /**
     * Returns the trimmed string of last element value.
     * @return {string}
     * @private
     */
    HomeXMLHandler.prototype.getCharacters = function () {
        return this.buffer.str.replace(/&quot;/g, '\"').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
    };
    /**
     *
     */
    HomeXMLHandler.prototype.endDocument = function () {
        {
            var array = /* values */ (function (obj) { return Object.keys(obj).map(function (key) { return obj[key]; }); })(this.joinedWalls);
            for (var index = 0; index < array.length; index++) {
                var joinedWall = array[index];
                {
                    var wall = joinedWall.getWall();
                    if (joinedWall.getWallAtStartId() != null && !(joinedWall.getWallAtStartId() === wall.getId())) {
                        var joinedWallAtStart = (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.joinedWalls, joinedWall.getWallAtStartId());
                        if (joinedWallAtStart != null) {
                            wall.setWallAtStart(joinedWallAtStart.getWall());
                        }
                    }
                    if (joinedWall.getWallAtEndId() != null && !(joinedWall.getWallAtEndId() === wall.getId())) {
                        var joinedWallAtEnd = (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.joinedWalls, joinedWall.getWallAtEndId());
                        if (joinedWallAtEnd != null) {
                            wall.setWallAtEnd(joinedWallAtEnd.getWall());
                        }
                    }
                }
            }
        }
    };
    /**
     * Returns the object that will be stored in a home. This method is called for each home object created by this handler
     * after its instantiation and returns <code>elementObject</code>. It might be overridden to substitute an object
     * parsed from an XML element and its attributes for an other one of a different subclass if needed.
     * @param {Object} elementObject
     * @param {string} elementName
     * @param {Object} attributes
     * @return {Object}
     */
    HomeXMLHandler.prototype.resolveObject = function (elementObject, elementName, attributes) {
        return elementObject;
    };
    /**
     * Returns a new {@link Home} instance initialized from the given <code>attributes</code>.
     * @return {Home} a home instance with its version set.
     * @param {string} elementName
     * @param {Object} attributes
     * @private
     */
    HomeXMLHandler.prototype.createHome = function (elementName, attributes) {
        var home;
        if ( /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "wallHeight") != null) {
            home = new Home(this.parseFloat(attributes, "wallHeight"));
        }
        else {
            home = new Home();
        }
        var version = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "version");
        if (version != null) {
            try {
                home.setVersion(/* parseInt */ parseInt(version));
            }
            catch (ex) {
                throw new SAXException("Invalid value for integer attribute version", ex);
            }
        }
        return this.resolveObject(home, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>home</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Home} home
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setHomeAttributes = function (home, elementName, attributes) {
        {
            var array = /* entrySet */ (function (o) { var s = []; for (var e in o)
                s.push({ k: e, v: o[e], getKey: function () { return this.k; }, getValue: function () { return this.v; } }); return s; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.properties));
            for (var index = 0; index < array.length; index++) {
                var property = array[index];
                {
                    home.setProperty(property.getKey(), property.getValue());
                }
            }
        }
        if ( /* size */this.furnitureVisibleProperties.length > 0) {
            this.home.setFurnitureVisibleProperties(this.furnitureVisibleProperties);
        }
        this.home.setBackgroundImage(this.homeBackgroundImage);
        home.setName(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name"));
        var selectedLevelId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "selectedLevel");
        if (selectedLevelId != null) {
            this.home.setSelectedLevel(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.levels, selectedLevelId));
        }
        if ("observerCamera" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "camera")) {
            this.home.setCamera(this.home.getObserverCamera());
        }
        home.setBasePlanLocked("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "basePlanLocked"));
        var furnitureSortedProperty = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "furnitureSortedProperty");
        if (furnitureSortedProperty != null) {
            try {
                home.setFurnitureSortedProperty(/* valueOf */ furnitureSortedProperty);
            }
            catch (ex) {
            }
        }
        home.setFurnitureDescendingSorted("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "furnitureDescendingSorted"));
        if (attributes['structure']) {
            home['structure'] = this.parseContent(attributes['structure'], null, false);
        }
    };
    /**
     * Sets the attributes of the given <code>environment</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {HomeEnvironment} environment
     * @param {string} elementName
     * @param {Object} attributes
     * @private
     */
    HomeXMLHandler.prototype.setEnvironmentAttributes = function (environment, elementName, attributes) {
        this.setProperties(environment);
        var groundColor = this.parseOptionalColor(attributes, "groundColor");
        if (groundColor != null) {
            environment.setGroundColor(groundColor);
        }
        environment.setGroundTexture(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, "groundTexture"));
        environment.setBackgroundImageVisibleOnGround3D("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "backgroundImageVisibleOnGround3D"));
        var skyColor = this.parseOptionalColor(attributes, "skyColor");
        if (skyColor != null) {
            environment.setSkyColor(skyColor);
        }
        environment.setSkyTexture(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, "skyTexture"));
        var lightColor = this.parseOptionalColor(attributes, "lightColor");
        if (lightColor != null) {
            environment.setLightColor(lightColor);
        }
        var wallsAlpha = this.parseOptionalFloat(attributes, "wallsAlpha");
        if (wallsAlpha != null) {
            environment.setWallsAlpha(wallsAlpha);
        }
        environment.setAllLevelsVisible("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "allLevelsVisible"));
        environment.setObserverCameraElevationAdjusted(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "observerCameraElevationAdjusted")));
        var ceillingLightColor = this.parseOptionalColor(attributes, "ceillingLightColor");
        if (ceillingLightColor != null) {
            environment.setCeillingLightColor(ceillingLightColor);
        }
        var drawingMode = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "drawingMode");
        if (drawingMode != null) {
            try {
                environment.setDrawingMode(/* Enum.valueOf */ HomeEnvironment.DrawingMode[drawingMode]);
            }
            catch (ex) {
            }
        }
        var subpartSizeUnderLight = this.parseOptionalFloat(attributes, "subpartSizeUnderLight");
        if (subpartSizeUnderLight != null) {
            environment.setSubpartSizeUnderLight(subpartSizeUnderLight);
        }
        var photoWidth = this.parseOptionalInteger(attributes, "photoWidth");
        if (photoWidth != null) {
            environment.setPhotoWidth(photoWidth);
        }
        var photoHeight = this.parseOptionalInteger(attributes, "photoHeight");
        if (photoHeight != null) {
            environment.setPhotoHeight(photoHeight);
        }
        var photoAspectRatio = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "photoAspectRatio");
        if (photoAspectRatio != null) {
            try {
                environment.setPhotoAspectRatio(/* Enum.valueOf */ AspectRatio[photoAspectRatio]);
            }
            catch (ex) {
            }
        }
        var photoQuality = this.parseOptionalInteger(attributes, "photoQuality");
        if (photoQuality != null) {
            environment.setPhotoQuality(photoQuality);
        }
        var videoWidth = this.parseOptionalInteger(attributes, "videoWidth");
        if (videoWidth != null) {
            environment.setVideoWidth(videoWidth);
        }
        var videoAspectRatio = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "videoAspectRatio");
        if (videoAspectRatio != null) {
            try {
                environment.setVideoAspectRatio(/* Enum.valueOf */ AspectRatio[videoAspectRatio]);
            }
            catch (ex) {
            }
        }
        var videoQuality = this.parseOptionalInteger(attributes, "videoQuality");
        if (videoQuality != null) {
            environment.setVideoQuality(videoQuality);
        }
        var videoSpeed = this.parseOptionalFloat(attributes, "videoSpeed");
        if (videoSpeed != null) {
            environment.setVideoSpeed(videoSpeed);
        }
        var videoFrameRate = this.parseOptionalInteger(attributes, "videoFrameRate");
        if (videoFrameRate != null) {
            environment.setVideoFrameRate(videoFrameRate);
        }
    };
    /**
     * Returns a new {@link HomePrint} instance initialized from the given <code>attributes</code>.
     * @param {Object} attributes
     * @return {HomePrint}
     */
    HomeXMLHandler.prototype.createPrint = function (attributes) {
        var paperOrientation = HomePrint.PaperOrientation.PORTRAIT;
        try {
            if ( /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "paperOrientation") == null) {
                throw new SAXException("Missing paperOrientation attribute");
            }
            paperOrientation = /* Enum.valueOf */ HomePrint.PaperOrientation[ /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "paperOrientation")];
        }
        catch (ex) {
        }
        var homePrint = new HomePrint(paperOrientation, this.parseFloat(attributes, "paperWidth"), this.parseFloat(attributes, "paperHeight"), this.parseFloat(attributes, "paperTopMargin"), this.parseFloat(attributes, "paperLeftMargin"), this.parseFloat(attributes, "paperBottomMargin"), this.parseFloat(attributes, "paperRightMargin"), !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "furniturePrinted")), !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "planPrinted")), !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "view3DPrinted")), this.parseOptionalFloat(attributes, "planScale"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "headerFormat"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "footerFormat"));
        return this.resolveObject(homePrint, "print", attributes);
    };
    /**
     * Sets the attributes of the given <code>compass</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Compass} compass
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setCompassAttributes = function (compass, elementName, attributes) {
        this.setProperties(compass);
        compass.setX(this.parseOptionalFloat(attributes, "x"));
        compass.setY(this.parseOptionalFloat(attributes, "y"));
        compass.setDiameter(this.parseOptionalFloat(attributes, "diameter"));
        var northDirection = this.parseOptionalFloat(attributes, "northDirection");
        if (northDirection != null) {
            compass.setNorthDirection(northDirection);
        }
        var longitude = this.parseOptionalFloat(attributes, "longitude");
        if (longitude != null) {
            compass.setLongitude(longitude);
        }
        var latitude = this.parseOptionalFloat(attributes, "latitude");
        if (latitude != null) {
            compass.setLatitude(latitude);
        }
        var timeZone = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "timeZone");
        if (timeZone != null) {
            compass.setTimeZone(timeZone);
        }
        compass.setVisible(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "visible")));
    };
    /**
     * Returns a new {@link Camera} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {Camera}
     * @private
     */
    HomeXMLHandler.prototype.createCamera = function (elementName, attributes) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var x = this.parseFloat(attributes, "x");
        var y = this.parseFloat(attributes, "y");
        var z = this.parseFloat(attributes, "z");
        var yaw = this.parseFloat(attributes, "yaw");
        var pitch = this.parseFloat(attributes, "pitch");
        var fieldOfView = this.parseFloat(attributes, "fieldOfView");
        var camera;
        if ("observerCamera" === elementName) {
            camera = id != null ? new ObserverCamera(id, x, y, z, yaw, pitch, fieldOfView) : new ObserverCamera(x, y, z, yaw, pitch, fieldOfView);
        }
        else {
            camera = id != null ? new Camera(id, x, y, z, yaw, pitch, fieldOfView) : new Camera(x, y, z, yaw, pitch, fieldOfView);
        }
        return this.resolveObject(camera, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>camera</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Camera} camera
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setCameraAttributes = function (camera, elementName, attributes) {
        this.setProperties(camera);
        if (camera != null && camera instanceof ObserverCamera) {
            camera.setFixedSize("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "fixedSize"));
        }
        var lens = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "lens");
        if (lens != null) {
            try {
                camera.setLens(/* Enum.valueOf */ Camera.Lens[lens]);
            }
            catch (ex) {
            }
        }
        var time = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "time");
        if (time != null) {
            try {
                camera.setTime(/* parseLong */ parseInt(time));
            }
            catch (ex) {
                throw new SAXException("Invalid value for long attribute time", ex);
            }
        }
        camera.setName(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name"));
    };
    /**
     * Returns a new {@link Level} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {Level}
     * @private
     */
    HomeXMLHandler.prototype.createLevel = function (elementName, attributes) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var name = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name");
        var elevation = this.parseFloat(attributes, "elevation");
        var floorThickness = this.parseFloat(attributes, "floorThickness");
        var height = this.parseFloat(attributes, "height");
        var level = id != null ? new Level(id, name, elevation, floorThickness, height) : new Level(name, elevation, floorThickness, height);
        return this.resolveObject(level, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>level</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Level} level
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setLevelAttributes = function (level, elementName, attributes) {
        this.setProperties(level);
        level.setBackgroundImage(this.backgroundImage);
        var elevationIndex = this.parseOptionalInteger(attributes, "elevationIndex");
        if (elevationIndex != null) {
            level.setElevationIndex(elevationIndex);
        }
        level.setVisible(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "visible")));
        level.setViewable(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "viewable")));
    };
    /**
     * Returns a new {@link HomePieceOfFurniture} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {HomePieceOfFurniture}
     * @private
     */
    HomeXMLHandler.prototype.createPieceOfFurniture = function (elementName, attributes) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var catalogId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "catalogId");
        var tags = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "tags") != null ? /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "tags").split(" ") : null;
        var elevation = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "elevation") != null ? this.parseFloat(attributes, "elevation") : 0;
        var dropOnTopElevation = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "dropOnTopElevation") != null ? this.parseFloat(attributes, "dropOnTopElevation") : 1;
        var modelRotation = null;
        if ( /* get */(function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "modelRotation") != null) {
            var values = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "modelRotation").split(" ", 9);
            if (values.length < 9) {
                throw new SAXException("Missing values for attribute modelRotation");
            }
            try {
                modelRotation = [[/* parseFloat */ parseFloat(values[0]), /* parseFloat */ parseFloat(values[1]), /* parseFloat */ parseFloat(values[2])], [/* parseFloat */ parseFloat(values[3]), /* parseFloat */ parseFloat(values[4]), /* parseFloat */ parseFloat(values[5])], [/* parseFloat */ parseFloat(values[6]), /* parseFloat */ parseFloat(values[7]), /* parseFloat */ parseFloat(values[8])]];
            }
            catch (ex) {
                throw new SAXException("Invalid value for attribute modelRotation", ex);
            }
        }
        var name = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name");
        var description = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "description");
        var information = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "information");
        var creationDate = this.parseOptionalLong(attributes, "creationDate");
        var grade = this.parseOptionalFloat(attributes, "grade");
        var icon = this.parseContent(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "icon"), catalogId, false);
        var planIcon = this.parseContent(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "planIcon"), catalogId, false);
        var model = this.parseContent(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "model"), catalogId, false);
        var width = this.parseFloat(attributes, "width");
        var depth = this.parseFloat(attributes, "depth");
        var height = this.parseFloat(attributes, "height");
        var movable = !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "movable"));
        var backFaceShown = "true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "backFaceShown");
        var modelSize = this.parseOptionalLong(attributes, "modelSize");
        var creator = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "creator");
        var resizable = !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "resizable"));
        var deformable = !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "deformable"));
        var texturable = !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "texturable"));
        var price = this.parseOptionalDecimal(attributes, "price");
        var valueAddedTaxPercentage = this.parseOptionalDecimal(attributes, "valueAddedTaxPercentage");
        var currency = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "currency");
        var piece;
        if (("doorOrWindow" === elementName) || ("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "doorOrWindow"))) {
            var wallThickness = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "wallThickness") != null ? this.parseFloat(attributes, "wallThickness") : 1;
            var wallDistance = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "wallDistance") != null ? this.parseFloat(attributes, "wallDistance") : 0;
            var cutOutShape = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "cutOutShape");
            if (cutOutShape == null && !("doorOrWindow" === elementName)) {
                cutOutShape = PieceOfFurniture.DEFAULT_CUT_OUT_SHAPE;
            }
            var wallCutOutOnBothSides = "true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "wallCutOutOnBothSides");
            var widthDepthDeformable = !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "widthDepthDeformable"));
            var catalogDoorOrWindow = new CatalogDoorOrWindow(catalogId, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, cutOutShape, wallThickness, wallDistance, wallCutOutOnBothSides, widthDepthDeformable, /* toArray */ this.sashes.slice(0), modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, price, valueAddedTaxPercentage, currency);
            piece = id != null ? new HomeDoorOrWindow(id, catalogDoorOrWindow) : new HomeDoorOrWindow(catalogDoorOrWindow);
        }
        else {
            var staircaseCutOutShape = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "staircaseCutOutShape");
            var horizontallyRotatable = !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "horizontallyRotatable"));
            if ("light" === elementName) {
                var catalogLight = new CatalogLight(catalogId, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, /* toArray */ this.lightSources.slice(0), staircaseCutOutShape, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, horizontallyRotatable, price, valueAddedTaxPercentage, currency);
                piece = id != null ? new HomeLight(id, catalogLight) : new HomeLight(catalogLight);
            }
            else {
                var catalogPiece = new CatalogPieceOfFurniture(catalogId, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, staircaseCutOutShape, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, horizontallyRotatable, price, valueAddedTaxPercentage, currency);
                piece = id != null ? new HomePieceOfFurniture(id, catalogPiece) : new HomePieceOfFurniture(catalogPiece);
            }
        }
        return this.resolveObject(piece, elementName, attributes);
    };
    /**
     * Returns a new {@link HomeFurnitureGroup} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @param {HomePieceOfFurniture[]} furniture
     * @return {HomeFurnitureGroup}
     * @private
     */
    HomeXMLHandler.prototype.createFurnitureGroup = function (elementName, attributes, furniture) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var angle = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "angle") != null ? this.parseFloat(attributes, "angle") : 0;
        var modelMirrored = "true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "modelMirrored");
        var name = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name");
        var furnitureGroup = id != null ? new HomeFurnitureGroup(id, furniture, angle, modelMirrored, name) : new HomeFurnitureGroup(furniture, angle, modelMirrored, name);
        return this.resolveObject(furnitureGroup, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>piece</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {HomePieceOfFurniture} piece
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setPieceOfFurnitureAttributes = function (piece, elementName, attributes) {
        this.setProperties(piece);
        piece.setNameStyle(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.textStyles), "nameStyle"));
        piece.setNameVisible("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "nameVisible"));
        var nameAngle = this.parseOptionalFloat(attributes, "nameAngle");
        if (nameAngle != null) {
            piece.setNameAngle(nameAngle);
        }
        var nameXOffset = this.parseOptionalFloat(attributes, "nameXOffset");
        if (nameXOffset != null) {
            piece.setNameXOffset(nameXOffset);
        }
        var nameYOffset = this.parseOptionalFloat(attributes, "nameYOffset");
        if (nameYOffset != null) {
            piece.setNameYOffset(nameYOffset);
        }
        piece.setVisible(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "visible")));
        if (!(piece != null && piece instanceof HomeFurnitureGroup)) {
            var x = this.parseOptionalFloat(attributes, "x");
            if (x != null) {
                piece.setX(x);
            }
            var y = this.parseOptionalFloat(attributes, "y");
            if (y != null) {
                piece.setY(y);
            }
            var angle = this.parseOptionalFloat(attributes, "angle");
            if (angle != null) {
                piece.setAngle(angle);
            }
            if (piece.isHorizontallyRotatable()) {
                var pitch = this.parseOptionalFloat(attributes, "pitch");
                if (pitch != null) {
                    piece.setPitch(pitch);
                }
                var roll = this.parseOptionalFloat(attributes, "roll");
                if (roll != null) {
                    piece.setRoll(roll);
                }
            }
            var widthInPlan = this.parseOptionalFloat(attributes, "widthInPlan");
            if (widthInPlan != null) {
                piece.setWidthInPlan(widthInPlan);
            }
            var depthInPlan = this.parseOptionalFloat(attributes, "depthInPlan");
            if (depthInPlan != null) {
                piece.setDepthInPlan(depthInPlan);
            }
            var heightInPlan = this.parseOptionalFloat(attributes, "heightInPlan");
            if (heightInPlan != null) {
                piece.setHeightInPlan(heightInPlan);
            }
            if (this.home.getVersion() < 5500 || ("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "modelCenteredAtOrigin"))) {
                piece.setModelCenteredAtOrigin(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "modelRotation") == null);
            }
            if (piece.isResizable()) {
                piece.setModelMirrored("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "modelMirrored"));
            }
            if (piece.isTexturable()) {
                if ( /* size */this.materials.length > 0) {
                    piece.setModelMaterials(/* toArray */ this.materials.slice(0));
                }
                var color = this.parseOptionalColor(attributes, "color");
                if (color != null) {
                    piece.setColor(color);
                }
                var texture = (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, HomeXMLHandler.UNIQUE_ATTRIBUTE);
                if (texture != null) {
                    piece.setTexture(texture);
                }
                var shininess = this.parseOptionalFloat(attributes, "shininess");
                if (shininess != null) {
                    piece.setShininess(shininess);
                }
            }
            if (piece.isDeformable()) {
                if ( /* size */this.transformations.length > 0) {
                    piece.setModelTransformations(/* toArray */ this.transformations.slice(0));
                }
            }
            if ((piece != null && piece instanceof HomeLight) && /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "power") != null) {
                piece.setPower(this.parseFloat(attributes, "power"));
            }
            else if ((piece != null && piece instanceof HomeDoorOrWindow) && ("doorOrWindow" === elementName)) {
                var doorOrWindow = piece;
                doorOrWindow.setBoundToWall(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "boundToWall")));
                var wallWidth = this.parseOptionalFloat(attributes, "wallWidth");
                if (wallWidth != null) {
                    doorOrWindow.setWallWidth(wallWidth);
                }
                var wallLeft = this.parseOptionalFloat(attributes, "wallLeft");
                if (wallLeft != null) {
                    doorOrWindow.setWallLeft(wallLeft);
                }
                var wallHeight = this.parseOptionalFloat(attributes, "wallHeight");
                if (wallHeight != null) {
                    doorOrWindow.setWallHeight(wallHeight);
                }
                var wallTop = this.parseOptionalFloat(attributes, "wallTop");
                if (wallTop != null) {
                    doorOrWindow.setWallTop(wallTop);
                }
            }
        }
        else {
            piece.setCatalogId(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "catalogId"));
            piece.setDescription(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "description"));
            piece.setInformation(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "information"));
            piece.setCreator(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "creator"));
        }
    };
    /**
     * Returns a new {@link Wall} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {Wall}
     * @private
     */
    HomeXMLHandler.prototype.createWall = function (elementName, attributes) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var xStart = this.parseFloat(attributes, "xStart");
        var yStart = this.parseFloat(attributes, "yStart");
        var xEnd = this.parseFloat(attributes, "xEnd");
        var yEnd = this.parseFloat(attributes, "yEnd");
        var thickness = this.parseFloat(attributes, "thickness");
        var wall = id != null ? new Wall(id, xStart, yStart, xEnd, yEnd, thickness, 0) : new Wall(xStart, yStart, xEnd, yEnd, thickness, 0);
        return this.resolveObject(wall, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>wall</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Wall} wall
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setWallAttributes = function (wall, elementName, attributes) {
        this.setProperties(wall);
        wall.setLeftSideBaseboard(this.leftSideBaseboard);
        wall.setRightSideBaseboard(this.rightSideBaseboard);
        wall.setHeight(this.parseOptionalFloat(attributes, "height"));
        wall.setHeightAtEnd(this.parseOptionalFloat(attributes, "heightAtEnd"));
        wall.setArcExtent(this.parseOptionalFloat(attributes, "arcExtent"));
        wall.setTopColor(this.parseOptionalColor(attributes, "topColor"));
        wall.setLeftSideColor(this.parseOptionalColor(attributes, "leftSideColor"));
        wall.setLeftSideTexture(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, "leftSideTexture"));
        var leftSideShininess = this.parseOptionalFloat(attributes, "leftSideShininess");
        if (leftSideShininess != null) {
            wall.setLeftSideShininess(leftSideShininess);
        }
        wall.setRightSideColor(this.parseOptionalColor(attributes, "rightSideColor"));
        wall.setRightSideTexture(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, "rightSideTexture"));
        var rightSideShininess = this.parseOptionalFloat(attributes, "rightSideShininess");
        if (rightSideShininess != null) {
            wall.setRightSideShininess(rightSideShininess);
        }
        var pattern = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "pattern");
        if (pattern != null) {
            try {
                wall.setPattern(this.preferences.getPatternsCatalog().getPattern$java_lang_String(pattern));
            }
            catch (ex) {
            }
        }
    };
    /**
     * Returns a new {@link Room} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @param {float[][]} points
     * @return {Room}
     * @private
     */
    HomeXMLHandler.prototype.createRoom = function (elementName, attributes, points) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var room = id != null ? new Room(id, points) : new Room(points);
        return this.resolveObject(room, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>room</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Room} room
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setRoomAttributes = function (room, elementName, attributes) {
        this.setProperties(room);
        room.setNameStyle(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.textStyles), "nameStyle"));
        room.setAreaStyle(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.textStyles), "areaStyle"));
        room.setName(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name"));
        var nameAngle = this.parseOptionalFloat(attributes, "nameAngle");
        if (nameAngle != null) {
            room.setNameAngle(nameAngle);
        }
        var nameXOffset = this.parseOptionalFloat(attributes, "nameXOffset");
        if (nameXOffset != null) {
            room.setNameXOffset(nameXOffset);
        }
        var nameYOffset = this.parseOptionalFloat(attributes, "nameYOffset");
        if (nameYOffset != null) {
            room.setNameYOffset(nameYOffset);
        }
        room.setAreaVisible("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "areaVisible"));
        var areaAngle = this.parseOptionalFloat(attributes, "areaAngle");
        if (areaAngle != null) {
            room.setAreaAngle(areaAngle);
        }
        var areaXOffset = this.parseOptionalFloat(attributes, "areaXOffset");
        if (areaXOffset != null) {
            room.setAreaXOffset(areaXOffset);
        }
        var areaYOffset = this.parseOptionalFloat(attributes, "areaYOffset");
        if (areaYOffset != null) {
            room.setAreaYOffset(areaYOffset);
        }
        room.setFloorVisible(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "floorVisible")));
        room.setFloorColor(this.parseOptionalColor(attributes, "floorColor"));
        room.setFloorTexture(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, "floorTexture"));
        var floorShininess = this.parseOptionalFloat(attributes, "floorShininess");
        if (floorShininess != null) {
            room.setFloorShininess(floorShininess);
        }
        room.setCeilingVisible(!("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "ceilingVisible")));
        room.setCeilingColor(this.parseOptionalColor(attributes, "ceilingColor"));
        room.setCeilingTexture(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, "ceilingTexture"));
        var ceilingShininess = this.parseOptionalFloat(attributes, "ceilingShininess");
        if (ceilingShininess != null) {
            room.setCeilingShininess(ceilingShininess);
        }
    };
    /**
     * Returns a new {@link Polyline} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @param {float[][]} points
     * @return {Polyline}
     * @private
     */
    HomeXMLHandler.prototype.createPolyline = function (elementName, attributes, points) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var polyline = id != null ? new Polyline(id, points) : new Polyline(points);
        return this.resolveObject(polyline, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>polyline</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Polyline} polyline
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setPolylineAttributes = function (polyline, elementName, attributes) {
        this.setProperties(polyline);
        var thickness = this.parseOptionalFloat(attributes, "thickness");
        if (thickness != null) {
            polyline.setThickness(thickness);
        }
        var capStyle = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "capStyle");
        if (capStyle != null) {
            try {
                polyline.setCapStyle(/* Enum.valueOf */ Polyline.CapStyle[capStyle]);
            }
            catch (ex) {
            }
        }
        var joinStyle = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "joinStyle");
        if (joinStyle != null) {
            try {
                polyline.setJoinStyle(/* Enum.valueOf */ Polyline.JoinStyle[joinStyle]);
            }
            catch (ex) {
            }
        }
        var dashStyle = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "dashStyle");
        if (dashStyle != null) {
            try {
                polyline.setDashStyle(/* Enum.valueOf */ Polyline.DashStyle[dashStyle]);
            }
            catch (ex) {
            }
        }
        var dashPattern = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "dashPattern");
        if (dashPattern != null) {
            try {
                var values = dashPattern.split(" ");
                var pattern = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(values.length);
                for (var i = 0; i < values.length; i++) {
                    {
                        pattern[i] = /* parseFloat */ parseFloat(values[i]);
                    }
                    ;
                }
                polyline.setDashPattern(pattern);
            }
            catch (ex) {
                throw new SAXException("Invalid value for dash pattern", ex);
            }
        }
        var dashOffset = this.parseOptionalFloat(attributes, "dashOffset");
        if (dashOffset != null) {
            polyline.setDashOffset(dashOffset);
        }
        var startArrowStyle = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "startArrowStyle");
        if (startArrowStyle != null) {
            try {
                polyline.setStartArrowStyle(/* Enum.valueOf */ Polyline.ArrowStyle[startArrowStyle]);
            }
            catch (ex) {
            }
        }
        var endArrowStyle = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "endArrowStyle");
        if (endArrowStyle != null) {
            try {
                polyline.setEndArrowStyle(/* Enum.valueOf */ Polyline.ArrowStyle[endArrowStyle]);
            }
            catch (ex) {
            }
        }
        var elevation = this.parseOptionalFloat(attributes, "elevation");
        if (elevation != null) {
            polyline.setVisibleIn3D(true);
            polyline.setElevation(elevation);
        }
        var color = this.parseOptionalColor(attributes, "color");
        if (color != null) {
            polyline.setColor(color);
        }
        polyline.setClosedPath("true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "closedPath"));
    };
    /**
     * Returns a new {@link DimensionLine} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {DimensionLine}
     * @private
     */
    HomeXMLHandler.prototype.createDimensionLine = function (elementName, attributes) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var xStart = this.parseFloat(attributes, "xStart");
        var yStart = this.parseFloat(attributes, "yStart");
        var xEnd = this.parseFloat(attributes, "xEnd");
        var yEnd = this.parseFloat(attributes, "yEnd");
        var offset = this.parseFloat(attributes, "offset");
        var dimensionLine = id != null ? new DimensionLine(id, xStart, yStart, xEnd, yEnd, offset) : new DimensionLine(xStart, yStart, xEnd, yEnd, offset);
        return this.resolveObject(dimensionLine, elementName, attributes);
    };
    /**
     * Sets the attributes of the given dimension line.
     * If needed, this method should be called from {@link #endElement}.
     * @param {DimensionLine} dimensionLine
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setDimensionLineAttributes = function (dimensionLine, elementName, attributes) {
        this.setProperties(dimensionLine);
        dimensionLine.setLengthStyle(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.textStyles), "lengthStyle"));
    };
    /**
     * Returns a new {@link Label} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @param {string} text
     * @return {Label}
     * @private
     */
    HomeXMLHandler.prototype.createLabel = function (elementName, attributes, text) {
        var id = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "id");
        var x = this.parseFloat(attributes, "x");
        var y = this.parseFloat(attributes, "y");
        var label = id != null ? new Label(id, text, x, y) : new Label(text, x, y);
        return this.resolveObject(label, elementName, attributes);
    };
    /**
     * Sets the attributes of the given <code>label</code>.
     * If needed, this method should be called from {@link #endElement}.
     * @param {Label} label
     * @param {string} elementName
     * @param {Object} attributes
     */
    HomeXMLHandler.prototype.setLabelAttributes = function (label, elementName, attributes) {
        this.setProperties(label);
        label.setStyle(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.textStyles), HomeXMLHandler.UNIQUE_ATTRIBUTE));
        var angle = this.parseOptionalFloat(attributes, "angle");
        if (angle != null) {
            label.setAngle(angle);
        }
        var elevation = this.parseOptionalFloat(attributes, "elevation");
        if (elevation != null) {
            label.setElevation(elevation);
        }
        var pitch = this.parseOptionalFloat(attributes, "pitch");
        if (pitch != null) {
            label.setPitch(pitch);
        }
        label.setColor(this.parseOptionalColor(attributes, "color"));
        label.setOutlineColor(this.parseOptionalColor(attributes, "outlineColor"));
    };
    /**
     * Returns a new {@link Baseboard} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {Baseboard}
     * @private
     */
    HomeXMLHandler.prototype.createBaseboard = function (elementName, attributes) {
        var baseboard = Baseboard.getInstance(this.parseFloat(attributes, "thickness"), this.parseFloat(attributes, "height"), this.parseOptionalColor(attributes, "color"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.textures, HomeXMLHandler.UNIQUE_ATTRIBUTE));
        return this.resolveObject(baseboard, elementName, attributes);
    };
    /**
     * Returns a new {@link TextStyle} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {TextStyle}
     * @private
     */
    HomeXMLHandler.prototype.createTextStyle = function (elementName, attributes) {
        var alignment = TextStyle.Alignment.CENTER;
        var alignmentString = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "alignment");
        if (alignmentString != null) {
            try {
                alignment = /* Enum.valueOf */ TextStyle.Alignment[alignmentString];
            }
            catch (ex) {
            }
        }
        var textStyle = new TextStyle(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "fontName"), this.parseFloat(attributes, "fontSize"), "true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "bold"), "true" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "italic"), alignment);
        return this.resolveObject(textStyle, elementName, attributes);
    };
    /**
     * Returns a new {@link HomeTexture} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {HomeTexture}
     * @private
     */
    HomeXMLHandler.prototype.createTexture = function (elementName, attributes) {
        var catalogId = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "catalogId");
        var texture = new HomeTexture(new CatalogTexture(catalogId, /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name"), this.parseContent(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "image"), catalogId, true), this.parseFloat(attributes, "width"), this.parseFloat(attributes, "height"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "creator")), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "xOffset") != null ? this.parseFloat(attributes, "xOffset") : 0, /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "yOffset") != null ? this.parseFloat(attributes, "yOffset") : 0, /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "angle") != null ? this.parseFloat(attributes, "angle") : 0, /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "scale") != null ? this.parseFloat(attributes, "scale") : 1, !("false" === /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "leftToRightOriented")));
        return this.resolveObject(texture, elementName, attributes);
    };
    /**
     * Returns a new {@link HomeMaterial} instance initialized from the given <code>attributes</code>.
     * @param {string} elementName
     * @param {Object} attributes
     * @return {HomeMaterial}
     * @private
     */
    HomeXMLHandler.prototype.createMaterial = function (elementName, attributes) {
        var material = new HomeMaterial(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "name"), /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, "key"), this.parseOptionalColor(attributes, "color"), this.materialTexture, this.parseOptionalFloat(attributes, "shininess"));
        return this.resolveObject(material, elementName, attributes);
    };
    /**
     * Sets the properties of the given <code>object</code>.
     * @param {HomeObject} object
     * @private
     */
    HomeXMLHandler.prototype.setProperties = function (object) {
        {
            var array = /* entrySet */ (function (o) { var s = []; for (var e in o)
                s.push({ k: e, v: o[e], getKey: function () { return this.k; }, getValue: function () { return this.v; } }); return s; })(/* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.properties));
            for (var index = 0; index < array.length; index++) {
                var property = array[index];
                {
                    object.setProperty(property.getKey(), property.getValue());
                }
            }
        }
    };
    /**
     * Returns the color integer from a hexadecimal string.
     * @param {Object} attributes
     * @param {string} name
     * @return {number}
     * @private
     */
    HomeXMLHandler.prototype.parseOptionalColor = function (attributes, name) {
        var color = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, name);
        if (color != null) {
            try {
                return (parseInt(color, 16) | 0);
            }
            catch (ex) {
                throw new SAXException("Invalid value for color attribute " + name, ex);
            }
        }
        else {
            return null;
        }
    };
    HomeXMLHandler.prototype.parseOptionalInteger = function (attributes, name) {
        var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, name);
        if (value != null) {
            try {
                return /* parseInt */ parseInt(value);
            }
            catch (ex) {
                throw new SAXException("Invalid value for integer attribute " + name, ex);
            }
        }
        else {
            return null;
        }
    };
    HomeXMLHandler.prototype.parseOptionalLong = function (attributes, name) {
        var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, name);
        if (value != null) {
            try {
                return /* parseLong */ parseInt(value);
            }
            catch (ex) {
                throw new SAXException("Invalid value for long attribute " + name, ex);
            }
        }
        else {
            return null;
        }
    };
    HomeXMLHandler.prototype.parseOptionalDecimal = function (attributes, name) {
        var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, name);
        if (value != null) {
            try {
                return new Big(value);
            }
            catch (ex) {
                throw new SAXException("Invalid value for decimal attribute " + name, ex);
            }
        }
        else {
            return null;
        }
    };
    HomeXMLHandler.prototype.parseOptionalFloat = function (attributes, name) {
        var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, name);
        if (value != null) {
            try {
                return /* parseFloat */ parseFloat(value);
            }
            catch (ex) {
                throw new SAXException("Invalid value for float attribute " + name, ex);
            }
        }
        else {
            return null;
        }
    };
    HomeXMLHandler.prototype.parseFloat = function (attributes, name) {
        var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(attributes, name);
        if (value != null) {
            try {
                return /* parseFloat */ parseFloat(value);
            }
            catch (ex) {
                throw new SAXException("Invalid value for float attribute " + name, ex);
            }
        }
        else {
            throw new SAXException("Missing float attribute " + name);
        }
    };
    /**
     * Returns the content object matching the given string.
     * @param {string} contentFile
     * @param {string} catalogId
     * @param {boolean} textureId
     * @return {Object}
     * @private
     */
    HomeXMLHandler.prototype.parseContent = function (contentFile, catalogId, textureId) {
        if (contentFile == null) {
            return null;
        }
        else if (contentFile.indexOf('://') >= 0) {
            return new URLContent(contentFile);
        }
        else {
            return new HomeURLContent('jar:' + this['homeUrl'] + '!/' + contentFile);
        }
    };
    /**
     * Sets the home that will be updated by this handler.
     * If a subclass of this handler uses a root element different from <code>home</code>,
     * it should call this method from {@link #startElement} to store the
     * {@link Home} subclass instance read from the XML stream.
     * @param {Home} home
     */
    HomeXMLHandler.prototype.setHome = function (home) {
        this.home = home;
        this.homeElementName = /* peek */ (function (a) { return a.length == 0 ? null : a[a.length - 1]; })(this.elements);
    };
    /**
     * Returns the home read by this handler.
     * @return {Home}
     */
    HomeXMLHandler.prototype.getHome = function () {
        return this.home;
    };
    HomeXMLHandler.UNIQUE_ATTRIBUTE = "@&unique&@";
    return HomeXMLHandler;
}(DefaultHandler));
HomeXMLHandler["__class"] = "com.eteks.sweethome3d.io.HomeXMLHandler";
HomeXMLHandler["__interfaces"] = ["org.xml.sax.ErrorHandler", "org.xml.sax.DTDHandler", "org.xml.sax.ContentHandler", "org.xml.sax.EntityResolver"];
(function (HomeXMLHandler) {
    /**
     * Class storing the ID of the walls connected to a given wall.
     * @param {Wall} wall
     * @param {string} wallAtStartId
     * @param {string} wallAtEndId
     * @class
     */
    var JoinedWall = /** @class */ (function () {
        function JoinedWall(wall, wallAtStartId, wallAtEndId) {
            if (this.wall === undefined) {
                this.wall = null;
            }
            if (this.wallAtStartId === undefined) {
                this.wallAtStartId = null;
            }
            if (this.wallAtEndId === undefined) {
                this.wallAtEndId = null;
            }
            this.wall = wall;
            this.wallAtStartId = wallAtStartId;
            this.wallAtEndId = wallAtEndId;
        }
        JoinedWall.prototype.getWall = function () {
            return this.wall;
        };
        JoinedWall.prototype.getWallAtStartId = function () {
            return this.wallAtStartId;
        };
        JoinedWall.prototype.getWallAtEndId = function () {
            return this.wallAtEndId;
        };
        return JoinedWall;
    }());
    HomeXMLHandler.JoinedWall = JoinedWall;
    JoinedWall["__class"] = "com.eteks.sweethome3d.io.HomeXMLHandler.JoinedWall";
})(HomeXMLHandler || (HomeXMLHandler = {}));
/**
 * Creates the controller of label creation with undo support.
 * @param {Home} home
 * @param {number} x
 * @param {number} y
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var LabelController = /** @class */ (function () {
    function LabelController(home, x, y, preferences, viewFactory, undoSupport) {
        if (((home != null && home instanceof Home) || home === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((undoSupport != null && undoSupport instanceof javax.swing.undo.UndoableEditSupport) || undoSupport === null)) {
            var __args = arguments;
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.x === undefined) {
                this.x = null;
            }
            if (this.y === undefined) {
                this.y = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.labelView === undefined) {
                this.labelView = null;
            }
            if (this.text === undefined) {
                this.text = null;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontNameSet === undefined) {
                this.fontNameSet = false;
            }
            if (this.fontSize === undefined) {
                this.fontSize = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.pitch === undefined) {
                this.pitch = null;
            }
            if (this.pitchEnabled === undefined) {
                this.pitchEnabled = null;
            }
            if (this.elevation === undefined) {
                this.elevation = null;
            }
            this.home = home;
            this.x = x;
            this.y = y;
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.undoSupport = undoSupport;
            this.propertyChangeSupport = new PropertyChangeSupport(this);
            this.alignment = TextStyle.Alignment.CENTER;
            this.fontName = preferences.getDefaultFontName();
            this.fontNameSet = true;
            this.fontSize = preferences.getDefaultTextStyle(Label).getFontSize();
            this.pitchEnabled = false;
            this.elevation = 0.0;
        }
        else if (((home != null && home instanceof Home) || home === null) && ((x != null && x instanceof UserPreferences) || x === null) && ((y != null && (y.constructor != null && y.constructor["__interfaces"] != null && y.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || y === null) && ((preferences != null && preferences instanceof javax.swing.undo.UndoableEditSupport) || preferences === null) && viewFactory === undefined && undoSupport === undefined) {
            var __args = arguments;
            var preferences_4 = __args[1];
            var viewFactory_3 = __args[2];
            var undoSupport_1 = __args[3];
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.x === undefined) {
                this.x = null;
            }
            if (this.y === undefined) {
                this.y = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.labelView === undefined) {
                this.labelView = null;
            }
            if (this.text === undefined) {
                this.text = null;
            }
            if (this.alignment === undefined) {
                this.alignment = null;
            }
            if (this.fontName === undefined) {
                this.fontName = null;
            }
            if (this.fontNameSet === undefined) {
                this.fontNameSet = false;
            }
            if (this.fontSize === undefined) {
                this.fontSize = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.pitch === undefined) {
                this.pitch = null;
            }
            if (this.pitchEnabled === undefined) {
                this.pitchEnabled = null;
            }
            if (this.elevation === undefined) {
                this.elevation = null;
            }
            this.home = home;
            this.x = null;
            this.y = null;
            this.preferences = preferences_4;
            this.viewFactory = viewFactory_3;
            this.undoSupport = undoSupport_1;
            this.propertyChangeSupport = new PropertyChangeSupport(this);
            this.updateProperties();
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Updates edited properties from selected labels in the home edited by this controller.
     */
    LabelController.prototype.updateProperties = function () {
        var selectedLabels = Home.getLabelsSubList(this.home.getSelectedItems());
        if ( /* isEmpty */(selectedLabels.length == 0)) {
            this.setText(null);
            this.setFontName(null);
            this.fontNameSet = false;
            this.setFontSize(null);
            this.setAlignment(null);
            this.setColor(null);
            this.setPitch(null);
            this.pitchEnabled = false;
            this.setElevation(null);
        }
        else {
            var firstLabel = selectedLabels[0];
            var text = firstLabel.getText();
            if (text != null) {
                for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                    {
                        if (!(text === /* get */ selectedLabels[i].getText())) {
                            text = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setText(text);
            var alignment = firstLabel.getStyle() != null ? firstLabel.getStyle().getAlignment() : TextStyle.Alignment.CENTER;
            for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                {
                    var label = selectedLabels[i];
                    if (!((alignment) === (label.getStyle() != null ? label.getStyle().getAlignment() : TextStyle.Alignment.CENTER))) {
                        alignment = null;
                        break;
                    }
                }
                ;
            }
            this.setAlignment(alignment);
            var fontName = firstLabel.getStyle() != null ? firstLabel.getStyle().getFontName() : null;
            var fontNameSet = true;
            for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                {
                    var label = selectedLabels[i];
                    if (!(fontName == null && (label.getStyle() == null || label.getStyle().getFontName() == null) || fontName != null && label.getStyle() != null && (fontName === label.getStyle().getFontName()))) {
                        fontNameSet = false;
                        break;
                    }
                }
                ;
            }
            this.setFontName(fontName);
            this.fontNameSet = fontNameSet;
            var labelDefaultFontSize = this.preferences.getDefaultTextStyle(Label).getFontSize();
            var fontSize = firstLabel.getStyle() != null ? firstLabel.getStyle().getFontSize() : labelDefaultFontSize;
            for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                {
                    var label = selectedLabels[i];
                    if (!(fontSize === (label.getStyle() != null ? label.getStyle().getFontSize() : labelDefaultFontSize))) {
                        fontSize = null;
                        break;
                    }
                }
                ;
            }
            this.setFontSize(fontSize);
            var color = firstLabel.getColor();
            if (color != null) {
                for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                    {
                        if (!(color === /* get */ selectedLabels[i].getColor())) {
                            color = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setColor(color);
            var pitch = firstLabel.getPitch();
            for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                {
                    var label = selectedLabels[i];
                    if (!(pitch == null && label.getPitch() == null || pitch != null && (pitch === label.getPitch()))) {
                        pitch = null;
                        break;
                    }
                }
                ;
            }
            this.setPitch(pitch);
            var pitchEnabled = firstLabel.getPitch() != null;
            for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                {
                    if (!(pitchEnabled === ( /* get */selectedLabels[i].getPitch() != null))) {
                        pitchEnabled = null;
                        break;
                    }
                }
                ;
            }
            this.pitchEnabled = pitchEnabled;
            var elevation = firstLabel.getElevation();
            for (var i = 1; i < /* size */ selectedLabels.length; i++) {
                {
                    if ( /* floatValue */elevation !== /* get */ selectedLabels[i].getElevation()) {
                        elevation = null;
                        break;
                    }
                }
                ;
            }
            this.setElevation(elevation);
        }
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    LabelController.prototype.getView = function () {
        if (this.labelView == null) {
            this.labelView = this.viewFactory.createLabelView(this.x == null, this.preferences, this);
        }
        return this.labelView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    LabelController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    LabelController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    LabelController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Sets the edited text.
     * @param {string} text
     */
    LabelController.prototype.setText = function (text) {
        if (text !== this.text) {
            var oldText = this.text;
            this.text = text;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TEXT", oldText, text);
        }
    };
    /**
     * Returns the edited text.
     * @return {string}
     */
    LabelController.prototype.getText = function () {
        return this.text;
    };
    /**
     * Sets the edited text alignment.
     * @param {TextStyle.Alignment} alignment
     */
    LabelController.prototype.setAlignment = function (alignment) {
        if (alignment !== this.alignment) {
            var oldAlignment = this.alignment;
            this.alignment = alignment;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ALIGNMENT", oldAlignment, alignment);
        }
    };
    /**
     * Returns the edited text alignment.
     * @return {TextStyle.Alignment}
     */
    LabelController.prototype.getAlignment = function () {
        return this.alignment;
    };
    /**
     * Sets the edited font name.
     * @param {string} fontName
     */
    LabelController.prototype.setFontName = function (fontName) {
        if (fontName !== this.fontName) {
            var oldFontName = this.fontName;
            this.fontName = fontName;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FONT_NAME", oldFontName, fontName);
            this.fontNameSet = true;
        }
    };
    /**
     * Returns the edited font name or <code>null</code> for default system font.
     * @return {string}
     */
    LabelController.prototype.getFontName = function () {
        return this.fontName;
    };
    /**
     * Sets the edited font size.
     * @param {number} fontSize
     */
    LabelController.prototype.setFontSize = function (fontSize) {
        if (fontSize !== this.fontSize) {
            var oldFontSize = this.fontSize;
            this.fontSize = fontSize;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FONT_SIZE", oldFontSize, fontSize);
        }
    };
    /**
     * Returns the edited font size.
     * @return {number}
     */
    LabelController.prototype.getFontSize = function () {
        return this.fontSize;
    };
    /**
     * Returns <code>true</code> if all edited labels use the same font name.
     * @return {boolean}
     */
    LabelController.prototype.isFontNameSet = function () {
        return this.fontNameSet;
    };
    /**
     * Sets the edited color.
     * @param {number} color
     */
    LabelController.prototype.setColor = function (color) {
        if (color !== this.color) {
            var oldColor = this.color;
            this.color = color;
            this.propertyChangeSupport.firePropertyChange(/* name */ "COLOR", oldColor, color);
        }
    };
    /**
     * Returns the edited color.
     * @return {number}
     */
    LabelController.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets the edited pitch.
     * @param {number} pitch
     */
    LabelController.prototype.setPitch = function (pitch) {
        if (pitch !== this.pitch) {
            var oldPitch = this.pitch;
            this.pitch = pitch;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PITCH", oldPitch, pitch);
        }
        this.pitchEnabled = pitch != null;
    };
    /**
     * Returns the edited pitch.
     * @return {number}
     */
    LabelController.prototype.getPitch = function () {
        return this.pitch;
    };
    /**
     * Returns <code>Boolean.TRUE</code> if all edited labels are viewed in 3D,
     * or <code>Boolean.FALSE</code> if no label is viewed in 3D.
     * @return {boolean}
     */
    LabelController.prototype.isPitchEnabled = function () {
        return this.pitchEnabled;
    };
    /**
     * Sets the edited elevation.
     * @param {number} elevation
     */
    LabelController.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns the edited elevation.
     * @return {number}
     */
    LabelController.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Controls the creation of a label.
     */
    LabelController.prototype.createLabel = function () {
        var text = this.getText();
        if (text != null && text.trim().length > 0) {
            var oldSelection = this.home.getSelectedItems();
            var basePlanLocked = this.home.isBasePlanLocked();
            var allLevelsSelection = this.home.isAllLevelsSelection();
            var label = new Label(text, this.x, this.y);
            var alignment = this.getAlignment();
            var fontName = this.getFontName();
            var fontSize = this.getFontSize();
            if (fontName != null || fontSize != null || this.getPitch() != null) {
                var style = this.preferences.getDefaultTextStyle(Label);
                if (fontName != null) {
                    style = style.deriveStyle$java_lang_String(fontName);
                }
                if (fontSize != null) {
                    style = style.deriveStyle$float(fontSize);
                }
                if (alignment != null) {
                    style = style.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(alignment);
                }
                label.setStyle(style);
            }
            if (this.color != null) {
                label.setColor(this.color);
            }
            label.setColor(this.getColor());
            label.setPitch(this.getPitch());
            label.setElevation(this.getElevation());
            var newBasePlanLocked = basePlanLocked && !this.isLabelPartOfBasePlan(label);
            LabelController.doAddLabel(this.home, label, newBasePlanLocked);
            if (this.undoSupport != null) {
                var undoableEdit = new LabelController.LabelCreationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), basePlanLocked, allLevelsSelection, label, newBasePlanLocked);
                this.undoSupport.postEdit(undoableEdit);
            }
            if (text.indexOf('\n') < 0) {
                this.preferences.addAutoCompletionString("LabelText", text);
            }
        }
    };
    /**
     * Adds label to home and selects it.
     * @param {Home} home
     * @param {Label} label
     * @param {boolean} basePlanLocked
     * @private
     */
    LabelController.doAddLabel = function (home, label, basePlanLocked) {
        home.addLabel(label);
        home.setBasePlanLocked(basePlanLocked);
        home.setSelectedItems(/* asList */ [label].slice(0));
        home.setAllLevelsSelection(false);
    };
    /**
     * Deletes label from home.
     * @param {Home} home
     * @param {Label} label
     * @param {boolean} basePlanLocked
     * @private
     */
    LabelController.doDeleteLabel = function (home, label, basePlanLocked) {
        home.deleteLabel(label);
        home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Returns <code>true</code>.
     * @param {Label} label
     * @return {boolean}
     */
    LabelController.prototype.isLabelPartOfBasePlan = function (label) {
        return true;
    };
    /**
     * Controls the modification of selected labels.
     */
    LabelController.prototype.modifyLabels = function () {
        var oldSelection = this.home.getSelectedItems();
        var selectedLabels = Home.getLabelsSubList(oldSelection);
        if (!(selectedLabels.length == 0)) {
            var text = this.getText();
            if (text != null && text.trim().length === 0) {
                text = null;
            }
            var alignment = this.getAlignment();
            var fontName = this.getFontName();
            var fontNameSet = this.isFontNameSet();
            var fontSize = this.getFontSize();
            var color = this.getColor();
            var pitch = this.getPitch();
            var pitchEnabled = this.isPitchEnabled();
            var elevation = this.getElevation();
            var modifiedLabels = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ selectedLabels.length);
            for (var i = 0; i < modifiedLabels.length; i++) {
                {
                    modifiedLabels[i] = new LabelController.ModifiedLabel(/* get */ selectedLabels[i]);
                }
                ;
            }
            var defaultStyle = this.preferences.getDefaultTextStyle(Label);
            LabelController.doModifyLabels(modifiedLabels, text, alignment, fontName, fontNameSet, fontSize, defaultStyle, color, pitch, pitchEnabled, elevation);
            if (this.undoSupport != null) {
                var undoableEdit = new LabelController.LabelModificationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), modifiedLabels, text, alignment, fontName, fontNameSet, fontSize, defaultStyle, color, pitch, pitchEnabled, elevation);
                this.undoSupport.postEdit(undoableEdit);
            }
            if (text != null && text.indexOf('\n') < 0) {
                this.preferences.addAutoCompletionString("LabelText", text);
            }
        }
    };
    /**
     * Modifies labels properties with the values in parameter.
     * @param {com.eteks.sweethome3d.viewcontroller.LabelController.ModifiedLabel[]} modifiedLabels
     * @param {string} text
     * @param {TextStyle.Alignment} alignment
     * @param {string} fontName
     * @param {boolean} fontNameSet
     * @param {number} fontSize
     * @param {TextStyle} defaultStyle
     * @param {number} color
     * @param {number} pitch
     * @param {boolean} pitchEnabled
     * @param {number} elevation
     * @private
     */
    LabelController.doModifyLabels = function (modifiedLabels, text, alignment, fontName, fontNameSet, fontSize, defaultStyle, color, pitch, pitchEnabled, elevation) {
        for (var index = 0; index < modifiedLabels.length; index++) {
            var modifiedLabel = modifiedLabels[index];
            {
                var label = modifiedLabel.getLabel();
                if (text != null) {
                    label.setText(text);
                }
                if (alignment != null) {
                    label.setStyle(label.getStyle() != null ? label.getStyle().deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(alignment) : defaultStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(alignment));
                }
                if (fontNameSet) {
                    label.setStyle(label.getStyle() != null ? label.getStyle().deriveStyle$java_lang_String(fontName) : defaultStyle.deriveStyle$java_lang_String(fontName));
                }
                if (fontSize != null) {
                    label.setStyle(label.getStyle() != null ? label.getStyle().deriveStyle$float(fontSize) : defaultStyle.deriveStyle$float(fontSize));
                }
                if (color != null) {
                    label.setColor(color);
                }
                if (pitchEnabled != null) {
                    if (false === pitchEnabled) {
                        label.setPitch(null);
                    }
                    else if (pitch != null) {
                        label.setPitch(pitch);
                        if (label.getStyle() == null) {
                            label.setStyle(defaultStyle);
                        }
                    }
                }
                if (elevation != null) {
                    label.setElevation(elevation);
                }
            }
        }
    };
    /**
     * Restores label properties from the values stored in <code>modifiedLabels</code>.
     * @param {com.eteks.sweethome3d.viewcontroller.LabelController.ModifiedLabel[]} modifiedLabels
     * @private
     */
    LabelController.undoModifyLabels = function (modifiedLabels) {
        for (var index = 0; index < modifiedLabels.length; index++) {
            var modifiedPiece = modifiedLabels[index];
            {
                modifiedPiece.reset();
            }
        }
    };
    return LabelController;
}());
LabelController["__class"] = "com.eteks.sweethome3d.viewcontroller.LabelController";
LabelController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (LabelController) {
    /**
     * Undoable edit for label creation. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var LabelCreationUndoableEdit = /** @class */ (function (_super) {
        __extends(LabelCreationUndoableEdit, _super);
        function LabelCreationUndoableEdit(home, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, label, newBasePlanLocked) {
            var _this = _super.call(this, preferences, LabelController, "undoCreateLabelName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.label === undefined) {
                _this.label = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.label = label;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        LabelCreationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            LabelController.doDeleteLabel(this.home, this.label, this.oldBasePlanLocked);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
            this.home.setAllLevelsSelection(this.oldAllLevelsSelection);
        };
        /**
         *
         */
        LabelCreationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            LabelController.doAddLabel(this.home, this.label, this.newBasePlanLocked);
        };
        return LabelCreationUndoableEdit;
    }(LocalizedUndoableEdit));
    LabelController.LabelCreationUndoableEdit = LabelCreationUndoableEdit;
    LabelCreationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.LabelController.LabelCreationUndoableEdit";
    LabelCreationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for label modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var LabelModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(LabelModificationUndoableEdit, _super);
        function LabelModificationUndoableEdit(home, preferences, oldSelection, modifiedLabels, text, alignment, fontName, fontNameSet, fontSize, defaultStyle, color, pitch, pitchEnabled, elevation) {
            var _this = _super.call(this, preferences, LabelController, "undoModifyLabelsName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.modifiedLabels === undefined) {
                _this.modifiedLabels = null;
            }
            if (_this.text === undefined) {
                _this.text = null;
            }
            if (_this.alignment === undefined) {
                _this.alignment = null;
            }
            if (_this.fontName === undefined) {
                _this.fontName = null;
            }
            if (_this.fontNameSet === undefined) {
                _this.fontNameSet = false;
            }
            if (_this.fontSize === undefined) {
                _this.fontSize = null;
            }
            if (_this.defaultStyle === undefined) {
                _this.defaultStyle = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.pitch === undefined) {
                _this.pitch = null;
            }
            if (_this.pitchEnabled === undefined) {
                _this.pitchEnabled = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.modifiedLabels = modifiedLabels;
            _this.text = text;
            _this.alignment = alignment;
            _this.fontName = fontName;
            _this.fontNameSet = fontNameSet;
            _this.fontSize = fontSize;
            _this.defaultStyle = defaultStyle;
            _this.color = color;
            _this.pitch = pitch;
            _this.pitchEnabled = pitchEnabled;
            _this.elevation = elevation;
            return _this;
        }
        /**
         *
         */
        LabelModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            LabelController.undoModifyLabels(this.modifiedLabels);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        LabelModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            LabelController.doModifyLabels(this.modifiedLabels, this.text, this.alignment, this.fontName, this.fontNameSet, this.fontSize, this.defaultStyle, this.color, this.pitch, this.pitchEnabled, this.elevation);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        return LabelModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    LabelController.LabelModificationUndoableEdit = LabelModificationUndoableEdit;
    LabelModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.LabelController.LabelModificationUndoableEdit";
    LabelModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the current properties values of a modified label.
     * @param {Label} label
     * @class
     */
    var ModifiedLabel = /** @class */ (function () {
        function ModifiedLabel(label) {
            if (this.label === undefined) {
                this.label = null;
            }
            if (this.text === undefined) {
                this.text = null;
            }
            if (this.style === undefined) {
                this.style = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.pitch === undefined) {
                this.pitch = null;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            this.label = label;
            this.text = label.getText();
            this.style = label.getStyle();
            this.color = label.getColor();
            this.pitch = label.getPitch();
            this.elevation = label.getElevation();
        }
        ModifiedLabel.prototype.getLabel = function () {
            return this.label;
        };
        ModifiedLabel.prototype.reset = function () {
            this.label.setText(this.text);
            this.label.setStyle(this.style);
            this.label.setColor(this.color);
            this.label.setPitch(this.pitch);
            this.label.setElevation(this.elevation);
        };
        return ModifiedLabel;
    }());
    LabelController.ModifiedLabel = ModifiedLabel;
    ModifiedLabel["__class"] = "com.eteks.sweethome3d.viewcontroller.LabelController.ModifiedLabel";
})(LabelController || (LabelController = {}));
/**
 * Creates the controller of home furniture view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var FurnitureController = /** @class */ (function () {
    function FurnitureController(home, preferences, viewFactory, contentManager, undoSupport) {
        if (((home != null && home instanceof Home) || home === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null) && ((undoSupport != null && undoSupport instanceof javax.swing.undo.UndoableEditSupport) || undoSupport === null)) {
            var __args = arguments;
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.furnitureView === undefined) {
                this.furnitureView = null;
            }
            if (this.leadSelectedPieceOfFurniture === undefined) {
                this.leadSelectedPieceOfFurniture = null;
            }
            this.home = home;
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.undoSupport = undoSupport;
            this.contentManager = contentManager;
            this.addModelListeners();
        }
        else if (((home != null && home instanceof Home) || home === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && contentManager === undefined && undoSupport === undefined) {
            var __args = arguments;
            {
                var __args_42 = arguments;
                var contentManager_3 = null;
                var undoSupport_2 = null;
                if (this.home === undefined) {
                    this.home = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.undoSupport === undefined) {
                    this.undoSupport = null;
                }
                if (this.furnitureView === undefined) {
                    this.furnitureView = null;
                }
                if (this.leadSelectedPieceOfFurniture === undefined) {
                    this.leadSelectedPieceOfFurniture = null;
                }
                this.home = home;
                this.preferences = preferences;
                this.viewFactory = viewFactory;
                this.undoSupport = undoSupport_2;
                this.contentManager = contentManager_3;
                this.addModelListeners();
            }
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.furnitureView === undefined) {
                this.furnitureView = null;
            }
            if (this.leadSelectedPieceOfFurniture === undefined) {
                this.leadSelectedPieceOfFurniture = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    FurnitureController.prototype.getView = function () {
        if (this.furnitureView == null) {
            this.furnitureView = this.viewFactory.createFurnitureView(this.home, this.preferences, this);
        }
        return this.furnitureView;
    };
    FurnitureController.prototype.addModelListeners = function () {
        this.home.addSelectionListener(new FurnitureController.FurnitureController$0(this));
        var furnitureChangeListener = new FurnitureController.FurnitureController$1(this);
        {
            var array = this.home.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    piece.addPropertyChangeListener(furnitureChangeListener);
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        {
                            var array1 = piece.getAllFurniture();
                            for (var index1 = 0; index1 < array1.length; index1++) {
                                var childPiece = array1[index1];
                                {
                                    childPiece.addPropertyChangeListener(furnitureChangeListener);
                                }
                            }
                        }
                    }
                }
            }
        }
        this.home.addFurnitureListener(function (ev) {
            var piece = ev.getItem();
            if (ev.getType() === CollectionEvent.Type.ADD) {
                piece.addPropertyChangeListener(furnitureChangeListener);
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    {
                        var array = piece.getAllFurniture();
                        for (var index = 0; index < array.length; index++) {
                            var childPiece = array[index];
                            {
                                childPiece.addPropertyChangeListener(furnitureChangeListener);
                            }
                        }
                    }
                }
            }
            else if (ev.getType() === CollectionEvent.Type.DELETE) {
                piece.removePropertyChangeListener(furnitureChangeListener);
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    {
                        var array = piece.getAllFurniture();
                        for (var index = 0; index < array.length; index++) {
                            var childPiece = array[index];
                            {
                                childPiece.removePropertyChangeListener(furnitureChangeListener);
                            }
                        }
                    }
                }
            }
        });
    };
    FurnitureController.prototype.addFurniture$java_util_List = function (furniture) {
        this.addFurniture$java_util_List$com_eteks_sweethome3d_model_Level_A$com_eteks_sweethome3d_model_HomeFurnitureGroup$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, null, null, null);
    };
    FurnitureController.prototype.addFurniture$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (furniture, beforePiece) {
        this.addFurniture$java_util_List$com_eteks_sweethome3d_model_Level_A$com_eteks_sweethome3d_model_HomeFurnitureGroup$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, null, null, beforePiece);
    };
    /**
     * Controls new furniture added to the given group.
     * Once added the furniture will be selected in view
     * and undo support will receive a new undoable edit.
     * @param {HomePieceOfFurniture[]} furniture the furniture to add.
     * @param {HomeFurnitureGroup} group     the group to which furniture will be added.
     */
    FurnitureController.prototype.addFurnitureToGroup = function (furniture, group) {
        if (group == null) {
            throw new IllegalArgumentException("Group shouldn\'t be null");
        }
        this.addFurniture$java_util_List$com_eteks_sweethome3d_model_Level_A$com_eteks_sweethome3d_model_HomeFurnitureGroup$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, null, group, null);
    };
    FurnitureController.prototype.addFurniture$java_util_List$com_eteks_sweethome3d_model_Level_A$com_eteks_sweethome3d_model_HomeFurnitureGroup$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (furniture, furnitureLevels, group, beforePiece) {
        var oldBasePlanLocked = this.home.isBasePlanLocked();
        var allLevelsSelection = this.home.isAllLevelsSelection();
        var oldSelection = this.home.getSelectedItems();
        var newFurniture = furniture.slice(0);
        var newFurnitureIndex = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(/* size */ furniture.length);
        var insertIndex = group == null ? /* size */ this.home.getFurniture().length : /* size */ group.getFurniture().length;
        if (beforePiece != null) {
            var parentFurniture = this.home.getFurniture();
            group = FurnitureController.getPieceOfFurnitureGroup(beforePiece, null, parentFurniture);
            if (group != null) {
                parentFurniture = group.getFurniture();
            }
            insertIndex = parentFurniture.indexOf(beforePiece);
        }
        var newFurnitureGroups = group != null ? (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(/* size */ furniture.length) : null;
        var basePlanLocked = oldBasePlanLocked;
        var levelUpdated = group != null || furnitureLevels == null;
        for (var i = 0; i < newFurnitureIndex.length; i++) {
            {
                newFurnitureIndex[i] = insertIndex++;
                basePlanLocked = !this.isPieceOfFurniturePartOfBasePlan(newFurniture[i]) && basePlanLocked;
                if (furnitureLevels != null) {
                    levelUpdated = furnitureLevels[i] == null || levelUpdated;
                }
                if (newFurnitureGroups != null) {
                    newFurnitureGroups[i] = group;
                }
            }
            ;
        }
        var newFurnitureLevels = levelUpdated ? null : furnitureLevels;
        var newBasePlanLocked = basePlanLocked;
        var furnitureLevel = group != null ? group.getLevel() : this.home.getSelectedLevel();
        FurnitureController.doAddFurniture(this.home, newFurniture, newFurnitureGroups, newFurnitureIndex, furnitureLevel, newFurnitureLevels, newBasePlanLocked, false);
        if (this.undoSupport != null) {
            this.undoSupport.postEdit(new FurnitureController.FurnitureAdditionUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), oldBasePlanLocked, allLevelsSelection, newFurniture, newFurnitureIndex, newFurnitureGroups, newFurnitureLevels, furnitureLevel, newBasePlanLocked));
        }
    };
    FurnitureController.prototype.addFurniture = function (furniture, furnitureLevels, group, beforePiece) {
        if (((furniture != null && (furniture instanceof Array)) || furniture === null) && ((furnitureLevels != null && furnitureLevels instanceof Array && (furnitureLevels.length == 0 || furnitureLevels[0] == null || (furnitureLevels[0] != null && furnitureLevels[0] instanceof Level))) || furnitureLevels === null) && ((group != null && group instanceof HomeFurnitureGroup) || group === null) && ((beforePiece != null && beforePiece instanceof HomePieceOfFurniture) || beforePiece === null)) {
            return this.addFurniture$java_util_List$com_eteks_sweethome3d_model_Level_A$com_eteks_sweethome3d_model_HomeFurnitureGroup$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, furnitureLevels, group, beforePiece);
        }
        else if (((furniture != null && (furniture instanceof Array)) || furniture === null) && ((furnitureLevels != null && furnitureLevels instanceof HomePieceOfFurniture) || furnitureLevels === null) && group === undefined && beforePiece === undefined) {
            return this.addFurniture$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, furnitureLevels);
        }
        else if (((furniture != null && (furniture instanceof Array)) || furniture === null) && furnitureLevels === undefined && group === undefined && beforePiece === undefined) {
            return this.addFurniture$java_util_List(furniture);
        }
        else
            throw new Error('invalid overload');
    };
    FurnitureController.doAddFurniture = function (home, furniture, furnitureGroups, furnitureIndex, furnitureLevel, furnitureLevels, basePlanLocked, allLevelsSelection) {
        for (var i = 0; i < furnitureIndex.length; i++) {
            {
                if (furnitureGroups != null && furnitureGroups[i] != null) {
                    home.addPieceOfFurnitureToGroup(furniture[i], furnitureGroups[i], furnitureIndex[i]);
                    furniture[i].setVisible(furnitureGroups[i].isVisible());
                }
                else {
                    home.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$int(furniture[i], furnitureIndex[i]);
                }
                furniture[i].setLevel(furnitureLevels != null ? furnitureLevels[i] : furnitureLevel);
            }
            ;
        }
        home.setBasePlanLocked(basePlanLocked);
        home.setSelectedItems(/* asList */ furniture.slice(0));
        home.setAllLevelsSelection(allLevelsSelection);
    };
    /**
     * Controls the deletion of the current selected furniture in home.
     * Once the selected furniture is deleted, undo support will receive a new undoable edit.
     */
    FurnitureController.prototype.deleteSelection = function () {
        this.deleteFurniture(Home.getFurnitureSubList(this.home.getSelectedItems()));
    };
    /**
     * Deletes the furniture of <code>deletedFurniture</code> from home.
     * Once the selected furniture is deleted, undo support will receive a new undoable edit.
     * @param {HomePieceOfFurniture[]} deletedFurniture
     */
    FurnitureController.prototype.deleteFurniture = function (deletedFurniture) {
        var basePlanLocked = this.home.isBasePlanLocked();
        var allLevelsSelection = this.home.isAllLevelsSelection();
        var oldSelection = this.home.getSelectedItems();
        var homeFurniture = this.home.getFurniture();
        deletedFurniture = (deletedFurniture.slice(0));
        var homeGroups = ([]);
        FurnitureController.searchGroups(homeFurniture, homeGroups);
        var updated;
        do {
            {
                updated = false;
                for (var index = 0; index < homeGroups.length; index++) {
                    var group = homeGroups[index];
                    {
                        var groupFurniture = group.getFurniture();
                        if ( /* containsAll */(function (a, r) { for (var i_1 = 0; i_1 < r.length; i_1++) {
                            if (a.indexOf(r[i_1]) < 0)
                                return false;
                        } return true; })(deletedFurniture, groupFurniture)) {
                            /* removeAll */ (function (a, r) { var b = false; for (var i_2 = 0; i_2 < r.length; i_2++) {
                                var ndx = a.indexOf(r[i_2]);
                                if (ndx >= 0) {
                                    a.splice(ndx, 1);
                                    b = true;
                                }
                            } return b; })(deletedFurniture, groupFurniture);
                            /* add */ (deletedFurniture.push(group) > 0);
                            updated = true;
                        }
                    }
                }
            }
        } while ((updated));
        var deletedFurnitureMap = ({});
        var deletedFurnitureCount = 0;
        for (var index = 0; index < deletedFurniture.length; index++) {
            var piece = deletedFurniture[index];
            {
                if (this.isPieceOfFurnitureDeletable(piece)) {
                    var group = FurnitureController.getPieceOfFurnitureGroup(piece, null, homeFurniture);
                    var sortedMap = (function (m, k) { if (m.entries == null)
                        m.entries = []; for (var i_3 = 0; i_3 < m.entries.length; i_3++)
                        if (m.entries[i_3].key == null && k == null || m.entries[i_3].key.equals != null && m.entries[i_3].key.equals(k) || m.entries[i_3].key === k) {
                            return m.entries[i_3].value;
                        } return null; })(deletedFurnitureMap, group);
                    if (sortedMap == null) {
                        sortedMap = ({});
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i_4 = 0; i_4 < m.entries.length; i_4++)
                            if (m.entries[i_4].key == null && k == null || m.entries[i_4].key.equals != null && m.entries[i_4].key.equals(k) || m.entries[i_4].key === k) {
                                m.entries[i_4].value = v;
                                return;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(deletedFurnitureMap, group, sortedMap);
                    }
                    if (group == null) {
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                var pv = m.entries[i].value;
                                m.entries[i].value = v;
                                return pv;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, homeFurniture.indexOf(piece), piece);
                    }
                    else {
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                var pv = m.entries[i].value;
                                m.entries[i].value = v;
                                return pv;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, group.getFurniture().indexOf(piece), piece);
                    }
                    deletedFurnitureCount++;
                }
            }
        }
        var furniture = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(deletedFurnitureCount);
        var furnitureIndex = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(furniture.length);
        var furnitureLevels = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(furniture.length);
        var furnitureGroups = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(furniture.length);
        var i = 0;
        {
            var array = /* entrySet */ (function (m) { if (m.entries == null)
                m.entries = []; return m.entries; })(deletedFurnitureMap);
            for (var index = 0; index < array.length; index++) {
                var sortedMapEntry = array[index];
                {
                    {
                        var array1 = /* entrySet */ (function (m) { if (m.entries == null)
                            m.entries = []; return m.entries; })(sortedMapEntry.getValue());
                        for (var index1 = 0; index1 < array1.length; index1++) {
                            var pieceEntry = array1[index1];
                            {
                                furniture[i] = pieceEntry.getValue();
                                furnitureIndex[i] = pieceEntry.getKey();
                                furnitureLevels[i] = furniture[i].getLevel();
                                furnitureGroups[i++] = sortedMapEntry.getKey();
                            }
                        }
                    }
                }
            }
        }
        FurnitureController.doDeleteFurniture(this.home, furniture, basePlanLocked, false);
        if (this.undoSupport != null) {
            this.undoSupport.postEdit(new FurnitureController.FurnitureDeletionUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), basePlanLocked, allLevelsSelection, furniture, furnitureIndex, furnitureGroups, furnitureLevels));
        }
    };
    FurnitureController.doDeleteFurniture = function (home, furniture, basePlanLocked, allLevelsSelection) {
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                home.deletePieceOfFurniture(piece);
            }
        }
        home.setBasePlanLocked(basePlanLocked);
        home.setAllLevelsSelection(allLevelsSelection);
    };
    /**
     * Searches all the groups among furniture and its children.
     * @param {HomePieceOfFurniture[]} furniture
     * @param {HomeFurnitureGroup[]} groups
     * @private
     */
    FurnitureController.searchGroups = function (furniture, groups) {
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    /* add */ (groups.push(piece) > 0);
                    FurnitureController.searchGroups(piece.getFurniture(), groups);
                }
            }
        }
    };
    /**
     * Returns the furniture group that contains the given <code>piece</code> or <code>null</code> if it can't be found.
     * @param {HomePieceOfFurniture} piece
     * @param {HomeFurnitureGroup} furnitureGroup
     * @param {HomePieceOfFurniture[]} furniture
     * @return {HomeFurnitureGroup}
     * @private
     */
    FurnitureController.getPieceOfFurnitureGroup = function (piece, furnitureGroup, furniture) {
        for (var index = 0; index < furniture.length; index++) {
            var homePiece = furniture[index];
            {
                if ( /* equals */(function (o1, o2) { if (o1 && o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return o1 === o2;
                } })(homePiece, piece)) {
                    return furnitureGroup;
                }
                else if (homePiece != null && homePiece instanceof HomeFurnitureGroup) {
                    var group = FurnitureController.getPieceOfFurnitureGroup(piece, homePiece, homePiece.getFurniture());
                    if (group != null) {
                        return group;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Reorders the selected furniture in home to place it before the given piece.
     * @param {HomePieceOfFurniture} beforePiece
     */
    FurnitureController.prototype.moveSelectedFurnitureBefore = function (beforePiece) {
        var movedFurniture = Home.getFurnitureSubList(this.home.getSelectedItems());
        if (!(movedFurniture.length == 0)) {
            var furnitureLevels = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ movedFurniture.length);
            for (var i = 0; i < furnitureLevels.length; i++) {
                {
                    furnitureLevels[i] = /* get */ movedFurniture[i].getLevel();
                }
                ;
            }
            this.undoSupport.beginUpdate();
            this.deleteFurniture(movedFurniture);
            this.addFurniture$java_util_List$com_eteks_sweethome3d_model_Level_A$com_eteks_sweethome3d_model_HomeFurnitureGroup$com_eteks_sweethome3d_model_HomePieceOfFurniture(movedFurniture, furnitureLevels, null, beforePiece);
            this.undoSupport.postEdit(new LocalizedUndoableEdit(this.preferences, FurnitureController, "undoReorderName"));
            this.undoSupport.endUpdate();
        }
    };
    FurnitureController.prototype.setSelectedFurniture$java_util_List = function (selectedFurniture) {
        this.setSelectedFurniture$java_util_List$boolean(selectedFurniture, true);
    };
    FurnitureController.prototype.setSelectedFurniture$java_util_List$boolean = function (selectedFurniture, resetSelection) {
        if (this.home.isBasePlanLocked()) {
            selectedFurniture = this.getFurnitureNotPartOfBasePlan(selectedFurniture);
        }
        if (resetSelection) {
            this.home.setSelectedItems(selectedFurniture);
            this.home.setAllLevelsSelection(false);
        }
        else {
            var selectedItems = (this.home.getSelectedItems().slice(0));
            selectedFurniture = (selectedFurniture.slice(0));
            for (var i = selectedItems.length - 1; i >= 0; i--) {
                {
                    var item = selectedItems[i];
                    if (item != null && item instanceof HomePieceOfFurniture) {
                        var index = selectedFurniture.indexOf(item);
                        if (index >= 0) {
                            /* remove */ selectedFurniture.splice(index, 1)[0];
                        }
                        else {
                            /* remove */ selectedItems.splice(i, 1)[0];
                        }
                    }
                }
                ;
            }
            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(selectedItems, selectedFurniture);
            this.home.setSelectedItems(selectedItems);
        }
    };
    /**
     * Updates the selected furniture in home, unselecting all other kinds of selected objects
     * when <code>resetSelection</code> is <code>true</code>.
     * @param {HomePieceOfFurniture[]} selectedFurniture
     * @param {boolean} resetSelection
     */
    FurnitureController.prototype.setSelectedFurniture = function (selectedFurniture, resetSelection) {
        if (((selectedFurniture != null && (selectedFurniture instanceof Array)) || selectedFurniture === null) && ((typeof resetSelection === 'boolean') || resetSelection === null)) {
            return this.setSelectedFurniture$java_util_List$boolean(selectedFurniture, resetSelection);
        }
        else if (((selectedFurniture != null && (selectedFurniture instanceof Array)) || selectedFurniture === null) && resetSelection === undefined) {
            return this.setSelectedFurniture$java_util_List(selectedFurniture);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Selects all furniture in home.
     */
    FurnitureController.prototype.selectAll = function () {
        this.setSelectedFurniture$java_util_List(this.home.getFurniture());
    };
    /**
     * Returns <code>true</code> if the given <code>piece</code> isn't movable.
     * @param {HomePieceOfFurniture} piece
     * @return {boolean}
     */
    FurnitureController.prototype.isPieceOfFurniturePartOfBasePlan = function (piece) {
        return !piece.isMovable() || piece.isDoorOrWindow();
    };
    /**
     * Returns <code>true</code> if the given <code>piece</code> may be moved.
     * Default implementation always returns <code>true</code>.
     * @param {HomePieceOfFurniture} piece
     * @return {boolean}
     */
    FurnitureController.prototype.isPieceOfFurnitureMovable = function (piece) {
        return true;
    };
    /**
     * Returns <code>true</code> if the given <code>piece</code> may be deleted.
     * Default implementation always returns <code>true</code>.
     * @param {HomePieceOfFurniture} piece
     * @return {boolean}
     */
    FurnitureController.prototype.isPieceOfFurnitureDeletable = function (piece) {
        return true;
    };
    /**
     * Returns a new home piece of furniture created from an other given <code>piece</code> of furniture.
     * @param {Object} piece
     * @return {HomePieceOfFurniture}
     */
    FurnitureController.prototype.createHomePieceOfFurniture = function (piece) {
        if (piece != null && (piece.constructor != null && piece.constructor["__interfaces"] != null && piece.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.DoorOrWindow") >= 0)) {
            return new HomeDoorOrWindow(piece);
        }
        else if (piece != null && (piece.constructor != null && piece.constructor["__interfaces"] != null && piece.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Light") >= 0)) {
            return new HomeLight(piece);
        }
        else {
            return new HomePieceOfFurniture(piece);
        }
    };
    /**
     * Returns the furniture among the given list that are not part of the base plan.
     * @param {HomePieceOfFurniture[]} furniture
     * @return {HomePieceOfFurniture[]}
     * @private
     */
    FurnitureController.prototype.getFurnitureNotPartOfBasePlan = function (furniture) {
        var furnitureNotPartOfBasePlan = ([]);
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                if (!this.isPieceOfFurniturePartOfBasePlan(piece)) {
                    /* add */ (furnitureNotPartOfBasePlan.push(piece) > 0);
                }
            }
        }
        return furnitureNotPartOfBasePlan;
    };
    /**
     * Uses <code>furnitureProperty</code> to sort home furniture
     * or cancels home furniture sort if home is already sorted on <code>furnitureProperty</code>
     * @param {string} furnitureProperty a property of {@link HomePieceOfFurniture} class.
     */
    FurnitureController.prototype.toggleFurnitureSort = function (furnitureProperty) {
        if ( /* equals */(furnitureProperty == this.home.getFurnitureSortedProperty())) {
            this.home.setFurnitureSortedProperty(null);
        }
        else {
            this.home.setFurnitureSortedProperty(furnitureProperty);
        }
    };
    /**
     * Toggles home furniture sort order.
     */
    FurnitureController.prototype.toggleFurnitureSortOrder = function () {
        this.home.setFurnitureDescendingSorted(!this.home.isFurnitureDescendingSorted());
    };
    /**
     * Controls the sort of the furniture in home. If home furniture isn't sorted
     * or is sorted on an other property, it will be sorted on the given
     * <code>furnitureProperty</code> in ascending order. If home furniture is already
     * sorted on the given <code>furnitureProperty</code>, it will be sorted in descending
     * order, if the sort is in ascending order, otherwise it won't be sorted at all
     * and home furniture will be listed in insertion order.
     * @param {string} furnitureProperty  the furniture property on which the view wants
     * to sort the furniture it displays.
     */
    FurnitureController.prototype.sortFurniture = function (furnitureProperty) {
        var oldProperty = this.home.getFurnitureSortedProperty();
        var oldDescending = this.home.isFurnitureDescendingSorted();
        var descending = false;
        if ( /* equals */(furnitureProperty == oldProperty)) {
            if (oldDescending) {
                furnitureProperty = null;
            }
            else {
                descending = true;
            }
        }
        this.home.setFurnitureSortedProperty(furnitureProperty);
        this.home.setFurnitureDescendingSorted(descending);
    };
    /**
     * Updates the furniture visible properties in home.
     * @param {string[]} furnitureVisibleProperties
     */
    FurnitureController.prototype.setFurnitureVisibleProperties = function (furnitureVisibleProperties) {
        this.home.setFurnitureVisibleProperties(furnitureVisibleProperties);
    };
    /**
     * Toggles furniture property visibility in home.
     * @param {string} furnitureProperty
     */
    FurnitureController.prototype.toggleFurnitureVisibleProperty = function (furnitureProperty) {
        var furnitureVisibleProperties = (this.home.getFurnitureVisibleProperties().slice(0));
        if ( /* contains */(furnitureVisibleProperties.indexOf((furnitureProperty)) >= 0)) {
            /* remove */ (function (a) { var index = a.indexOf(furnitureProperty); if (index >= 0) {
                a.splice(index, 1);
                return true;
            }
            else {
                return false;
            } })(furnitureVisibleProperties);
            if ( /* isEmpty */(furnitureVisibleProperties.length == 0)) {
                /* add */ (furnitureVisibleProperties.push("NAME") > 0);
            }
        }
        else {
            var propertiesOrder = ["CATALOG_ID", "NAME", "CREATOR", "WIDTH", "DEPTH", "HEIGHT", "X", "Y", "ELEVATION", "ANGLE", "LEVEL", "MODEL_SIZE", "COLOR", "TEXTURE", "MOVABLE", "DOOR_OR_WINDOW", "VISIBLE", "PRICE", "VALUE_ADDED_TAX_PERCENTAGE", "VALUE_ADDED_TAX", "PRICE_VALUE_ADDED_TAX_INCLUDED"].slice(0);
            var propertyIndex = propertiesOrder.indexOf(furnitureProperty) - 1;
            if (propertyIndex > 0) {
                while ((propertyIndex > 0)) {
                    {
                        var visiblePropertyIndex = furnitureVisibleProperties.indexOf(/* get */ propertiesOrder[propertyIndex]);
                        if (visiblePropertyIndex >= 0) {
                            propertyIndex = visiblePropertyIndex + 1;
                            break;
                        }
                        else {
                            propertyIndex--;
                        }
                    }
                }
                ;
            }
            if (propertyIndex < 0) {
                propertyIndex = 0;
            }
            /* add */ furnitureVisibleProperties.splice(propertyIndex, 0, furnitureProperty);
        }
        this.home.setFurnitureVisibleProperties(furnitureVisibleProperties);
    };
    /**
     * Controls the modification of selected furniture.
     */
    FurnitureController.prototype.modifySelectedFurniture = function () {
        if (!(Home.getFurnitureSubList(this.home.getSelectedItems()).length == 0)) {
            new HomeFurnitureController(this.home, this.preferences, this.viewFactory, this.contentManager, this.undoSupport).displayView(this.getView());
        }
    };
    /**
     * Controls the modification of the visibility of the selected piece of furniture.
     */
    FurnitureController.prototype.toggleSelectedFurnitureVisibility = function () {
        if ( /* size */Home.getFurnitureSubList(this.home.getSelectedItems()).length === 1) {
            var controller = new HomeFurnitureController(this.home, this.preferences, this.viewFactory, this.contentManager, this.undoSupport);
            controller.setVisible(!controller.getVisible());
            controller.modifyFurniture();
        }
    };
    /**
     * Groups the selected furniture as one piece of furniture.
     */
    FurnitureController.prototype.groupSelectedFurniture = function () {
        var selectedFurniture = this.getMovableSelectedFurniture();
        if (selectedFurniture.length > 0) {
            var basePlanLocked = this.home.isBasePlanLocked();
            var allLevelsSelection = this.home.isAllLevelsSelection();
            var oldSelection = this.home.getSelectedItems();
            var homeFurniture = this.home.getFurniture();
            var groupedFurnitureMap = ({});
            var groupedFurnitureCount = 0;
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    var group = FurnitureController.getPieceOfFurnitureGroup(piece, null, homeFurniture);
                    var sortedMap = (function (m, k) { if (m.entries == null)
                        m.entries = []; for (var i_5 = 0; i_5 < m.entries.length; i_5++)
                        if (m.entries[i_5].key == null && k == null || m.entries[i_5].key.equals != null && m.entries[i_5].key.equals(k) || m.entries[i_5].key === k) {
                            return m.entries[i_5].value;
                        } return null; })(groupedFurnitureMap, group);
                    if (sortedMap == null) {
                        sortedMap = ({});
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i_6 = 0; i_6 < m.entries.length; i_6++)
                            if (m.entries[i_6].key == null && k == null || m.entries[i_6].key.equals != null && m.entries[i_6].key.equals(k) || m.entries[i_6].key === k) {
                                m.entries[i_6].value = v;
                                return;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(groupedFurnitureMap, group, sortedMap);
                    }
                    if (group == null) {
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                var pv = m.entries[i].value;
                                m.entries[i].value = v;
                                return pv;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, homeFurniture.indexOf(piece), piece);
                    }
                    else {
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                var pv = m.entries[i].value;
                                m.entries[i].value = v;
                                return pv;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, group.getFurniture().indexOf(piece), piece);
                    }
                    groupedFurnitureCount++;
                }
            }
            var groupedPieces = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(groupedFurnitureCount);
            var groupedPiecesIndex = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(groupedPieces.length);
            var groupedPiecesLevel = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(groupedPieces.length);
            var groupedPiecesElevation = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(groupedPieces.length);
            var groupedPiecesVisible = (function (s) { var a = []; while (s-- > 0)
                a.push(false); return a; })(groupedPieces.length);
            var groupedPiecesGroups = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(groupedPieces.length);
            var minLevel = this.home.getSelectedLevel();
            var i = 0;
            {
                var array = /* entrySet */ (function (m) { if (m.entries == null)
                    m.entries = []; return m.entries; })(groupedFurnitureMap);
                for (var index = 0; index < array.length; index++) {
                    var sortedMapEntry = array[index];
                    {
                        {
                            var array1 = /* entrySet */ (function (m) { if (m.entries == null)
                                m.entries = []; return m.entries; })(sortedMapEntry.getValue());
                            for (var index1 = 0; index1 < array1.length; index1++) {
                                var pieceEntry = array1[index1];
                                {
                                    var piece = pieceEntry.getValue();
                                    groupedPieces[i] = piece;
                                    groupedPiecesIndex[i] = pieceEntry.getKey();
                                    groupedPiecesLevel[i] = piece.getLevel();
                                    groupedPiecesElevation[i] = piece.getElevation();
                                    groupedPiecesVisible[i] = piece.isVisible();
                                    groupedPiecesGroups[i] = sortedMapEntry.getKey();
                                    if (groupedPiecesLevel[i] != null) {
                                        if (minLevel == null || groupedPiecesLevel[i].getElevation() < minLevel.getElevation()) {
                                            minLevel = groupedPiecesLevel[i];
                                        }
                                    }
                                    i++;
                                }
                            }
                        }
                    }
                }
            }
            var newGroup = void 0;
            var groupedFurniture = groupedPieces.slice(0);
            if (groupedFurniture.indexOf(this.leadSelectedPieceOfFurniture) > 0) {
                newGroup = this.createHomeFurnitureGroup$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture(groupedFurniture, this.leadSelectedPieceOfFurniture);
            }
            else {
                newGroup = this.createHomeFurnitureGroup$java_util_List(groupedFurniture);
            }
            var groupPiecesNewElevation = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(groupedPieces.length);
            i = 0;
            for (var index = 0; index < groupedPieces.length; index++) {
                var piece = groupedPieces[index];
                {
                    groupPiecesNewElevation[i++] = piece.getElevation();
                }
            }
            var homeSortedMap = (function (m, k) { if (m.entries == null)
                m.entries = []; for (var i_7 = 0; i_7 < m.entries.length; i_7++)
                if (m.entries[i_7].key == null && k == null || m.entries[i_7].key.equals != null && m.entries[i_7].key.equals(k) || m.entries[i_7].key === k) {
                    return m.entries[i_7].value;
                } return null; })(groupedFurnitureMap, null);
            var groupIndex = homeSortedMap != null ? /* lastKey */ (function (map) { return map.entries[map.entries.length - 1].key; })(homeSortedMap) + 1 - groupedPieces.length : /* size */ homeFurniture.length;
            var movable = newGroup.isMovable();
            var groupLevel = minLevel;
            FurnitureController.doGroupFurniture(this.home, groupedPieces, [newGroup], null, [groupIndex], [groupLevel], basePlanLocked, false);
            if (this.undoSupport != null) {
                this.undoSupport.postEdit(new FurnitureController.FurnitureGroupingUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), basePlanLocked, allLevelsSelection, groupedPieces, groupedPiecesIndex, groupedPiecesGroups, groupedPiecesLevel, groupedPiecesElevation, groupedPiecesVisible, newGroup, groupIndex, groupLevel, groupPiecesNewElevation, movable));
            }
        }
    };
    FurnitureController.prototype.createHomeFurnitureGroup$java_util_List = function (furniture) {
        return this.createHomeFurnitureGroup$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, /* get */ furniture[0]);
    };
    FurnitureController.prototype.createHomeFurnitureGroup$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (furniture, leadingPiece) {
        var furnitureGroupName = this.preferences.getLocalizedString(FurnitureController, "groupName", FurnitureController.getFurnitureGroupCount(this.home.getFurniture()) + 1);
        var furnitureGroup = new HomeFurnitureGroup(furniture, leadingPiece, furnitureGroupName);
        return furnitureGroup;
    };
    /**
     * Returns a new furniture group for the given furniture list.
     * @param {HomePieceOfFurniture[]} furniture
     * @param {HomePieceOfFurniture} leadingPiece
     * @return {HomeFurnitureGroup}
     */
    FurnitureController.prototype.createHomeFurnitureGroup = function (furniture, leadingPiece) {
        if (((furniture != null && (furniture instanceof Array)) || furniture === null) && ((leadingPiece != null && leadingPiece instanceof HomePieceOfFurniture) || leadingPiece === null)) {
            return this.createHomeFurnitureGroup$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, leadingPiece);
        }
        else if (((furniture != null && (furniture instanceof Array)) || furniture === null) && leadingPiece === undefined) {
            return this.createHomeFurnitureGroup$java_util_List(furniture);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the count of furniture groups among the given list.
     * @param {HomePieceOfFurniture[]} furniture
     * @return {number}
     * @private
     */
    FurnitureController.getFurnitureGroupCount = function (furniture) {
        var i = 0;
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    i += 1 + FurnitureController.getFurnitureGroupCount(piece.getFurniture());
                }
            }
        }
        return i;
    };
    FurnitureController.doGroupFurniture = function (home, groupedPieces, groups, groupsGroups, groupsIndex, groupsLevels, basePlanLocked, allLevelsSelection) {
        FurnitureController.doDeleteFurniture(home, groupedPieces, basePlanLocked, allLevelsSelection);
        FurnitureController.doAddFurniture(home, groups, groupsGroups, groupsIndex, null, groupsLevels, basePlanLocked, allLevelsSelection);
    };
    FurnitureController.doUngroupFurniture = function (home, groups, ungroupedPieces, ungroupedPiecesGroups, ungroupedPiecesIndex, ungroupedPiecesLevels, basePlanLocked, allLevelsSelection) {
        FurnitureController.doDeleteFurniture(home, groups, basePlanLocked, allLevelsSelection);
        FurnitureController.doAddFurniture(home, ungroupedPieces, ungroupedPiecesGroups, ungroupedPiecesIndex, null, ungroupedPiecesLevels, basePlanLocked, allLevelsSelection);
    };
    /**
     * Ungroups the selected groups of furniture.
     */
    FurnitureController.prototype.ungroupSelectedFurniture = function () {
        var movableSelectedFurnitureGroups = ([]);
        {
            var array = this.home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item != null && item instanceof HomeFurnitureGroup) {
                        var group = item;
                        if (this.isPieceOfFurnitureMovable(group)) {
                            /* add */ (movableSelectedFurnitureGroups.push(group) > 0);
                        }
                    }
                }
            }
        }
        if (!(movableSelectedFurnitureGroups.length == 0)) {
            var homeFurniture = this.home.getFurniture();
            var oldBasePlanLocked = this.home.isBasePlanLocked();
            var allLevelsSelection = this.home.isAllLevelsSelection();
            var oldSelection = this.home.getSelectedItems();
            var groupsMap = ({});
            var groupsCount = 0;
            for (var index = 0; index < movableSelectedFurnitureGroups.length; index++) {
                var piece = movableSelectedFurnitureGroups[index];
                {
                    var groupGroup = FurnitureController.getPieceOfFurnitureGroup(piece, null, homeFurniture);
                    var sortedMap = (function (m, k) { if (m.entries == null)
                        m.entries = []; for (var i_8 = 0; i_8 < m.entries.length; i_8++)
                        if (m.entries[i_8].key == null && k == null || m.entries[i_8].key.equals != null && m.entries[i_8].key.equals(k) || m.entries[i_8].key === k) {
                            return m.entries[i_8].value;
                        } return null; })(groupsMap, groupGroup);
                    if (sortedMap == null) {
                        sortedMap = ({});
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i_9 = 0; i_9 < m.entries.length; i_9++)
                            if (m.entries[i_9].key == null && k == null || m.entries[i_9].key.equals != null && m.entries[i_9].key.equals(k) || m.entries[i_9].key === k) {
                                m.entries[i_9].value = v;
                                return;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(groupsMap, groupGroup, sortedMap);
                    }
                    if (groupGroup == null) {
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                var pv = m.entries[i].value;
                                m.entries[i].value = v;
                                return pv;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, homeFurniture.indexOf(piece), piece);
                    }
                    else {
                        /* put */ (function (m, k, v) { if (m.entries == null)
                            m.entries = []; for (var i = 0; i < m.entries.length; i++)
                            if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                var pv = m.entries[i].value;
                                m.entries[i].value = v;
                                return pv;
                            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, groupGroup.getFurniture().indexOf(piece), piece);
                    }
                    groupsCount++;
                }
            }
            var groups = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(groupsCount);
            var groupsGroups = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(groups.length);
            var groupsIndex = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(groups.length);
            var groupsLevels = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(groups.length);
            var i = 0;
            var ungroupedPiecesList = ([]);
            var ungroupedPiecesIndexList = ([]);
            var ungroupedPiecesGroupsList = ([]);
            {
                var array = /* entrySet */ (function (m) { if (m.entries == null)
                    m.entries = []; return m.entries; })(groupsMap);
                for (var index = 0; index < array.length; index++) {
                    var sortedMapEntry = array[index];
                    {
                        var sortedMap = sortedMapEntry.getValue();
                        var endIndex = (function (map) { return map.entries[map.entries.length - 1].key; })(sortedMap) + 1 - /* size */ (function (m) { if (m.entries == null)
                            m.entries = []; return m.entries.length; })(sortedMap);
                        {
                            var array1 = /* entrySet */ (function (m) { if (m.entries == null)
                                m.entries = []; return m.entries; })(sortedMap);
                            for (var index1 = 0; index1 < array1.length; index1++) {
                                var groupEntry = array1[index1];
                                {
                                    var group = groupEntry.getValue();
                                    groups[i] = group;
                                    groupsGroups[i] = sortedMapEntry.getKey();
                                    groupsIndex[i] = groupEntry.getKey();
                                    groupsLevels[i++] = group.getLevel();
                                    {
                                        var array2 = group.getFurniture();
                                        for (var index2 = 0; index2 < array2.length; index2++) {
                                            var groupPiece = array2[index2];
                                            {
                                                /* add */ (ungroupedPiecesList.push(groupPiece) > 0);
                                                /* add */ (ungroupedPiecesGroupsList.push(sortedMapEntry.getKey()) > 0);
                                                /* add */ (ungroupedPiecesIndexList.push(endIndex++) > 0);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var ungroupedPieces = ungroupedPiecesList.slice(0);
            var ungroupedPiecesGroups = ungroupedPiecesGroupsList.slice(0);
            var ungroupedPiecesIndex = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(ungroupedPieces.length);
            var ungroupedPiecesLevels = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(ungroupedPieces.length);
            var basePlanLocked = oldBasePlanLocked;
            for (i = 0; i < ungroupedPieces.length; i++) {
                {
                    ungroupedPiecesIndex[i] = /* get */ ungroupedPiecesIndexList[i];
                    ungroupedPiecesLevels[i] = ungroupedPieces[i].getLevel();
                    basePlanLocked = !this.isPieceOfFurniturePartOfBasePlan(ungroupedPieces[i]) && basePlanLocked;
                }
                ;
            }
            var newBasePlanLocked = basePlanLocked;
            FurnitureController.doUngroupFurniture(this.home, groups, ungroupedPieces, ungroupedPiecesGroups, ungroupedPiecesIndex, ungroupedPiecesLevels, newBasePlanLocked, false);
            if (this.undoSupport != null) {
                this.undoSupport.postEdit(new FurnitureController.FurnitureUngroupingUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), oldBasePlanLocked, allLevelsSelection, groups, groupsIndex, groupsGroups, groupsLevels, ungroupedPieces, ungroupedPiecesIndex, ungroupedPiecesGroups, ungroupedPiecesLevels, newBasePlanLocked));
            }
        }
    };
    FurnitureController.prototype.importFurniture$ = function () {
        new ImportedFurnitureWizardController(this.home, this.preferences, this, this.viewFactory, this.contentManager, this.undoSupport).displayView(this.getView());
    };
    FurnitureController.prototype.importFurniture$java_lang_String = function (modelName) {
        new ImportedFurnitureWizardController(this.home, modelName, this.preferences, this, this.viewFactory, this.contentManager, this.undoSupport).displayView(this.getView());
    };
    /**
     * Displays the wizard that helps to import furniture to home with a
     * given model name.
     * @param {string} modelName
     */
    FurnitureController.prototype.importFurniture = function (modelName) {
        if (((typeof modelName === 'string') || modelName === null)) {
            return this.importFurniture$java_lang_String(modelName);
        }
        else if (modelName === undefined) {
            return this.importFurniture$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Controls the alignment of selected furniture on top of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnTop = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureTopAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on bottom of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnBottom = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureBottomAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on left of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnLeft = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureLeftAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on right of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnRight = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureRightAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on the front side of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnFrontSide = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureFrontSideAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on the back side of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnBackSide = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureBackSideAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on the left side of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnLeftSide = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureLeftSideAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on the right side of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureOnRightSide = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureRightSideAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Controls the alignment of selected furniture on the sides of the first selected piece.
     */
    FurnitureController.prototype.alignSelectedFurnitureSideBySide = function () {
        var oldSelection = this.home.getSelectedItems();
        this.alignSelectedFurniture(new FurnitureController.FurnitureSideBySideAlignmentUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), this.getMovableSelectedFurniture(), this.leadSelectedPieceOfFurniture));
    };
    /**
     * Returns a list containing aligned furniture and lead piece sorted in the order of their distribution along
     * a line orthogonal to the given axis.
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} furniture
     * @param {HomePieceOfFurniture} leadPiece
     * @param {java.awt.geom.Line2D} orthogonalAxis
     * @return {HomePieceOfFurniture[]}
     * @private
     */
    FurnitureController.sortFurniture = function (furniture, leadPiece, orthogonalAxis) {
        var sortedFurniture = ([]);
        if (leadPiece != null) {
            /* add */ (sortedFurniture.push(leadPiece) > 0);
        }
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(sortedFurniture, /* asList */ furniture.slice(0));
        /* sort */ (function (l, c) { if (c.compare)
            l.sort(function (e1, e2) { return c.compare(e1, e2); });
        else
            l.sort(c); })(sortedFurniture, new FurnitureController.FurnitureController$2(orthogonalAxis));
        return sortedFurniture;
    };
    /**
     * Aligns the given <code>piece</code> along the front or back side of the lead piece and its left or right side
     * at a distance equal to <code>sideDistance</code>, and returns the width of the bounding box of
     * the <code>piece</code> along the back side axis.
     * @param {HomePieceOfFurniture} piece
     * @param {HomePieceOfFurniture} leadPiece
     * @param {java.awt.geom.Line2D} frontOrBackLine
     * @param {boolean} frontLine
     * @param {java.awt.geom.Line2D} centerLine
     * @param {number} sideDistance
     * @return {number}
     * @private
     */
    FurnitureController.alignPieceOfFurnitureAlongSides = function (piece, leadPiece, frontOrBackLine, frontLine, centerLine, sideDistance) {
        var distance = frontOrBackLine.relativeCCW(piece.getX(), piece.getY()) * frontOrBackLine.ptLineDist(piece.getX(), piece.getY()) + FurnitureController.getPieceBoundingRectangleHeight(piece, -leadPiece.getAngle()) / 2;
        if (frontLine) {
            distance = -distance;
        }
        var sinLeadPieceAngle = Math.sin(leadPiece.getAngle());
        var cosLeadPieceAngle = Math.cos(leadPiece.getAngle());
        var deltaX = (-distance * sinLeadPieceAngle);
        var deltaY = (distance * cosLeadPieceAngle);
        var rotatedBoundingBoxWidth = FurnitureController.getPieceBoundingRectangleWidth(piece, -leadPiece.getAngle());
        if (centerLine != null) {
            var location_1 = centerLine.relativeCCW(piece.getX(), piece.getY());
            if (location_1 === 0) {
                location_1 = frontLine ? 1 : -1;
            }
            distance = sideDistance + location_1 * (centerLine.ptLineDist(piece.getX(), piece.getY()) - rotatedBoundingBoxWidth / 2);
            deltaX += (distance * cosLeadPieceAngle);
            deltaY += (distance * sinLeadPieceAngle);
        }
        piece.move(deltaX, deltaY);
        return rotatedBoundingBoxWidth;
    };
    /**
     * Aligns the given <code>piece</code> along the left or right side of the lead piece.
     * @param {HomePieceOfFurniture} piece
     * @param {HomePieceOfFurniture} leadPiece
     * @param {java.awt.geom.Line2D} leftOrRightLine
     * @param {boolean} rightLine
     * @private
     */
    FurnitureController.alignPieceOfFurnitureAlongLeftOrRightSides = function (piece, leadPiece, leftOrRightLine, rightLine) {
        var distance = leftOrRightLine.relativeCCW(piece.getX(), piece.getY()) * leftOrRightLine.ptLineDist(piece.getX(), piece.getY()) + FurnitureController.getPieceBoundingRectangleWidth(piece, -leadPiece.getAngle()) / 2;
        if (rightLine) {
            distance = -distance;
        }
        piece.move((distance * Math.cos(leadPiece.getAngle())), (distance * Math.sin(leadPiece.getAngle())));
    };
    /**
     * Returns the bounding box width of the given piece when it's rotated of an additional angle.
     * @param {HomePieceOfFurniture} piece
     * @param {number} additionalAngle
     * @return {number}
     * @private
     */
    FurnitureController.getPieceBoundingRectangleWidth = function (piece, additionalAngle) {
        return Math.abs(piece.getWidthInPlan() * Math.cos(additionalAngle + piece.getAngle())) + Math.abs(piece.getDepthInPlan() * Math.sin(additionalAngle + piece.getAngle()));
    };
    /**
     * Returns the bounding box height of the given piece when it's rotated of an additional angle.
     * @param {HomePieceOfFurniture} piece
     * @param {number} additionalAngle
     * @return {number}
     * @private
     */
    FurnitureController.getPieceBoundingRectangleHeight = function (piece, additionalAngle) {
        return Math.abs(piece.getWidthInPlan() * Math.sin(additionalAngle + piece.getAngle())) + Math.abs(piece.getDepthInPlan() * Math.cos(additionalAngle + piece.getAngle()));
    };
    /**
     * Controls the alignment of selected furniture.
     * @param {FurnitureController.FurnitureAlignmentUndoableEdit} alignmentEdit
     * @private
     */
    FurnitureController.prototype.alignSelectedFurniture = function (alignmentEdit) {
        var selectedFurniture = this.getMovableSelectedFurniture();
        if (selectedFurniture.length >= 2) {
            this.home.setSelectedItems(/* asList */ selectedFurniture.slice(0));
            alignmentEdit.alignFurniture$();
            if (this.undoSupport != null) {
                this.undoSupport.postEdit(alignmentEdit);
            }
        }
    };
    FurnitureController.prototype.getMovableSelectedFurniture = function () {
        var movableSelectedFurniture = ([]);
        {
            var array = this.home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item != null && item instanceof HomePieceOfFurniture) {
                        var piece = item;
                        if (this.isPieceOfFurnitureMovable(piece)) {
                            /* add */ (movableSelectedFurniture.push(piece) > 0);
                        }
                    }
                }
            }
        }
        return /* toArray */ movableSelectedFurniture.slice(0);
    };
    FurnitureController.undoAlignFurniture = function (alignedFurniture, x, y) {
        for (var i = 0; i < alignedFurniture.length; i++) {
            {
                var piece = alignedFurniture[i];
                piece.setX(x[i]);
                piece.setY(y[i]);
            }
            ;
        }
    };
    /**
     * Returns the minimum abscissa of the vertices of <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @return {number}
     * @private
     */
    FurnitureController.getMinX = function (piece) {
        var points = piece.getPoints();
        var minX = Infinity;
        for (var index = 0; index < points.length; index++) {
            var point = points[index];
            {
                minX = Math.min(minX, point[0]);
            }
        }
        return minX;
    };
    /**
     * Returns the maximum abscissa of the vertices of <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @return {number}
     * @private
     */
    FurnitureController.getMaxX = function (piece) {
        var points = piece.getPoints();
        var maxX = -Infinity;
        for (var index = 0; index < points.length; index++) {
            var point = points[index];
            {
                maxX = Math.max(maxX, point[0]);
            }
        }
        return maxX;
    };
    /**
     * Returns the minimum ordinate of the vertices of <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @return {number}
     * @private
     */
    FurnitureController.getMinY = function (piece) {
        var points = piece.getPoints();
        var minY = Infinity;
        for (var index = 0; index < points.length; index++) {
            var point = points[index];
            {
                minY = Math.min(minY, point[1]);
            }
        }
        return minY;
    };
    /**
     * Returns the maximum ordinate of the vertices of <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @return {number}
     * @private
     */
    FurnitureController.getMaxY = function (piece) {
        var points = piece.getPoints();
        var maxY = -Infinity;
        for (var index = 0; index < points.length; index++) {
            var point = points[index];
            {
                maxY = Math.max(maxY, point[1]);
            }
        }
        return maxY;
    };
    /**
     * Controls the distribution of the selected furniture along horizontal axis.
     */
    FurnitureController.prototype.distributeSelectedFurnitureHorizontally = function () {
        this.distributeSelectedFurniture(true);
    };
    /**
     * Controls the distribution of the selected furniture along vertical axis.
     */
    FurnitureController.prototype.distributeSelectedFurnitureVertically = function () {
        this.distributeSelectedFurniture(false);
    };
    /**
     * Controls the distribution of the selected furniture along the axis orthogonal to the given one.
     * @param {boolean} horizontal
     */
    FurnitureController.prototype.distributeSelectedFurniture = function (horizontal) {
        var alignedFurniture = this.getMovableSelectedFurniture();
        if (alignedFurniture.length >= 3) {
            var oldSelection = this.home.getSelectedItems();
            var oldX = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(alignedFurniture.length);
            var oldY = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(alignedFurniture.length);
            for (var i = 0; i < alignedFurniture.length; i++) {
                {
                    oldX[i] = alignedFurniture[i].getX();
                    oldY[i] = alignedFurniture[i].getY();
                }
                ;
            }
            this.home.setSelectedItems(/* asList */ alignedFurniture.slice(0));
            FurnitureController.doDistributeFurnitureAlongAxis(alignedFurniture, horizontal);
            if (this.undoSupport != null) {
                this.undoSupport.postEdit(new FurnitureController.FurnitureDistributionUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), oldX, oldY, alignedFurniture, horizontal));
            }
        }
    };
    FurnitureController.doDistributeFurnitureAlongAxis = function (alignedFurniture, horizontal) {
        var orthogonalAxis = horizontal ? new java.awt.geom.Line2D.Float(0, 0, 0, -1) : new java.awt.geom.Line2D.Float(0, 0, 1, 0);
        var furnitureHorizontallySorted = FurnitureController.sortFurniture(alignedFurniture, null, orthogonalAxis);
        var axisAngle = (horizontal ? 0 : Math.PI / 2);
        var firstPiece = furnitureHorizontallySorted[0];
        var firstPieceBoundingRectangleHalfWidth = FurnitureController.getPieceBoundingRectangleWidth(firstPiece, axisAngle) / 2;
        var lastPiece = furnitureHorizontallySorted[ /* size */furnitureHorizontallySorted.length - 1];
        var lastPieceBoundingRectangleHalfWidth = FurnitureController.getPieceBoundingRectangleWidth(lastPiece, axisAngle) / 2;
        var gap = Math.abs(orthogonalAxis.ptLineDist(lastPiece.getX(), lastPiece.getY()) * orthogonalAxis.relativeCCW(lastPiece.getX(), lastPiece.getY()) - orthogonalAxis.ptLineDist(firstPiece.getX(), firstPiece.getY()) * orthogonalAxis.relativeCCW(firstPiece.getX(), firstPiece.getY())) - lastPieceBoundingRectangleHalfWidth - firstPieceBoundingRectangleHalfWidth;
        var furnitureWidthsAlongAxis = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(/* size */ furnitureHorizontallySorted.length - 2);
        for (var i = 1; i < /* size */ furnitureHorizontallySorted.length - 1; i++) {
            {
                var piece = furnitureHorizontallySorted[i];
                furnitureWidthsAlongAxis[i - 1] = FurnitureController.getPieceBoundingRectangleWidth(piece, axisAngle);
                gap -= furnitureWidthsAlongAxis[i - 1];
            }
            ;
        }
        gap /= /* size */ furnitureHorizontallySorted.length - 1;
        var xOrY = (horizontal ? firstPiece.getX() : firstPiece.getY()) + (firstPieceBoundingRectangleHalfWidth + gap);
        for (var i = 1; i < /* size */ furnitureHorizontallySorted.length - 1; i++) {
            {
                var piece = furnitureHorizontallySorted[i];
                if (horizontal) {
                    piece.setX((xOrY + furnitureWidthsAlongAxis[i - 1] / 2));
                }
                else {
                    piece.setY((xOrY + furnitureWidthsAlongAxis[i - 1] / 2));
                }
                xOrY += gap + furnitureWidthsAlongAxis[i - 1];
            }
            ;
        }
    };
    /**
     * Resets the elevation of the selected furniture to its default elevation.
     */
    FurnitureController.prototype.resetFurnitureElevation = function () {
        var selectedFurniture = this.getMovableSelectedFurniture();
        if (selectedFurniture.length >= 1) {
            var oldSelection = this.home.getSelectedItems();
            var furnitureOldElevation = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(selectedFurniture.length);
            var furnitureNewElevation = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(selectedFurniture.length);
            for (var i = 0; i < selectedFurniture.length; i++) {
                {
                    var piece = selectedFurniture[i];
                    furnitureOldElevation[i] = piece.getElevation();
                    var highestSurroundingPiece = this.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$java_util_List(piece, /* asList */ selectedFurniture.slice(0));
                    if (highestSurroundingPiece != null) {
                        var elevation = highestSurroundingPiece.getElevation() + highestSurroundingPiece.getHeightInPlan() * highestSurroundingPiece.getDropOnTopElevation();
                        if (highestSurroundingPiece.getLevel() != null) {
                            elevation += highestSurroundingPiece.getLevel().getElevation() - piece.getLevel().getElevation();
                        }
                        furnitureNewElevation[i] = Math.max(0, elevation);
                    }
                    else {
                        furnitureNewElevation[i] = 0;
                    }
                }
                ;
            }
            this.home.setSelectedItems(/* asList */ selectedFurniture.slice(0));
            FurnitureController.doSetFurnitureElevation(selectedFurniture, furnitureNewElevation);
            if (this.undoSupport != null) {
                this.undoSupport.postEdit(new FurnitureController.FurnitureElevationResetUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), furnitureOldElevation, selectedFurniture, furnitureNewElevation));
            }
        }
    };
    FurnitureController.doSetFurnitureElevation = function (selectedFurniture, furnitureNewElevation) {
        for (var i = 0; i < selectedFurniture.length; i++) {
            {
                selectedFurniture[i].setElevation(furnitureNewElevation[i]);
            }
            ;
        }
    };
    FurnitureController.prototype.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (piece) {
        var ignoredFurniture = [];
        return this.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$java_util_List(piece, ignoredFurniture);
    };
    FurnitureController.prototype.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$java_util_List = function (piece, ignoredFurniture) {
        var piecePoints = piece.getPoints();
        var margin = Math.min(piece.getWidthInPlan(), piece.getDepthInPlan()) * 0.05;
        var highestSurroundingPiece = null;
        var highestElevation = 1.4E-45;
        {
            var array = this.getFurnitureInSameGroup(piece);
            for (var index = 0; index < array.length; index++) {
                var homePiece = array[index];
                {
                    if (homePiece !== piece && !(ignoredFurniture.indexOf((homePiece)) >= 0) && this.isPieceOfFurnitureVisibleAtSelectedLevel(homePiece) && homePiece.getDropOnTopElevation() >= 0) {
                        var surroundingPieceContainsPiece = true;
                        for (var index1 = 0; index1 < piecePoints.length; index1++) {
                            var point = piecePoints[index1];
                            {
                                if (!homePiece.containsPoint(point[0], point[1], margin)) {
                                    surroundingPieceContainsPiece = false;
                                    break;
                                }
                            }
                        }
                        if (surroundingPieceContainsPiece) {
                            var elevation = homePiece.getElevation() + homePiece.getHeightInPlan() * homePiece.getDropOnTopElevation();
                            if (elevation > highestElevation) {
                                highestElevation = elevation;
                                highestSurroundingPiece = homePiece;
                            }
                        }
                    }
                }
            }
        }
        return highestSurroundingPiece;
    };
    FurnitureController.prototype.getHighestSurroundingPieceOfFurniture = function (piece, ignoredFurniture) {
        if (((piece != null && piece instanceof HomePieceOfFurniture) || piece === null) && ((ignoredFurniture != null && (ignoredFurniture instanceof Array)) || ignoredFurniture === null)) {
            return this.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$java_util_List(piece, ignoredFurniture);
        }
        else if (((piece != null && piece instanceof HomePieceOfFurniture) || piece === null) && ignoredFurniture === undefined) {
            return this.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture(piece);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the furniture list of the given <code>piece</code> which belongs to same group
     * or home furniture if it doesn't belong to home furniture.
     * @param {HomePieceOfFurniture} piece
     * @return {HomePieceOfFurniture[]}
     */
    FurnitureController.prototype.getFurnitureInSameGroup = function (piece) {
        var homeFurniture = this.home.getFurniture();
        var furnitureInSameGroup = FurnitureController.getFurnitureInSameGroup(piece, homeFurniture);
        if (furnitureInSameGroup != null) {
            return furnitureInSameGroup;
        }
        else {
            return homeFurniture;
        }
    };
    FurnitureController.getFurnitureInSameGroup = function (piece, furniture) {
        for (var index = 0; index < furniture.length; index++) {
            var piece2 = furniture[index];
            {
                if (piece2 === piece) {
                    return furniture;
                }
                else if (piece2 != null && piece2 instanceof HomeFurnitureGroup) {
                    var siblingFurniture = FurnitureController.getFurnitureInSameGroup(piece, piece2.getFurniture());
                    if (siblingFurniture != null) {
                        return siblingFurniture;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Returns <code>true</code> if the given piece is viewable and
     * its height and elevation make it viewable at the selected level in home.
     * @param {HomePieceOfFurniture} piece
     * @return {boolean}
     */
    FurnitureController.prototype.isPieceOfFurnitureVisibleAtSelectedLevel = function (piece) {
        var selectedLevel = this.home.getSelectedLevel();
        return piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isViewable()) && (piece.getLevel() === selectedLevel || piece.isAtLevel(selectedLevel));
    };
    /**
     * Controls the change of value of a visual property in home.
     * @deprecated {@link #setVisualProperty(String, Object) setVisualProperty} should be replaced by a call to
     * {@link #setHomeProperty(String, String)} to ensure the property can be easily saved and read.
     * @param {string} propertyName
     * @param {Object} propertyValue
     */
    FurnitureController.prototype.setVisualProperty = function (propertyName, propertyValue) {
        this.home.setVisualProperty(propertyName, propertyValue);
    };
    /**
     * Controls the change of value of a property in home.
     * @param {string} propertyName
     * @param {string} propertyValue
     */
    FurnitureController.prototype.setHomeProperty = function (propertyName, propertyValue) {
        this.home.setProperty(propertyName, propertyValue);
    };
    return FurnitureController;
}());
FurnitureController["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController";
FurnitureController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (FurnitureController) {
    /**
     * Undoable edit for furniture added to home.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} newFurniture
     * @param {int[]} newFurnitureIndex
     * @param {com.eteks.sweethome3d.model.HomeFurnitureGroup[]} newFurnitureGroups
     * @param {com.eteks.sweethome3d.model.Level[]} newFurnitureLevels
     * @param {Level} furnitureLevel
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureAdditionUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureAdditionUndoableEdit, _super);
        function FurnitureAdditionUndoableEdit(home, preferences, oldSelection, oldBasePlanLocked, allLevelsSelection, newFurniture, newFurnitureIndex, newFurnitureGroups, newFurnitureLevels, furnitureLevel, newBasePlanLocked) {
            var _this = _super.call(this, preferences, FurnitureController, "undoAddFurnitureName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.newFurniture === undefined) {
                _this.newFurniture = null;
            }
            if (_this.newFurnitureIndex === undefined) {
                _this.newFurnitureIndex = null;
            }
            if (_this.newFurnitureGroups === undefined) {
                _this.newFurnitureGroups = null;
            }
            if (_this.newFurnitureLevels === undefined) {
                _this.newFurnitureLevels = null;
            }
            if (_this.furnitureLevel === undefined) {
                _this.furnitureLevel = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.allLevelsSelection = allLevelsSelection;
            _this.newFurniture = newFurniture;
            _this.newFurnitureIndex = newFurnitureIndex;
            _this.newFurnitureGroups = newFurnitureGroups;
            _this.newFurnitureLevels = newFurnitureLevels;
            _this.furnitureLevel = furnitureLevel;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        FurnitureAdditionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.doDeleteFurniture(this.home, this.newFurniture, this.oldBasePlanLocked, this.allLevelsSelection);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureAdditionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            FurnitureController.doAddFurniture(this.home, this.newFurniture, this.newFurnitureGroups, this.newFurnitureIndex, this.furnitureLevel, this.newFurnitureLevels, this.newBasePlanLocked, false);
        };
        return FurnitureAdditionUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureAdditionUndoableEdit = FurnitureAdditionUndoableEdit;
    FurnitureAdditionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureAdditionUndoableEdit";
    FurnitureAdditionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for furniture deleted from home.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} basePlanLocked
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} furniture
     * @param {int[]} furnitureIndex
     * @param {com.eteks.sweethome3d.model.HomeFurnitureGroup[]} furnitureGroups
     * @param {com.eteks.sweethome3d.model.Level[]} furnitureLevels
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureDeletionUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureDeletionUndoableEdit, _super);
        function FurnitureDeletionUndoableEdit(home, preferences, oldSelection, basePlanLocked, allLevelsSelection, furniture, furnitureIndex, furnitureGroups, furnitureLevels) {
            var _this = _super.call(this, preferences, FurnitureController, "undoDeleteSelectionName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.basePlanLocked === undefined) {
                _this.basePlanLocked = false;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.furniture === undefined) {
                _this.furniture = null;
            }
            if (_this.furnitureIndex === undefined) {
                _this.furnitureIndex = null;
            }
            if (_this.furnitureGroups === undefined) {
                _this.furnitureGroups = null;
            }
            if (_this.furnitureLevels === undefined) {
                _this.furnitureLevels = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.basePlanLocked = basePlanLocked;
            _this.allLevelsSelection = allLevelsSelection;
            _this.furniture = furniture;
            _this.furnitureIndex = furnitureIndex;
            _this.furnitureGroups = furnitureGroups;
            _this.furnitureLevels = furnitureLevels;
            return _this;
        }
        /**
         *
         */
        FurnitureDeletionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.doAddFurniture(this.home, this.furniture, this.furnitureGroups, this.furnitureIndex, null, this.furnitureLevels, this.basePlanLocked, this.allLevelsSelection);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureDeletionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.furniture.slice(0));
            FurnitureController.doDeleteFurniture(this.home, this.furniture, this.basePlanLocked, false);
        };
        return FurnitureDeletionUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureDeletionUndoableEdit = FurnitureDeletionUndoableEdit;
    FurnitureDeletionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureDeletionUndoableEdit";
    FurnitureDeletionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for furniture grouping.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} basePlanLocked
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} groupedPieces
     * @param {int[]} groupedPiecesIndex
     * @param {com.eteks.sweethome3d.model.HomeFurnitureGroup[]} groupedPiecesGroups
     * @param {com.eteks.sweethome3d.model.Level[]} groupedPiecesLevel
     * @param {float[]} groupedPiecesElevation
     * @param {boolean[]} groupedPiecesVisible
     * @param {HomeFurnitureGroup} newGroup
     * @param {number} groupIndex
     * @param {Level} groupLevel
     * @param {float[]} groupPiecesNewElevation
     * @param {boolean} movable
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureGroupingUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureGroupingUndoableEdit, _super);
        function FurnitureGroupingUndoableEdit(home, preferences, oldSelection, basePlanLocked, allLevelsSelection, groupedPieces, groupedPiecesIndex, groupedPiecesGroups, groupedPiecesLevel, groupedPiecesElevation, groupedPiecesVisible, newGroup, groupIndex, groupLevel, groupPiecesNewElevation, movable) {
            var _this = _super.call(this, preferences, FurnitureController, "undoGroupName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.basePlanLocked === undefined) {
                _this.basePlanLocked = false;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.groupedPieces === undefined) {
                _this.groupedPieces = null;
            }
            if (_this.groupedPiecesIndex === undefined) {
                _this.groupedPiecesIndex = null;
            }
            if (_this.groupedPiecesGroups === undefined) {
                _this.groupedPiecesGroups = null;
            }
            if (_this.groupedPiecesLevel === undefined) {
                _this.groupedPiecesLevel = null;
            }
            if (_this.groupedPiecesElevation === undefined) {
                _this.groupedPiecesElevation = null;
            }
            if (_this.groupedPiecesVisible === undefined) {
                _this.groupedPiecesVisible = null;
            }
            if (_this.newGroup === undefined) {
                _this.newGroup = null;
            }
            if (_this.groupIndex === undefined) {
                _this.groupIndex = 0;
            }
            if (_this.groupLevel === undefined) {
                _this.groupLevel = null;
            }
            if (_this.groupPiecesNewElevation === undefined) {
                _this.groupPiecesNewElevation = null;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            _this.home = home;
            _this.basePlanLocked = basePlanLocked;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.groupedPieces = groupedPieces;
            _this.groupedPiecesIndex = groupedPiecesIndex;
            _this.groupedPiecesGroups = groupedPiecesGroups;
            _this.groupedPiecesLevel = groupedPiecesLevel;
            _this.groupedPiecesElevation = groupedPiecesElevation;
            _this.groupedPiecesVisible = groupedPiecesVisible;
            _this.newGroup = newGroup;
            _this.groupIndex = groupIndex;
            _this.groupLevel = groupLevel;
            _this.groupPiecesNewElevation = groupPiecesNewElevation;
            _this.movable = movable;
            return _this;
        }
        /**
         *
         */
        FurnitureGroupingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.doUngroupFurniture(this.home, [this.newGroup], this.groupedPieces, this.groupedPiecesGroups, this.groupedPiecesIndex, this.groupedPiecesLevel, this.basePlanLocked, this.allLevelsSelection);
            for (var i = 0; i < this.groupedPieces.length; i++) {
                {
                    this.groupedPieces[i].setElevation(this.groupedPiecesElevation[i]);
                    this.groupedPieces[i].setVisible(this.groupedPiecesVisible[i]);
                }
                ;
            }
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureGroupingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            for (var i = 0; i < this.groupedPieces.length; i++) {
                {
                    this.groupedPieces[i].setElevation(this.groupPiecesNewElevation[i]);
                    this.groupedPieces[i].setLevel(null);
                }
                ;
            }
            this.newGroup.setMovable(this.movable);
            this.newGroup.setVisible(true);
            FurnitureController.doGroupFurniture(this.home, this.groupedPieces, [this.newGroup], null, [this.groupIndex], [this.groupLevel], this.basePlanLocked, false);
        };
        return FurnitureGroupingUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureGroupingUndoableEdit = FurnitureGroupingUndoableEdit;
    FurnitureGroupingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureGroupingUndoableEdit";
    FurnitureGroupingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for furniture ungrouping.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.HomeFurnitureGroup[]} groups
     * @param {int[]} groupsIndex
     * @param {com.eteks.sweethome3d.model.HomeFurnitureGroup[]} groupsGroups
     * @param {com.eteks.sweethome3d.model.Level[]} groupsLevels
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} ungroupedPieces
     * @param {int[]} ungroupedPiecesIndex
     * @param {com.eteks.sweethome3d.model.HomeFurnitureGroup[]} ungroupedPiecesGroups
     * @param {com.eteks.sweethome3d.model.Level[]} ungroupedPiecesLevels
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureUngroupingUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureUngroupingUndoableEdit, _super);
        function FurnitureUngroupingUndoableEdit(home, preferences, oldSelection, oldBasePlanLocked, allLevelsSelection, groups, groupsIndex, groupsGroups, groupsLevels, ungroupedPieces, ungroupedPiecesIndex, ungroupedPiecesGroups, ungroupedPiecesLevels, newBasePlanLocked) {
            var _this = _super.call(this, preferences, FurnitureController, "undoUngroupName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.groups === undefined) {
                _this.groups = null;
            }
            if (_this.groupsIndex === undefined) {
                _this.groupsIndex = null;
            }
            if (_this.groupsGroups === undefined) {
                _this.groupsGroups = null;
            }
            if (_this.groupsLevels === undefined) {
                _this.groupsLevels = null;
            }
            if (_this.ungroupedPieces === undefined) {
                _this.ungroupedPieces = null;
            }
            if (_this.ungroupedPiecesIndex === undefined) {
                _this.ungroupedPiecesIndex = null;
            }
            if (_this.ungroupedPiecesGroups === undefined) {
                _this.ungroupedPiecesGroups = null;
            }
            if (_this.ungroupedPiecesLevels === undefined) {
                _this.ungroupedPiecesLevels = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.allLevelsSelection = allLevelsSelection;
            _this.groups = groups;
            _this.groupsIndex = groupsIndex;
            _this.groupsGroups = groupsGroups;
            _this.groupsLevels = groupsLevels;
            _this.ungroupedPieces = ungroupedPieces;
            _this.ungroupedPiecesIndex = ungroupedPiecesIndex;
            _this.ungroupedPiecesGroups = ungroupedPiecesGroups;
            _this.ungroupedPiecesLevels = ungroupedPiecesLevels;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        FurnitureUngroupingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.doGroupFurniture(this.home, this.ungroupedPieces, this.groups, this.groupsGroups, this.groupsIndex, this.groupsLevels, this.oldBasePlanLocked, this.allLevelsSelection);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureUngroupingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            FurnitureController.doUngroupFurniture(this.home, this.groups, this.ungroupedPieces, this.ungroupedPiecesGroups, this.ungroupedPiecesIndex, this.ungroupedPiecesLevels, this.newBasePlanLocked, false);
        };
        return FurnitureUngroupingUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureUngroupingUndoableEdit = FurnitureUngroupingUndoableEdit;
    FurnitureUngroupingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureUngroupingUndoableEdit";
    FurnitureUngroupingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for furniture alignment.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} selectedFurniture
     * @param {HomePieceOfFurniture} leadPiece
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureAlignmentUndoableEdit, _super);
        function FurnitureAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            var _this = _super.call(this, preferences, FurnitureController, "undoAlignName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.selectedFurniture === undefined) {
                _this.selectedFurniture = null;
            }
            if (_this.leadPiece === undefined) {
                _this.leadPiece = null;
            }
            if (_this.alignedFurniture === undefined) {
                _this.alignedFurniture = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = null;
            }
            if (_this.oldY === undefined) {
                _this.oldY = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.selectedFurniture = selectedFurniture;
            _this.leadPiece = leadPiece;
            _this.alignedFurniture = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(leadPiece == null ? selectedFurniture.length : selectedFurniture.length - 1);
            _this.oldX = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(_this.alignedFurniture.length);
            _this.oldY = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(_this.alignedFurniture.length);
            var i = 0;
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    if (piece !== leadPiece) {
                        _this.alignedFurniture[i] = piece;
                        _this.oldX[i] = piece.getX();
                        _this.oldY[i] = piece.getY();
                        i++;
                    }
                }
            }
            return _this;
        }
        /**
         *
         */
        FurnitureAlignmentUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.undoAlignFurniture(this.alignedFurniture, this.oldX, this.oldY);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureAlignmentUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.selectedFurniture.slice(0));
            this.alignFurniture$();
        };
        FurnitureAlignmentUndoableEdit.prototype.alignFurniture$ = function () {
            this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(this.alignedFurniture, this.leadPiece);
        };
        FurnitureAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) { throw new Error('cannot invoke abstract overloaded method... check your argument(s) type(s)'); };
        FurnitureAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureAlignmentUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureAlignmentUndoableEdit = FurnitureAlignmentUndoableEdit;
    FurnitureAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureAlignmentUndoableEdit";
    FurnitureAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for furniture distribution.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {float[]} oldX
     * @param {float[]} oldY
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
     * @param {boolean} horizontal
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureDistributionUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureDistributionUndoableEdit, _super);
        function FurnitureDistributionUndoableEdit(home, preferences, oldSelection, oldX, oldY, alignedFurniture, horizontal) {
            var _this = _super.call(this, preferences, FurnitureController, "undoDistributeName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = null;
            }
            if (_this.oldY === undefined) {
                _this.oldY = null;
            }
            if (_this.alignedFurniture === undefined) {
                _this.alignedFurniture = null;
            }
            if (_this.horizontal === undefined) {
                _this.horizontal = false;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.oldX = oldX;
            _this.oldY = oldY;
            _this.alignedFurniture = alignedFurniture;
            _this.horizontal = horizontal;
            return _this;
        }
        /**
         *
         */
        FurnitureDistributionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.undoAlignFurniture(this.alignedFurniture, this.oldX, this.oldY);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureDistributionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.alignedFurniture.slice(0));
            FurnitureController.doDistributeFurnitureAlongAxis(this.alignedFurniture, this.horizontal);
        };
        return FurnitureDistributionUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureDistributionUndoableEdit = FurnitureDistributionUndoableEdit;
    FurnitureDistributionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureDistributionUndoableEdit";
    FurnitureDistributionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for furniture elevation reset.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {float[]} furnitureOldElevation
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} selectedFurniture
     * @param {float[]} furnitureNewElevation
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FurnitureElevationResetUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureElevationResetUndoableEdit, _super);
        function FurnitureElevationResetUndoableEdit(home, preferences, oldSelection, furnitureOldElevation, selectedFurniture, furnitureNewElevation) {
            var _this = _super.call(this, preferences, FurnitureController, "undoResetElevation") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.furnitureOldElevation === undefined) {
                _this.furnitureOldElevation = null;
            }
            if (_this.selectedFurniture === undefined) {
                _this.selectedFurniture = null;
            }
            if (_this.furnitureNewElevation === undefined) {
                _this.furnitureNewElevation = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.furnitureOldElevation = furnitureOldElevation;
            _this.selectedFurniture = selectedFurniture;
            _this.furnitureNewElevation = furnitureNewElevation;
            return _this;
        }
        /**
         *
         */
        FurnitureElevationResetUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            FurnitureController.doSetFurnitureElevation(this.selectedFurniture, this.furnitureOldElevation);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureElevationResetUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.selectedFurniture.slice(0));
            FurnitureController.doSetFurnitureElevation(this.selectedFurniture, this.furnitureNewElevation);
        };
        return FurnitureElevationResetUndoableEdit;
    }(LocalizedUndoableEdit));
    FurnitureController.FurnitureElevationResetUndoableEdit = FurnitureElevationResetUndoableEdit;
    FurnitureElevationResetUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureElevationResetUndoableEdit";
    FurnitureElevationResetUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureTopAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureTopAlignmentUndoableEdit, _super);
        function FurnitureTopAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureTopAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var minYLeadPiece = FurnitureController.getMinY(leadPiece);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    var minY = FurnitureController.getMinY(piece);
                    piece.setY(piece.getY() + minYLeadPiece - minY);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureTopAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureTopAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureTopAlignmentUndoableEdit = FurnitureTopAlignmentUndoableEdit;
    FurnitureTopAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureTopAlignmentUndoableEdit";
    FurnitureTopAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureBottomAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureBottomAlignmentUndoableEdit, _super);
        function FurnitureBottomAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureBottomAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var maxYLeadPiece = FurnitureController.getMaxY(leadPiece);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    var maxY = FurnitureController.getMaxY(piece);
                    piece.setY(piece.getY() + maxYLeadPiece - maxY);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureBottomAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureBottomAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureBottomAlignmentUndoableEdit = FurnitureBottomAlignmentUndoableEdit;
    FurnitureBottomAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureBottomAlignmentUndoableEdit";
    FurnitureBottomAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureLeftAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureLeftAlignmentUndoableEdit, _super);
        function FurnitureLeftAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureLeftAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var minXLeadPiece = FurnitureController.getMinX(leadPiece);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    var minX = FurnitureController.getMinX(piece);
                    piece.setX(piece.getX() + minXLeadPiece - minX);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureLeftAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureLeftAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureLeftAlignmentUndoableEdit = FurnitureLeftAlignmentUndoableEdit;
    FurnitureLeftAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureLeftAlignmentUndoableEdit";
    FurnitureLeftAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureRightAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureRightAlignmentUndoableEdit, _super);
        function FurnitureRightAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureRightAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var maxXLeadPiece = FurnitureController.getMaxX(leadPiece);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    var maxX = FurnitureController.getMaxX(piece);
                    piece.setX(piece.getX() + maxXLeadPiece - maxX);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureRightAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureRightAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureRightAlignmentUndoableEdit = FurnitureRightAlignmentUndoableEdit;
    FurnitureRightAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureRightAlignmentUndoableEdit";
    FurnitureRightAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureFrontSideAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureFrontSideAlignmentUndoableEdit, _super);
        function FurnitureFrontSideAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureFrontSideAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var points = leadPiece.getPoints();
            var frontLine = new java.awt.geom.Line2D.Float(points[2][0], points[2][1], points[3][0], points[3][1]);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    FurnitureController.alignPieceOfFurnitureAlongSides(piece, leadPiece, frontLine, true, null, 0);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureFrontSideAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureFrontSideAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureFrontSideAlignmentUndoableEdit = FurnitureFrontSideAlignmentUndoableEdit;
    FurnitureFrontSideAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureFrontSideAlignmentUndoableEdit";
    FurnitureFrontSideAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureBackSideAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureBackSideAlignmentUndoableEdit, _super);
        function FurnitureBackSideAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureBackSideAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var points = leadPiece.getPoints();
            var backLine = new java.awt.geom.Line2D.Float(points[0][0], points[0][1], points[1][0], points[1][1]);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    FurnitureController.alignPieceOfFurnitureAlongSides(piece, leadPiece, backLine, false, null, 0);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureBackSideAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureBackSideAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureBackSideAlignmentUndoableEdit = FurnitureBackSideAlignmentUndoableEdit;
    FurnitureBackSideAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureBackSideAlignmentUndoableEdit";
    FurnitureBackSideAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureLeftSideAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureLeftSideAlignmentUndoableEdit, _super);
        function FurnitureLeftSideAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureLeftSideAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var points = leadPiece.getPoints();
            var leftLine = new java.awt.geom.Line2D.Float(points[3][0], points[3][1], points[0][0], points[0][1]);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var piece = alignedFurniture[index];
                {
                    FurnitureController.alignPieceOfFurnitureAlongLeftOrRightSides(piece, leadPiece, leftLine, false);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureLeftSideAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureLeftSideAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureLeftSideAlignmentUndoableEdit = FurnitureLeftSideAlignmentUndoableEdit;
    FurnitureLeftSideAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureLeftSideAlignmentUndoableEdit";
    FurnitureLeftSideAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureRightSideAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureRightSideAlignmentUndoableEdit, _super);
        function FurnitureRightSideAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureRightSideAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var points = leadPiece.getPoints();
            var rightLine = new java.awt.geom.Line2D.Float(points[1][0], points[1][1], points[2][0], points[2][1]);
            for (var index = 0; index < alignedFurniture.length; index++) {
                var alignedPiece = alignedFurniture[index];
                {
                    FurnitureController.alignPieceOfFurnitureAlongLeftOrRightSides(alignedPiece, leadPiece, rightLine, true);
                }
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureRightSideAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureRightSideAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureRightSideAlignmentUndoableEdit = FurnitureRightSideAlignmentUndoableEdit;
    FurnitureRightSideAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureRightSideAlignmentUndoableEdit";
    FurnitureRightSideAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureSideBySideAlignmentUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureSideBySideAlignmentUndoableEdit, _super);
        function FurnitureSideBySideAlignmentUndoableEdit(home, preferences, oldSelection, selectedFurniture, leadPiece) {
            return _super.call(this, home, preferences, oldSelection, selectedFurniture, leadPiece) || this;
        }
        FurnitureSideBySideAlignmentUndoableEdit.prototype.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (alignedFurniture, leadPiece) {
            var points = leadPiece.getPoints();
            var centerLine = new java.awt.geom.Line2D.Float(leadPiece.getX(), leadPiece.getY(), (points[0][0] + points[1][0]) / 2, (points[0][1] + points[1][1]) / 2);
            var furnitureSortedAlongBackLine = FurnitureController.sortFurniture(alignedFurniture, leadPiece, centerLine);
            var leadPieceIndex = furnitureSortedAlongBackLine.indexOf(leadPiece);
            var backLine = new java.awt.geom.Line2D.Float(points[0][0], points[0][1], points[1][0], points[1][1]);
            var sideDistance = leadPiece.getWidthInPlan() / 2;
            for (var i = leadPieceIndex + 1; i < /* size */ furnitureSortedAlongBackLine.length; i++) {
                {
                    sideDistance += FurnitureController.alignPieceOfFurnitureAlongSides(/* get */ furnitureSortedAlongBackLine[i], leadPiece, backLine, false, centerLine, sideDistance);
                }
                ;
            }
            sideDistance = -leadPiece.getWidthInPlan() / 2;
            for (var i = leadPieceIndex - 1; i >= 0; i--) {
                {
                    sideDistance -= FurnitureController.alignPieceOfFurnitureAlongSides(/* get */ furnitureSortedAlongBackLine[i], leadPiece, backLine, false, centerLine, sideDistance);
                }
                ;
            }
        };
        /**
         *
         * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} alignedFurniture
         * @param {HomePieceOfFurniture} leadPiece
         * @private
         */
        FurnitureSideBySideAlignmentUndoableEdit.prototype.alignFurniture = function (alignedFurniture, leadPiece) {
            if (((alignedFurniture != null && alignedFurniture instanceof Array && (alignedFurniture.length == 0 || alignedFurniture[0] == null || (alignedFurniture[0] != null && alignedFurniture[0] instanceof HomePieceOfFurniture))) || alignedFurniture === null) && ((leadPiece != null && leadPiece instanceof HomePieceOfFurniture) || leadPiece === null)) {
                return this.alignFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture_A$com_eteks_sweethome3d_model_HomePieceOfFurniture(alignedFurniture, leadPiece);
            }
            else if (alignedFurniture === undefined && leadPiece === undefined) {
                return this.alignFurniture$();
            }
            else
                throw new Error('invalid overload');
        };
        return FurnitureSideBySideAlignmentUndoableEdit;
    }(FurnitureController.FurnitureAlignmentUndoableEdit));
    FurnitureController.FurnitureSideBySideAlignmentUndoableEdit = FurnitureSideBySideAlignmentUndoableEdit;
    FurnitureSideBySideAlignmentUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.FurnitureController.FurnitureSideBySideAlignmentUndoableEdit";
    FurnitureSideBySideAlignmentUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var FurnitureController$0 = /** @class */ (function () {
        function FurnitureController$0(__parent) {
            this.__parent = __parent;
        }
        FurnitureController$0.prototype.selectionChanged = function (ev) {
            var selectedFurniture = Home.getFurnitureSubList(this.__parent.home.getSelectedItems());
            if ( /* isEmpty */(selectedFurniture.length == 0)) {
                this.__parent.leadSelectedPieceOfFurniture = null;
            }
            else if (this.__parent.leadSelectedPieceOfFurniture == null || /* size */ selectedFurniture.length === 1 || selectedFurniture.indexOf(this.__parent.leadSelectedPieceOfFurniture) === -1) {
                this.__parent.leadSelectedPieceOfFurniture = /* get */ selectedFurniture[0];
            }
        };
        return FurnitureController$0;
    }());
    FurnitureController.FurnitureController$0 = FurnitureController$0;
    FurnitureController$0["__interfaces"] = ["com.eteks.sweethome3d.model.SelectionListener"];
    var FurnitureController$1 = /** @class */ (function () {
        function FurnitureController$1(__parent) {
            this.__parent = __parent;
        }
        FurnitureController$1.prototype.propertyChange = function (ev) {
            if ( /* name */"MOVABLE" === ev.getPropertyName()) {
                var piece_1 = ev.getSource();
                if (this.__parent.home.isBasePlanLocked() && this.__parent.isPieceOfFurniturePartOfBasePlan(piece_1)) {
                    var selectedItems = this.__parent.home.getSelectedItems();
                    if ( /* contains */(selectedItems.indexOf((piece_1)) >= 0)) {
                        selectedItems = (selectedItems.slice(0));
                        /* remove */ (function (a) { var index = a.indexOf(piece_1); if (index >= 0) {
                            a.splice(index, 1);
                            return true;
                        }
                        else {
                            return false;
                        } })(selectedItems);
                        this.__parent.home.setSelectedItems(selectedItems);
                    }
                }
            }
        };
        return FurnitureController$1;
    }());
    FurnitureController.FurnitureController$1 = FurnitureController$1;
    var FurnitureController$2 = /** @class */ (function () {
        function FurnitureController$2(orthogonalAxis) {
            this.orthogonalAxis = orthogonalAxis;
        }
        FurnitureController$2.prototype.compare = function (p1, p2) {
            return /* compare */ (this.orthogonalAxis.ptLineDistSq(p2.getX(), p2.getY()) * this.orthogonalAxis.relativeCCW(p2.getX(), p2.getY()) - this.orthogonalAxis.ptLineDistSq(p1.getX(), p1.getY()) * this.orthogonalAxis.relativeCCW(p1.getX(), p1.getY()));
        };
        return FurnitureController$2;
    }());
    FurnitureController.FurnitureController$2 = FurnitureController$2;
})(FurnitureController || (FurnitureController = {}));
/**
 * Creates the controller of wall view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var WallController = /** @class */ (function () {
    function WallController(home, preferences, viewFactory, contentManager, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.leftSideTextureController === undefined) {
            this.leftSideTextureController = null;
        }
        if (this.leftSideBaseboardController === undefined) {
            this.leftSideBaseboardController = null;
        }
        if (this.rightSideTextureController === undefined) {
            this.rightSideTextureController = null;
        }
        if (this.rightSideBaseboardController === undefined) {
            this.rightSideBaseboardController = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.wallView === undefined) {
            this.wallView = null;
        }
        if (this.editablePoints === undefined) {
            this.editablePoints = false;
        }
        if (this.xStart === undefined) {
            this.xStart = null;
        }
        if (this.yStart === undefined) {
            this.yStart = null;
        }
        if (this.xEnd === undefined) {
            this.xEnd = null;
        }
        if (this.yEnd === undefined) {
            this.yEnd = null;
        }
        if (this.length === undefined) {
            this.length = null;
        }
        if (this.distanceToEndPoint === undefined) {
            this.distanceToEndPoint = null;
        }
        if (this.leftSideColor === undefined) {
            this.leftSideColor = null;
        }
        if (this.leftSidePaint === undefined) {
            this.leftSidePaint = null;
        }
        if (this.leftSideShininess === undefined) {
            this.leftSideShininess = null;
        }
        if (this.rightSideColor === undefined) {
            this.rightSideColor = null;
        }
        if (this.rightSidePaint === undefined) {
            this.rightSidePaint = null;
        }
        if (this.rightSideShininess === undefined) {
            this.rightSideShininess = null;
        }
        if (this.pattern === undefined) {
            this.pattern = null;
        }
        if (this.topColor === undefined) {
            this.topColor = null;
        }
        if (this.topPaint === undefined) {
            this.topPaint = null;
        }
        if (this.shape === undefined) {
            this.shape = null;
        }
        if (this.rectangularWallHeight === undefined) {
            this.rectangularWallHeight = null;
        }
        if (this.slopingWallHeightAtStart === undefined) {
            this.slopingWallHeightAtStart = null;
        }
        if (this.sloppingWallHeightAtEnd === undefined) {
            this.sloppingWallHeightAtEnd = null;
        }
        if (this.thickness === undefined) {
            this.thickness = null;
        }
        if (this.arcExtentInDegrees === undefined) {
            this.arcExtentInDegrees = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the texture controller of the wall left side.
     * @return {TextureChoiceController}
     */
    WallController.prototype.getLeftSideTextureController = function () {
        if (this.leftSideTextureController == null) {
            this.leftSideTextureController = new TextureChoiceController(this.preferences.getLocalizedString(WallController, "leftSideTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.leftSideTextureController.addPropertyChangeListener("TEXTURE", new WallController.WallController$0(this));
        }
        return this.leftSideTextureController;
    };
    /**
     * Returns the controller of the wall left side baseboard.
     * @return {BaseboardChoiceController}
     */
    WallController.prototype.getLeftSideBaseboardController = function () {
        if (this.leftSideBaseboardController == null) {
            this.leftSideBaseboardController = new BaseboardChoiceController(this.preferences, this.viewFactory, this.contentManager);
        }
        return this.leftSideBaseboardController;
    };
    /**
     * Returns the texture controller of the wall right side.
     * @return {TextureChoiceController}
     */
    WallController.prototype.getRightSideTextureController = function () {
        if (this.rightSideTextureController == null) {
            this.rightSideTextureController = new TextureChoiceController(this.preferences.getLocalizedString(WallController, "rightSideTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.rightSideTextureController.addPropertyChangeListener("TEXTURE", new WallController.WallController$1(this));
        }
        return this.rightSideTextureController;
    };
    /**
     * Returns the controller of the wall right side baseboard.
     * @return {BaseboardChoiceController}
     */
    WallController.prototype.getRightSideBaseboardController = function () {
        if (this.rightSideBaseboardController == null) {
            this.rightSideBaseboardController = new BaseboardChoiceController(this.preferences, this.viewFactory, this.contentManager);
        }
        return this.rightSideBaseboardController;
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    WallController.prototype.getView = function () {
        if (this.wallView == null) {
            this.wallView = this.viewFactory.createWallView(this.preferences, this);
        }
        return this.wallView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    WallController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    WallController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    WallController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from selected walls in the home edited by this controller.
     */
    WallController.prototype.updateProperties = function () {
        var selectedWalls = Home.getWallsSubList(this.home.getSelectedItems());
        if ( /* isEmpty */(selectedWalls.length == 0)) {
            this.setXStart(null);
            this.setYStart(null);
            this.setXEnd(null);
            this.setYEnd(null);
            this.setEditablePoints(false);
            this.setLeftSideColor(null);
            this.getLeftSideTextureController().setTexture(null);
            this.setLeftSidePaint(null);
            this.setLeftSideShininess(null);
            this.getLeftSideBaseboardController().setVisible(null);
            this.getLeftSideBaseboardController().setThickness(null);
            this.getLeftSideBaseboardController().setHeight(null);
            this.getLeftSideBaseboardController().setColor(null);
            this.getLeftSideBaseboardController().getTextureController().setTexture(null);
            this.getLeftSideBaseboardController().setPaint(null);
            this.setRightSideColor(null);
            this.getRightSideTextureController().setTexture(null);
            this.setRightSidePaint(null);
            this.setRightSideShininess(null);
            this.getRightSideBaseboardController().setVisible(null);
            this.getRightSideBaseboardController().setThickness(null);
            this.getRightSideBaseboardController().setHeight(null);
            this.getRightSideBaseboardController().setColor(null);
            this.getRightSideBaseboardController().getTextureController().setTexture(null);
            this.getRightSideBaseboardController().setPaint(null);
            this.setPattern(null);
            this.setTopColor(null);
            this.setTopPaint(null);
            this.setRectangularWallHeight(null);
            this.setSlopingWallHeightAtStart(null);
            this.setSlopingWallHeightAtEnd(null);
            this.setShape(null);
            this.setThickness(null);
            this.setArcExtentInDegrees(null);
        }
        else {
            var firstWall = selectedWalls[0];
            var multipleSelection = selectedWalls.length > 1;
            this.setEditablePoints(!multipleSelection);
            var xStart = firstWall.getXStart();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!(xStart === /* get */ selectedWalls[i].getXStart())) {
                        xStart = null;
                        break;
                    }
                }
                ;
            }
            this.setXStart(xStart);
            var yStart = firstWall.getYStart();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!(yStart === /* get */ selectedWalls[i].getYStart())) {
                        yStart = null;
                        break;
                    }
                }
                ;
            }
            this.setYStart(yStart);
            var xEnd = firstWall.getXEnd();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!(xEnd === /* get */ selectedWalls[i].getXEnd())) {
                        xEnd = null;
                        break;
                    }
                }
                ;
            }
            this.setXEnd(xEnd);
            var yEnd = firstWall.getYEnd();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!(yEnd === /* get */ selectedWalls[i].getYEnd())) {
                        yEnd = null;
                        break;
                    }
                }
                ;
            }
            this.setYEnd(yEnd);
            var leftSideColor = firstWall.getLeftSideColor();
            if (leftSideColor != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!(leftSideColor === /* get */ selectedWalls[i].getLeftSideColor())) {
                            leftSideColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setLeftSideColor(leftSideColor);
            var leftSideTexture = firstWall.getLeftSideTexture();
            if (leftSideTexture != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!leftSideTexture.equals(/* get */ selectedWalls[i].getLeftSideTexture())) {
                            leftSideTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getLeftSideTextureController().setTexture(leftSideTexture);
            var defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedWalls.length; i++) {
                {
                    var wall = selectedWalls[i];
                    if (wall.getLeftSideColor() != null || wall.getLeftSideTexture() != null) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (leftSideColor != null) {
                this.setLeftSidePaint(WallController.WallPaint.COLORED);
            }
            else if (leftSideTexture != null) {
                this.setLeftSidePaint(WallController.WallPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.setLeftSidePaint(WallController.WallPaint.DEFAULT);
            }
            else {
                this.setLeftSidePaint(null);
            }
            var leftSideShininess = firstWall.getLeftSideShininess();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!(leftSideShininess === /* get */ selectedWalls[i].getLeftSideShininess())) {
                        leftSideShininess = null;
                        break;
                    }
                }
                ;
            }
            this.setLeftSideShininess(leftSideShininess);
            var leftSideBaseboardVisible = firstWall.getLeftSideBaseboard() != null;
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (leftSideBaseboardVisible !== ( /* get */selectedWalls[i].getLeftSideBaseboard() != null)) {
                        leftSideBaseboardVisible = null;
                        break;
                    }
                }
                ;
            }
            this.getLeftSideBaseboardController().setVisible(leftSideBaseboardVisible);
            var firstWallLeftSideBaseboard = firstWall.getLeftSideBaseboard();
            var leftSideBaseboardThickness = firstWallLeftSideBaseboard != null ? firstWallLeftSideBaseboard.getThickness() : this.preferences.getNewWallBaseboardThickness();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    var baseboard = selectedWalls[i].getLeftSideBaseboard();
                    if (!(leftSideBaseboardThickness === (baseboard != null ? baseboard.getThickness() : this.preferences.getNewWallBaseboardThickness()))) {
                        leftSideBaseboardThickness = null;
                        break;
                    }
                }
                ;
            }
            this.getLeftSideBaseboardController().setThickness(leftSideBaseboardThickness);
            var leftSideBaseboardHeight = firstWallLeftSideBaseboard != null ? firstWallLeftSideBaseboard.getHeight() : this.preferences.getNewWallBaseboardHeight();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    var baseboard = selectedWalls[i].getLeftSideBaseboard();
                    if (!(leftSideBaseboardHeight === (baseboard != null ? baseboard.getHeight() : this.preferences.getNewWallBaseboardHeight()))) {
                        leftSideBaseboardHeight = null;
                        break;
                    }
                }
                ;
            }
            this.getLeftSideBaseboardController().setHeight(leftSideBaseboardHeight);
            var leftSideBaseboardColor = firstWallLeftSideBaseboard != null ? firstWallLeftSideBaseboard.getColor() : null;
            if (leftSideBaseboardColor != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        var baseboard = selectedWalls[i].getLeftSideBaseboard();
                        if (baseboard == null || !(leftSideBaseboardColor === baseboard.getColor())) {
                            leftSideBaseboardColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getLeftSideBaseboardController().setColor(leftSideBaseboardColor);
            var leftSideBaseboardTexture = firstWallLeftSideBaseboard != null ? firstWallLeftSideBaseboard.getTexture() : null;
            if (leftSideBaseboardTexture != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        var baseboard = selectedWalls[i].getLeftSideBaseboard();
                        if (baseboard == null || !leftSideBaseboardTexture.equals(baseboard.getTexture())) {
                            leftSideBaseboardTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getLeftSideBaseboardController().getTextureController().setTexture(leftSideBaseboardTexture);
            defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedWalls.length; i++) {
                {
                    var baseboard = selectedWalls[i].getLeftSideBaseboard();
                    if (baseboard != null && (baseboard.getColor() != null || baseboard.getTexture() != null)) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (leftSideBaseboardColor != null) {
                this.getLeftSideBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.COLORED);
            }
            else if (leftSideBaseboardTexture != null) {
                this.getLeftSideBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.getLeftSideBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.DEFAULT);
            }
            else {
                this.getLeftSideBaseboardController().setPaint(null);
            }
            var rightSideColor = firstWall.getRightSideColor();
            if (rightSideColor != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!(rightSideColor === /* get */ selectedWalls[i].getRightSideColor())) {
                            rightSideColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setRightSideColor(rightSideColor);
            var rightSideTexture = firstWall.getRightSideTexture();
            if (rightSideTexture != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!rightSideTexture.equals(/* get */ selectedWalls[i].getRightSideTexture())) {
                            rightSideTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getRightSideTextureController().setTexture(rightSideTexture);
            defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedWalls.length; i++) {
                {
                    var wall = selectedWalls[i];
                    if (wall.getRightSideColor() != null || wall.getRightSideTexture() != null) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (rightSideColor != null) {
                this.setRightSidePaint(WallController.WallPaint.COLORED);
            }
            else if (rightSideTexture != null) {
                this.setRightSidePaint(WallController.WallPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.setRightSidePaint(WallController.WallPaint.DEFAULT);
            }
            else {
                this.setRightSidePaint(null);
            }
            var rightSideShininess = firstWall.getRightSideShininess();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!(rightSideShininess === /* get */ selectedWalls[i].getRightSideShininess())) {
                        rightSideShininess = null;
                        break;
                    }
                }
                ;
            }
            this.setRightSideShininess(rightSideShininess);
            var rightSideBaseboardVisible = firstWall.getRightSideBaseboard() != null;
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (rightSideBaseboardVisible !== ( /* get */selectedWalls[i].getRightSideBaseboard() != null)) {
                        rightSideBaseboardVisible = null;
                        break;
                    }
                }
                ;
            }
            this.getRightSideBaseboardController().setVisible(rightSideBaseboardVisible);
            var firstWallRightSideBaseboard = firstWall.getRightSideBaseboard();
            var rightSideBaseboardThickness = firstWallRightSideBaseboard != null ? firstWallRightSideBaseboard.getThickness() : this.preferences.getNewWallBaseboardThickness();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    var baseboard = selectedWalls[i].getRightSideBaseboard();
                    if (!(rightSideBaseboardThickness === (baseboard != null ? baseboard.getThickness() : this.preferences.getNewWallBaseboardThickness()))) {
                        rightSideBaseboardThickness = null;
                        break;
                    }
                }
                ;
            }
            this.getRightSideBaseboardController().setThickness(rightSideBaseboardThickness);
            var rightSideBaseboardHeight = firstWallRightSideBaseboard != null ? firstWallRightSideBaseboard.getHeight() : this.preferences.getNewWallBaseboardHeight();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    var baseboard = selectedWalls[i].getRightSideBaseboard();
                    if (!(rightSideBaseboardHeight === (baseboard != null ? baseboard.getHeight() : this.preferences.getNewWallBaseboardHeight()))) {
                        rightSideBaseboardHeight = null;
                        break;
                    }
                }
                ;
            }
            this.getRightSideBaseboardController().setHeight(rightSideBaseboardHeight);
            var rightSideBaseboardColor = firstWallRightSideBaseboard != null ? firstWallRightSideBaseboard.getColor() : null;
            if (rightSideBaseboardColor != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        var baseboard = selectedWalls[i].getRightSideBaseboard();
                        if (baseboard == null || !(rightSideBaseboardColor === baseboard.getColor())) {
                            rightSideBaseboardColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getRightSideBaseboardController().setColor(rightSideBaseboardColor);
            var rightSideBaseboardTexture = firstWallRightSideBaseboard != null ? firstWallRightSideBaseboard.getTexture() : null;
            if (rightSideBaseboardTexture != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        var baseboard = selectedWalls[i].getRightSideBaseboard();
                        if (baseboard == null || !rightSideBaseboardTexture.equals(baseboard.getTexture())) {
                            rightSideBaseboardTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getRightSideBaseboardController().getTextureController().setTexture(rightSideBaseboardTexture);
            defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedWalls.length; i++) {
                {
                    var baseboard = selectedWalls[i].getRightSideBaseboard();
                    if (baseboard != null && (baseboard.getColor() != null || baseboard.getTexture() != null)) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (rightSideBaseboardColor != null) {
                this.getRightSideBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.COLORED);
            }
            else if (rightSideBaseboardTexture != null) {
                this.getRightSideBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.getRightSideBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.DEFAULT);
            }
            else {
                this.getRightSideBaseboardController().setPaint(null);
            }
            var pattern = firstWall.getPattern();
            if (pattern == null) {
                pattern = this.preferences.getWallPattern();
            }
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    var otherPattern = selectedWalls[i].getPattern();
                    if (otherPattern == null) {
                        otherPattern = this.preferences.getWallPattern();
                    }
                    if (!(function (o1, o2) { if (o1 && o1.equals) {
                        return o1.equals(o2);
                    }
                    else {
                        return o1 === o2;
                    } })(pattern, otherPattern)) {
                        pattern = null;
                        break;
                    }
                }
                ;
            }
            this.setPattern(pattern);
            var topColor = firstWall.getTopColor();
            var defaultTopColor = void 0;
            if (topColor != null) {
                defaultTopColor = false;
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!(topColor === /* get */ selectedWalls[i].getTopColor())) {
                            topColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            else {
                defaultTopColor = true;
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if ( /* get */selectedWalls[i].getTopColor() != null) {
                            defaultTopColor = false;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setTopColor(topColor);
            if (defaultTopColor) {
                this.setTopPaint(WallController.WallPaint.DEFAULT);
            }
            else if (topColor != null) {
                this.setTopPaint(WallController.WallPaint.COLORED);
            }
            else {
                this.setTopPaint(null);
            }
            var height = firstWall.getHeight();
            if (height == null && firstWall.getHeight() == null) {
                height = this.home.getWallHeight();
            }
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    var wall = selectedWalls[i];
                    var wallHeight = wall.getHeight() == null ? this.home.getWallHeight() : wall.getHeight();
                    if (height !== wallHeight) {
                        height = null;
                        break;
                    }
                }
                ;
            }
            this.setRectangularWallHeight(height);
            this.setSlopingWallHeightAtStart(height);
            var heightAtEnd = firstWall.getHeightAtEnd();
            if (heightAtEnd != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!(heightAtEnd === /* get */ selectedWalls[i].getHeightAtEnd())) {
                            heightAtEnd = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setSlopingWallHeightAtEnd(heightAtEnd == null && /* size */ selectedWalls.length === 1 ? height : heightAtEnd);
            var allWallsRectangular = !firstWall.isTrapezoidal();
            var allWallsTrapezoidal = firstWall.isTrapezoidal();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (!selectedWalls[i].isTrapezoidal()) {
                        allWallsTrapezoidal = false;
                    }
                    else {
                        allWallsRectangular = false;
                    }
                }
                ;
            }
            if (allWallsRectangular) {
                this.setShape(WallController.WallShape.RECTANGULAR_WALL);
            }
            else if (allWallsTrapezoidal) {
                this.setShape(WallController.WallShape.SLOPING_WALL);
            }
            else {
                this.setShape(null);
            }
            var thickness = firstWall.getThickness();
            for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                {
                    if (thickness !== /* get */ selectedWalls[i].getThickness()) {
                        thickness = null;
                        break;
                    }
                }
                ;
            }
            this.setThickness(thickness);
            var arcExtent = firstWall.getArcExtent();
            if (arcExtent != null) {
                for (var i = 1; i < /* size */ selectedWalls.length; i++) {
                    {
                        if (!(arcExtent === /* get */ selectedWalls[i].getArcExtent())) {
                            arcExtent = null;
                            break;
                        }
                    }
                    ;
                }
            }
            if (arcExtent != null) {
                this.setArcExtentInDegrees((function (x) { return x * 180 / Math.PI; })(arcExtent));
            }
            else {
                this.setArcExtentInDegrees(/* size */ selectedWalls.length === 1 ? new Number(0).valueOf() : null);
            }
        }
    };
    /**
     * Sets the edited abscissa of the start point.
     * @param {number} xStart
     */
    WallController.prototype.setXStart = function (xStart) {
        if (xStart !== this.xStart) {
            var oldXStart = this.xStart;
            this.xStart = xStart;
            this.propertyChangeSupport.firePropertyChange(/* name */ "X_START", oldXStart, xStart);
            this.updateLength();
            this.updateDistanceToEndPoint();
        }
    };
    /**
     * Returns the edited abscissa of the start point.
     * @return {number}
     */
    WallController.prototype.getXStart = function () {
        return this.xStart;
    };
    /**
     * Sets the edited ordinate of the start point.
     * @param {number} yStart
     */
    WallController.prototype.setYStart = function (yStart) {
        if (yStart !== this.yStart) {
            var oldYStart = this.yStart;
            this.yStart = yStart;
            this.propertyChangeSupport.firePropertyChange(/* name */ "Y_START", oldYStart, yStart);
            this.updateLength();
            this.updateDistanceToEndPoint();
        }
    };
    /**
     * Returns the edited ordinate of the start point.
     * @return {number}
     */
    WallController.prototype.getYStart = function () {
        return this.yStart;
    };
    /**
     * Sets the edited abscissa of the end point.
     * @param {number} xEnd
     */
    WallController.prototype.setXEnd = function (xEnd) {
        if (xEnd !== this.xEnd) {
            var oldXEnd = this.xEnd;
            this.xEnd = xEnd;
            this.propertyChangeSupport.firePropertyChange(/* name */ "X_END", oldXEnd, xEnd);
            this.updateLength();
            this.updateDistanceToEndPoint();
        }
    };
    /**
     * Returns the edited abscissa of the end point.
     * @return {number}
     */
    WallController.prototype.getXEnd = function () {
        return this.xEnd;
    };
    /**
     * Sets the edited ordinate of the end point.
     * @param {number} yEnd
     */
    WallController.prototype.setYEnd = function (yEnd) {
        if (yEnd !== this.yEnd) {
            var oldYEnd = this.yEnd;
            this.yEnd = yEnd;
            this.propertyChangeSupport.firePropertyChange(/* name */ "Y_END", oldYEnd, yEnd);
            this.updateLength();
            this.updateDistanceToEndPoint();
        }
    };
    /**
     * Returns the edited ordinate of the end point.
     * @return {number}
     */
    WallController.prototype.getYEnd = function () {
        return this.yEnd;
    };
    /**
     * Updates the edited length after its coordinates change.
     * @private
     */
    WallController.prototype.updateLength = function () {
        var xStart = this.getXStart();
        var yStart = this.getYStart();
        var xEnd = this.getXEnd();
        var yEnd = this.getYEnd();
        if (xStart != null && yStart != null && xEnd != null && yEnd != null) {
            var wall = new Wall(xStart, yStart, xEnd, yEnd, 0, 0);
            var arcExtent = this.getArcExtentInDegrees();
            if (arcExtent != null) {
                wall.setArcExtent((function (x) { return x * Math.PI / 180; })(arcExtent));
            }
            this.setLength(wall.getLength(), false);
        }
        else {
            this.setLength(null, false);
        }
    };
    /**
     * Returns the edited length.
     * @return {number}
     */
    WallController.prototype.getLength = function () {
        return this.length;
    };
    WallController.prototype.setLength = function (length, updateEndPoint) {
        if (updateEndPoint === void 0) { updateEndPoint = true; }
        if (length !== this.length) {
            var oldLength = this.length;
            this.length = length;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LENGTH", oldLength, length);
            if (updateEndPoint) {
                var xStart = this.getXStart();
                var yStart = this.getYStart();
                var xEnd = this.getXEnd();
                var yEnd = this.getYEnd();
                if (xStart != null && yStart != null && xEnd != null && yEnd != null && length != null) {
                    if (this.getArcExtentInDegrees() != null && /* floatValue */ this.getArcExtentInDegrees() === 0) {
                        var wallAngle = Math.atan2(yStart - yEnd, xEnd - xStart);
                        this.setXEnd((xStart + length * Math.cos(wallAngle)));
                        this.setYEnd((yStart - length * Math.sin(wallAngle)));
                    }
                    else {
                        throw new UnsupportedOperationException("Computing end point of a round wall from its length not supported");
                    }
                }
                else {
                    this.setXEnd(null);
                    this.setYEnd(null);
                }
            }
        }
    };
    /**
     * Updates the edited distance to end point after its coordinates change.
     * @private
     */
    WallController.prototype.updateDistanceToEndPoint = function () {
        var xStart = this.getXStart();
        var yStart = this.getYStart();
        var xEnd = this.getXEnd();
        var yEnd = this.getYEnd();
        if (xStart != null && yStart != null && xEnd != null && yEnd != null) {
            this.setDistanceToEndPoint(java.awt.geom.Point2D.distance(xStart, yStart, xEnd, yEnd), false);
        }
        else {
            this.setDistanceToEndPoint(null, false);
        }
    };
    WallController.prototype.setDistanceToEndPoint = function (distanceToEndPoint, updateEndPoint) {
        if (updateEndPoint === void 0) { updateEndPoint = true; }
        if (distanceToEndPoint !== this.distanceToEndPoint) {
            var oldDistance = this.distanceToEndPoint;
            this.distanceToEndPoint = distanceToEndPoint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DISTANCE_TO_END_POINT", oldDistance, distanceToEndPoint);
            if (updateEndPoint) {
                var xStart = this.getXStart();
                var yStart = this.getYStart();
                var xEnd = this.getXEnd();
                var yEnd = this.getYEnd();
                if (xStart != null && yStart != null && xEnd != null && yEnd != null && distanceToEndPoint != null) {
                    var wallAngle = Math.atan2(yStart - yEnd, xEnd - xStart);
                    this.setXEnd((xStart + distanceToEndPoint * Math.cos(wallAngle)));
                    this.setYEnd((yStart - distanceToEndPoint * Math.sin(wallAngle)));
                }
                else {
                    this.setXEnd(null);
                    this.setYEnd(null);
                }
            }
        }
    };
    /**
     * Returns the edited distance to end point.
     * @return {number}
     */
    WallController.prototype.getDistanceToEndPoint = function () {
        return this.distanceToEndPoint;
    };
    /**
     * Sets whether the point coordinates can be be edited or not.
     * @param {boolean} editablePoints
     */
    WallController.prototype.setEditablePoints = function (editablePoints) {
        if (editablePoints !== this.editablePoints) {
            this.editablePoints = editablePoints;
            this.propertyChangeSupport.firePropertyChange(/* name */ "EDITABLE_POINTS", !editablePoints, editablePoints);
        }
    };
    /**
     * Returns whether the point coordinates can be be edited or not.
     * @return {boolean}
     */
    WallController.prototype.isEditablePoints = function () {
        return this.editablePoints;
    };
    /**
     * Sets the edited color of the left side.
     * @param {number} leftSideColor
     */
    WallController.prototype.setLeftSideColor = function (leftSideColor) {
        if (leftSideColor !== this.leftSideColor) {
            var oldLeftSideColor = this.leftSideColor;
            this.leftSideColor = leftSideColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LEFT_SIDE_COLOR", oldLeftSideColor, leftSideColor);
            this.setLeftSidePaint(WallController.WallPaint.COLORED);
        }
    };
    /**
     * Returns the edited color of the left side.
     * @return {number}
     */
    WallController.prototype.getLeftSideColor = function () {
        return this.leftSideColor;
    };
    /**
     * Sets whether the left side is colored, textured or unknown painted.
     * @param {WallController.WallPaint} leftSidePaint
     */
    WallController.prototype.setLeftSidePaint = function (leftSidePaint) {
        if (leftSidePaint !== this.leftSidePaint) {
            var oldLeftSidePaint = this.leftSidePaint;
            this.leftSidePaint = leftSidePaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LEFT_SIDE_PAINT", oldLeftSidePaint, leftSidePaint);
        }
    };
    /**
     * Returns whether the left side is colored, textured or unknown painted.
     * @return {WallController.WallPaint} {@link WallPaint#COLORED}, {@link WallPaint#TEXTURED} or <code>null</code>
     */
    WallController.prototype.getLeftSidePaint = function () {
        return this.leftSidePaint;
    };
    /**
     * Sets the edited left side shininess.
     * @param {number} leftSideShininess
     */
    WallController.prototype.setLeftSideShininess = function (leftSideShininess) {
        if (leftSideShininess !== this.leftSideShininess) {
            var oldLeftSideShininess = this.leftSideShininess;
            this.leftSideShininess = leftSideShininess;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LEFT_SIDE_SHININESS", oldLeftSideShininess, leftSideShininess);
        }
    };
    /**
     * Returns the edited left side shininess.
     * @return {number}
     */
    WallController.prototype.getLeftSideShininess = function () {
        return this.leftSideShininess;
    };
    /**
     * Sets the edited color of the right side.
     * @param {number} rightSideColor
     */
    WallController.prototype.setRightSideColor = function (rightSideColor) {
        if (rightSideColor !== this.rightSideColor) {
            var oldRightSideColor = this.rightSideColor;
            this.rightSideColor = rightSideColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RIGHT_SIDE_COLOR", oldRightSideColor, rightSideColor);
            this.setRightSidePaint(WallController.WallPaint.COLORED);
        }
    };
    /**
     * Returns the edited color of the right side.
     * @return {number}
     */
    WallController.prototype.getRightSideColor = function () {
        return this.rightSideColor;
    };
    /**
     * Sets whether the right side is colored, textured or unknown painted.
     * @param {WallController.WallPaint} rightSidePaint
     */
    WallController.prototype.setRightSidePaint = function (rightSidePaint) {
        if (rightSidePaint !== this.rightSidePaint) {
            var oldRightSidePaint = this.rightSidePaint;
            this.rightSidePaint = rightSidePaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RIGHT_SIDE_PAINT", oldRightSidePaint, rightSidePaint);
        }
    };
    /**
     * Returns whether the right side is colored, textured or unknown painted.
     * @return {WallController.WallPaint} {@link WallPaint#COLORED}, {@link WallPaint#TEXTURED} or <code>null</code>
     */
    WallController.prototype.getRightSidePaint = function () {
        return this.rightSidePaint;
    };
    /**
     * Sets the edited right side shininess.
     * @param {number} rightSideShininess
     */
    WallController.prototype.setRightSideShininess = function (rightSideShininess) {
        if (rightSideShininess !== this.rightSideShininess) {
            var oldRightSideShininess = this.rightSideShininess;
            this.rightSideShininess = rightSideShininess;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RIGHT_SIDE_SHININESS", oldRightSideShininess, rightSideShininess);
        }
    };
    /**
     * Returns the edited right side shininess.
     * @return {number}
     */
    WallController.prototype.getRightSideShininess = function () {
        return this.rightSideShininess;
    };
    /**
     * Sets the pattern of edited wall in plan, and notifies
     * listeners of this change.
     * @param {Object} pattern
     */
    WallController.prototype.setPattern = function (pattern) {
        if (this.pattern !== pattern) {
            var oldPattern = this.pattern;
            this.pattern = pattern;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PATTERN", oldPattern, pattern);
        }
    };
    /**
     * Returns the pattern of edited wall in plan.
     * @return {Object}
     */
    WallController.prototype.getPattern = function () {
        return this.pattern;
    };
    /**
     * Sets the edited top color in the 3D view.
     * @param {number} topColor
     */
    WallController.prototype.setTopColor = function (topColor) {
        if (topColor !== this.topColor) {
            var oldTopColor = this.topColor;
            this.topColor = topColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TOP_COLOR", oldTopColor, topColor);
        }
    };
    /**
     * Returns the edited top color in the 3D view.
     * @return {number}
     */
    WallController.prototype.getTopColor = function () {
        return this.topColor;
    };
    /**
     * Sets whether the top of the wall in the 3D view uses default rendering, is colored, or unknown painted.
     * @param {WallController.WallPaint} topPaint
     */
    WallController.prototype.setTopPaint = function (topPaint) {
        if (topPaint !== this.topPaint) {
            var oldTopPaint = this.topPaint;
            this.topPaint = topPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TOP_PAINT", oldTopPaint, topPaint);
        }
    };
    /**
     * Returns whether the top of the wall in the 3D view uses default rendering, is colored, or unknown painted.
     * @return {WallController.WallPaint} {@link WallPaint#DEFAULT}, {@link WallPaint#COLORED} or <code>null</code>
     */
    WallController.prototype.getTopPaint = function () {
        return this.topPaint;
    };
    /**
     * Sets whether the edited wall is a rectangular wall, a sloping wall or unknown.
     * @param {WallController.WallShape} shape
     */
    WallController.prototype.setShape = function (shape) {
        if (shape !== this.shape) {
            var oldShape = this.shape;
            this.shape = shape;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SHAPE", oldShape, shape);
            if (shape === WallController.WallShape.RECTANGULAR_WALL) {
                if (this.rectangularWallHeight != null) {
                    this.getLeftSideBaseboardController().setMaxHeight(this.rectangularWallHeight);
                    this.getRightSideBaseboardController().setMaxHeight(this.rectangularWallHeight);
                }
            }
            else if (shape === WallController.WallShape.SLOPING_WALL) {
                if (this.slopingWallHeightAtStart != null && this.sloppingWallHeightAtEnd != null) {
                    var baseboardMaxHeight = Math.max(this.sloppingWallHeightAtEnd, this.slopingWallHeightAtStart);
                    this.getLeftSideBaseboardController().setMaxHeight(baseboardMaxHeight);
                    this.getRightSideBaseboardController().setMaxHeight(baseboardMaxHeight);
                }
                else if (this.slopingWallHeightAtStart != null) {
                    this.getLeftSideBaseboardController().setMaxHeight(this.slopingWallHeightAtStart);
                    this.getRightSideBaseboardController().setMaxHeight(this.slopingWallHeightAtStart);
                }
                else if (this.sloppingWallHeightAtEnd != null) {
                    this.getLeftSideBaseboardController().setMaxHeight(this.sloppingWallHeightAtEnd);
                    this.getRightSideBaseboardController().setMaxHeight(this.sloppingWallHeightAtEnd);
                }
            }
        }
    };
    /**
     * Returns whether the edited wall is a rectangular wall, a sloping wall or unknown.
     * @return {WallController.WallShape}
     */
    WallController.prototype.getShape = function () {
        return this.shape;
    };
    /**
     * Sets the edited height of a rectangular wall.
     * @param {number} rectangularWallHeight
     */
    WallController.prototype.setRectangularWallHeight = function (rectangularWallHeight) {
        if (rectangularWallHeight !== this.rectangularWallHeight) {
            var oldRectangularWallHeight = this.rectangularWallHeight;
            this.rectangularWallHeight = rectangularWallHeight;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RECTANGULAR_WALL_HEIGHT", oldRectangularWallHeight, rectangularWallHeight);
            this.setShape(WallController.WallShape.RECTANGULAR_WALL);
            if (rectangularWallHeight != null) {
                this.getLeftSideBaseboardController().setMaxHeight(rectangularWallHeight);
                this.getRightSideBaseboardController().setMaxHeight(rectangularWallHeight);
            }
        }
    };
    /**
     * Returns the edited height of a rectangular wall.
     * @return {number}
     */
    WallController.prototype.getRectangularWallHeight = function () {
        return this.rectangularWallHeight;
    };
    /**
     * Sets the edited height at start of a sloping wall.
     * @param {number} slopingWallHeightAtStart
     */
    WallController.prototype.setSlopingWallHeightAtStart = function (slopingWallHeightAtStart) {
        if (slopingWallHeightAtStart !== this.slopingWallHeightAtStart) {
            var oldSlopingHeightHeightAtStart = this.slopingWallHeightAtStart;
            this.slopingWallHeightAtStart = slopingWallHeightAtStart;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SLOPING_WALL_HEIGHT_AT_START", oldSlopingHeightHeightAtStart, slopingWallHeightAtStart);
            this.setShape(WallController.WallShape.SLOPING_WALL);
            if (slopingWallHeightAtStart != null) {
                var baseboardMaxHeight = this.sloppingWallHeightAtEnd != null ? Math.max(this.sloppingWallHeightAtEnd, slopingWallHeightAtStart) : slopingWallHeightAtStart;
                baseboardMaxHeight = Math.max(baseboardMaxHeight, this.preferences.getLengthUnit().getMinimumLength());
                this.getLeftSideBaseboardController().setMaxHeight(baseboardMaxHeight);
                this.getRightSideBaseboardController().setMaxHeight(baseboardMaxHeight);
            }
        }
    };
    /**
     * Returns the edited height at start of a sloping wall.
     * @return {number}
     */
    WallController.prototype.getSlopingWallHeightAtStart = function () {
        return this.slopingWallHeightAtStart;
    };
    /**
     * Sets the edited height at end of a sloping wall.
     * @param {number} sloppingWallHeightAtEnd
     */
    WallController.prototype.setSlopingWallHeightAtEnd = function (sloppingWallHeightAtEnd) {
        if (sloppingWallHeightAtEnd !== this.sloppingWallHeightAtEnd) {
            var oldSlopingWallHeightAtEnd = this.sloppingWallHeightAtEnd;
            this.sloppingWallHeightAtEnd = sloppingWallHeightAtEnd;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SLOPING_WALL_HEIGHT_AT_END", oldSlopingWallHeightAtEnd, sloppingWallHeightAtEnd);
            this.setShape(WallController.WallShape.SLOPING_WALL);
            if (sloppingWallHeightAtEnd != null) {
                var baseboardMaxHeight = this.slopingWallHeightAtStart != null ? Math.max(this.slopingWallHeightAtStart, sloppingWallHeightAtEnd) : sloppingWallHeightAtEnd;
                baseboardMaxHeight = Math.max(baseboardMaxHeight, this.preferences.getLengthUnit().getMinimumLength());
                this.getLeftSideBaseboardController().setMaxHeight(baseboardMaxHeight);
                this.getRightSideBaseboardController().setMaxHeight(baseboardMaxHeight);
            }
        }
    };
    /**
     * Returns the edited height at end of a sloping wall.
     * @return {number}
     */
    WallController.prototype.getSlopingWallHeightAtEnd = function () {
        return this.sloppingWallHeightAtEnd;
    };
    /**
     * Sets the edited thickness.
     * @param {number} thickness
     */
    WallController.prototype.setThickness = function (thickness) {
        if (thickness !== this.thickness) {
            var oldThickness = this.thickness;
            this.thickness = thickness;
            this.propertyChangeSupport.firePropertyChange(/* name */ "THICKNESS", oldThickness, thickness);
        }
    };
    /**
     * Returns the edited thickness.
     * @return {number}
     */
    WallController.prototype.getThickness = function () {
        return this.thickness;
    };
    /**
     * Sets the edited arc extent.
     * @param {number} arcExtentInDegrees
     */
    WallController.prototype.setArcExtentInDegrees = function (arcExtentInDegrees) {
        if (arcExtentInDegrees !== this.arcExtentInDegrees) {
            var oldArcExtent = this.arcExtentInDegrees;
            this.arcExtentInDegrees = arcExtentInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ARC_EXTENT_IN_DEGREES", oldArcExtent, arcExtentInDegrees);
        }
    };
    /**
     * Returns the edited arc extent.
     * @return {number}
     */
    WallController.prototype.getArcExtentInDegrees = function () {
        return this.arcExtentInDegrees;
    };
    /**
     * Returns the length of wall after applying the edited arc extent.
     * @return {number} the arc length or null if data is missing to compute it
     */
    WallController.prototype.getArcLength = function () {
        var xStart = this.getXStart();
        var yStart = this.getYStart();
        var xEnd = this.getXEnd();
        var yEnd = this.getYEnd();
        var arcExtentInDegrees = this.getArcExtentInDegrees();
        if (xStart != null && yStart != null && xEnd != null && yEnd != null && arcExtentInDegrees != null) {
            var wall = new Wall(xStart, yStart, xEnd, yEnd, 1.0E-5, 0);
            wall.setArcExtent((function (x) { return x * Math.PI / 180; })(arcExtentInDegrees));
            return wall.getLength();
        }
        else {
            return null;
        }
    };
    /**
     * Controls the modification of selected walls in edited home.
     */
    WallController.prototype.modifyWalls = function () {
        var oldSelection = this.home.getSelectedItems();
        var selectedWalls = Home.getWallsSubList(oldSelection);
        if (!(selectedWalls.length == 0)) {
            var xStart = this.getXStart();
            var yStart = this.getYStart();
            var xEnd = this.getXEnd();
            var yEnd = this.getYEnd();
            var leftSidePaint = this.getLeftSidePaint();
            var leftSideColor = leftSidePaint === WallController.WallPaint.COLORED ? this.getLeftSideColor() : null;
            var leftSideTexture = leftSidePaint === WallController.WallPaint.TEXTURED ? this.getLeftSideTextureController().getTexture() : null;
            var leftSideShininess = this.getLeftSideShininess();
            var leftSideBaseboardVisible = this.getLeftSideBaseboardController().getVisible();
            var leftSideBaseboardThickness = this.getLeftSideBaseboardController().getThickness();
            var leftSideBaseboardHeight = this.getLeftSideBaseboardController().getHeight();
            var leftSideBaseboardPaint = this.getLeftSideBaseboardController().getPaint();
            var leftSideBaseboardColor = leftSideBaseboardPaint === BaseboardChoiceController.BaseboardPaint.COLORED ? this.getLeftSideBaseboardController().getColor() : null;
            var leftSideBaseboardTexture = leftSideBaseboardPaint === BaseboardChoiceController.BaseboardPaint.TEXTURED ? this.getLeftSideBaseboardController().getTextureController().getTexture() : null;
            var rightSidePaint = this.getRightSidePaint();
            var rightSideColor = rightSidePaint === WallController.WallPaint.COLORED ? this.getRightSideColor() : null;
            var rightSideTexture = rightSidePaint === WallController.WallPaint.TEXTURED ? this.getRightSideTextureController().getTexture() : null;
            var rightSideShininess = this.getRightSideShininess();
            var rightSideBaseboardVisible = this.getRightSideBaseboardController().getVisible();
            var rightSideBaseboardThickness = this.getRightSideBaseboardController().getThickness();
            var rightSideBaseboardHeight = this.getRightSideBaseboardController().getHeight();
            var rightSideBaseboardPaint = this.getRightSideBaseboardController().getPaint();
            var rightSideBaseboardColor = rightSideBaseboardPaint === BaseboardChoiceController.BaseboardPaint.COLORED ? this.getRightSideBaseboardController().getColor() : null;
            var rightSideBaseboardTexture = rightSideBaseboardPaint === BaseboardChoiceController.BaseboardPaint.TEXTURED ? this.getRightSideBaseboardController().getTextureController().getTexture() : null;
            var pattern = this.getPattern();
            var modifiedTopColor = this.getTopPaint() != null;
            var topColor = this.getTopPaint() === WallController.WallPaint.COLORED ? this.getTopColor() : null;
            var thickness = this.getThickness();
            var arcExtent = this.getArcExtentInDegrees();
            if (arcExtent != null) {
                arcExtent = (function (x) { return x * Math.PI / 180; })(arcExtent);
            }
            var height = void 0;
            if (this.getShape() === WallController.WallShape.SLOPING_WALL) {
                height = this.getSlopingWallHeightAtStart();
            }
            else if (this.getShape() === WallController.WallShape.RECTANGULAR_WALL) {
                height = this.getRectangularWallHeight();
            }
            else {
                height = null;
            }
            var heightAtEnd = void 0;
            if (this.getShape() === WallController.WallShape.SLOPING_WALL) {
                heightAtEnd = this.getSlopingWallHeightAtEnd();
            }
            else if (this.getShape() === WallController.WallShape.RECTANGULAR_WALL) {
                heightAtEnd = this.getRectangularWallHeight();
            }
            else {
                heightAtEnd = null;
            }
            if (height != null && heightAtEnd != null) {
                var maxHeight = Math.max(height, heightAtEnd);
                if (leftSideBaseboardHeight != null) {
                    leftSideBaseboardHeight = Math.min(leftSideBaseboardHeight, maxHeight);
                }
                if (rightSideBaseboardHeight != null) {
                    rightSideBaseboardHeight = Math.min(rightSideBaseboardHeight, maxHeight);
                }
            }
            var modifiedWalls = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ selectedWalls.length);
            for (var i = 0; i < modifiedWalls.length; i++) {
                {
                    modifiedWalls[i] = new WallController.ModifiedWall(/* get */ selectedWalls[i]);
                }
                ;
            }
            WallController.doModifyWalls(modifiedWalls, this.preferences.getNewWallBaseboardThickness(), this.preferences.getNewWallBaseboardHeight(), xStart, yStart, xEnd, yEnd, leftSidePaint, leftSideColor, leftSideTexture, leftSideShininess, leftSideBaseboardVisible, leftSideBaseboardThickness, leftSideBaseboardHeight, leftSideBaseboardPaint, leftSideBaseboardColor, leftSideBaseboardTexture, rightSidePaint, rightSideColor, rightSideTexture, rightSideShininess, rightSideBaseboardVisible, rightSideBaseboardThickness, rightSideBaseboardHeight, rightSideBaseboardPaint, rightSideBaseboardColor, rightSideBaseboardTexture, pattern, modifiedTopColor, topColor, height, heightAtEnd, thickness, arcExtent);
            if (this.undoSupport != null) {
                var undoableEdit = new WallController.WallsModificationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), modifiedWalls, this.preferences.getNewWallBaseboardThickness(), this.preferences.getNewWallBaseboardHeight(), xStart, yStart, xEnd, yEnd, leftSidePaint, leftSideColor, leftSideTexture, leftSideShininess, leftSideBaseboardVisible, leftSideBaseboardThickness, leftSideBaseboardHeight, leftSideBaseboardPaint, leftSideBaseboardColor, leftSideBaseboardTexture, rightSidePaint, rightSideColor, rightSideTexture, rightSideShininess, rightSideBaseboardVisible, rightSideBaseboardThickness, rightSideBaseboardHeight, rightSideBaseboardPaint, rightSideBaseboardColor, rightSideBaseboardTexture, pattern, modifiedTopColor, topColor, height, heightAtEnd, thickness, arcExtent);
                this.undoSupport.postEdit(undoableEdit);
            }
        }
    };
    /**
     * Modifies walls properties with the values in parameter.
     * @param {com.eteks.sweethome3d.viewcontroller.WallController.ModifiedWall[]} modifiedWalls
     * @param {number} newWallBaseboardThickness
     * @param {number} newWallBaseboardHeight
     * @param {number} xStart
     * @param {number} yStart
     * @param {number} xEnd
     * @param {number} yEnd
     * @param {WallController.WallPaint} leftSidePaint
     * @param {number} leftSideColor
     * @param {HomeTexture} leftSideTexture
     * @param {number} leftSideShininess
     * @param {boolean} leftSideBaseboardVisible
     * @param {number} leftSideBaseboardThickness
     * @param {number} leftSideBaseboardHeight
     * @param {BaseboardChoiceController.BaseboardPaint} leftSideBaseboardPaint
     * @param {number} leftSideBaseboardColor
     * @param {HomeTexture} leftSideBaseboardTexture
     * @param {WallController.WallPaint} rightSidePaint
     * @param {number} rightSideColor
     * @param {HomeTexture} rightSideTexture
     * @param {number} rightSideShininess
     * @param {boolean} rightSideBaseboardVisible
     * @param {number} rightSideBaseboardThickness
     * @param {number} rightSideBaseboardHeight
     * @param {BaseboardChoiceController.BaseboardPaint} rightSideBaseboardPaint
     * @param {number} rightSideBaseboardColor
     * @param {HomeTexture} rightSideBaseboardTexture
     * @param {Object} pattern
     * @param {boolean} modifiedTopColor
     * @param {number} topColor
     * @param {number} height
     * @param {number} heightAtEnd
     * @param {number} thickness
     * @param {number} arcExtent
     * @private
     */
    WallController.doModifyWalls = function (modifiedWalls, newWallBaseboardThickness, newWallBaseboardHeight, xStart, yStart, xEnd, yEnd, leftSidePaint, leftSideColor, leftSideTexture, leftSideShininess, leftSideBaseboardVisible, leftSideBaseboardThickness, leftSideBaseboardHeight, leftSideBaseboardPaint, leftSideBaseboardColor, leftSideBaseboardTexture, rightSidePaint, rightSideColor, rightSideTexture, rightSideShininess, rightSideBaseboardVisible, rightSideBaseboardThickness, rightSideBaseboardHeight, rightSideBaseboardPaint, rightSideBaseboardColor, rightSideBaseboardTexture, pattern, modifiedTopColor, topColor, height, heightAtEnd, thickness, arcExtent) {
        for (var index = 0; index < modifiedWalls.length; index++) {
            var modifiedWall = modifiedWalls[index];
            {
                var wall = modifiedWall.getWall();
                WallController.moveWallPoints(wall, xStart, yStart, xEnd, yEnd);
                if (leftSidePaint != null) {
                    switch ((leftSidePaint)) {
                        case WallController.WallPaint.DEFAULT:
                            wall.setLeftSideColor(null);
                            wall.setLeftSideTexture(null);
                            break;
                        case WallController.WallPaint.COLORED:
                            if (leftSideColor != null) {
                                wall.setLeftSideColor(leftSideColor);
                            }
                            wall.setLeftSideTexture(null);
                            break;
                        case WallController.WallPaint.TEXTURED:
                            wall.setLeftSideColor(null);
                            if (leftSideTexture != null) {
                                wall.setLeftSideTexture(leftSideTexture);
                            }
                            break;
                    }
                }
                if (leftSideShininess != null) {
                    wall.setLeftSideShininess(leftSideShininess);
                }
                if (leftSideBaseboardVisible === false) {
                    wall.setLeftSideBaseboard(null);
                }
                else {
                    var baseboard = wall.getLeftSideBaseboard();
                    if (leftSideBaseboardVisible === true || baseboard != null) {
                        var baseboardThickness = baseboard != null ? baseboard.getThickness() : newWallBaseboardThickness;
                        var baseboardHeight = baseboard != null ? baseboard.getHeight() : newWallBaseboardHeight;
                        var baseboardColor = baseboard != null ? baseboard.getColor() : null;
                        var baseboardTexture = baseboard != null ? baseboard.getTexture() : null;
                        if (leftSideBaseboardPaint != null) {
                            switch ((leftSideBaseboardPaint)) {
                                case BaseboardChoiceController.BaseboardPaint.DEFAULT:
                                    baseboardColor = null;
                                    baseboardTexture = null;
                                    break;
                                case BaseboardChoiceController.BaseboardPaint.COLORED:
                                    if (leftSideBaseboardColor != null) {
                                        baseboardColor = leftSideBaseboardColor;
                                    }
                                    baseboardTexture = null;
                                    break;
                                case BaseboardChoiceController.BaseboardPaint.TEXTURED:
                                    baseboardColor = null;
                                    if (leftSideBaseboardTexture != null) {
                                        baseboardTexture = leftSideBaseboardTexture;
                                    }
                                    break;
                            }
                        }
                        wall.setLeftSideBaseboard(Baseboard.getInstance(leftSideBaseboardThickness != null ? leftSideBaseboardThickness : baseboardThickness, leftSideBaseboardHeight != null ? leftSideBaseboardHeight : baseboardHeight, baseboardColor, baseboardTexture));
                    }
                }
                if (rightSidePaint != null) {
                    switch ((rightSidePaint)) {
                        case WallController.WallPaint.DEFAULT:
                            wall.setRightSideColor(null);
                            wall.setRightSideTexture(null);
                            break;
                        case WallController.WallPaint.COLORED:
                            if (rightSideColor != null) {
                                wall.setRightSideColor(rightSideColor);
                            }
                            wall.setRightSideTexture(null);
                            break;
                        case WallController.WallPaint.TEXTURED:
                            wall.setRightSideColor(null);
                            if (rightSideTexture != null) {
                                wall.setRightSideTexture(rightSideTexture);
                            }
                            break;
                    }
                }
                if (rightSideShininess != null) {
                    wall.setRightSideShininess(rightSideShininess);
                }
                if (rightSideBaseboardVisible === false) {
                    wall.setRightSideBaseboard(null);
                }
                else {
                    var baseboard = wall.getRightSideBaseboard();
                    if (rightSideBaseboardVisible === true || baseboard != null) {
                        var baseboardThickness = baseboard != null ? baseboard.getThickness() : newWallBaseboardThickness;
                        var baseboardHeight = baseboard != null ? baseboard.getHeight() : newWallBaseboardHeight;
                        var baseboardColor = baseboard != null ? baseboard.getColor() : null;
                        var baseboardTexture = baseboard != null ? baseboard.getTexture() : null;
                        if (rightSideBaseboardPaint != null) {
                            switch ((rightSideBaseboardPaint)) {
                                case BaseboardChoiceController.BaseboardPaint.DEFAULT:
                                    baseboardColor = null;
                                    baseboardTexture = null;
                                    break;
                                case BaseboardChoiceController.BaseboardPaint.COLORED:
                                    if (rightSideBaseboardColor != null) {
                                        baseboardColor = rightSideBaseboardColor;
                                    }
                                    baseboardTexture = null;
                                    break;
                                case BaseboardChoiceController.BaseboardPaint.TEXTURED:
                                    baseboardColor = null;
                                    if (rightSideBaseboardTexture != null) {
                                        baseboardTexture = rightSideBaseboardTexture;
                                    }
                                    break;
                            }
                        }
                        wall.setRightSideBaseboard(Baseboard.getInstance(rightSideBaseboardThickness != null ? rightSideBaseboardThickness : baseboardThickness, rightSideBaseboardHeight != null ? rightSideBaseboardHeight : baseboardHeight, baseboardColor, baseboardTexture));
                    }
                }
                if (pattern != null) {
                    wall.setPattern(pattern);
                }
                if (modifiedTopColor) {
                    wall.setTopColor(topColor);
                }
                if (height != null) {
                    wall.setHeight(height);
                    if (heightAtEnd != null) {
                        if (heightAtEnd === height) {
                            wall.setHeightAtEnd(null);
                        }
                        else {
                            wall.setHeightAtEnd(heightAtEnd);
                        }
                    }
                }
                if (thickness != null) {
                    wall.setThickness(/* floatValue */ thickness);
                }
                if (arcExtent != null) {
                    if ( /* floatValue */arcExtent === 0) {
                        wall.setArcExtent(null);
                    }
                    else {
                        wall.setArcExtent(arcExtent);
                    }
                }
            }
        }
    };
    /**
     * Restores wall properties from the values stored in <code>modifiedWalls</code>.
     * @param {com.eteks.sweethome3d.viewcontroller.WallController.ModifiedWall[]} modifiedWalls
     * @private
     */
    WallController.undoModifyWalls = function (modifiedWalls) {
        for (var index = 0; index < modifiedWalls.length; index++) {
            var modifiedWall = modifiedWalls[index];
            {
                var wall = modifiedWall.getWall();
                WallController.moveWallPoints(wall, modifiedWall.getXStart(), modifiedWall.getYStart(), modifiedWall.getXEnd(), modifiedWall.getYEnd());
                wall.setLeftSideColor(modifiedWall.getLeftSideColor());
                wall.setLeftSideTexture(modifiedWall.getLeftSideTexture());
                wall.setLeftSideShininess(modifiedWall.getLeftSideShininess());
                wall.setLeftSideBaseboard(modifiedWall.getLeftSideBaseboard());
                wall.setRightSideColor(modifiedWall.getRightSideColor());
                wall.setRightSideTexture(modifiedWall.getRightSideTexture());
                wall.setRightSideShininess(modifiedWall.getRightSideShininess());
                wall.setRightSideBaseboard(modifiedWall.getRightSideBaseboard());
                wall.setPattern(modifiedWall.getPattern());
                wall.setTopColor(modifiedWall.getTopColor());
                wall.setHeight(modifiedWall.getHeight());
                wall.setHeightAtEnd(modifiedWall.getHeightAtEnd());
                wall.setThickness(modifiedWall.getThickness());
                wall.setArcExtent(modifiedWall.getArcExtent());
            }
        }
    };
    WallController.moveWallPoints = function (wall, xStart, yStart, xEnd, yEnd) {
        var wallAtStart = wall.getWallAtStart();
        if (xStart != null) {
            wall.setXStart(xStart);
            if (wallAtStart != null) {
                if (wallAtStart.getWallAtStart() === wall) {
                    wallAtStart.setXStart(xStart);
                }
                else if (wallAtStart.getWallAtEnd() === wall) {
                    wallAtStart.setXEnd(xStart);
                }
            }
        }
        if (yStart != null) {
            wall.setYStart(yStart);
            if (wallAtStart != null) {
                if (wallAtStart.getWallAtStart() === wall) {
                    wallAtStart.setYStart(yStart);
                }
                else if (wallAtStart.getWallAtEnd() === wall) {
                    wallAtStart.setYEnd(yStart);
                }
            }
        }
        var wallAtEnd = wall.getWallAtEnd();
        if (xEnd != null) {
            wall.setXEnd(xEnd);
            if (wallAtEnd != null) {
                if (wallAtEnd.getWallAtStart() === wall) {
                    wallAtEnd.setXStart(xEnd);
                }
                else if (wallAtEnd.getWallAtEnd() === wall) {
                    wallAtEnd.setXEnd(xEnd);
                }
            }
        }
        if (yEnd != null) {
            wall.setYEnd(yEnd);
            if (wallAtEnd != null) {
                if (wallAtEnd.getWallAtStart() === wall) {
                    wallAtEnd.setYStart(yEnd);
                }
                else if (wallAtEnd.getWallAtEnd() === wall) {
                    wallAtEnd.setYEnd(yEnd);
                }
            }
        }
    };
    return WallController;
}());
WallController["__class"] = "com.eteks.sweethome3d.viewcontroller.WallController";
WallController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (WallController) {
    /**
     * The possible values for {@linkplain #getShape() wall shape}.
     * @enum
     * @property {WallController.WallShape} RECTANGULAR_WALL
     * @property {WallController.WallShape} SLOPING_WALL
     * @class
     */
    var WallShape;
    (function (WallShape) {
        WallShape[WallShape["RECTANGULAR_WALL"] = 0] = "RECTANGULAR_WALL";
        WallShape[WallShape["SLOPING_WALL"] = 1] = "SLOPING_WALL";
    })(WallShape = WallController.WallShape || (WallController.WallShape = {}));
    /**
     * The possible values for {@linkplain #getLeftSidePaint() wall paint type}.
     * @enum
     * @property {WallController.WallPaint} DEFAULT
     * @property {WallController.WallPaint} COLORED
     * @property {WallController.WallPaint} TEXTURED
     * @class
     */
    var WallPaint;
    (function (WallPaint) {
        WallPaint[WallPaint["DEFAULT"] = 0] = "DEFAULT";
        WallPaint[WallPaint["COLORED"] = 1] = "COLORED";
        WallPaint[WallPaint["TEXTURED"] = 2] = "TEXTURED";
    })(WallPaint = WallController.WallPaint || (WallController.WallPaint = {}));
    /**
     * Undoable edit for walls modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var WallsModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(WallsModificationUndoableEdit, _super);
        function WallsModificationUndoableEdit(home, preferences, oldSelection, modifiedWalls, newWallBaseboardThickness, newWallBaseboardHeight, xStart, yStart, xEnd, yEnd, leftSidePaint, leftSideColor, leftSideTexture, leftSideShininess, leftSideBaseboardVisible, leftSideBaseboardThickness, leftSideBaseboardHeight, leftSideBaseboardPaint, leftSideBaseboardColor, leftSideBaseboardTexture, rightSidePaint, rightSideColor, rightSideTexture, rightSideShininess, rightSideBaseboardVisible, rightSideBaseboardThickness, rightSideBaseboardHeight, rightSideBaseboardPaint, rightSideBaseboardColor, rightSideBaseboardTexture, pattern, modifiedTopColor, topColor, height, heightAtEnd, thickness, arcExtent) {
            var _this = _super.call(this, preferences, WallController, "undoModifyWallsName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.modifiedWalls === undefined) {
                _this.modifiedWalls = null;
            }
            if (_this.newWallBaseboardThickness === undefined) {
                _this.newWallBaseboardThickness = 0;
            }
            if (_this.newWallBaseboardHeight === undefined) {
                _this.newWallBaseboardHeight = 0;
            }
            if (_this.xStart === undefined) {
                _this.xStart = null;
            }
            if (_this.yStart === undefined) {
                _this.yStart = null;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = null;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = null;
            }
            if (_this.leftSidePaint === undefined) {
                _this.leftSidePaint = null;
            }
            if (_this.leftSideColor === undefined) {
                _this.leftSideColor = null;
            }
            if (_this.leftSideTexture === undefined) {
                _this.leftSideTexture = null;
            }
            if (_this.leftSideShininess === undefined) {
                _this.leftSideShininess = null;
            }
            if (_this.leftSideBaseboardVisible === undefined) {
                _this.leftSideBaseboardVisible = null;
            }
            if (_this.leftSideBaseboardThickness === undefined) {
                _this.leftSideBaseboardThickness = null;
            }
            if (_this.leftSideBaseboardHeight === undefined) {
                _this.leftSideBaseboardHeight = null;
            }
            if (_this.leftSideBaseboardPaint === undefined) {
                _this.leftSideBaseboardPaint = null;
            }
            if (_this.leftSideBaseboardColor === undefined) {
                _this.leftSideBaseboardColor = null;
            }
            if (_this.leftSideBaseboardTexture === undefined) {
                _this.leftSideBaseboardTexture = null;
            }
            if (_this.rightSidePaint === undefined) {
                _this.rightSidePaint = null;
            }
            if (_this.rightSideColor === undefined) {
                _this.rightSideColor = null;
            }
            if (_this.rightSideTexture === undefined) {
                _this.rightSideTexture = null;
            }
            if (_this.rightSideShininess === undefined) {
                _this.rightSideShininess = null;
            }
            if (_this.rightSideBaseboardVisible === undefined) {
                _this.rightSideBaseboardVisible = null;
            }
            if (_this.rightSideBaseboardThickness === undefined) {
                _this.rightSideBaseboardThickness = null;
            }
            if (_this.rightSideBaseboardHeight === undefined) {
                _this.rightSideBaseboardHeight = null;
            }
            if (_this.rightSideBaseboardPaint === undefined) {
                _this.rightSideBaseboardPaint = null;
            }
            if (_this.rightSideBaseboardColor === undefined) {
                _this.rightSideBaseboardColor = null;
            }
            if (_this.rightSideBaseboardTexture === undefined) {
                _this.rightSideBaseboardTexture = null;
            }
            if (_this.pattern === undefined) {
                _this.pattern = null;
            }
            if (_this.modifiedTopColor === undefined) {
                _this.modifiedTopColor = false;
            }
            if (_this.topColor === undefined) {
                _this.topColor = null;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.heightAtEnd === undefined) {
                _this.heightAtEnd = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = null;
            }
            if (_this.arcExtent === undefined) {
                _this.arcExtent = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.modifiedWalls = modifiedWalls;
            _this.newWallBaseboardThickness = newWallBaseboardThickness;
            _this.newWallBaseboardHeight = newWallBaseboardHeight;
            _this.xStart = xStart;
            _this.yStart = yStart;
            _this.xEnd = xEnd;
            _this.yEnd = yEnd;
            _this.leftSidePaint = leftSidePaint;
            _this.leftSideColor = leftSideColor;
            _this.leftSideShininess = leftSideShininess;
            _this.leftSideBaseboardVisible = leftSideBaseboardVisible;
            _this.leftSideBaseboardThickness = leftSideBaseboardThickness;
            _this.leftSideBaseboardHeight = leftSideBaseboardHeight;
            _this.leftSideBaseboardPaint = leftSideBaseboardPaint;
            _this.leftSideBaseboardColor = leftSideBaseboardColor;
            _this.leftSideBaseboardTexture = leftSideBaseboardTexture;
            _this.rightSidePaint = rightSidePaint;
            _this.rightSideColor = rightSideColor;
            _this.rightSideTexture = rightSideTexture;
            _this.leftSideTexture = leftSideTexture;
            _this.rightSideShininess = rightSideShininess;
            _this.rightSideBaseboardVisible = rightSideBaseboardVisible;
            _this.rightSideBaseboardThickness = rightSideBaseboardThickness;
            _this.rightSideBaseboardHeight = rightSideBaseboardHeight;
            _this.rightSideBaseboardPaint = rightSideBaseboardPaint;
            _this.rightSideBaseboardColor = rightSideBaseboardColor;
            _this.rightSideBaseboardTexture = rightSideBaseboardTexture;
            _this.pattern = pattern;
            _this.modifiedTopColor = modifiedTopColor;
            _this.topColor = topColor;
            _this.height = height;
            _this.heightAtEnd = heightAtEnd;
            _this.thickness = thickness;
            _this.arcExtent = arcExtent;
            return _this;
        }
        /**
         *
         */
        WallsModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            WallController.undoModifyWalls(this.modifiedWalls);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        WallsModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            WallController.doModifyWalls(this.modifiedWalls, this.newWallBaseboardThickness, this.newWallBaseboardHeight, this.xStart, this.yStart, this.xEnd, this.yEnd, this.leftSidePaint, this.leftSideColor, this.leftSideTexture, this.leftSideShininess, this.leftSideBaseboardVisible, this.leftSideBaseboardThickness, this.leftSideBaseboardHeight, this.leftSideBaseboardPaint, this.leftSideBaseboardColor, this.leftSideBaseboardTexture, this.rightSidePaint, this.rightSideColor, this.rightSideTexture, this.rightSideShininess, this.rightSideBaseboardVisible, this.rightSideBaseboardThickness, this.rightSideBaseboardHeight, this.rightSideBaseboardPaint, this.rightSideBaseboardColor, this.rightSideBaseboardTexture, this.pattern, this.modifiedTopColor, this.topColor, this.height, this.heightAtEnd, this.thickness, this.arcExtent);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        return WallsModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    WallController.WallsModificationUndoableEdit = WallsModificationUndoableEdit;
    WallsModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.WallController.WallsModificationUndoableEdit";
    WallsModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the current properties values of a modified wall.
     * @param {Wall} wall
     * @class
     */
    var ModifiedWall = /** @class */ (function () {
        function ModifiedWall(wall) {
            if (this.wall === undefined) {
                this.wall = null;
            }
            if (this.xStart === undefined) {
                this.xStart = 0;
            }
            if (this.yStart === undefined) {
                this.yStart = 0;
            }
            if (this.xEnd === undefined) {
                this.xEnd = 0;
            }
            if (this.yEnd === undefined) {
                this.yEnd = 0;
            }
            if (this.leftSideColor === undefined) {
                this.leftSideColor = null;
            }
            if (this.leftSideTexture === undefined) {
                this.leftSideTexture = null;
            }
            if (this.leftSideShininess === undefined) {
                this.leftSideShininess = 0;
            }
            if (this.leftSideBaseboard === undefined) {
                this.leftSideBaseboard = null;
            }
            if (this.rightSideColor === undefined) {
                this.rightSideColor = null;
            }
            if (this.rightSideTexture === undefined) {
                this.rightSideTexture = null;
            }
            if (this.rightSideShininess === undefined) {
                this.rightSideShininess = 0;
            }
            if (this.rightSideBaseboard === undefined) {
                this.rightSideBaseboard = null;
            }
            if (this.pattern === undefined) {
                this.pattern = null;
            }
            if (this.topColor === undefined) {
                this.topColor = null;
            }
            if (this.height === undefined) {
                this.height = null;
            }
            if (this.heightAtEnd === undefined) {
                this.heightAtEnd = null;
            }
            if (this.thickness === undefined) {
                this.thickness = 0;
            }
            if (this.arcExtent === undefined) {
                this.arcExtent = null;
            }
            this.wall = wall;
            this.xStart = wall.getXStart();
            this.yStart = wall.getYStart();
            this.xEnd = wall.getXEnd();
            this.yEnd = wall.getYEnd();
            this.leftSideColor = wall.getLeftSideColor();
            this.leftSideTexture = wall.getLeftSideTexture();
            this.leftSideShininess = wall.getLeftSideShininess();
            this.leftSideBaseboard = wall.getLeftSideBaseboard();
            this.rightSideColor = wall.getRightSideColor();
            this.rightSideTexture = wall.getRightSideTexture();
            this.rightSideShininess = wall.getRightSideShininess();
            this.rightSideBaseboard = wall.getRightSideBaseboard();
            this.pattern = wall.getPattern();
            this.topColor = wall.getTopColor();
            this.height = wall.getHeight();
            this.heightAtEnd = wall.getHeightAtEnd();
            this.thickness = wall.getThickness();
            this.arcExtent = wall.getArcExtent();
        }
        ModifiedWall.prototype.getWall = function () {
            return this.wall;
        };
        ModifiedWall.prototype.getXStart = function () {
            return this.xStart;
        };
        ModifiedWall.prototype.getXEnd = function () {
            return this.xEnd;
        };
        ModifiedWall.prototype.getYStart = function () {
            return this.yStart;
        };
        ModifiedWall.prototype.getYEnd = function () {
            return this.yEnd;
        };
        ModifiedWall.prototype.getHeight = function () {
            return this.height;
        };
        ModifiedWall.prototype.getHeightAtEnd = function () {
            return this.heightAtEnd;
        };
        ModifiedWall.prototype.getLeftSideColor = function () {
            return this.leftSideColor;
        };
        ModifiedWall.prototype.getLeftSideTexture = function () {
            return this.leftSideTexture;
        };
        ModifiedWall.prototype.getLeftSideShininess = function () {
            return this.leftSideShininess;
        };
        ModifiedWall.prototype.getLeftSideBaseboard = function () {
            return this.leftSideBaseboard;
        };
        ModifiedWall.prototype.getRightSideColor = function () {
            return this.rightSideColor;
        };
        ModifiedWall.prototype.getRightSideTexture = function () {
            return this.rightSideTexture;
        };
        ModifiedWall.prototype.getRightSideShininess = function () {
            return this.rightSideShininess;
        };
        ModifiedWall.prototype.getRightSideBaseboard = function () {
            return this.rightSideBaseboard;
        };
        ModifiedWall.prototype.getPattern = function () {
            return this.pattern;
        };
        ModifiedWall.prototype.getTopColor = function () {
            return this.topColor;
        };
        ModifiedWall.prototype.getThickness = function () {
            return this.thickness;
        };
        ModifiedWall.prototype.getArcExtent = function () {
            return this.arcExtent;
        };
        return ModifiedWall;
    }());
    WallController.ModifiedWall = ModifiedWall;
    ModifiedWall["__class"] = "com.eteks.sweethome3d.viewcontroller.WallController.ModifiedWall";
    var WallController$0 = /** @class */ (function () {
        function WallController$0(__parent) {
            this.__parent = __parent;
        }
        WallController$0.prototype.propertyChange = function (ev) {
            this.__parent.setLeftSidePaint(WallController.WallPaint.TEXTURED);
        };
        return WallController$0;
    }());
    WallController.WallController$0 = WallController$0;
    var WallController$1 = /** @class */ (function () {
        function WallController$1(__parent) {
            this.__parent = __parent;
        }
        WallController$1.prototype.propertyChange = function (ev) {
            this.__parent.setRightSidePaint(WallController.WallPaint.TEXTURED);
        };
        return WallController$1;
    }());
    WallController.WallController$1 = WallController$1;
})(WallController || (WallController = {}));
/**
 * Creates the controller of polyline view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var PolylineController = /** @class */ (function () {
    function PolylineController(home, preferences, viewFactory, contentManager, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.polylineView === undefined) {
            this.polylineView = null;
        }
        if (this.thickness === undefined) {
            this.thickness = null;
        }
        if (this.capStyleEditable === undefined) {
            this.capStyleEditable = false;
        }
        if (this.capStyle === undefined) {
            this.capStyle = null;
        }
        if (this.joinStyle === undefined) {
            this.joinStyle = null;
        }
        if (this.joinStyleEditable === undefined) {
            this.joinStyleEditable = false;
        }
        if (this.dashStyle === undefined) {
            this.dashStyle = null;
        }
        if (this.dashPattern === undefined) {
            this.dashPattern = null;
        }
        if (this.dashOffset === undefined) {
            this.dashOffset = null;
        }
        if (this.arrowsStyleEditable === undefined) {
            this.arrowsStyleEditable = false;
        }
        if (this.startArrowStyle === undefined) {
            this.startArrowStyle = null;
        }
        if (this.endArrowStyle === undefined) {
            this.endArrowStyle = null;
        }
        if (this.color === undefined) {
            this.color = null;
        }
        if (this.elevation === undefined) {
            this.elevation = null;
        }
        if (this.elevationEnabled === undefined) {
            this.elevationEnabled = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    PolylineController.prototype.getView = function () {
        if (this.polylineView == null) {
            this.polylineView = this.viewFactory.createPolylineView(this.preferences, this);
        }
        return this.polylineView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    PolylineController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    PolylineController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    PolylineController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from selected polylines in the home edited by this controller.
     */
    PolylineController.prototype.updateProperties = function () {
        var selectedPolylines = Home.getPolylinesSubList(this.home.getSelectedItems());
        if ( /* isEmpty */(selectedPolylines.length == 0)) {
            this.setThickness(null);
            this.capStyleEditable = false;
            this.setCapStyle(null);
            this.joinStyleEditable = false;
            this.setJoinStyle(null);
            this.setDashStyle(null);
            this.dashPattern = null;
            this.setDashOffset(null);
            this.arrowsStyleEditable = false;
            this.setStartArrowStyle(null);
            this.setEndArrowStyle(null);
            this.setColor(null);
            this.elevationEnabled = false;
        }
        else {
            var firstPolyline = selectedPolylines[0];
            var thickness = firstPolyline.getThickness();
            for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                {
                    if (thickness !== /* get */ selectedPolylines[i].getThickness()) {
                        thickness = null;
                        break;
                    }
                }
                ;
            }
            this.setThickness(thickness);
            this.capStyleEditable = false;
            for (var i = 0; i < /* size */ selectedPolylines.length; i++) {
                {
                    if (!selectedPolylines[i].isClosedPath()) {
                        this.capStyleEditable = true;
                        break;
                    }
                }
                ;
            }
            if (this.capStyleEditable) {
                var capStyle = firstPolyline.getCapStyle();
                if (capStyle != null) {
                    for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                        {
                            if (capStyle !== /* get */ selectedPolylines[i].getCapStyle()) {
                                capStyle = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                this.setCapStyle(capStyle);
            }
            else {
                this.setCapStyle(null);
            }
            this.joinStyleEditable = false;
            for (var i = 0; i < /* size */ selectedPolylines.length; i++) {
                {
                    if ( /* get */selectedPolylines[i].getPointCount() > 2) {
                        this.joinStyleEditable = true;
                        break;
                    }
                }
                ;
            }
            if (this.joinStyleEditable) {
                var joinStyle = firstPolyline.getJoinStyle();
                if (joinStyle != null) {
                    for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                        {
                            if (joinStyle !== /* get */ selectedPolylines[i].getJoinStyle()) {
                                joinStyle = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                this.setJoinStyle(joinStyle);
            }
            else {
                this.setJoinStyle(null);
            }
            var dashPattern = firstPolyline.getDashPattern();
            if (dashPattern != null) {
                for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                    {
                        if (!(function (a1, a2) { if (a1 == null && a2 == null)
                            return true; if (a1 == null || a2 == null)
                            return false; if (a1.length != a2.length)
                            return false; for (var i_10 = 0; i_10 < a1.length; i_10++) {
                            if (a1[i_10] != a2[i_10])
                                return false;
                        } return true; })(dashPattern, /* get */ selectedPolylines[i].getDashPattern())) {
                            dashPattern = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setDashPattern(dashPattern);
            if (dashPattern != null) {
                var dashStyle = firstPolyline.getDashStyle();
                if (dashStyle != null) {
                    for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                        {
                            if (dashStyle !== /* get */ selectedPolylines[i].getDashStyle()) {
                                dashStyle = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                if (dashStyle === Polyline.DashStyle.CUSTOMIZED) {
                }
                this.setDashStyle(dashStyle);
            }
            else {
                this.setDashStyle(null);
            }
            var dashOffset = firstPolyline.getDashOffset();
            for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                {
                    if (dashOffset !== /* get */ selectedPolylines[i].getDashOffset()) {
                        dashOffset = null;
                        break;
                    }
                }
                ;
            }
            this.setDashOffset(dashOffset);
            this.arrowsStyleEditable = this.capStyleEditable;
            if (this.arrowsStyleEditable) {
                var startArrowStyle = firstPolyline.getStartArrowStyle();
                if (startArrowStyle != null) {
                    for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                        {
                            if (startArrowStyle !== /* get */ selectedPolylines[i].getStartArrowStyle()) {
                                startArrowStyle = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                this.setStartArrowStyle(startArrowStyle);
                var endArrowStyle = firstPolyline.getEndArrowStyle();
                if (endArrowStyle != null) {
                    for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                        {
                            if (endArrowStyle !== /* get */ selectedPolylines[i].getEndArrowStyle()) {
                                endArrowStyle = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                this.setEndArrowStyle(endArrowStyle);
            }
            else {
                this.setStartArrowStyle(null);
                this.setEndArrowStyle(null);
            }
            var color = firstPolyline.getColor();
            if (color != null) {
                for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                    {
                        if (color !== /* get */ selectedPolylines[i].getColor()) {
                            color = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setColor(color);
            var elevation = firstPolyline.getElevation();
            for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                {
                    if (elevation !== /* get */ selectedPolylines[i].getElevation()) {
                        elevation = null;
                        break;
                    }
                }
                ;
            }
            this.setElevation(elevation);
            var elevationEnabled = firstPolyline.isVisibleIn3D();
            for (var i = 1; i < /* size */ selectedPolylines.length; i++) {
                {
                    if (!(elevationEnabled === /* get */ selectedPolylines[i].isVisibleIn3D())) {
                        elevationEnabled = null;
                        break;
                    }
                }
                ;
            }
            this.elevationEnabled = elevationEnabled;
        }
    };
    /**
     * Sets the edited thickness.
     * @param {number} thickness
     */
    PolylineController.prototype.setThickness = function (thickness) {
        if (thickness !== this.thickness) {
            var oldThickness = this.thickness;
            this.thickness = thickness;
            this.propertyChangeSupport.firePropertyChange(/* name */ "THICKNESS", oldThickness, thickness);
        }
    };
    /**
     * Returns the edited thickness.
     * @return {number}
     */
    PolylineController.prototype.getThickness = function () {
        return this.thickness;
    };
    /**
     * Sets the edited capStyle.
     * @param {Polyline.CapStyle} capStyle
     */
    PolylineController.prototype.setCapStyle = function (capStyle) {
        if (capStyle !== this.capStyle) {
            var oldCapStyle = this.capStyle;
            this.capStyle = capStyle;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CAP_STYLE", oldCapStyle, capStyle);
        }
    };
    /**
     * Returns the edited capStyle.
     * @return {Polyline.CapStyle}
     */
    PolylineController.prototype.getCapStyle = function () {
        return this.capStyle;
    };
    /**
     * Returns <code>true</code> if cap style is editable.
     * @return {boolean}
     */
    PolylineController.prototype.isCapStyleEditable = function () {
        return this.capStyleEditable;
    };
    /**
     * Sets the edited joinStyle.
     * @param {Polyline.JoinStyle} joinStyle
     */
    PolylineController.prototype.setJoinStyle = function (joinStyle) {
        if (joinStyle !== this.joinStyle) {
            var oldJoinStyle = this.joinStyle;
            this.joinStyle = joinStyle;
            this.propertyChangeSupport.firePropertyChange(/* name */ "JOIN_STYLE", oldJoinStyle, joinStyle);
        }
    };
    /**
     * Returns the edited joinStyle.
     * @return {Polyline.JoinStyle}
     */
    PolylineController.prototype.getJoinStyle = function () {
        return this.joinStyle;
    };
    /**
     * Returns <code>true</code> if join style is editable.
     * @return {boolean}
     */
    PolylineController.prototype.isJoinStyleEditable = function () {
        return this.joinStyleEditable;
    };
    /**
     * Sets the edited dash style.
     * @param {Polyline.DashStyle} dashStyle
     */
    PolylineController.prototype.setDashStyle = function (dashStyle) {
        if (dashStyle !== this.dashStyle) {
            var oldDashStyle = this.dashStyle;
            this.dashStyle = dashStyle;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DASH_STYLE", oldDashStyle, dashStyle);
        }
    };
    /**
     * Returns the edited dash style.
     * @return {Polyline.DashStyle}
     */
    PolylineController.prototype.getDashStyle = function () {
        return this.dashStyle;
    };
    /**
     * Sets the edited dash pattern.
     * @param {float[]} dashPattern
     */
    PolylineController.prototype.setDashPattern = function (dashPattern) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(dashPattern, this.dashPattern)) {
            var oldDashPattern = this.dashPattern;
            this.dashPattern = dashPattern;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DASH_PATTERN", oldDashPattern, dashPattern);
        }
    };
    /**
     * Returns the edited dash pattern.
     * @return {float[]}
     */
    PolylineController.prototype.getDashPattern = function () {
        return this.dashPattern;
    };
    /**
     * Sets the edited dash offset.
     * @param {number} dashOffset
     */
    PolylineController.prototype.setDashOffset = function (dashOffset) {
        if (dashOffset !== this.dashOffset) {
            var oldDashOffset = this.dashOffset;
            this.dashOffset = dashOffset;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DASH_OFFSET", oldDashOffset, dashOffset);
        }
    };
    /**
     * Returns the edited dash offset.
     * @return {number}
     */
    PolylineController.prototype.getDashOffset = function () {
        return this.dashOffset;
    };
    /**
     * Sets the edited start arrow style.
     * @param {Polyline.ArrowStyle} startArrowStyle
     */
    PolylineController.prototype.setStartArrowStyle = function (startArrowStyle) {
        if (startArrowStyle !== this.startArrowStyle) {
            var oldStartArrowStyle = this.startArrowStyle;
            this.startArrowStyle = startArrowStyle;
            this.propertyChangeSupport.firePropertyChange(/* name */ "START_ARROW_STYLE", oldStartArrowStyle, startArrowStyle);
        }
    };
    /**
     * Returns the edited start arrow style.
     * @return {Polyline.ArrowStyle}
     */
    PolylineController.prototype.getStartArrowStyle = function () {
        return this.startArrowStyle;
    };
    /**
     * Sets the edited end arrow style.
     * @param {Polyline.ArrowStyle} endArrowStyle
     */
    PolylineController.prototype.setEndArrowStyle = function (endArrowStyle) {
        if (endArrowStyle !== this.endArrowStyle) {
            var oldEndArrowStyle = this.endArrowStyle;
            this.endArrowStyle = endArrowStyle;
            this.propertyChangeSupport.firePropertyChange(/* name */ "END_ARROW_STYLE", oldEndArrowStyle, endArrowStyle);
        }
    };
    /**
     * Returns the edited end arrow style.
     * @return {Polyline.ArrowStyle}
     */
    PolylineController.prototype.getEndArrowStyle = function () {
        return this.endArrowStyle;
    };
    /**
     * Returns <code>true</code> if arrows style is editable.
     * @return {boolean}
     */
    PolylineController.prototype.isArrowsStyleEditable = function () {
        return this.arrowsStyleEditable;
    };
    /**
     * Sets the edited color.
     * @param {number} color
     */
    PolylineController.prototype.setColor = function (color) {
        if (color !== this.color) {
            var oldColor = this.color;
            this.color = color;
            this.propertyChangeSupport.firePropertyChange(/* name */ "COLOR", oldColor, color);
        }
    };
    /**
     * Returns the edited color.
     * @return {number}
     */
    PolylineController.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets the edited elevation.
     * @param {number} elevation
     */
    PolylineController.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
        this.elevationEnabled = elevation != null;
    };
    /**
     * Returns the edited elevation.
     * @return {number}
     */
    PolylineController.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Returns <code>Boolean.TRUE</code> if all edited polylines are viewed in 3D,
     * or <code>Boolean.FALSE</code> if no polyline is viewed in 3D.
     * @return {boolean}
     */
    PolylineController.prototype.isElevationEnabled = function () {
        return this.elevationEnabled;
    };
    /**
     * Controls the modification of selected polylines in edited home.
     */
    PolylineController.prototype.modifyPolylines = function () {
        var oldSelection = this.home.getSelectedItems();
        var selectedPolylines = Home.getPolylinesSubList(oldSelection);
        if (!(selectedPolylines.length == 0)) {
            var thickness = this.getThickness();
            var capStyle = this.getCapStyle();
            var joinStyle = this.getJoinStyle();
            var dashStyle = this.getDashStyle();
            var dashPattern = this.getDashPattern();
            var dashOffset = this.getDashOffset();
            var startArrowStyle = this.getStartArrowStyle();
            var endArrowStyle = this.getEndArrowStyle();
            var color = this.getColor();
            var elevation = this.getElevation();
            var elevationEnabled = this.isElevationEnabled();
            var modifiedPolylines = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ selectedPolylines.length);
            for (var i = 0; i < modifiedPolylines.length; i++) {
                {
                    modifiedPolylines[i] = new PolylineController.ModifiedPolyline(/* get */ selectedPolylines[i]);
                }
                ;
            }
            PolylineController.doModifyPolylines(modifiedPolylines, thickness, capStyle, joinStyle, dashStyle, dashPattern, dashOffset, startArrowStyle, endArrowStyle, color, elevation, elevationEnabled);
            if (this.undoSupport != null) {
                var undoableEdit = new PolylineController.PolylinesModificationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), modifiedPolylines, thickness, capStyle, joinStyle, dashStyle, dashPattern, dashOffset, startArrowStyle, endArrowStyle, color, elevation, elevationEnabled);
                this.undoSupport.postEdit(undoableEdit);
            }
        }
    };
    /**
     * Modifies polylines properties with the values in parameter.
     * @param {com.eteks.sweethome3d.viewcontroller.PolylineController.ModifiedPolyline[]} modifiedPolylines
     * @param {number} thickness
     * @param {Polyline.CapStyle} capStyle
     * @param {Polyline.JoinStyle} joinStyle
     * @param {Polyline.DashStyle} dashStyle
     * @param {float[]} dashPattern
     * @param {number} dashOffset
     * @param {Polyline.ArrowStyle} startArrowStyle
     * @param {Polyline.ArrowStyle} endArrowStyle
     * @param {number} color
     * @param {number} elevation
     * @param {boolean} elevationEnabled
     * @private
     */
    PolylineController.doModifyPolylines = function (modifiedPolylines, thickness, capStyle, joinStyle, dashStyle, dashPattern, dashOffset, startArrowStyle, endArrowStyle, color, elevation, elevationEnabled) {
        for (var index = 0; index < modifiedPolylines.length; index++) {
            var modifiedPolyline = modifiedPolylines[index];
            {
                var polyline = modifiedPolyline.getPolyline();
                if (thickness != null) {
                    polyline.setThickness(thickness);
                }
                if (capStyle != null) {
                    polyline.setCapStyle(capStyle);
                }
                if (joinStyle != null) {
                    polyline.setJoinStyle(joinStyle);
                }
                if (dashStyle != null) {
                    polyline.setDashStyle(dashStyle);
                }
                if (dashStyle === Polyline.DashStyle.CUSTOMIZED && dashPattern != null) {
                    polyline.setDashPattern(dashPattern);
                }
                if (dashOffset != null) {
                    polyline.setDashOffset(polyline.getDashStyle() !== Polyline.DashStyle.SOLID ? dashOffset : 0);
                }
                if (startArrowStyle != null) {
                    polyline.setStartArrowStyle(startArrowStyle);
                }
                if (endArrowStyle != null) {
                    polyline.setEndArrowStyle(endArrowStyle);
                }
                if (color != null) {
                    polyline.setColor(color);
                }
                if (elevationEnabled != null) {
                    if (false === elevationEnabled) {
                        polyline.setVisibleIn3D(false);
                    }
                    else if (elevation != null) {
                        polyline.setVisibleIn3D(true);
                        polyline.setElevation(elevation);
                    }
                }
            }
        }
    };
    /**
     * Restores polyline properties from the values stored in <code>modifiedPolylines</code>.
     * @param {com.eteks.sweethome3d.viewcontroller.PolylineController.ModifiedPolyline[]} modifiedPolylines
     * @private
     */
    PolylineController.undoModifyPolylines = function (modifiedPolylines) {
        for (var index = 0; index < modifiedPolylines.length; index++) {
            var modifiedPolyline = modifiedPolylines[index];
            {
                modifiedPolyline.reset();
            }
        }
    };
    return PolylineController;
}());
PolylineController["__class"] = "com.eteks.sweethome3d.viewcontroller.PolylineController";
PolylineController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (PolylineController) {
    /**
     * Undoable edit for polylines modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var PolylinesModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(PolylinesModificationUndoableEdit, _super);
        function PolylinesModificationUndoableEdit(home, preferences, oldSelection, modifiedPolylines, thickness, capStyle, joinStyle, dashStyle, dashPattern, dashOffset, startArrowStyle, endArrowStyle, color, elevation, elevationEnabled) {
            var _this = _super.call(this, preferences, PolylineController, "undoModifyPolylinesName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.modifiedPolylines === undefined) {
                _this.modifiedPolylines = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = null;
            }
            if (_this.capStyle === undefined) {
                _this.capStyle = null;
            }
            if (_this.joinStyle === undefined) {
                _this.joinStyle = null;
            }
            if (_this.dashStyle === undefined) {
                _this.dashStyle = null;
            }
            if (_this.dashPattern === undefined) {
                _this.dashPattern = null;
            }
            if (_this.dashOffset === undefined) {
                _this.dashOffset = null;
            }
            if (_this.startArrowStyle === undefined) {
                _this.startArrowStyle = null;
            }
            if (_this.endArrowStyle === undefined) {
                _this.endArrowStyle = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.elevationEnabled === undefined) {
                _this.elevationEnabled = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.modifiedPolylines = modifiedPolylines;
            _this.thickness = thickness;
            _this.capStyle = capStyle;
            _this.joinStyle = joinStyle;
            _this.dashStyle = dashStyle;
            _this.dashPattern = dashPattern;
            _this.dashOffset = dashOffset;
            _this.startArrowStyle = startArrowStyle;
            _this.endArrowStyle = endArrowStyle;
            _this.color = color;
            _this.elevation = elevation;
            _this.elevationEnabled = elevationEnabled;
            return _this;
        }
        /**
         *
         */
        PolylinesModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            PolylineController.undoModifyPolylines(this.modifiedPolylines);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        PolylinesModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            PolylineController.doModifyPolylines(this.modifiedPolylines, this.thickness, this.capStyle, this.joinStyle, this.dashStyle, this.dashPattern, this.dashOffset, this.startArrowStyle, this.endArrowStyle, this.color, this.elevation, this.elevationEnabled);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        return PolylinesModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PolylineController.PolylinesModificationUndoableEdit = PolylinesModificationUndoableEdit;
    PolylinesModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PolylineController.PolylinesModificationUndoableEdit";
    PolylinesModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the current properties values of a modified polyline.
     * @param {Polyline} polyline
     * @class
     */
    var ModifiedPolyline = /** @class */ (function () {
        function ModifiedPolyline(polyline) {
            if (this.polyline === undefined) {
                this.polyline = null;
            }
            if (this.thickness === undefined) {
                this.thickness = 0;
            }
            if (this.capStyle === undefined) {
                this.capStyle = null;
            }
            if (this.joinStyle === undefined) {
                this.joinStyle = null;
            }
            if (this.dashPattern === undefined) {
                this.dashPattern = null;
            }
            if (this.dashOffset === undefined) {
                this.dashOffset = null;
            }
            if (this.startArrowStyle === undefined) {
                this.startArrowStyle = null;
            }
            if (this.endArrowStyle === undefined) {
                this.endArrowStyle = null;
            }
            if (this.color === undefined) {
                this.color = 0;
            }
            if (this.visibleIn3D === undefined) {
                this.visibleIn3D = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            this.polyline = polyline;
            this.thickness = polyline.getThickness();
            this.capStyle = polyline.getCapStyle();
            this.joinStyle = polyline.getJoinStyle();
            this.dashPattern = polyline.getDashPattern();
            this.dashOffset = polyline.getDashOffset();
            this.startArrowStyle = polyline.getStartArrowStyle();
            this.endArrowStyle = polyline.getEndArrowStyle();
            this.color = polyline.getColor();
            this.visibleIn3D = polyline.isVisibleIn3D();
            this.elevation = polyline.getElevation();
        }
        ModifiedPolyline.prototype.getPolyline = function () {
            return this.polyline;
        };
        ModifiedPolyline.prototype.reset = function () {
            this.polyline.setThickness(this.thickness);
            this.polyline.setCapStyle(this.capStyle);
            this.polyline.setJoinStyle(this.joinStyle);
            this.polyline.setDashPattern(this.dashPattern);
            this.polyline.setDashOffset(this.dashOffset);
            this.polyline.setStartArrowStyle(this.startArrowStyle);
            this.polyline.setEndArrowStyle(this.endArrowStyle);
            this.polyline.setColor(this.color);
            this.polyline.setVisibleIn3D(this.visibleIn3D);
            this.polyline.setElevation(this.elevation);
        };
        return ModifiedPolyline;
    }());
    PolylineController.ModifiedPolyline = ModifiedPolyline;
    ModifiedPolyline["__class"] = "com.eteks.sweethome3d.viewcontroller.PolylineController.ModifiedPolyline";
})(PolylineController || (PolylineController = {}));
/**
 * Creates the controller of room view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var RoomController = /** @class */ (function () {
    function RoomController(home, preferences, viewFactory, contentManager, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.floorTextureController === undefined) {
            this.floorTextureController = null;
        }
        if (this.ceilingTextureController === undefined) {
            this.ceilingTextureController = null;
        }
        if (this.wallSidesTextureController === undefined) {
            this.wallSidesTextureController = null;
        }
        if (this.wallSidesBaseboardController === undefined) {
            this.wallSidesBaseboardController = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.roomView === undefined) {
            this.roomView = null;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (this.areaVisible === undefined) {
            this.areaVisible = null;
        }
        if (this.floorVisible === undefined) {
            this.floorVisible = null;
        }
        if (this.floorColor === undefined) {
            this.floorColor = null;
        }
        if (this.floorPaint === undefined) {
            this.floorPaint = null;
        }
        if (this.floorShininess === undefined) {
            this.floorShininess = null;
        }
        if (this.ceilingVisible === undefined) {
            this.ceilingVisible = null;
        }
        if (this.ceilingColor === undefined) {
            this.ceilingColor = null;
        }
        if (this.ceilingPaint === undefined) {
            this.ceilingPaint = null;
        }
        if (this.ceilingShininess === undefined) {
            this.ceilingShininess = null;
        }
        if (this.wallSidesEditable === undefined) {
            this.wallSidesEditable = false;
        }
        if (this.splitSurroundingWalls === undefined) {
            this.splitSurroundingWalls = false;
        }
        if (this.splitSurroundingWallsNeeded === undefined) {
            this.splitSurroundingWallsNeeded = false;
        }
        if (this.wallSidesColor === undefined) {
            this.wallSidesColor = null;
        }
        if (this.wallSidesPaint === undefined) {
            this.wallSidesPaint = null;
        }
        if (this.wallSidesShininess === undefined) {
            this.wallSidesShininess = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the texture controller of the room floor.
     * @return {TextureChoiceController}
     */
    RoomController.prototype.getFloorTextureController = function () {
        if (this.floorTextureController == null) {
            this.floorTextureController = new TextureChoiceController(this.preferences.getLocalizedString(RoomController, "floorTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.floorTextureController.addPropertyChangeListener("TEXTURE", new RoomController.RoomController$0(this));
        }
        return this.floorTextureController;
    };
    /**
     * Returns the texture controller of the room ceiling.
     * @return {TextureChoiceController}
     */
    RoomController.prototype.getCeilingTextureController = function () {
        if (this.ceilingTextureController == null) {
            this.ceilingTextureController = new TextureChoiceController(this.preferences.getLocalizedString(RoomController, "ceilingTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.ceilingTextureController.addPropertyChangeListener("TEXTURE", new RoomController.RoomController$1(this));
        }
        return this.ceilingTextureController;
    };
    /**
     * Returns the texture controller of the room wall sides.
     * @return {TextureChoiceController}
     */
    RoomController.prototype.getWallSidesTextureController = function () {
        if (this.wallSidesTextureController == null) {
            this.wallSidesTextureController = new TextureChoiceController(this.preferences.getLocalizedString(RoomController, "wallSidesTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.wallSidesTextureController.addPropertyChangeListener("TEXTURE", new RoomController.RoomController$2(this));
        }
        return this.wallSidesTextureController;
    };
    /**
     * Returns the controller of the wall sides baseboard.
     * @return {BaseboardChoiceController}
     */
    RoomController.prototype.getWallSidesBaseboardController = function () {
        if (this.wallSidesBaseboardController == null) {
            this.wallSidesBaseboardController = new BaseboardChoiceController(this.preferences, this.viewFactory, this.contentManager);
        }
        return this.wallSidesBaseboardController;
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    RoomController.prototype.getView = function () {
        if (this.roomView == null) {
            this.roomView = this.viewFactory.createRoomView(this.preferences, this);
        }
        return this.roomView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    RoomController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    RoomController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    RoomController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Returns <code>true</code> if the given <code>property</code> is editable.
     * Depending on whether a property is editable or not, the view associated to this controller
     * may render it differently.
     * The implementation of this method always returns <code>true</code> except for <code>WALL</code> properties.
     * @param {string} property
     * @return {boolean}
     */
    RoomController.prototype.isPropertyEditable = function (property) {
        switch ((property)) {
            case "SPLIT_SURROUNDING_WALLS":
            case "WALL_SIDES_COLOR":
            case "WALL_SIDES_PAINT":
            case "WALL_SIDES_SHININESS":
            case "WALL_SIDES_BASEBOARD":
                return this.wallSidesEditable;
            default:
                return true;
        }
    };
    /**
     * Updates edited properties from selected rooms in the home edited by this controller.
     */
    RoomController.prototype.updateProperties = function () {
        var selectedRooms = Home.getRoomsSubList(this.home.getSelectedItems());
        if ( /* isEmpty */(selectedRooms.length == 0)) {
            this.setAreaVisible(null);
            this.setFloorColor(null);
            this.getFloorTextureController().setTexture(null);
            this.setFloorPaint(null);
            this.setFloorShininess(null);
            this.setCeilingColor(null);
            this.getCeilingTextureController().setTexture(null);
            this.setCeilingPaint(null);
            this.setCeilingShininess(null);
        }
        else {
            var firstRoom = selectedRooms[0];
            var name_4 = firstRoom.getName();
            if (name_4 != null) {
                for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                    {
                        if (!(name_4 === /* get */ selectedRooms[i].getName())) {
                            name_4 = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setName(name_4);
            var areaVisible = firstRoom.isAreaVisible();
            for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                {
                    if (areaVisible !== /* get */ selectedRooms[i].isAreaVisible()) {
                        areaVisible = null;
                        break;
                    }
                }
                ;
            }
            this.setAreaVisible(areaVisible);
            var floorVisible = firstRoom.isFloorVisible();
            for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                {
                    if (floorVisible !== /* get */ selectedRooms[i].isFloorVisible()) {
                        floorVisible = null;
                        break;
                    }
                }
                ;
            }
            this.setFloorVisible(floorVisible);
            var floorColor = firstRoom.getFloorColor();
            if (floorColor != null) {
                for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                    {
                        if (!(floorColor === /* get */ selectedRooms[i].getFloorColor())) {
                            floorColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setFloorColor(floorColor);
            var floorTexture = firstRoom.getFloorTexture();
            if (floorTexture != null) {
                for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                    {
                        if (!floorTexture.equals(/* get */ selectedRooms[i].getFloorTexture())) {
                            floorTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getFloorTextureController().setTexture(floorTexture);
            var defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedRooms.length; i++) {
                {
                    var room = selectedRooms[i];
                    if (room.getFloorColor() != null || room.getFloorTexture() != null) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (floorColor != null) {
                this.setFloorPaint(RoomController.RoomPaint.COLORED);
            }
            else if (floorTexture != null) {
                this.setFloorPaint(RoomController.RoomPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.setFloorPaint(RoomController.RoomPaint.DEFAULT);
            }
            else {
                this.setFloorPaint(null);
            }
            var floorShininess = firstRoom.getFloorShininess();
            for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                {
                    if (!(floorShininess === /* get */ selectedRooms[i].getFloorShininess())) {
                        floorShininess = null;
                        break;
                    }
                }
                ;
            }
            this.setFloorShininess(floorShininess);
            var ceilingVisible = firstRoom.isCeilingVisible();
            for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                {
                    if (ceilingVisible !== /* get */ selectedRooms[i].isCeilingVisible()) {
                        ceilingVisible = null;
                        break;
                    }
                }
                ;
            }
            this.setCeilingVisible(ceilingVisible);
            var ceilingColor = firstRoom.getCeilingColor();
            if (ceilingColor != null) {
                for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                    {
                        if (!(ceilingColor === /* get */ selectedRooms[i].getCeilingColor())) {
                            ceilingColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setCeilingColor(ceilingColor);
            var ceilingTexture = firstRoom.getCeilingTexture();
            if (ceilingTexture != null) {
                for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                    {
                        if (!ceilingTexture.equals(/* get */ selectedRooms[i].getCeilingTexture())) {
                            ceilingTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getCeilingTextureController().setTexture(ceilingTexture);
            defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedRooms.length; i++) {
                {
                    var room = selectedRooms[i];
                    if (room.getCeilingColor() != null || room.getCeilingTexture() != null) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (ceilingColor != null) {
                this.setCeilingPaint(RoomController.RoomPaint.COLORED);
            }
            else if (ceilingTexture != null) {
                this.setCeilingPaint(RoomController.RoomPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.setCeilingPaint(RoomController.RoomPaint.DEFAULT);
            }
            else {
                this.setCeilingPaint(null);
            }
            var ceilingShininess = firstRoom.getCeilingShininess();
            for (var i = 1; i < /* size */ selectedRooms.length; i++) {
                {
                    if (!(ceilingShininess === /* get */ selectedRooms[i].getCeilingShininess())) {
                        ceilingShininess = null;
                        break;
                    }
                }
                ;
            }
            this.setCeilingShininess(ceilingShininess);
        }
        var wallSides = this.getRoomsWallSides(selectedRooms, null);
        if ( /* isEmpty */(wallSides.length == 0)) {
            this.wallSidesEditable = this.splitSurroundingWallsNeeded = this.splitSurroundingWalls = false;
            this.setWallSidesColor(null);
            this.setWallSidesPaint(null);
            this.setWallSidesShininess(null);
            this.getWallSidesBaseboardController().setVisible(null);
            this.getWallSidesBaseboardController().setThickness(null);
            this.getWallSidesBaseboardController().setHeight(null);
            this.getWallSidesBaseboardController().setColor(null);
            this.getWallSidesBaseboardController().getTextureController().setTexture(null);
            this.getWallSidesBaseboardController().setPaint(null);
        }
        else {
            this.wallSidesEditable = true;
            this.splitSurroundingWallsNeeded = this.splitWalls(wallSides, null, null, null);
            this.splitSurroundingWalls = false;
            var firstWallSide = wallSides[0];
            var wallSidesColor = firstWallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? firstWallSide.getWall().getLeftSideColor() : firstWallSide.getWall().getRightSideColor();
            if (wallSidesColor != null) {
                for (var i = 1; i < /* size */ wallSides.length; i++) {
                    {
                        var wallSide = wallSides[i];
                        if (!(wallSidesColor === (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideColor() : wallSide.getWall().getRightSideColor()))) {
                            wallSidesColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setWallSidesColor(wallSidesColor);
            var wallSidesTexture = firstWallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? firstWallSide.getWall().getLeftSideTexture() : firstWallSide.getWall().getRightSideTexture();
            if (wallSidesTexture != null) {
                for (var i = 1; i < /* size */ wallSides.length; i++) {
                    {
                        var wallSide = wallSides[i];
                        if (!wallSidesTexture.equals(wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideTexture() : wallSide.getWall().getRightSideTexture())) {
                            wallSidesTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getWallSidesTextureController().setTexture(wallSidesTexture);
            var defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ wallSides.length; i++) {
                {
                    var wallSide = wallSides[i];
                    if ((wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideColor() : wallSide.getWall().getRightSideColor()) != null || (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideTexture() : wallSide.getWall().getRightSideTexture()) != null) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (wallSidesColor != null) {
                this.setWallSidesPaint(RoomController.RoomPaint.COLORED);
            }
            else if (wallSidesTexture != null) {
                this.setWallSidesPaint(RoomController.RoomPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.setWallSidesPaint(RoomController.RoomPaint.DEFAULT);
            }
            else {
                this.setWallSidesPaint(null);
            }
            var wallSidesShininess = firstWallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? firstWallSide.getWall().getLeftSideShininess() : firstWallSide.getWall().getRightSideShininess();
            if (wallSidesShininess != null) {
                for (var i = 1; i < /* size */ wallSides.length; i++) {
                    {
                        var wallSide = wallSides[i];
                        if (!(wallSidesShininess === (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideShininess() : wallSide.getWall().getRightSideShininess()))) {
                            wallSidesShininess = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setWallSidesShininess(wallSidesShininess);
            var firstWallSideBaseboard = firstWallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? firstWallSide.getWall().getLeftSideBaseboard() : firstWallSide.getWall().getRightSideBaseboard();
            var wallSidesBaseboardVisible = firstWallSideBaseboard != null;
            for (var i = 1; i < /* size */ wallSides.length; i++) {
                {
                    var wallSide = wallSides[i];
                    if (wallSidesBaseboardVisible !== (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideBaseboard() != null : wallSide.getWall().getRightSideBaseboard() != null)) {
                        wallSidesBaseboardVisible = null;
                        break;
                    }
                }
                ;
            }
            this.getWallSidesBaseboardController().setVisible(wallSidesBaseboardVisible);
            var wallSidesBaseboardThickness = firstWallSideBaseboard != null ? firstWallSideBaseboard.getThickness() : this.preferences.getNewWallBaseboardThickness();
            for (var i = 1; i < /* size */ wallSides.length; i++) {
                {
                    var wallSide = wallSides[i];
                    var baseboard = wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideBaseboard() : wallSide.getWall().getRightSideBaseboard();
                    if (!(wallSidesBaseboardThickness === (baseboard != null ? baseboard.getThickness() : this.preferences.getNewWallBaseboardThickness()))) {
                        wallSidesBaseboardThickness = null;
                        break;
                    }
                }
                ;
            }
            this.getWallSidesBaseboardController().setThickness(wallSidesBaseboardThickness);
            var wallSidesBaseboardHeight = firstWallSideBaseboard != null ? firstWallSideBaseboard.getHeight() : this.preferences.getNewWallBaseboardHeight();
            for (var i = 1; i < /* size */ wallSides.length; i++) {
                {
                    var wallSide = wallSides[i];
                    var baseboard = wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideBaseboard() : wallSide.getWall().getRightSideBaseboard();
                    if (!(wallSidesBaseboardHeight === (baseboard != null ? baseboard.getHeight() : this.preferences.getNewWallBaseboardHeight()))) {
                        wallSidesBaseboardHeight = null;
                        break;
                    }
                }
                ;
            }
            this.getWallSidesBaseboardController().setHeight(wallSidesBaseboardHeight);
            var maxBaseboardHeight = firstWallSide.getWall().isTrapezoidal() ? Math.max(firstWallSide.getWall().getHeight(), firstWallSide.getWall().getHeightAtEnd()) : firstWallSide.getWall().getHeight();
            for (var i = 1; i < /* size */ wallSides.length; i++) {
                {
                    var wall = wallSides[i].getWall();
                    maxBaseboardHeight = Math.max(maxBaseboardHeight, wall.isTrapezoidal() ? Math.max(wall.getHeight(), wall.getHeightAtEnd()) : wall.getHeight());
                }
                ;
            }
            this.getWallSidesBaseboardController().setMaxHeight(maxBaseboardHeight);
            var wallSidesBaseboardColor = firstWallSideBaseboard != null ? firstWallSideBaseboard.getColor() : null;
            if (wallSidesBaseboardColor != null) {
                for (var i = 1; i < /* size */ wallSides.length; i++) {
                    {
                        var wallSide = wallSides[i];
                        var baseboard = wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideBaseboard() : wallSide.getWall().getRightSideBaseboard();
                        if (baseboard == null || !(wallSidesBaseboardColor === baseboard.getColor())) {
                            wallSidesBaseboardColor = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getWallSidesBaseboardController().setColor(wallSidesBaseboardColor);
            var wallSidesBaseboardTexture = firstWallSideBaseboard != null ? firstWallSideBaseboard.getTexture() : null;
            if (wallSidesBaseboardTexture != null) {
                for (var i = 1; i < /* size */ wallSides.length; i++) {
                    {
                        var wallSide = wallSides[i];
                        var baseboard = wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideBaseboard() : wallSide.getWall().getRightSideBaseboard();
                        if (baseboard == null || !wallSidesBaseboardTexture.equals(baseboard.getTexture())) {
                            wallSidesBaseboardTexture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.getWallSidesBaseboardController().getTextureController().setTexture(wallSidesBaseboardTexture);
            defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ wallSides.length; i++) {
                {
                    var wallSide = wallSides[i];
                    var baseboard = wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wallSide.getWall().getLeftSideBaseboard() : wallSide.getWall().getRightSideBaseboard();
                    if (baseboard != null && (baseboard.getColor() != null || baseboard.getTexture() != null)) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (wallSidesBaseboardColor != null) {
                this.getWallSidesBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.COLORED);
            }
            else if (wallSidesBaseboardTexture != null) {
                this.getWallSidesBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.TEXTURED);
            }
            else if (defaultColorsAndTextures) {
                this.getWallSidesBaseboardController().setPaint(BaseboardChoiceController.BaseboardPaint.DEFAULT);
            }
            else {
                this.getWallSidesBaseboardController().setPaint(null);
            }
        }
    };
    /**
     * Returns the wall sides close to each room of <code>rooms</code>.
     * @param {Room[]} rooms
     * @param {RoomController.WallSide[]} defaultWallSides
     * @return {RoomController.WallSide[]}
     * @private
     */
    RoomController.prototype.getRoomsWallSides = function (rooms, defaultWallSides) {
        var wallSides = ([]);
        for (var index = 0; index < rooms.length; index++) {
            var room = rooms[index];
            {
                var roomArea = new java.awt.geom.Area(this.getPath(room.getPoints(), true));
                if (defaultWallSides != null) {
                    for (var index1 = 0; index1 < defaultWallSides.length; index1++) {
                        var wallSide = defaultWallSides[index1];
                        {
                            if (this.isRoomItersectingWallSide(wallSide.getWall().getPoints$(), wallSide.getSide(), roomArea)) {
                                /* add */ (wallSides.push(wallSide) > 0);
                            }
                        }
                    }
                }
                else {
                    {
                        var array = this.home.getWalls();
                        for (var index1 = 0; index1 < array.length; index1++) {
                            var wall = array[index1];
                            {
                                if ((wall.getLevel() == null || wall.getLevel().isViewable()) && wall.isAtLevel(this.home.getSelectedLevel())) {
                                    var wallPoints = wall.getPoints$();
                                    if (this.isRoomItersectingWallSide(wallPoints, RoomController.WallSide.LEFT_SIDE, roomArea)) {
                                        /* add */ (wallSides.push(new RoomController.WallSide(wall, RoomController.WallSide.LEFT_SIDE)) > 0);
                                    }
                                    if (this.isRoomItersectingWallSide(wallPoints, RoomController.WallSide.RIGHT_SIDE, roomArea)) {
                                        /* add */ (wallSides.push(new RoomController.WallSide(wall, RoomController.WallSide.RIGHT_SIDE)) > 0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return wallSides;
    };
    /**
     * Returns <code>true</code> if the wall points on the given <code>wallSide</code>
     * intersects room area.
     * @param {float[][]} wallPoints
     * @param {number} wallSide
     * @param {java.awt.geom.Area} roomArea
     * @return {boolean}
     * @private
     */
    RoomController.prototype.isRoomItersectingWallSide = function (wallPoints, wallSide, roomArea) {
        var wallSideTestArea = this.getWallSideArea(wallPoints, wallSide);
        var wallSideTestAreaSurface = this.getSurface(wallSideTestArea);
        wallSideTestArea.intersect(roomArea);
        if (!wallSideTestArea.isEmpty()) {
            var wallSideIntersectionSurface = this.getSurface(wallSideTestArea);
            if (wallSideIntersectionSurface > wallSideTestAreaSurface * 0.02) {
                return true;
            }
        }
        return false;
    };
    /**
     * Returns the area of the side of the given <code>wall</code>.
     * @param {float[][]} wallPoints
     * @param {number} wallSide
     * @return {java.awt.geom.Area}
     * @private
     */
    RoomController.prototype.getWallSideArea = function (wallPoints, wallSide) {
        var thickness = 2.0;
        if (wallPoints.length === 4) {
            if (wallSide === RoomController.WallSide.LEFT_SIDE) {
                return new java.awt.geom.Area(this.getPath(new Wall(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], thickness, 0).getPoints$(), true));
            }
            else {
                return new java.awt.geom.Area(this.getPath(new Wall(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], thickness, 0).getPoints$(), true));
            }
        }
        else {
            var wallSidePoints = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })((wallPoints.length / 2 | 0));
            /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
                while (--size >= 0)
                    dstPts[dstOff++] = srcPts[srcOff++];
            }
            else {
                var tmp = srcPts.slice(srcOff, srcOff + size);
                for (var i = 0; i < size; i++)
                    dstPts[dstOff++] = tmp[i];
            } })(wallPoints, wallSide === RoomController.WallSide.LEFT_SIDE ? 0 : wallSidePoints.length, wallSidePoints, 0, wallSidePoints.length);
            var wallSideWalls = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(wallSidePoints.length - 1);
            for (var i = 0; i < wallSideWalls.length; i++) {
                {
                    wallSideWalls[i] = new Wall(wallSidePoints[i][0], wallSidePoints[i][1], wallSidePoints[i + 1][0], wallSidePoints[i + 1][1], thickness, 0);
                    if (i > 0) {
                        wallSideWalls[i].setWallAtStart(wallSideWalls[i - 1]);
                        wallSideWalls[i - 1].setWallAtEnd(wallSideWalls[i]);
                    }
                }
                ;
            }
            wallSidePoints = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(wallPoints.length);
            var wallSideWallPoints = null;
            for (var i = 0; i < wallSideWalls.length; i++) {
                {
                    wallSideWallPoints = wallSideWalls[i].getPoints$();
                    wallSidePoints[i] = wallSideWallPoints[0];
                    wallSidePoints[wallSidePoints.length - i - 1] = wallSideWallPoints[3];
                }
                ;
            }
            wallSidePoints[(wallSidePoints.length / 2 | 0) - 1] = wallSideWallPoints[1];
            wallSidePoints[(wallSidePoints.length / 2 | 0)] = wallSideWallPoints[2];
            return new java.awt.geom.Area(this.getPath(wallSidePoints, true));
        }
    };
    /**
     * Returns the shape matching the coordinates in <code>points</code> array.
     * @param {float[][]} points
     * @param {boolean} closedPath
     * @return {java.awt.geom.GeneralPath}
     * @private
     */
    RoomController.prototype.getPath = function (points, closedPath) {
        var path = new java.awt.geom.GeneralPath();
        path.moveTo(points[0][0], points[0][1]);
        for (var i = 1; i < points.length; i++) {
            {
                path.lineTo(points[i][0], points[i][1]);
            }
            ;
        }
        if (closedPath) {
            path.closePath();
        }
        return path;
    };
    /**
     * Returns the surface of the given <code>area</code>.
     * @param {java.awt.geom.Area} area
     * @return {number}
     * @private
     */
    RoomController.prototype.getSurface = function (area) {
        var surface = 0;
        var currentPathPoints = ([]);
        for (var it = area.getPathIterator(null); !it.isDone();) {
            {
                var roomPoint = [0, 0];
                switch ((it.currentSegment(roomPoint))) {
                    case java.awt.geom.PathIterator.SEG_MOVETO:
                        /* add */ (currentPathPoints.push(roomPoint) > 0);
                        break;
                    case java.awt.geom.PathIterator.SEG_LINETO:
                        /* add */ (currentPathPoints.push(roomPoint) > 0);
                        break;
                    case java.awt.geom.PathIterator.SEG_CLOSE:
                        var pathPoints = currentPathPoints.slice(0);
                        surface += Math.abs(this.getSignedSurface(pathPoints));
                        /* clear */ (currentPathPoints.length = 0);
                        break;
                }
                it.next();
            }
            ;
        }
        return surface;
    };
    RoomController.prototype.getSignedSurface = function (areaPoints) {
        var area = 0;
        for (var i = 1; i < areaPoints.length; i++) {
            {
                area += areaPoints[i][0] * areaPoints[i - 1][1];
                area -= areaPoints[i][1] * areaPoints[i - 1][0];
            }
            ;
        }
        area += areaPoints[0][0] * areaPoints[areaPoints.length - 1][1];
        area -= areaPoints[0][1] * areaPoints[areaPoints.length - 1][0];
        return area / 2;
    };
    /**
     * Sets the edited name.
     * @param {string} name
     */
    RoomController.prototype.setName = function (name) {
        if (name !== this.name) {
            var oldName = this.name;
            this.name = name;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns the edited name.
     * @return {string}
     */
    RoomController.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets whether room area is visible or not.
     * @param {boolean} areaVisible
     */
    RoomController.prototype.setAreaVisible = function (areaVisible) {
        if (areaVisible !== this.areaVisible) {
            var oldAreaVisible = this.areaVisible;
            this.areaVisible = areaVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "AREA_VISIBLE", oldAreaVisible, areaVisible);
        }
    };
    /**
     * Returns whether room area is visible or not.
     * @return {boolean}
     */
    RoomController.prototype.getAreaVisible = function () {
        return this.areaVisible;
    };
    /**
     * Sets whether room floor is visible or not.
     * @param {boolean} floorVisible
     */
    RoomController.prototype.setFloorVisible = function (floorVisible) {
        if (floorVisible !== this.floorVisible) {
            var oldFloorVisible = this.floorVisible;
            this.floorVisible = floorVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FLOOR_VISIBLE", oldFloorVisible, floorVisible);
        }
    };
    /**
     * Returns whether room floor is visible or not.
     * @return {boolean}
     */
    RoomController.prototype.getFloorVisible = function () {
        return this.floorVisible;
    };
    /**
     * Sets the edited color of the floor.
     * @param {number} floorColor
     */
    RoomController.prototype.setFloorColor = function (floorColor) {
        if (floorColor !== this.floorColor) {
            var oldFloorColor = this.floorColor;
            this.floorColor = floorColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FLOOR_COLOR", oldFloorColor, floorColor);
            this.setFloorPaint(RoomController.RoomPaint.COLORED);
        }
    };
    /**
     * Returns the edited color of the floor.
     * @return {number}
     */
    RoomController.prototype.getFloorColor = function () {
        return this.floorColor;
    };
    /**
     * Sets whether the floor is colored, textured or unknown painted.
     * @param {RoomController.RoomPaint} floorPaint
     */
    RoomController.prototype.setFloorPaint = function (floorPaint) {
        if (floorPaint !== this.floorPaint) {
            var oldFloorPaint = this.floorPaint;
            this.floorPaint = floorPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FLOOR_PAINT", oldFloorPaint, floorPaint);
        }
    };
    /**
     * Returns whether the floor is colored, textured or unknown painted.
     * @return {RoomController.RoomPaint}
     */
    RoomController.prototype.getFloorPaint = function () {
        return this.floorPaint;
    };
    /**
     * Sets the edited shininess of the floor.
     * @param {number} floorShininess
     */
    RoomController.prototype.setFloorShininess = function (floorShininess) {
        if (floorShininess !== this.floorShininess) {
            var oldFloorShininess = this.floorShininess;
            this.floorShininess = floorShininess;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FLOOR_SHININESS", oldFloorShininess, floorShininess);
        }
    };
    /**
     * Returns the edited shininess of the floor.
     * @return {number}
     */
    RoomController.prototype.getFloorShininess = function () {
        return this.floorShininess;
    };
    /**
     * Sets whether room ceiling is visible or not.
     * @param {boolean} ceilingCeilingVisible
     */
    RoomController.prototype.setCeilingVisible = function (ceilingCeilingVisible) {
        if (ceilingCeilingVisible !== this.ceilingVisible) {
            var oldCeilingVisible = this.ceilingVisible;
            this.ceilingVisible = ceilingCeilingVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CEILING_VISIBLE", oldCeilingVisible, ceilingCeilingVisible);
        }
    };
    /**
     * Returns whether room ceiling is ceilingCeilingVisible or not.
     * @return {boolean}
     */
    RoomController.prototype.getCeilingVisible = function () {
        return this.ceilingVisible;
    };
    /**
     * Sets the edited color of the ceiling.
     * @param {number} ceilingColor
     */
    RoomController.prototype.setCeilingColor = function (ceilingColor) {
        if (ceilingColor !== this.ceilingColor) {
            var oldCeilingColor = this.ceilingColor;
            this.ceilingColor = ceilingColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CEILING_COLOR", oldCeilingColor, ceilingColor);
            this.setCeilingPaint(RoomController.RoomPaint.COLORED);
        }
    };
    /**
     * Returns the edited color of the ceiling.
     * @return {number}
     */
    RoomController.prototype.getCeilingColor = function () {
        return this.ceilingColor;
    };
    /**
     * Sets whether the ceiling is colored, textured or unknown painted.
     * @param {RoomController.RoomPaint} ceilingPaint
     */
    RoomController.prototype.setCeilingPaint = function (ceilingPaint) {
        if (ceilingPaint !== this.ceilingPaint) {
            var oldCeilingPaint = this.ceilingPaint;
            this.ceilingPaint = ceilingPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CEILING_PAINT", oldCeilingPaint, ceilingPaint);
        }
    };
    /**
     * Returns whether the ceiling is colored, textured or unknown painted.
     * @return {RoomController.RoomPaint}
     */
    RoomController.prototype.getCeilingPaint = function () {
        return this.ceilingPaint;
    };
    /**
     * Sets the edited shininess of the ceiling.
     * @param {number} ceilingShininess
     */
    RoomController.prototype.setCeilingShininess = function (ceilingShininess) {
        if (ceilingShininess !== this.ceilingShininess) {
            var oldCeilingShininess = this.ceilingShininess;
            this.ceilingShininess = ceilingShininess;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CEILING_SHININESS", oldCeilingShininess, ceilingShininess);
        }
    };
    /**
     * Returns the edited shininess of the ceiling.
     * @return {number}
     */
    RoomController.prototype.getCeilingShininess = function () {
        return this.ceilingShininess;
    };
    /**
     * Returns <code>true</code> if walls around the edited rooms should be split.
     * @return {boolean}
     */
    RoomController.prototype.isSplitSurroundingWalls = function () {
        return this.splitSurroundingWalls;
    };
    /**
     * Sets whether walls around the edited rooms should be split or not.
     * @param {boolean} splitSurroundingWalls
     */
    RoomController.prototype.setSplitSurroundingWalls = function (splitSurroundingWalls) {
        if (splitSurroundingWalls !== this.splitSurroundingWalls) {
            this.splitSurroundingWalls = splitSurroundingWalls;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SPLIT_SURROUNDING_WALLS", !splitSurroundingWalls, splitSurroundingWalls);
        }
    };
    /**
     * Returns <code>true</code> if walls around the edited rooms need to be split
     * to avoid changing the color of wall sides that belong to neighborhood rooms.
     * @return {boolean}
     */
    RoomController.prototype.isSplitSurroundingWallsNeeded = function () {
        return this.splitSurroundingWallsNeeded;
    };
    /**
     * Sets the edited color of the wall sides.
     * @param {number} wallSidesColor
     */
    RoomController.prototype.setWallSidesColor = function (wallSidesColor) {
        if (wallSidesColor !== this.wallSidesColor) {
            var oldWallSidesColor = this.wallSidesColor;
            this.wallSidesColor = wallSidesColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WALL_SIDES_COLOR", oldWallSidesColor, wallSidesColor);
            this.setWallSidesPaint(RoomController.RoomPaint.COLORED);
        }
    };
    /**
     * Returns the edited color of the wall sides.
     * @return {number}
     */
    RoomController.prototype.getWallSidesColor = function () {
        return this.wallSidesColor;
    };
    /**
     * Sets whether the wall sides are colored, textured or unknown painted.
     * @param {RoomController.RoomPaint} wallSidesPaint
     */
    RoomController.prototype.setWallSidesPaint = function (wallSidesPaint) {
        if (wallSidesPaint !== this.wallSidesPaint) {
            var oldWallSidesPaint = this.wallSidesPaint;
            this.wallSidesPaint = wallSidesPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WALL_SIDES_PAINT", oldWallSidesPaint, wallSidesPaint);
        }
    };
    /**
     * Returns whether the wall sides are colored, textured or unknown painted.
     * @return {RoomController.RoomPaint}
     */
    RoomController.prototype.getWallSidesPaint = function () {
        return this.wallSidesPaint;
    };
    /**
     * Sets the edited shininess of the wall sides.
     * @param {number} wallSidesShininess
     */
    RoomController.prototype.setWallSidesShininess = function (wallSidesShininess) {
        if (wallSidesShininess !== this.wallSidesShininess) {
            var oldWallSidesShininess = this.wallSidesShininess;
            this.wallSidesShininess = wallSidesShininess;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WALL_SIDES_SHININESS", oldWallSidesShininess, wallSidesShininess);
        }
    };
    /**
     * Returns the edited shininess of the wall sides.
     * @return {number}
     */
    RoomController.prototype.getWallSidesShininess = function () {
        return this.wallSidesShininess;
    };
    /**
     * Controls the modification of selected rooms in edited home.
     */
    RoomController.prototype.modifyRooms = function () {
        var oldSelection = this.home.getSelectedItems();
        var selectedRooms = Home.getRoomsSubList(oldSelection);
        if (!(selectedRooms.length == 0)) {
            var name_5 = this.getName();
            var areaVisible = this.getAreaVisible();
            var floorVisible = this.getFloorVisible();
            var floorPaint = this.getFloorPaint();
            var floorColor = floorPaint === RoomController.RoomPaint.COLORED ? this.getFloorColor() : null;
            var floorTexture = floorPaint === RoomController.RoomPaint.TEXTURED ? this.getFloorTextureController().getTexture() : null;
            var floorShininess = this.getFloorShininess();
            var ceilingVisible = this.getCeilingVisible();
            var ceilingPaint = this.getCeilingPaint();
            var ceilingColor = ceilingPaint === RoomController.RoomPaint.COLORED ? this.getCeilingColor() : null;
            var ceilingTexture = ceilingPaint === RoomController.RoomPaint.TEXTURED ? this.getCeilingTextureController().getTexture() : null;
            var ceilingShininess = this.getCeilingShininess();
            var wallSidesPaint = this.getWallSidesPaint();
            var wallSidesColor = wallSidesPaint === RoomController.RoomPaint.COLORED ? this.getWallSidesColor() : null;
            var wallSidesTexture = wallSidesPaint === RoomController.RoomPaint.TEXTURED ? this.getWallSidesTextureController().getTexture() : null;
            var wallSidesShininess = this.getWallSidesShininess();
            var wallSidesBaseboardVisible = this.getWallSidesBaseboardController().getVisible();
            var wallSidesBaseboardThickness = this.getWallSidesBaseboardController().getThickness();
            var wallSidesBaseboardHeight = this.getWallSidesBaseboardController().getHeight();
            var wallSidesBaseboardPaint = this.getWallSidesBaseboardController().getPaint();
            var wallSidesBaseboardColor = wallSidesBaseboardPaint === BaseboardChoiceController.BaseboardPaint.COLORED ? this.getWallSidesBaseboardController().getColor() : null;
            var wallSidesBaseboardTexture = wallSidesBaseboardPaint === BaseboardChoiceController.BaseboardPaint.TEXTURED ? this.getWallSidesBaseboardController().getTextureController().getTexture() : null;
            var selectedRoomsWallSides = this.getRoomsWallSides(selectedRooms, null);
            var modifiedRooms = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ selectedRooms.length);
            for (var i = 0; i < modifiedRooms.length; i++) {
                {
                    modifiedRooms[i] = new RoomController.ModifiedRoom(/* get */ selectedRooms[i]);
                }
                ;
            }
            var deletedWalls = ([]);
            var addedWalls = ([]);
            var newSelection = (oldSelection.slice(0));
            if (this.splitSurroundingWalls) {
                if (this.splitWalls(selectedRoomsWallSides, deletedWalls, addedWalls, newSelection)) {
                    this.home.setSelectedItems(newSelection);
                    selectedRoomsWallSides = this.getRoomsWallSides(selectedRooms, selectedRoomsWallSides);
                }
            }
            var modifiedWallSides = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ selectedRoomsWallSides.length);
            for (var i = 0; i < modifiedWallSides.length; i++) {
                {
                    modifiedWallSides[i] = new RoomController.ModifiedWallSide(/* get */ selectedRoomsWallSides[i]);
                }
                ;
            }
            RoomController.doModifyRoomsAndWallSides(this.home, modifiedRooms, name_5, areaVisible, floorVisible, floorPaint, floorColor, floorTexture, floorShininess, ceilingVisible, ceilingPaint, ceilingColor, ceilingTexture, ceilingShininess, modifiedWallSides, this.preferences.getNewWallBaseboardThickness(), this.preferences.getNewWallBaseboardHeight(), wallSidesPaint, wallSidesColor, wallSidesTexture, wallSidesShininess, wallSidesBaseboardVisible, wallSidesBaseboardThickness, wallSidesBaseboardHeight, wallSidesBaseboardPaint, wallSidesBaseboardColor, wallSidesBaseboardTexture, null, null);
            if (this.undoSupport != null) {
                this.undoSupport.postEdit(new RoomController.RoomsAndWallSidesModificationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), /* toArray */ newSelection.slice(0), modifiedRooms, name_5, areaVisible, floorVisible, floorPaint, floorColor, floorTexture, floorShininess, ceilingVisible, ceilingPaint, ceilingColor, ceilingTexture, ceilingShininess, modifiedWallSides, this.preferences.getNewWallBaseboardThickness(), this.preferences.getNewWallBaseboardHeight(), wallSidesPaint, wallSidesColor, wallSidesTexture, wallSidesShininess, wallSidesBaseboardVisible, wallSidesBaseboardThickness, wallSidesBaseboardHeight, wallSidesBaseboardPaint, wallSidesBaseboardColor, wallSidesBaseboardTexture, /* toArray */ deletedWalls.slice(0), /* toArray */ addedWalls.slice(0)));
            }
            if (name_5 != null) {
                this.preferences.addAutoCompletionString("RoomName", name_5);
            }
        }
    };
    /**
     * Splits walls that overfill on other rooms if needed and returns <code>false</code> if the operation wasn't needed.
     * @param {RoomController.WallSide[]} wallSides
     * @param {RoomController.ModifiedWall[]} deletedWalls
     * @param {RoomController.ModifiedWall[]} addedWalls
     * @param {*[]} selectedItems
     * @return {boolean}
     * @private
     */
    RoomController.prototype.splitWalls = function (wallSides, deletedWalls, addedWalls, selectedItems) {
        var existingWalls = null;
        var newWalls = ([]);
        var splitWallSide;
        var _loop_2 = function () {
            {
                splitWallSide = null;
                var firstWall = null;
                var secondWall = null;
                var deletedWall = null;
                for (var i = 0; i < /* size */ wallSides.length && splitWallSide == null; i++) {
                    {
                        var wallSide = wallSides[i];
                        var wall = wallSide.getWall();
                        var arcExtent = wall.getArcExtent();
                        if (arcExtent == null || /* floatValue */ arcExtent === 0) {
                            var wallArea = new java.awt.geom.Area(this_1.getPath(wall.getPoints$(), true));
                            for (var index = 0; index < wallSides.length; index++) {
                                var intersectedWallSide = wallSides[index];
                                {
                                    var intersectedWall = intersectedWallSide.getWall();
                                    if (wall !== intersectedWall) {
                                        var intersectedWallArea = new java.awt.geom.Area(this_1.getPath(intersectedWall.getPoints$(), true));
                                        intersectedWallArea.intersect(wallArea);
                                        if (!intersectedWallArea.isEmpty() && intersectedWallArea.isSingular()) {
                                            var intersection = this_1.computeIntersection(wall.getXStart(), wall.getYStart(), wall.getXEnd(), wall.getYEnd(), intersectedWall.getXStart(), intersectedWall.getYStart(), intersectedWall.getXEnd(), intersectedWall.getYEnd());
                                            if (intersection != null) {
                                                firstWall = wall.duplicate();
                                                secondWall = wall.duplicate();
                                                firstWall.setLevel(wall.getLevel());
                                                secondWall.setLevel(wall.getLevel());
                                                firstWall.setXEnd(intersection[0]);
                                                firstWall.setYEnd(intersection[1]);
                                                secondWall.setXStart(intersection[0]);
                                                secondWall.setYStart(intersection[1]);
                                                if (firstWall.getLength() > intersectedWall.getThickness() / 2 && secondWall.getLength() > intersectedWall.getThickness() / 2) {
                                                    if (deletedWalls == null) {
                                                        return { value: true };
                                                    }
                                                    if (existingWalls == null) {
                                                        existingWalls = ({});
                                                        for (var index1 = 0; index1 < wallSides.length; index1++) {
                                                            var side = wallSides[index1];
                                                            {
                                                                if (!(function (m, k) { if (m.entries == null)
                                                                    m.entries = []; for (var i_11 = 0; i_11 < m.entries.length; i_11++)
                                                                    if (m.entries[i_11].key == null && k == null || m.entries[i_11].key.equals != null && m.entries[i_11].key.equals(k) || m.entries[i_11].key === k) {
                                                                        return true;
                                                                    } return false; })(existingWalls, side.getWall())) {
                                                                    /* put */ (function (m, k, v) { if (m.entries == null)
                                                                        m.entries = []; for (var i_12 = 0; i_12 < m.entries.length; i_12++)
                                                                        if (m.entries[i_12].key == null && k == null || m.entries[i_12].key.equals != null && m.entries[i_12].key.equals(k) || m.entries[i_12].key === k) {
                                                                            m.entries[i_12].value = v;
                                                                            return;
                                                                        } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(existingWalls, side.getWall(), new RoomController.ModifiedWall(side.getWall()));
                                                                }
                                                            }
                                                        }
                                                    }
                                                    deletedWall = /* get */ (function (m, k) { if (m.entries == null)
                                                        m.entries = []; for (var i_13 = 0; i_13 < m.entries.length; i_13++)
                                                        if (m.entries[i_13].key == null && k == null || m.entries[i_13].key.equals != null && m.entries[i_13].key.equals(k) || m.entries[i_13].key === k) {
                                                            return m.entries[i_13].value;
                                                        } return null; })(existingWalls, wall);
                                                    var wallAtStart = wall.getWallAtStart();
                                                    if (wallAtStart != null) {
                                                        firstWall.setWallAtStart(wallAtStart);
                                                        if (wallAtStart.getWallAtEnd() === wall) {
                                                            wallAtStart.setWallAtEnd(firstWall);
                                                        }
                                                        else {
                                                            wallAtStart.setWallAtStart(firstWall);
                                                        }
                                                    }
                                                    var wallAtEnd = wall.getWallAtEnd();
                                                    if (wallAtEnd != null) {
                                                        secondWall.setWallAtEnd(wallAtEnd);
                                                        if (wallAtEnd.getWallAtEnd() === wall) {
                                                            wallAtEnd.setWallAtEnd(secondWall);
                                                        }
                                                        else {
                                                            wallAtEnd.setWallAtStart(secondWall);
                                                        }
                                                    }
                                                    firstWall.setWallAtEnd(secondWall);
                                                    secondWall.setWallAtStart(firstWall);
                                                    if (wall.getHeightAtEnd() != null) {
                                                        var heightAtIntersecion = wall.getHeight() + (wall.getHeightAtEnd() - wall.getHeight()) * java.awt.geom.Point2D.distance(wall.getXStart(), wall.getYStart(), intersection[0], intersection[1]) / wall.getLength();
                                                        firstWall.setHeightAtEnd(heightAtIntersecion);
                                                        secondWall.setHeight(heightAtIntersecion);
                                                    }
                                                    splitWallSide = wallSide;
                                                    break;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ;
                }
                if (splitWallSide != null) {
                    /* add */ (newWalls.push(firstWall) > 0);
                    /* add */ (newWalls.push(secondWall) > 0);
                    var splitWall_1 = splitWallSide.getWall();
                    if ( /* contains */(this_1.home.getWalls().indexOf((splitWall_1)) >= 0)) {
                        /* add */ (deletedWalls.push(deletedWall) > 0);
                    }
                    else {
                        for (var i = newWalls.length - 1; i >= 0; i--) {
                            {
                                if ( /* get */newWalls[i] === splitWall_1) {
                                    /* remove */ newWalls.splice(i, 1)[0];
                                    break;
                                }
                            }
                            ;
                        }
                    }
                    if ( /* remove */(function (a) { var index = a.indexOf(splitWall_1); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(selectedItems)) {
                        /* add */ (selectedItems.push(firstWall) > 0);
                        /* add */ (selectedItems.push(secondWall) > 0);
                    }
                    /* remove */ (function (a) { var index = a.indexOf(splitWallSide); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(wallSides);
                    /* add */ (wallSides.push(new RoomController.WallSide(firstWall, splitWallSide.getSide())) > 0);
                    /* add */ (wallSides.push(new RoomController.WallSide(secondWall, splitWallSide.getSide())) > 0);
                    var sameWallSides = ([]);
                    for (var i = wallSides.length - 1; i >= 0; i--) {
                        {
                            var wallSide = wallSides[i];
                            if (wallSide.getWall() === splitWall_1) {
                                /* remove */ wallSides.splice(i, 1)[0];
                                /* add */ (sameWallSides.push(new RoomController.WallSide(firstWall, wallSide.getSide())) > 0);
                                /* add */ (sameWallSides.push(new RoomController.WallSide(secondWall, wallSide.getSide())) > 0);
                            }
                        }
                        ;
                    }
                    /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(wallSides, sameWallSides);
                }
            }
        };
        var this_1 = this;
        do {
            var state_1 = _loop_2();
            if (typeof state_1 === "object")
                return state_1.value;
        } while ((splitWallSide != null));
        if (deletedWalls == null) {
            return false;
        }
        else {
            for (var index = 0; index < newWalls.length; index++) {
                var newWall = newWalls[index];
                {
                    var addedWall = new RoomController.ModifiedWall(newWall);
                    /* add */ (addedWalls.push(addedWall) > 0);
                    this.home.addWall(newWall);
                    newWall.setLevel(addedWall.getLevel());
                }
            }
            for (var index = 0; index < deletedWalls.length; index++) {
                var deletedWall = deletedWalls[index];
                {
                    this.home.deleteWall(deletedWall.getWall());
                }
            }
            return !(deletedWalls.length == 0);
        }
    };
    /**
     * Returns the intersection between a line segment and a second line.
     * @param {number} xPoint1
     * @param {number} yPoint1
     * @param {number} xPoint2
     * @param {number} yPoint2
     * @param {number} xPoint3
     * @param {number} yPoint3
     * @param {number} xPoint4
     * @param {number} yPoint4
     * @return {float[]}
     * @private
     */
    RoomController.prototype.computeIntersection = function (xPoint1, yPoint1, xPoint2, yPoint2, xPoint3, yPoint3, xPoint4, yPoint4) {
        var point = PlanController.computeIntersection$float$float$float$float$float$float$float$float(xPoint1, yPoint1, xPoint2, yPoint2, xPoint3, yPoint3, xPoint4, yPoint4);
        if (java.awt.geom.Line2D.ptSegDistSq(xPoint1, yPoint1, xPoint2, yPoint2, point[0], point[1]) < 1.0E-7 && (Math.abs(xPoint1 - point[0]) > 1.0E-4 || Math.abs(yPoint1 - point[1]) > 1.0E-4) && (Math.abs(xPoint2 - point[0]) > 1.0E-4 || Math.abs(yPoint2 - point[1]) > 1.0E-4)) {
            return point;
        }
        else {
            return null;
        }
    };
    /**
     * Modifies rooms and walls properties with the values in parameter.
     * @param {Home} home
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedRoom[]} modifiedRooms
     * @param {string} name
     * @param {boolean} areaVisible
     * @param {boolean} floorVisible
     * @param {RoomController.RoomPaint} floorPaint
     * @param {number} floorColor
     * @param {HomeTexture} floorTexture
     * @param {number} floorShininess
     * @param {boolean} ceilingVisible
     * @param {RoomController.RoomPaint} ceilingPaint
     * @param {number} ceilingColor
     * @param {HomeTexture} ceilingTexture
     * @param {number} ceilingShininess
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWallSide[]} modifiedWallSides
     * @param {number} newWallBaseboardThickness
     * @param {number} newWallBaseboardHeight
     * @param {RoomController.RoomPaint} wallSidesPaint
     * @param {number} wallSidesColor
     * @param {HomeTexture} wallSidesTexture
     * @param {number} wallSidesShininess
     * @param {boolean} wallSidesBaseboardVisible
     * @param {number} wallSidesBaseboardThickness
     * @param {number} wallSidesBaseboardHeight
     * @param {BaseboardChoiceController.BaseboardPaint} wallSidesBaseboardPaint
     * @param {number} wallSidesBaseboardColor
     * @param {HomeTexture} wallSidesBaseboardTexture
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWall[]} deletedWalls
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWall[]} addedWalls
     * @private
     */
    RoomController.doModifyRoomsAndWallSides = function (home, modifiedRooms, name, areaVisible, floorVisible, floorPaint, floorColor, floorTexture, floorShininess, ceilingVisible, ceilingPaint, ceilingColor, ceilingTexture, ceilingShininess, modifiedWallSides, newWallBaseboardThickness, newWallBaseboardHeight, wallSidesPaint, wallSidesColor, wallSidesTexture, wallSidesShininess, wallSidesBaseboardVisible, wallSidesBaseboardThickness, wallSidesBaseboardHeight, wallSidesBaseboardPaint, wallSidesBaseboardColor, wallSidesBaseboardTexture, deletedWalls, addedWalls) {
        if (deletedWalls != null) {
            for (var index = 0; index < addedWalls.length; index++) {
                var newWall = addedWalls[index];
                {
                    newWall.resetJoinedWalls();
                    home.addWall(newWall.getWall());
                    newWall.getWall().setLevel(newWall.getLevel());
                }
            }
            for (var index = 0; index < deletedWalls.length; index++) {
                var deletedWall = deletedWalls[index];
                {
                    home.deleteWall(deletedWall.getWall());
                }
            }
        }
        for (var index = 0; index < modifiedRooms.length; index++) {
            var modifiedRoom = modifiedRooms[index];
            {
                var room = modifiedRoom.getRoom();
                if (name != null) {
                    room.setName(name);
                }
                if (areaVisible != null) {
                    room.setAreaVisible(areaVisible);
                }
                if (floorVisible != null) {
                    room.setFloorVisible(floorVisible);
                }
                if (floorPaint != null) {
                    switch ((floorPaint)) {
                        case RoomController.RoomPaint.DEFAULT:
                            room.setFloorColor(null);
                            room.setFloorTexture(null);
                            break;
                        case RoomController.RoomPaint.COLORED:
                            room.setFloorColor(floorColor);
                            room.setFloorTexture(null);
                            break;
                        case RoomController.RoomPaint.TEXTURED:
                            room.setFloorColor(null);
                            room.setFloorTexture(floorTexture);
                            break;
                    }
                }
                if (floorShininess != null) {
                    room.setFloorShininess(floorShininess);
                }
                if (ceilingVisible != null) {
                    room.setCeilingVisible(ceilingVisible);
                }
                if (ceilingPaint != null) {
                    switch ((ceilingPaint)) {
                        case RoomController.RoomPaint.DEFAULT:
                            room.setCeilingColor(null);
                            room.setCeilingTexture(null);
                            break;
                        case RoomController.RoomPaint.COLORED:
                            room.setCeilingColor(ceilingColor);
                            room.setCeilingTexture(null);
                            break;
                        case RoomController.RoomPaint.TEXTURED:
                            room.setCeilingColor(null);
                            room.setCeilingTexture(ceilingTexture);
                            break;
                    }
                }
                if (ceilingShininess != null) {
                    room.setCeilingShininess(ceilingShininess);
                }
            }
        }
        for (var index = 0; index < modifiedWallSides.length; index++) {
            var modifiedWallSide = modifiedWallSides[index];
            {
                var wallSide = modifiedWallSide.getWallSide();
                var wall = wallSide.getWall();
                if (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE) {
                    if (wallSidesPaint != null) {
                        switch ((wallSidesPaint)) {
                            case RoomController.RoomPaint.DEFAULT:
                                wall.setLeftSideColor(null);
                                wall.setLeftSideTexture(null);
                                break;
                            case RoomController.RoomPaint.COLORED:
                                wall.setLeftSideColor(wallSidesColor);
                                wall.setLeftSideTexture(null);
                                break;
                            case RoomController.RoomPaint.TEXTURED:
                                wall.setLeftSideColor(null);
                                wall.setLeftSideTexture(wallSidesTexture);
                                break;
                        }
                    }
                    if (wallSidesShininess != null) {
                        wall.setLeftSideShininess(wallSidesShininess);
                    }
                }
                else {
                    if (wallSidesPaint != null) {
                        switch ((wallSidesPaint)) {
                            case RoomController.RoomPaint.DEFAULT:
                                wall.setRightSideColor(null);
                                wall.setRightSideTexture(null);
                                break;
                            case RoomController.RoomPaint.COLORED:
                                wall.setRightSideColor(wallSidesColor);
                                wall.setRightSideTexture(null);
                                break;
                            case RoomController.RoomPaint.TEXTURED:
                                wall.setRightSideColor(null);
                                wall.setRightSideTexture(wallSidesTexture);
                                break;
                        }
                    }
                    if (wallSidesShininess != null) {
                        wall.setRightSideShininess(wallSidesShininess);
                    }
                }
                if (wallSidesBaseboardVisible === false) {
                    if (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE) {
                        wall.setLeftSideBaseboard(null);
                    }
                    else {
                        wall.setRightSideBaseboard(null);
                    }
                }
                else {
                    var baseboard = wallSide.getSide() === RoomController.WallSide.LEFT_SIDE ? wall.getLeftSideBaseboard() : wall.getRightSideBaseboard();
                    if (wallSidesBaseboardVisible === true || baseboard != null) {
                        var baseboardThickness = baseboard != null ? baseboard.getThickness() : newWallBaseboardThickness;
                        var baseboardHeight = baseboard != null ? baseboard.getHeight() : newWallBaseboardHeight;
                        var baseboardColor = baseboard != null ? baseboard.getColor() : null;
                        var baseboardTexture = baseboard != null ? baseboard.getTexture() : null;
                        if (wallSidesBaseboardPaint != null) {
                            switch ((wallSidesBaseboardPaint)) {
                                case BaseboardChoiceController.BaseboardPaint.DEFAULT:
                                    baseboardColor = null;
                                    baseboardTexture = null;
                                    break;
                                case BaseboardChoiceController.BaseboardPaint.COLORED:
                                    if (wallSidesBaseboardColor != null) {
                                        baseboardColor = wallSidesBaseboardColor;
                                    }
                                    baseboardTexture = null;
                                    break;
                                case BaseboardChoiceController.BaseboardPaint.TEXTURED:
                                    baseboardColor = null;
                                    if (wallSidesBaseboardTexture != null) {
                                        baseboardTexture = wallSidesBaseboardTexture;
                                    }
                                    break;
                            }
                        }
                        baseboard = Baseboard.getInstance(wallSidesBaseboardThickness != null ? wallSidesBaseboardThickness : baseboardThickness, wallSidesBaseboardHeight != null ? wallSidesBaseboardHeight : baseboardHeight, baseboardColor, baseboardTexture);
                        if (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE) {
                            wall.setLeftSideBaseboard(baseboard);
                        }
                        else {
                            wall.setRightSideBaseboard(baseboard);
                        }
                    }
                }
            }
        }
    };
    /**
     * Restores room properties from the values stored in <code>modifiedRooms</code> and <code>modifiedWallSides</code>.
     * @param {Home} home
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedRoom[]} modifiedRooms
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWallSide[]} modifiedWallSides
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWall[]} deletedWalls
     * @param {com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWall[]} addedWalls
     * @private
     */
    RoomController.undoModifyRoomsAndWallSides = function (home, modifiedRooms, modifiedWallSides, deletedWalls, addedWalls) {
        for (var index = 0; index < modifiedRooms.length; index++) {
            var modifiedRoom = modifiedRooms[index];
            {
                modifiedRoom.reset();
            }
        }
        for (var index = 0; index < modifiedWallSides.length; index++) {
            var modifiedWallSide = modifiedWallSides[index];
            {
                modifiedWallSide.reset();
            }
        }
        for (var index = 0; index < addedWalls.length; index++) {
            var newWall = addedWalls[index];
            {
                home.deleteWall(newWall.getWall());
            }
        }
        for (var index = 0; index < deletedWalls.length; index++) {
            var deletedWall = deletedWalls[index];
            {
                deletedWall.resetJoinedWalls();
                home.addWall(deletedWall.getWall());
                deletedWall.getWall().setLevel(deletedWall.getLevel());
            }
        }
    };
    return RoomController;
}());
RoomController["__class"] = "com.eteks.sweethome3d.viewcontroller.RoomController";
RoomController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (RoomController) {
    /**
     * The possible values for {@linkplain #getFloorPaint() room paint type}.
     * @enum
     * @property {RoomController.RoomPaint} DEFAULT
     * @property {RoomController.RoomPaint} COLORED
     * @property {RoomController.RoomPaint} TEXTURED
     * @class
     */
    var RoomPaint;
    (function (RoomPaint) {
        RoomPaint[RoomPaint["DEFAULT"] = 0] = "DEFAULT";
        RoomPaint[RoomPaint["COLORED"] = 1] = "COLORED";
        RoomPaint[RoomPaint["TEXTURED"] = 2] = "TEXTURED";
    })(RoomPaint = RoomController.RoomPaint || (RoomController.RoomPaint = {}));
    /**
     * Undoable edit for rooms modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var RoomsAndWallSidesModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomsAndWallSidesModificationUndoableEdit, _super);
        function RoomsAndWallSidesModificationUndoableEdit(home, preferences, oldSelection, newSelection, modifiedRooms, name, areaVisible, floorVisible, floorPaint, floorColor, floorTexture, floorShininess, ceilingVisible, ceilingPaint, ceilingColor, ceilingTexture, ceilingShininess, modifiedWallSides, newWallBaseboardThickness, newWallBaseboardHeight, wallSidesPaint, wallSidesColor, wallSidesTexture, wallSidesShininess, wallSidesBaseboardVisible, wallSidesBaseboardThickness, wallSidesBaseboardHeight, wallSidesBaseboardPaint, wallSidesBaseboardColor, wallSidesBaseboardTexture, deletedWalls, addedWalls) {
            var _this = _super.call(this, preferences, RoomController, "undoModifyRoomsName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.newSelection === undefined) {
                _this.newSelection = null;
            }
            if (_this.modifiedRooms === undefined) {
                _this.modifiedRooms = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.areaVisible === undefined) {
                _this.areaVisible = null;
            }
            if (_this.floorVisible === undefined) {
                _this.floorVisible = null;
            }
            if (_this.floorPaint === undefined) {
                _this.floorPaint = null;
            }
            if (_this.floorColor === undefined) {
                _this.floorColor = null;
            }
            if (_this.floorTexture === undefined) {
                _this.floorTexture = null;
            }
            if (_this.floorShininess === undefined) {
                _this.floorShininess = null;
            }
            if (_this.ceilingVisible === undefined) {
                _this.ceilingVisible = null;
            }
            if (_this.ceilingPaint === undefined) {
                _this.ceilingPaint = null;
            }
            if (_this.ceilingColor === undefined) {
                _this.ceilingColor = null;
            }
            if (_this.ceilingTexture === undefined) {
                _this.ceilingTexture = null;
            }
            if (_this.ceilingShininess === undefined) {
                _this.ceilingShininess = null;
            }
            if (_this.modifiedWallSides === undefined) {
                _this.modifiedWallSides = null;
            }
            if (_this.newWallBaseboardHeight === undefined) {
                _this.newWallBaseboardHeight = 0;
            }
            if (_this.newWallBaseboardThickness === undefined) {
                _this.newWallBaseboardThickness = 0;
            }
            if (_this.wallSidesPaint === undefined) {
                _this.wallSidesPaint = null;
            }
            if (_this.wallSidesColor === undefined) {
                _this.wallSidesColor = null;
            }
            if (_this.wallSidesTexture === undefined) {
                _this.wallSidesTexture = null;
            }
            if (_this.wallSidesShininess === undefined) {
                _this.wallSidesShininess = null;
            }
            if (_this.wallSidesBaseboardVisible === undefined) {
                _this.wallSidesBaseboardVisible = null;
            }
            if (_this.wallSidesBaseboardThickness === undefined) {
                _this.wallSidesBaseboardThickness = null;
            }
            if (_this.wallSidesBaseboardHeight === undefined) {
                _this.wallSidesBaseboardHeight = null;
            }
            if (_this.wallSidesBaseboardPaint === undefined) {
                _this.wallSidesBaseboardPaint = null;
            }
            if (_this.wallSidesBaseboardColor === undefined) {
                _this.wallSidesBaseboardColor = null;
            }
            if (_this.wallSidesBaseboardTexture === undefined) {
                _this.wallSidesBaseboardTexture = null;
            }
            if (_this.deletedWalls === undefined) {
                _this.deletedWalls = null;
            }
            if (_this.addedWalls === undefined) {
                _this.addedWalls = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.newSelection = newSelection;
            _this.modifiedRooms = modifiedRooms;
            _this.name = name;
            _this.areaVisible = areaVisible;
            _this.floorVisible = floorVisible;
            _this.floorPaint = floorPaint;
            _this.floorColor = floorColor;
            _this.floorTexture = floorTexture;
            _this.floorShininess = floorShininess;
            _this.ceilingVisible = ceilingVisible;
            _this.ceilingPaint = ceilingPaint;
            _this.ceilingColor = ceilingColor;
            _this.ceilingTexture = ceilingTexture;
            _this.ceilingShininess = ceilingShininess;
            _this.modifiedWallSides = modifiedWallSides;
            _this.newWallBaseboardThickness = newWallBaseboardThickness;
            _this.newWallBaseboardHeight = newWallBaseboardHeight;
            _this.wallSidesPaint = wallSidesPaint;
            _this.wallSidesColor = wallSidesColor;
            _this.wallSidesTexture = wallSidesTexture;
            _this.wallSidesShininess = wallSidesShininess;
            _this.wallSidesBaseboardVisible = wallSidesBaseboardVisible;
            _this.wallSidesBaseboardThickness = wallSidesBaseboardThickness;
            _this.wallSidesBaseboardHeight = wallSidesBaseboardHeight;
            _this.wallSidesBaseboardPaint = wallSidesBaseboardPaint;
            _this.wallSidesBaseboardColor = wallSidesBaseboardColor;
            _this.wallSidesBaseboardTexture = wallSidesBaseboardTexture;
            _this.deletedWalls = deletedWalls;
            _this.addedWalls = addedWalls;
            return _this;
        }
        /**
         *
         */
        RoomsAndWallSidesModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            RoomController.undoModifyRoomsAndWallSides(this.home, this.modifiedRooms, this.modifiedWallSides, this.deletedWalls, this.addedWalls);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        RoomsAndWallSidesModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            RoomController.doModifyRoomsAndWallSides(this.home, this.modifiedRooms, this.name, this.areaVisible, this.floorVisible, this.floorPaint, this.floorColor, this.floorTexture, this.floorShininess, this.ceilingVisible, this.ceilingPaint, this.ceilingColor, this.ceilingTexture, this.ceilingShininess, this.modifiedWallSides, this.newWallBaseboardThickness, this.newWallBaseboardHeight, this.wallSidesPaint, this.wallSidesColor, this.wallSidesTexture, this.wallSidesShininess, this.wallSidesBaseboardVisible, this.wallSidesBaseboardThickness, this.wallSidesBaseboardHeight, this.wallSidesBaseboardPaint, this.wallSidesBaseboardColor, this.wallSidesBaseboardTexture, this.deletedWalls, this.addedWalls);
            this.home.setSelectedItems(/* asList */ this.newSelection.slice(0));
        };
        return RoomsAndWallSidesModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    RoomController.RoomsAndWallSidesModificationUndoableEdit = RoomsAndWallSidesModificationUndoableEdit;
    RoomsAndWallSidesModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.RoomController.RoomsAndWallSidesModificationUndoableEdit";
    RoomsAndWallSidesModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the current properties values of a modified room.
     * @param {Room} room
     * @class
     */
    var ModifiedRoom = /** @class */ (function () {
        function ModifiedRoom(room) {
            if (this.room === undefined) {
                this.room = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.areaVisible === undefined) {
                this.areaVisible = false;
            }
            if (this.floorVisible === undefined) {
                this.floorVisible = false;
            }
            if (this.floorColor === undefined) {
                this.floorColor = null;
            }
            if (this.floorTexture === undefined) {
                this.floorTexture = null;
            }
            if (this.floorShininess === undefined) {
                this.floorShininess = 0;
            }
            if (this.ceilingVisible === undefined) {
                this.ceilingVisible = false;
            }
            if (this.ceilingColor === undefined) {
                this.ceilingColor = null;
            }
            if (this.ceilingTexture === undefined) {
                this.ceilingTexture = null;
            }
            if (this.ceilingShininess === undefined) {
                this.ceilingShininess = 0;
            }
            this.room = room;
            this.name = room.getName();
            this.areaVisible = room.isAreaVisible();
            this.floorVisible = room.isFloorVisible();
            this.floorColor = room.getFloorColor();
            this.floorTexture = room.getFloorTexture();
            this.floorShininess = room.getFloorShininess();
            this.ceilingVisible = room.isCeilingVisible();
            this.ceilingColor = room.getCeilingColor();
            this.ceilingTexture = room.getCeilingTexture();
            this.ceilingShininess = room.getCeilingShininess();
        }
        ModifiedRoom.prototype.getRoom = function () {
            return this.room;
        };
        ModifiedRoom.prototype.reset = function () {
            this.room.setName(this.name);
            this.room.setAreaVisible(this.areaVisible);
            this.room.setFloorVisible(this.floorVisible);
            this.room.setFloorColor(this.floorColor);
            this.room.setFloorTexture(this.floorTexture);
            this.room.setFloorShininess(this.floorShininess);
            this.room.setCeilingVisible(this.ceilingVisible);
            this.room.setCeilingColor(this.ceilingColor);
            this.room.setCeilingTexture(this.ceilingTexture);
            this.room.setCeilingShininess(this.ceilingShininess);
        };
        return ModifiedRoom;
    }());
    RoomController.ModifiedRoom = ModifiedRoom;
    ModifiedRoom["__class"] = "com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedRoom";
    /**
     * A wall side.
     * @param {Wall} wall
     * @param {number} side
     * @class
     */
    var WallSide = /** @class */ (function () {
        function WallSide(wall, side) {
            if (this.wall === undefined) {
                this.wall = null;
            }
            if (this.side === undefined) {
                this.side = 0;
            }
            if (this.wallAtStart === undefined) {
                this.wallAtStart = null;
            }
            if (this.wallAtEnd === undefined) {
                this.wallAtEnd = null;
            }
            if (this.joinedAtEndOfWallAtStart === undefined) {
                this.joinedAtEndOfWallAtStart = false;
            }
            if (this.joinedAtStartOfWallAtEnd === undefined) {
                this.joinedAtStartOfWallAtEnd = false;
            }
            this.wall = wall;
            this.side = side;
            this.wallAtStart = wall.getWallAtStart();
            this.joinedAtEndOfWallAtStart = this.wallAtStart != null && this.wallAtStart.getWallAtEnd() === wall;
            this.wallAtEnd = wall.getWallAtEnd();
            this.joinedAtStartOfWallAtEnd = this.wallAtEnd != null && this.wallAtEnd.getWallAtStart() === wall;
        }
        WallSide.prototype.getWall = function () {
            return this.wall;
        };
        WallSide.prototype.getSide = function () {
            return this.side;
        };
        WallSide.prototype.getWallAtStart = function () {
            return this.wallAtStart;
        };
        WallSide.prototype.getWallAtEnd = function () {
            return this.wallAtEnd;
        };
        WallSide.prototype.isJoinedAtEndOfWallAtStart = function () {
            return this.joinedAtEndOfWallAtStart;
        };
        WallSide.prototype.isJoinedAtStartOfWallAtEnd = function () {
            return this.joinedAtStartOfWallAtEnd;
        };
        WallSide.LEFT_SIDE = 0;
        WallSide.RIGHT_SIDE = 1;
        return WallSide;
    }());
    RoomController.WallSide = WallSide;
    WallSide["__class"] = "com.eteks.sweethome3d.viewcontroller.RoomController.WallSide";
    /**
     * A modified wall.
     * @param {Wall} wall
     * @class
     */
    var ModifiedWall = /** @class */ (function () {
        function ModifiedWall(wall) {
            if (this.wall === undefined) {
                this.wall = null;
            }
            if (this.level === undefined) {
                this.level = null;
            }
            if (this.wallAtStart === undefined) {
                this.wallAtStart = null;
            }
            if (this.wallAtEnd === undefined) {
                this.wallAtEnd = null;
            }
            if (this.joinedAtEndOfWallAtStart === undefined) {
                this.joinedAtEndOfWallAtStart = false;
            }
            if (this.joinedAtStartOfWallAtEnd === undefined) {
                this.joinedAtStartOfWallAtEnd = false;
            }
            this.wall = wall;
            this.level = wall.getLevel();
            this.wallAtStart = wall.getWallAtStart();
            this.joinedAtEndOfWallAtStart = this.wallAtStart != null && this.wallAtStart.getWallAtEnd() === wall;
            this.wallAtEnd = wall.getWallAtEnd();
            this.joinedAtStartOfWallAtEnd = this.wallAtEnd != null && this.wallAtEnd.getWallAtStart() === wall;
        }
        ModifiedWall.prototype.getWall = function () {
            return this.wall;
        };
        ModifiedWall.prototype.getLevel = function () {
            return this.level;
        };
        ModifiedWall.prototype.resetJoinedWalls = function () {
            if (this.wallAtStart != null) {
                this.wall.setWallAtStart(this.wallAtStart);
                if (this.joinedAtEndOfWallAtStart) {
                    this.wallAtStart.setWallAtEnd(this.wall);
                }
                else {
                    this.wallAtStart.setWallAtStart(this.wall);
                }
            }
            if (this.wallAtEnd != null) {
                this.wall.setWallAtEnd(this.wallAtEnd);
                if (this.joinedAtStartOfWallAtEnd) {
                    this.wallAtEnd.setWallAtStart(this.wall);
                }
                else {
                    this.wallAtEnd.setWallAtEnd(this.wall);
                }
            }
        };
        return ModifiedWall;
    }());
    RoomController.ModifiedWall = ModifiedWall;
    ModifiedWall["__class"] = "com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWall";
    /**
     * Stores the current properties values of a modified wall side.
     * @param {RoomController.WallSide} wallSide
     * @class
     */
    var ModifiedWallSide = /** @class */ (function () {
        function ModifiedWallSide(wallSide) {
            if (this.wallSide === undefined) {
                this.wallSide = null;
            }
            if (this.wallColor === undefined) {
                this.wallColor = null;
            }
            if (this.wallTexture === undefined) {
                this.wallTexture = null;
            }
            if (this.wallShininess === undefined) {
                this.wallShininess = null;
            }
            if (this.wallBaseboard === undefined) {
                this.wallBaseboard = null;
            }
            this.wallSide = wallSide;
            var wall = wallSide.getWall();
            if (wallSide.getSide() === RoomController.WallSide.LEFT_SIDE) {
                this.wallColor = wall.getLeftSideColor();
                this.wallTexture = wall.getLeftSideTexture();
                this.wallShininess = wall.getLeftSideShininess();
                this.wallBaseboard = wall.getLeftSideBaseboard();
            }
            else {
                this.wallColor = wall.getRightSideColor();
                this.wallTexture = wall.getRightSideTexture();
                this.wallShininess = wall.getRightSideShininess();
                this.wallBaseboard = wall.getRightSideBaseboard();
            }
        }
        ModifiedWallSide.prototype.getWallSide = function () {
            return this.wallSide;
        };
        ModifiedWallSide.prototype.reset = function () {
            var wall = this.wallSide.getWall();
            if (this.wallSide.getSide() === RoomController.WallSide.LEFT_SIDE) {
                wall.setLeftSideColor(this.wallColor);
                wall.setLeftSideTexture(this.wallTexture);
                wall.setLeftSideShininess(this.wallShininess);
                wall.setLeftSideBaseboard(this.wallBaseboard);
            }
            else {
                wall.setRightSideColor(this.wallColor);
                wall.setRightSideTexture(this.wallTexture);
                wall.setRightSideShininess(this.wallShininess);
                wall.setRightSideBaseboard(this.wallBaseboard);
            }
            var wallAtStart = this.wallSide.getWallAtStart();
            if (wallAtStart != null) {
                wall.setWallAtStart(wallAtStart);
                if (this.wallSide.isJoinedAtEndOfWallAtStart()) {
                    wallAtStart.setWallAtEnd(wall);
                }
                else {
                    wallAtStart.setWallAtStart(wall);
                }
            }
            var wallAtEnd = this.wallSide.getWallAtEnd();
            if (wallAtEnd != null) {
                wall.setWallAtEnd(wallAtEnd);
                if (this.wallSide.isJoinedAtStartOfWallAtEnd()) {
                    wallAtEnd.setWallAtStart(wall);
                }
                else {
                    wallAtEnd.setWallAtEnd(wall);
                }
            }
        };
        return ModifiedWallSide;
    }());
    RoomController.ModifiedWallSide = ModifiedWallSide;
    ModifiedWallSide["__class"] = "com.eteks.sweethome3d.viewcontroller.RoomController.ModifiedWallSide";
    var RoomController$0 = /** @class */ (function () {
        function RoomController$0(__parent) {
            this.__parent = __parent;
        }
        RoomController$0.prototype.propertyChange = function (ev) {
            this.__parent.setFloorPaint(RoomController.RoomPaint.TEXTURED);
        };
        return RoomController$0;
    }());
    RoomController.RoomController$0 = RoomController$0;
    var RoomController$1 = /** @class */ (function () {
        function RoomController$1(__parent) {
            this.__parent = __parent;
        }
        RoomController$1.prototype.propertyChange = function (ev) {
            this.__parent.setCeilingPaint(RoomController.RoomPaint.TEXTURED);
        };
        return RoomController$1;
    }());
    RoomController.RoomController$1 = RoomController$1;
    var RoomController$2 = /** @class */ (function () {
        function RoomController$2(__parent) {
            this.__parent = __parent;
        }
        RoomController$2.prototype.propertyChange = function (ev) {
            this.__parent.setWallSidesPaint(RoomController.RoomPaint.TEXTURED);
        };
        return RoomController$2;
    }());
    RoomController.RoomController$2 = RoomController$2;
})(RoomController || (RoomController = {}));
/**
 * Creates the controller of home levels view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var LevelController = /** @class */ (function () {
    function LevelController(home, preferences, viewFactory, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.homeLevelView === undefined) {
            this.homeLevelView = null;
        }
        if (this.name === undefined) {
            this.name = null;
        }
        if (this.viewable === undefined) {
            this.viewable = null;
        }
        if (this.elevation === undefined) {
            this.elevation = null;
        }
        if (this.elevationIndex === undefined) {
            this.elevationIndex = null;
        }
        if (this.floorThickness === undefined) {
            this.floorThickness = null;
        }
        if (this.height === undefined) {
            this.height = null;
        }
        if (this.levels === undefined) {
            this.levels = null;
        }
        if (this.selectedLevelIndex === undefined) {
            this.selectedLevelIndex = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    LevelController.prototype.getView = function () {
        if (this.homeLevelView == null) {
            this.homeLevelView = this.viewFactory.createLevelView(this.preferences, this);
        }
        return this.homeLevelView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    LevelController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    LevelController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    LevelController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from selected level in the home edited by this controller.
     */
    LevelController.prototype.updateProperties = function () {
        var selectedLevel = this.home.getSelectedLevel();
        this.setLevels(this.clone(/* toArray */ (function (a1, a2) { if (a1.length >= a2.length) {
            a1.length = 0;
            a1.push.apply(a1, a2);
            return a1;
        }
        else {
            return a2.slice(0);
        } })([], this.home.getLevels())));
        if (selectedLevel == null) {
            this.setSelectedLevelIndex(null);
            this.setName(null);
            this.setViewable(true);
            this.setElevation(null, false);
            this.setFloorThickness(null);
            this.setHeight(null);
            this.setElevationIndex(null, false);
        }
        else {
            this.setSelectedLevelIndex(this.home.getLevels().indexOf(selectedLevel));
            this.setName(selectedLevel.getName());
            this.setViewable(selectedLevel.isViewable());
            this.setElevation(selectedLevel.getElevation(), false);
            this.setFloorThickness(selectedLevel.getFloorThickness());
            this.setHeight(selectedLevel.getHeight());
            this.setElevationIndex(selectedLevel.getElevationIndex(), false);
        }
    };
    LevelController.prototype.clone = function (levels) {
        for (var i = 0; i < levels.length; i++) {
            {
                levels[i] = /* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                    return o.clone();
                }
                else {
                    var clone = Object.create(o);
                    for (var p in o) {
                        if (o.hasOwnProperty(p))
                            clone[p] = o[p];
                    }
                    return clone;
                } })(levels[i]);
            }
            ;
        }
        return levels;
    };
    /**
     * Returns <code>true</code> if the given <code>property</code> is editable.
     * Depending on whether a property is editable or not, the view associated to this controller
     * may render it differently.
     * The implementation of this method always returns <code>true</code>.
     * @param {string} property
     * @return {boolean}
     */
    LevelController.prototype.isPropertyEditable = function (property) {
        return true;
    };
    /**
     * Sets the edited name.
     * @param {string} name
     */
    LevelController.prototype.setName = function (name) {
        if (name !== this.name) {
            var oldName = this.name;
            this.name = name;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NAME", oldName, name);
            if (this.selectedLevelIndex != null) {
                this.levels[this.selectedLevelIndex].setName(name);
                this.propertyChangeSupport.firePropertyChange(/* name */ "LEVELS", null, this.levels);
            }
        }
    };
    /**
     * Returns the edited name.
     * @return {string}
     */
    LevelController.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the edited viewable attribute.
     * @param {boolean} viewable
     */
    LevelController.prototype.setViewable = function (viewable) {
        if (viewable !== this.viewable) {
            var oldViewable = viewable;
            this.viewable = viewable;
            this.propertyChangeSupport.firePropertyChange(/* name */ "VIEWABLE", oldViewable, viewable);
            if (viewable != null && this.selectedLevelIndex != null) {
                this.levels[this.selectedLevelIndex].setViewable(viewable);
                this.propertyChangeSupport.firePropertyChange(/* name */ "LEVELS", null, this.levels);
            }
        }
    };
    /**
     * Returns the edited viewable attribute.
     * @return {boolean}
     */
    LevelController.prototype.getViewable = function () {
        return this.viewable;
    };
    LevelController.prototype.setElevation = function (elevation, updateLevels) {
        if (updateLevels === void 0) { updateLevels = true; }
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
            if (updateLevels && elevation != null && this.selectedLevelIndex != null) {
                var elevationIndex = LevelController.updateLevelElevation(this.levels[this.selectedLevelIndex], elevation, /* asList */ this.levels.slice(0));
                this.setElevationIndex(elevationIndex, false);
                this.updateLevels();
            }
        }
    };
    /**
     * Updates the elevation of the given <code>level</code> and modifies the
     * elevation index of other levels if necessary.
     * @param {Level} level
     * @param {number} elevation
     * @param {Level[]} levels
     * @return {number}
     * @private
     */
    LevelController.updateLevelElevation = function (level, elevation, levels) {
        var levelIndex = levels.length;
        var elevationIndex = 0;
        for (var i = 0; i < /* size */ levels.length; i++) {
            {
                var homeLevel = levels[i];
                if (homeLevel === level) {
                    levelIndex = i;
                }
                else {
                    if (homeLevel.getElevation() === elevation) {
                        elevationIndex = homeLevel.getElevationIndex() + 1;
                    }
                    else if (i > levelIndex && homeLevel.getElevation() === level.getElevation()) {
                        homeLevel.setElevationIndex(homeLevel.getElevationIndex() - 1);
                    }
                }
            }
            ;
        }
        level.setElevation(elevation);
        level.setElevationIndex(elevationIndex);
        return elevationIndex;
    };
    /**
     * Returns the edited elevation.
     * @return {number}
     */
    LevelController.prototype.getElevation = function () {
        return this.elevation;
    };
    LevelController.prototype.setElevationIndex = function (elevationIndex, updateLevels) {
        if (updateLevels === void 0) { updateLevels = true; }
        if (elevationIndex !== this.elevationIndex) {
            var oldElevationIndex = this.elevationIndex;
            this.elevationIndex = elevationIndex;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION_INDEX", oldElevationIndex, elevationIndex);
            if (updateLevels && elevationIndex != null && this.selectedLevelIndex != null) {
                LevelController.updateLevelElevationIndex(this.levels[this.selectedLevelIndex], elevationIndex, /* asList */ this.levels.slice(0));
                this.updateLevels();
            }
        }
    };
    /**
     * Updates the elevation index of the given <code>level</code> and modifies the
     * elevation index of other levels at same elevation if necessary.
     * @param {Level} level
     * @param {number} elevationIndex
     * @param {Level[]} levels
     * @private
     */
    LevelController.updateLevelElevationIndex = function (level, elevationIndex, levels) {
        var elevationIndexSignum = (function (f) { if (f > 0) {
            return 1;
        }
        else if (f < 0) {
            return -1;
        }
        else {
            return 0;
        } })(elevationIndex - level.getElevationIndex());
        for (var index = 0; index < levels.length; index++) {
            var homeLevel = levels[index];
            {
                if (homeLevel !== level && homeLevel.getElevation() === level.getElevation() && /* signum */ (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(homeLevel.getElevationIndex() - level.getElevationIndex()) === elevationIndexSignum && /* signum */ (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(homeLevel.getElevationIndex() - elevationIndex) !== elevationIndexSignum) {
                    homeLevel.setElevationIndex(homeLevel.getElevationIndex() - (elevationIndexSignum | 0));
                }
                else if (homeLevel.getElevation() > level.getElevation()) {
                    break;
                }
            }
        }
        level.setElevationIndex(elevationIndex);
    };
    LevelController.prototype.updateLevels = function () {
        var tempHome = new Home();
        var selectedLevel = this.levels[this.selectedLevelIndex];
        for (var index = 0; index < this.levels.length; index++) {
            var homeLevel = this.levels[index];
            {
                tempHome.addLevel(homeLevel);
            }
        }
        var updatedLevels = tempHome.getLevels();
        this.setLevels(/* toArray */ updatedLevels.slice(0));
        this.setSelectedLevelIndex(updatedLevels.indexOf(selectedLevel));
    };
    /**
     * Returns the edited elevation index.
     * @return {number}
     */
    LevelController.prototype.getElevationIndex = function () {
        return this.elevationIndex;
    };
    /**
     * Sets the edited floor thickness.
     * @param {number} floorThickness
     */
    LevelController.prototype.setFloorThickness = function (floorThickness) {
        if (floorThickness !== this.floorThickness) {
            var oldFloorThickness = this.floorThickness;
            this.floorThickness = floorThickness;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FLOOR_THICKNESS", oldFloorThickness, floorThickness);
            if (floorThickness != null && this.selectedLevelIndex != null) {
                this.levels[this.selectedLevelIndex].setFloorThickness(floorThickness);
                this.propertyChangeSupport.firePropertyChange(/* name */ "LEVELS", null, this.levels);
            }
        }
    };
    /**
     * Returns the edited floor thickness.
     * @return {number}
     */
    LevelController.prototype.getFloorThickness = function () {
        return this.floorThickness;
    };
    /**
     * Sets the edited height.
     * @param {number} height
     */
    LevelController.prototype.setHeight = function (height) {
        if (height !== this.height) {
            var oldHeight = this.height;
            this.height = height;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
            if (height != null && this.selectedLevelIndex != null) {
                this.levels[this.selectedLevelIndex].setHeight(height);
                this.propertyChangeSupport.firePropertyChange(/* name */ "LEVELS", null, this.levels);
            }
        }
    };
    /**
     * Returns the edited height.
     * @return {number}
     */
    LevelController.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets home levels.
     * @param {com.eteks.sweethome3d.model.Level[]} levels
     * @private
     */
    LevelController.prototype.setLevels = function (levels) {
        if (levels !== this.levels) {
            var oldLevels = this.levels;
            this.levels = levels;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LEVELS", oldLevels, levels);
        }
    };
    /**
     * Returns a copy of home levels.
     * @return {com.eteks.sweethome3d.model.Level[]}
     */
    LevelController.prototype.getLevels = function () {
        return /* clone */ this.levels.slice(0);
    };
    /**
     * Sets the selected level index.
     * @param {number} selectedLevelIndex
     * @private
     */
    LevelController.prototype.setSelectedLevelIndex = function (selectedLevelIndex) {
        if (selectedLevelIndex !== this.selectedLevelIndex) {
            var oldSelectedLevelIndex = this.selectedLevelIndex;
            this.selectedLevelIndex = selectedLevelIndex;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SELECT_LEVEL_INDEX", oldSelectedLevelIndex, selectedLevelIndex);
        }
    };
    /**
     * Returns the selected level index.
     * @return {number}
     */
    LevelController.prototype.getSelectedLevelIndex = function () {
        return this.selectedLevelIndex;
    };
    /**
     * Controls the modification of selected level in the edited home.
     */
    LevelController.prototype.modifyLevels = function () {
        var selectedLevel = this.home.getSelectedLevel();
        if (selectedLevel != null) {
            var oldSelection = this.home.getSelectedItems();
            var name_6 = this.getName();
            var viewable = this.getViewable();
            var elevation = this.getElevation();
            var floorThickness = this.getFloorThickness();
            var height = this.getHeight();
            var elevationIndex = this.getElevationIndex();
            var modifiedLevel = new LevelController.ModifiedLevel(selectedLevel);
            LevelController.doModifyLevel(this.home, modifiedLevel, name_6, viewable, elevation, floorThickness, height, elevationIndex);
            if (this.undoSupport != null) {
                var undoableEdit = new LevelController.LevelModificationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), modifiedLevel, name_6, viewable, elevation, floorThickness, height, elevationIndex);
                this.undoSupport.postEdit(undoableEdit);
            }
            if (name_6 != null) {
                this.preferences.addAutoCompletionString("LevelName", name_6);
            }
        }
    };
    /**
     * Modifies level properties with the values in parameter.
     * @param {Home} home
     * @param {LevelController.ModifiedLevel} modifiedLevel
     * @param {string} name
     * @param {boolean} viewable
     * @param {number} elevation
     * @param {number} floorThickness
     * @param {number} height
     * @param {number} elevationIndex
     * @private
     */
    LevelController.doModifyLevel = function (home, modifiedLevel, name, viewable, elevation, floorThickness, height, elevationIndex) {
        var level = modifiedLevel.getLevel();
        if (name != null) {
            level.setName(name);
        }
        if (viewable != null) {
            var selectedItems = home.getSelectedItems();
            level.setViewable(viewable);
            home.setSelectedItems(LevelController.getViewableSublist(selectedItems));
        }
        if (elevation != null && elevation !== level.getElevation()) {
            LevelController.updateLevelElevation(level, elevation, home.getLevels());
        }
        if (elevationIndex != null) {
            LevelController.updateLevelElevationIndex(level, elevationIndex, home.getLevels());
        }
        if (!home.getEnvironment().isAllLevelsVisible()) {
            var selectedLevel = home.getSelectedLevel();
            var visible = true;
            {
                var array = home.getLevels();
                for (var index = 0; index < array.length; index++) {
                    var homeLevel = array[index];
                    {
                        homeLevel.setVisible(visible);
                        if (homeLevel === selectedLevel) {
                            visible = false;
                        }
                    }
                }
            }
        }
        if (floorThickness != null) {
            level.setFloorThickness(floorThickness);
        }
        if (height != null) {
            level.setHeight(height);
        }
    };
    /**
     * Returns a sub list of <code>items</code> that are at a viewable level.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @return {*[]}
     * @private
     */
    LevelController.getViewableSublist = function (items) {
        var viewableItems = ([]);
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (!(item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) || item.getLevel().isViewable()) {
                    /* add */ (viewableItems.push(item) > 0);
                }
            }
        }
        return viewableItems;
    };
    /**
     * Restores level properties from the values stored in <code>modifiedLevel</code>.
     * @param {Home} home
     * @param {LevelController.ModifiedLevel} modifiedLevel
     * @private
     */
    LevelController.undoModifyLevel = function (home, modifiedLevel) {
        modifiedLevel.reset();
        var level = modifiedLevel.getLevel();
        if (modifiedLevel.getElevation() !== level.getElevation()) {
            LevelController.updateLevelElevation(level, modifiedLevel.getElevation(), home.getLevels());
        }
        if (modifiedLevel.getElevationIndex() !== level.getElevationIndex()) {
            LevelController.updateLevelElevationIndex(level, modifiedLevel.getElevationIndex(), home.getLevels());
        }
    };
    return LevelController;
}());
LevelController["__class"] = "com.eteks.sweethome3d.viewcontroller.LevelController";
LevelController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (LevelController) {
    /**
     * Undoable edit for level modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var LevelModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(LevelModificationUndoableEdit, _super);
        function LevelModificationUndoableEdit(home, preferences, oldSelection, modifiedLevel, name, viewable, elevation, floorThickness, height, elevationIndex) {
            var _this = _super.call(this, preferences, LevelController, "undoModifyLevelName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.modifiedLevel === undefined) {
                _this.modifiedLevel = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.viewable === undefined) {
                _this.viewable = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.floorThickness === undefined) {
                _this.floorThickness = null;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.elevationIndex === undefined) {
                _this.elevationIndex = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.modifiedLevel = modifiedLevel;
            _this.name = name;
            _this.viewable = viewable;
            _this.elevation = elevation;
            _this.floorThickness = floorThickness;
            _this.height = height;
            _this.elevationIndex = elevationIndex;
            return _this;
        }
        /**
         *
         */
        LevelModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            LevelController.undoModifyLevel(this.home, this.modifiedLevel);
            this.home.setSelectedLevel(this.modifiedLevel.getLevel());
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        LevelModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedLevel(this.modifiedLevel.getLevel());
            LevelController.doModifyLevel(this.home, this.modifiedLevel, this.name, this.viewable, this.elevation, this.floorThickness, this.height, this.elevationIndex);
        };
        return LevelModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    LevelController.LevelModificationUndoableEdit = LevelModificationUndoableEdit;
    LevelModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.LevelController.LevelModificationUndoableEdit";
    LevelModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the current properties values of a modified level.
     * @param {Level} level
     * @class
     */
    var ModifiedLevel = /** @class */ (function () {
        function ModifiedLevel(level) {
            if (this.level === undefined) {
                this.level = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.viewable === undefined) {
                this.viewable = false;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.floorThickness === undefined) {
                this.floorThickness = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.elevationIndex === undefined) {
                this.elevationIndex = 0;
            }
            this.level = level;
            this.name = level.getName();
            this.viewable = level.isViewable();
            this.elevation = level.getElevation();
            this.floorThickness = level.getFloorThickness();
            this.height = level.getHeight();
            this.elevationIndex = level.getElevationIndex();
        }
        ModifiedLevel.prototype.getLevel = function () {
            return this.level;
        };
        ModifiedLevel.prototype.getElevation = function () {
            return this.elevation;
        };
        ModifiedLevel.prototype.getElevationIndex = function () {
            return this.elevationIndex;
        };
        ModifiedLevel.prototype.reset = function () {
            this.level.setName(this.name);
            this.level.setViewable(this.viewable);
            this.level.setFloorThickness(this.floorThickness);
            this.level.setHeight(this.height);
        };
        return ModifiedLevel;
    }());
    LevelController.ModifiedLevel = ModifiedLevel;
    ModifiedLevel["__class"] = "com.eteks.sweethome3d.viewcontroller.LevelController.ModifiedLevel";
})(LevelController || (LevelController = {}));
/**
 * Creates the controller of 3D view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var Home3DAttributesController = /** @class */ (function () {
    function Home3DAttributesController(home, preferences, viewFactory, contentManager, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.contentManager === undefined) {
            this.contentManager = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.groundTextureController === undefined) {
            this.groundTextureController = null;
        }
        if (this.skyTextureController === undefined) {
            this.skyTextureController = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.home3DAttributesView === undefined) {
            this.home3DAttributesView = null;
        }
        if (this.groundColor === undefined) {
            this.groundColor = 0;
        }
        if (this.groundPaint === undefined) {
            this.groundPaint = null;
        }
        if (this.backgroundImageVisibleOnGround3D === undefined) {
            this.backgroundImageVisibleOnGround3D = false;
        }
        if (this.skyColor === undefined) {
            this.skyColor = 0;
        }
        if (this.skyPaint === undefined) {
            this.skyPaint = null;
        }
        if (this.lightColor === undefined) {
            this.lightColor = 0;
        }
        if (this.wallsAlpha === undefined) {
            this.wallsAlpha = 0;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.contentManager = contentManager;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the texture controller of the ground.
     * @return {TextureChoiceController}
     */
    Home3DAttributesController.prototype.getGroundTextureController = function () {
        if (this.groundTextureController == null) {
            this.groundTextureController = new TextureChoiceController(this.preferences.getLocalizedString(Home3DAttributesController, "groundTextureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.groundTextureController.addPropertyChangeListener("TEXTURE", new Home3DAttributesController.Home3DAttributesController$0(this));
        }
        return this.groundTextureController;
    };
    /**
     * Returns the texture controller of the sky.
     * @return {TextureChoiceController}
     */
    Home3DAttributesController.prototype.getSkyTextureController = function () {
        if (this.skyTextureController == null) {
            this.skyTextureController = new TextureChoiceController(this.preferences.getLocalizedString(Home3DAttributesController, "skyTextureTitle"), false, this.preferences, this.viewFactory, this.contentManager);
            this.skyTextureController.addPropertyChangeListener("TEXTURE", new Home3DAttributesController.Home3DAttributesController$1(this));
        }
        return this.skyTextureController;
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    Home3DAttributesController.prototype.getView = function () {
        if (this.home3DAttributesView == null) {
            this.home3DAttributesView = this.viewFactory.createHome3DAttributesView(this.preferences, this);
        }
        return this.home3DAttributesView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    Home3DAttributesController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    Home3DAttributesController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    Home3DAttributesController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from the 3D attributes of the home edited by this controller.
     */
    Home3DAttributesController.prototype.updateProperties = function () {
        var homeEnvironment = this.home.getEnvironment();
        this.setGroundColor(homeEnvironment.getGroundColor());
        var groundTexture = homeEnvironment.getGroundTexture();
        this.getGroundTextureController().setTexture(groundTexture);
        if (groundTexture != null) {
            this.setGroundPaint(Home3DAttributesController.EnvironmentPaint.TEXTURED);
        }
        else {
            this.setGroundPaint(Home3DAttributesController.EnvironmentPaint.COLORED);
        }
        this.setBackgroundImageVisibleOnGround3D(homeEnvironment.isBackgroundImageVisibleOnGround3D());
        this.setSkyColor(homeEnvironment.getSkyColor());
        var skyTexture = homeEnvironment.getSkyTexture();
        this.getSkyTextureController().setTexture(skyTexture);
        if (skyTexture != null) {
            this.setSkyPaint(Home3DAttributesController.EnvironmentPaint.TEXTURED);
        }
        else {
            this.setSkyPaint(Home3DAttributesController.EnvironmentPaint.COLORED);
        }
        this.setLightColor(homeEnvironment.getLightColor());
        this.setWallsAlpha(homeEnvironment.getWallsAlpha());
    };
    /**
     * Sets the edited ground color.
     * @param {number} groundColor
     */
    Home3DAttributesController.prototype.setGroundColor = function (groundColor) {
        if (groundColor !== this.groundColor) {
            var oldGroundColor = this.groundColor;
            this.groundColor = groundColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "GROUND_COLOR", oldGroundColor, groundColor);
            this.setGroundPaint(Home3DAttributesController.EnvironmentPaint.COLORED);
        }
    };
    /**
     * Returns the edited ground color.
     * @return {number}
     */
    Home3DAttributesController.prototype.getGroundColor = function () {
        return this.groundColor;
    };
    /**
     * Sets whether the ground is colored or textured.
     * @param {Home3DAttributesController.EnvironmentPaint} groundPaint
     */
    Home3DAttributesController.prototype.setGroundPaint = function (groundPaint) {
        if (groundPaint !== this.groundPaint) {
            var oldGroundPaint = this.groundPaint;
            this.groundPaint = groundPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "GROUND_PAINT", oldGroundPaint, groundPaint);
        }
    };
    /**
     * Returns whether the ground is colored or textured.
     * @return {Home3DAttributesController.EnvironmentPaint}
     */
    Home3DAttributesController.prototype.getGroundPaint = function () {
        return this.groundPaint;
    };
    /**
     * Returns <code>true</code> if the background image should be displayed on the ground in 3D.
     * @return {boolean}
     */
    Home3DAttributesController.prototype.isBackgroundImageVisibleOnGround3D = function () {
        return this.backgroundImageVisibleOnGround3D;
    };
    /**
     * Sets whether the background image should be displayed on the ground in 3D.
     * @param {boolean} backgroundImageVisibleOnGround3D
     */
    Home3DAttributesController.prototype.setBackgroundImageVisibleOnGround3D = function (backgroundImageVisibleOnGround3D) {
        if (this.backgroundImageVisibleOnGround3D !== backgroundImageVisibleOnGround3D) {
            this.backgroundImageVisibleOnGround3D = backgroundImageVisibleOnGround3D;
            this.propertyChangeSupport.firePropertyChange(/* name */ "BACKGROUND_IMAGE_VISIBLE_ON_GROUND_3D", !backgroundImageVisibleOnGround3D, backgroundImageVisibleOnGround3D);
        }
    };
    /**
     * Sets the edited sky color.
     * @param {number} skyColor
     */
    Home3DAttributesController.prototype.setSkyColor = function (skyColor) {
        if (skyColor !== this.skyColor) {
            var oldSkyColor = this.skyColor;
            this.skyColor = skyColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SKY_COLOR", oldSkyColor, skyColor);
        }
    };
    /**
     * Returns the edited sky color.
     * @return {number}
     */
    Home3DAttributesController.prototype.getSkyColor = function () {
        return this.skyColor;
    };
    /**
     * Sets whether the sky is colored or textured.
     * @param {Home3DAttributesController.EnvironmentPaint} skyPaint
     */
    Home3DAttributesController.prototype.setSkyPaint = function (skyPaint) {
        if (skyPaint !== this.skyPaint) {
            var oldSkyPaint = this.skyPaint;
            this.skyPaint = skyPaint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SKY_PAINT", oldSkyPaint, skyPaint);
        }
    };
    /**
     * Returns whether the sky is colored or textured.
     * @return {Home3DAttributesController.EnvironmentPaint}
     */
    Home3DAttributesController.prototype.getSkyPaint = function () {
        return this.skyPaint;
    };
    /**
     * Sets the edited light color.
     * @param {number} lightColor
     */
    Home3DAttributesController.prototype.setLightColor = function (lightColor) {
        if (lightColor !== this.lightColor) {
            var oldLightColor = this.lightColor;
            this.lightColor = lightColor;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LIGHT_COLOR", oldLightColor, lightColor);
        }
    };
    /**
     * Returns the edited light color.
     * @return {number}
     */
    Home3DAttributesController.prototype.getLightColor = function () {
        return this.lightColor;
    };
    /**
     * Sets the edited walls transparency alpha.
     * @param {number} wallsAlpha
     */
    Home3DAttributesController.prototype.setWallsAlpha = function (wallsAlpha) {
        if (wallsAlpha !== this.wallsAlpha) {
            var oldWallsAlpha = this.wallsAlpha;
            this.wallsAlpha = wallsAlpha;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WALLS_ALPHA", oldWallsAlpha, wallsAlpha);
        }
    };
    /**
     * Returns the edited walls transparency alpha.
     * @return {number}
     */
    Home3DAttributesController.prototype.getWallsAlpha = function () {
        return this.wallsAlpha;
    };
    /**
     * Controls the modification of the 3D attributes of the edited home.
     */
    Home3DAttributesController.prototype.modify3DAttributes = function () {
        var groundColor = this.getGroundColor();
        var groundTexture = this.getGroundPaint() === Home3DAttributesController.EnvironmentPaint.TEXTURED ? this.getGroundTextureController().getTexture() : null;
        var backgroundImageVisibleOnGround3D = this.isBackgroundImageVisibleOnGround3D();
        var skyColor = this.getSkyColor();
        var skyTexture = this.getSkyPaint() === Home3DAttributesController.EnvironmentPaint.TEXTURED ? this.getSkyTextureController().getTexture() : null;
        var lightColor = this.getLightColor();
        var wallsAlpha = this.getWallsAlpha();
        var homeEnvironment = this.home.getEnvironment();
        var oldGroundColor = homeEnvironment.getGroundColor();
        var oldBackgroundImageVisibleOnGround3D = homeEnvironment.isBackgroundImageVisibleOnGround3D();
        var oldGroundTexture = homeEnvironment.getGroundTexture();
        var oldSkyColor = homeEnvironment.getSkyColor();
        var oldSkyTexture = homeEnvironment.getSkyTexture();
        var oldLightColor = homeEnvironment.getLightColor();
        var oldWallsAlpha = homeEnvironment.getWallsAlpha();
        Home3DAttributesController.doModify3DAttributes(this.home, groundColor, groundTexture, backgroundImageVisibleOnGround3D, skyColor, skyTexture, lightColor, wallsAlpha);
        if (this.undoSupport != null) {
            this.undoSupport.postEdit(new Home3DAttributesController.Home3DAttributesModificationUndoableEdit(this.home, this.preferences, oldGroundColor, oldGroundTexture, oldBackgroundImageVisibleOnGround3D, oldSkyColor, oldSkyTexture, oldLightColor, oldWallsAlpha, groundColor, groundTexture, backgroundImageVisibleOnGround3D, skyColor, skyTexture, lightColor, wallsAlpha));
        }
    };
    /**
     * Modifies the 3D attributes of the given <code>home</code>.
     * @param {Home} home
     * @param {number} groundColor
     * @param {HomeTexture} groundTexture
     * @param {boolean} backgroundImageVisibleOnGround3D
     * @param {number} skyColor
     * @param {HomeTexture} skyTexture
     * @param {number} lightColor
     * @param {number} wallsAlpha
     * @private
     */
    Home3DAttributesController.doModify3DAttributes = function (home, groundColor, groundTexture, backgroundImageVisibleOnGround3D, skyColor, skyTexture, lightColor, wallsAlpha) {
        var homeEnvironment = home.getEnvironment();
        homeEnvironment.setGroundColor(groundColor);
        homeEnvironment.setGroundTexture(groundTexture);
        homeEnvironment.setBackgroundImageVisibleOnGround3D(backgroundImageVisibleOnGround3D);
        homeEnvironment.setSkyColor(skyColor);
        homeEnvironment.setSkyTexture(skyTexture);
        homeEnvironment.setLightColor(lightColor);
        homeEnvironment.setWallsAlpha(wallsAlpha);
    };
    return Home3DAttributesController;
}());
Home3DAttributesController["__class"] = "com.eteks.sweethome3d.viewcontroller.Home3DAttributesController";
Home3DAttributesController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (Home3DAttributesController) {
    /**
     * The possible values for {@linkplain #getGroundPaint() ground paint type}.
     * @enum
     * @property {Home3DAttributesController.EnvironmentPaint} COLORED
     * @property {Home3DAttributesController.EnvironmentPaint} TEXTURED
     * @class
     */
    var EnvironmentPaint;
    (function (EnvironmentPaint) {
        EnvironmentPaint[EnvironmentPaint["COLORED"] = 0] = "COLORED";
        EnvironmentPaint[EnvironmentPaint["TEXTURED"] = 1] = "TEXTURED";
    })(EnvironmentPaint = Home3DAttributesController.EnvironmentPaint || (Home3DAttributesController.EnvironmentPaint = {}));
    /**
     * Undoable edit for 3D attributes modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var Home3DAttributesModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(Home3DAttributesModificationUndoableEdit, _super);
        function Home3DAttributesModificationUndoableEdit(home, preferences, oldGroundColor, oldGroundTexture, oldBackgroundImageVisibleOnGround3D, oldSkyColor, oldSkyTexture, oldLightColor, oldWallsAlpha, groundColor, groundTexture, backgroundImageVisibleOnGround3D, skyColor, skyTexture, lightColor, wallsAlpha) {
            var _this = _super.call(this, preferences, Home3DAttributesController, "undoModify3DAttributesName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldGroundColor === undefined) {
                _this.oldGroundColor = 0;
            }
            if (_this.oldGroundTexture === undefined) {
                _this.oldGroundTexture = null;
            }
            if (_this.oldBackgroundImageVisibleOnGround3D === undefined) {
                _this.oldBackgroundImageVisibleOnGround3D = false;
            }
            if (_this.oldSkyColor === undefined) {
                _this.oldSkyColor = 0;
            }
            if (_this.oldSkyTexture === undefined) {
                _this.oldSkyTexture = null;
            }
            if (_this.oldLightColor === undefined) {
                _this.oldLightColor = 0;
            }
            if (_this.oldWallsAlpha === undefined) {
                _this.oldWallsAlpha = 0;
            }
            if (_this.groundColor === undefined) {
                _this.groundColor = 0;
            }
            if (_this.groundTexture === undefined) {
                _this.groundTexture = null;
            }
            if (_this.backgroundImageVisibleOnGround3D === undefined) {
                _this.backgroundImageVisibleOnGround3D = false;
            }
            if (_this.skyColor === undefined) {
                _this.skyColor = 0;
            }
            if (_this.skyTexture === undefined) {
                _this.skyTexture = null;
            }
            if (_this.lightColor === undefined) {
                _this.lightColor = 0;
            }
            if (_this.wallsAlpha === undefined) {
                _this.wallsAlpha = 0;
            }
            _this.home = home;
            _this.oldGroundColor = oldGroundColor;
            _this.oldGroundTexture = oldGroundTexture;
            _this.oldBackgroundImageVisibleOnGround3D = oldBackgroundImageVisibleOnGround3D;
            _this.oldSkyColor = oldSkyColor;
            _this.oldSkyTexture = oldSkyTexture;
            _this.oldLightColor = oldLightColor;
            _this.oldWallsAlpha = oldWallsAlpha;
            _this.groundColor = groundColor;
            _this.groundTexture = groundTexture;
            _this.backgroundImageVisibleOnGround3D = backgroundImageVisibleOnGround3D;
            _this.skyColor = skyColor;
            _this.skyTexture = skyTexture;
            _this.lightColor = lightColor;
            _this.wallsAlpha = wallsAlpha;
            return _this;
        }
        /**
         *
         */
        Home3DAttributesModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            Home3DAttributesController.doModify3DAttributes(this.home, this.oldGroundColor, this.oldGroundTexture, this.oldBackgroundImageVisibleOnGround3D, this.oldSkyColor, this.oldSkyTexture, this.oldLightColor, this.oldWallsAlpha);
        };
        /**
         *
         */
        Home3DAttributesModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            Home3DAttributesController.doModify3DAttributes(this.home, this.groundColor, this.groundTexture, this.backgroundImageVisibleOnGround3D, this.skyColor, this.skyTexture, this.lightColor, this.wallsAlpha);
        };
        return Home3DAttributesModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    Home3DAttributesController.Home3DAttributesModificationUndoableEdit = Home3DAttributesModificationUndoableEdit;
    Home3DAttributesModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.Home3DAttributesController.Home3DAttributesModificationUndoableEdit";
    Home3DAttributesModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    var Home3DAttributesController$0 = /** @class */ (function () {
        function Home3DAttributesController$0(__parent) {
            this.__parent = __parent;
        }
        Home3DAttributesController$0.prototype.propertyChange = function (ev) {
            this.__parent.setGroundPaint(Home3DAttributesController.EnvironmentPaint.TEXTURED);
        };
        return Home3DAttributesController$0;
    }());
    Home3DAttributesController.Home3DAttributesController$0 = Home3DAttributesController$0;
    var Home3DAttributesController$1 = /** @class */ (function () {
        function Home3DAttributesController$1(__parent) {
            this.__parent = __parent;
        }
        Home3DAttributesController$1.prototype.propertyChange = function (ev) {
            this.__parent.setSkyPaint(Home3DAttributesController.EnvironmentPaint.TEXTURED);
        };
        return Home3DAttributesController$1;
    }());
    Home3DAttributesController.Home3DAttributesController$1 = Home3DAttributesController$1;
})(Home3DAttributesController || (Home3DAttributesController = {}));
/**
 * Creates the controller of home furniture view with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 */
var HomeFurnitureController = /** @class */ (function () {
    function HomeFurnitureController(home, preferences, viewFactory, contentManager, undoSupport) {
        if (((home != null && home instanceof Home) || home === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null) && ((undoSupport != null && undoSupport instanceof javax.swing.undo.UndoableEditSupport) || undoSupport === null)) {
            var __args = arguments;
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.textureController === undefined) {
                this.textureController = null;
            }
            if (this.modelMaterialsController === undefined) {
                this.modelMaterialsController = null;
            }
            if (this.homeFurnitureView === undefined) {
                this.homeFurnitureView = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.priceEditable === undefined) {
                this.priceEditable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentageEditable === undefined) {
                this.valueAddedTaxPercentageEditable = false;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.nameVisible === undefined) {
                this.nameVisible = null;
            }
            if (this.x === undefined) {
                this.x = null;
            }
            if (this.y === undefined) {
                this.y = null;
            }
            if (this.elevation === undefined) {
                this.elevation = null;
            }
            if (this.angleInDegrees === undefined) {
                this.angleInDegrees = null;
            }
            if (this.angle === undefined) {
                this.angle = null;
            }
            if (this.rollAndPitchEditable === undefined) {
                this.rollAndPitchEditable = false;
            }
            if (this.roll === undefined) {
                this.roll = null;
            }
            if (this.pitch === undefined) {
                this.pitch = null;
            }
            if (this.horizontalAxis === undefined) {
                this.horizontalAxis = null;
            }
            if (this.width === undefined) {
                this.width = null;
            }
            if (this.proportionalWidth === undefined) {
                this.proportionalWidth = null;
            }
            if (this.depth === undefined) {
                this.depth = null;
            }
            if (this.proportionalDepth === undefined) {
                this.proportionalDepth = null;
            }
            if (this.height === undefined) {
                this.height = null;
            }
            if (this.proportionalHeight === undefined) {
                this.proportionalHeight = null;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.modelTransformations === undefined) {
                this.modelTransformations = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.paint === undefined) {
                this.paint = null;
            }
            if (this.shininess === undefined) {
                this.shininess = null;
            }
            if (this.visible === undefined) {
                this.visible = null;
            }
            if (this.modelMirrored === undefined) {
                this.modelMirrored = null;
            }
            if (this.basePlanItem === undefined) {
                this.basePlanItem = null;
            }
            if (this.basePlanItemEnabled === undefined) {
                this.basePlanItemEnabled = false;
            }
            if (this.lightPowerEditable === undefined) {
                this.lightPowerEditable = false;
            }
            if (this.lightPower === undefined) {
                this.lightPower = null;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.widthDepthDeformable === undefined) {
                this.widthDepthDeformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.visibleEditable === undefined) {
                this.visibleEditable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.wallThickness === undefined) {
                this.wallThickness = 0;
            }
            if (this.wallDistance === undefined) {
                this.wallDistance = 0;
            }
            if (this.wallWidth === undefined) {
                this.wallWidth = 0;
            }
            if (this.wallLeft === undefined) {
                this.wallLeft = 0;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.wallTop === undefined) {
                this.wallTop = 0;
            }
            if (this.sashes === undefined) {
                this.sashes = null;
            }
            this.home = home;
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.contentManager = contentManager;
            this.undoSupport = undoSupport;
            this.propertyChangeSupport = new PropertyChangeSupport(this);
            this.updateProperties();
        }
        else if (((home != null && home instanceof Home) || home === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && contentManager instanceof javax.swing.undo.UndoableEditSupport) || contentManager === null) && undoSupport === undefined) {
            var __args = arguments;
            var undoSupport_3 = __args[3];
            {
                var __args_43 = arguments;
                var contentManager_4 = null;
                if (this.home === undefined) {
                    this.home = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.undoSupport === undefined) {
                    this.undoSupport = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (this.textureController === undefined) {
                    this.textureController = null;
                }
                if (this.modelMaterialsController === undefined) {
                    this.modelMaterialsController = null;
                }
                if (this.homeFurnitureView === undefined) {
                    this.homeFurnitureView = null;
                }
                if (this.icon === undefined) {
                    this.icon = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.description === undefined) {
                    this.description = null;
                }
                if (this.priceEditable === undefined) {
                    this.priceEditable = false;
                }
                if (this.price === undefined) {
                    this.price = null;
                }
                if (this.valueAddedTaxPercentageEditable === undefined) {
                    this.valueAddedTaxPercentageEditable = false;
                }
                if (this.valueAddedTaxPercentage === undefined) {
                    this.valueAddedTaxPercentage = null;
                }
                if (this.nameVisible === undefined) {
                    this.nameVisible = null;
                }
                if (this.x === undefined) {
                    this.x = null;
                }
                if (this.y === undefined) {
                    this.y = null;
                }
                if (this.elevation === undefined) {
                    this.elevation = null;
                }
                if (this.angleInDegrees === undefined) {
                    this.angleInDegrees = null;
                }
                if (this.angle === undefined) {
                    this.angle = null;
                }
                if (this.rollAndPitchEditable === undefined) {
                    this.rollAndPitchEditable = false;
                }
                if (this.roll === undefined) {
                    this.roll = null;
                }
                if (this.pitch === undefined) {
                    this.pitch = null;
                }
                if (this.horizontalAxis === undefined) {
                    this.horizontalAxis = null;
                }
                if (this.width === undefined) {
                    this.width = null;
                }
                if (this.proportionalWidth === undefined) {
                    this.proportionalWidth = null;
                }
                if (this.depth === undefined) {
                    this.depth = null;
                }
                if (this.proportionalDepth === undefined) {
                    this.proportionalDepth = null;
                }
                if (this.height === undefined) {
                    this.height = null;
                }
                if (this.proportionalHeight === undefined) {
                    this.proportionalHeight = null;
                }
                if (this.proportional === undefined) {
                    this.proportional = false;
                }
                if (this.modelTransformations === undefined) {
                    this.modelTransformations = null;
                }
                if (this.color === undefined) {
                    this.color = null;
                }
                if (this.paint === undefined) {
                    this.paint = null;
                }
                if (this.shininess === undefined) {
                    this.shininess = null;
                }
                if (this.visible === undefined) {
                    this.visible = null;
                }
                if (this.modelMirrored === undefined) {
                    this.modelMirrored = null;
                }
                if (this.basePlanItem === undefined) {
                    this.basePlanItem = null;
                }
                if (this.basePlanItemEnabled === undefined) {
                    this.basePlanItemEnabled = false;
                }
                if (this.lightPowerEditable === undefined) {
                    this.lightPowerEditable = false;
                }
                if (this.lightPower === undefined) {
                    this.lightPower = null;
                }
                if (this.resizable === undefined) {
                    this.resizable = false;
                }
                if (this.deformable === undefined) {
                    this.deformable = false;
                }
                if (this.widthDepthDeformable === undefined) {
                    this.widthDepthDeformable = false;
                }
                if (this.texturable === undefined) {
                    this.texturable = false;
                }
                if (this.visibleEditable === undefined) {
                    this.visibleEditable = false;
                }
                if (this.doorOrWindow === undefined) {
                    this.doorOrWindow = false;
                }
                if (this.wallThickness === undefined) {
                    this.wallThickness = 0;
                }
                if (this.wallDistance === undefined) {
                    this.wallDistance = 0;
                }
                if (this.wallWidth === undefined) {
                    this.wallWidth = 0;
                }
                if (this.wallLeft === undefined) {
                    this.wallLeft = 0;
                }
                if (this.wallHeight === undefined) {
                    this.wallHeight = 0;
                }
                if (this.wallTop === undefined) {
                    this.wallTop = 0;
                }
                if (this.sashes === undefined) {
                    this.sashes = null;
                }
                this.home = home;
                this.preferences = preferences;
                this.viewFactory = viewFactory;
                this.contentManager = contentManager_4;
                this.undoSupport = undoSupport_3;
                this.propertyChangeSupport = new PropertyChangeSupport(this);
                this.updateProperties();
            }
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.textureController === undefined) {
                this.textureController = null;
            }
            if (this.modelMaterialsController === undefined) {
                this.modelMaterialsController = null;
            }
            if (this.homeFurnitureView === undefined) {
                this.homeFurnitureView = null;
            }
            if (this.icon === undefined) {
                this.icon = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.priceEditable === undefined) {
                this.priceEditable = false;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentageEditable === undefined) {
                this.valueAddedTaxPercentageEditable = false;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.nameVisible === undefined) {
                this.nameVisible = null;
            }
            if (this.x === undefined) {
                this.x = null;
            }
            if (this.y === undefined) {
                this.y = null;
            }
            if (this.elevation === undefined) {
                this.elevation = null;
            }
            if (this.angleInDegrees === undefined) {
                this.angleInDegrees = null;
            }
            if (this.angle === undefined) {
                this.angle = null;
            }
            if (this.rollAndPitchEditable === undefined) {
                this.rollAndPitchEditable = false;
            }
            if (this.roll === undefined) {
                this.roll = null;
            }
            if (this.pitch === undefined) {
                this.pitch = null;
            }
            if (this.horizontalAxis === undefined) {
                this.horizontalAxis = null;
            }
            if (this.width === undefined) {
                this.width = null;
            }
            if (this.proportionalWidth === undefined) {
                this.proportionalWidth = null;
            }
            if (this.depth === undefined) {
                this.depth = null;
            }
            if (this.proportionalDepth === undefined) {
                this.proportionalDepth = null;
            }
            if (this.height === undefined) {
                this.height = null;
            }
            if (this.proportionalHeight === undefined) {
                this.proportionalHeight = null;
            }
            if (this.proportional === undefined) {
                this.proportional = false;
            }
            if (this.modelTransformations === undefined) {
                this.modelTransformations = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.paint === undefined) {
                this.paint = null;
            }
            if (this.shininess === undefined) {
                this.shininess = null;
            }
            if (this.visible === undefined) {
                this.visible = null;
            }
            if (this.modelMirrored === undefined) {
                this.modelMirrored = null;
            }
            if (this.basePlanItem === undefined) {
                this.basePlanItem = null;
            }
            if (this.basePlanItemEnabled === undefined) {
                this.basePlanItemEnabled = false;
            }
            if (this.lightPowerEditable === undefined) {
                this.lightPowerEditable = false;
            }
            if (this.lightPower === undefined) {
                this.lightPower = null;
            }
            if (this.resizable === undefined) {
                this.resizable = false;
            }
            if (this.deformable === undefined) {
                this.deformable = false;
            }
            if (this.widthDepthDeformable === undefined) {
                this.widthDepthDeformable = false;
            }
            if (this.texturable === undefined) {
                this.texturable = false;
            }
            if (this.visibleEditable === undefined) {
                this.visibleEditable = false;
            }
            if (this.doorOrWindow === undefined) {
                this.doorOrWindow = false;
            }
            if (this.wallThickness === undefined) {
                this.wallThickness = 0;
            }
            if (this.wallDistance === undefined) {
                this.wallDistance = 0;
            }
            if (this.wallWidth === undefined) {
                this.wallWidth = 0;
            }
            if (this.wallLeft === undefined) {
                this.wallLeft = 0;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.wallTop === undefined) {
                this.wallTop = 0;
            }
            if (this.sashes === undefined) {
                this.sashes = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Returns the texture controller of the piece.
     * @return {TextureChoiceController}
     */
    HomeFurnitureController.prototype.getTextureController = function () {
        if (this.textureController == null) {
            this.textureController = new TextureChoiceController(this.preferences.getLocalizedString(HomeFurnitureController, "textureTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.textureController.addPropertyChangeListener("TEXTURE", new HomeFurnitureController.HomeFurnitureController$0(this));
        }
        return this.textureController;
    };
    /**
     * Returns the model materials controller of the piece.
     * @return {ModelMaterialsController}
     */
    HomeFurnitureController.prototype.getModelMaterialsController = function () {
        if (this.modelMaterialsController == null) {
            this.modelMaterialsController = new ModelMaterialsController(this.preferences.getLocalizedString(HomeFurnitureController, "modelMaterialsTitle"), this.preferences, this.viewFactory, this.contentManager);
            this.modelMaterialsController.addPropertyChangeListener("MATERIALS", new HomeFurnitureController.HomeFurnitureController$1(this));
            var sizeChangeListener = new HomeFurnitureController.HomeFurnitureController$2(this);
            this.addPropertyChangeListener("WIDTH", sizeChangeListener);
            this.addPropertyChangeListener("DEPTH", sizeChangeListener);
            this.addPropertyChangeListener("HEIGHT", sizeChangeListener);
            this.addPropertyChangeListener("MODEL_TRANSFORMATIONS", new HomeFurnitureController.HomeFurnitureController$3(this));
        }
        return this.modelMaterialsController;
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    HomeFurnitureController.prototype.getView = function () {
        if (this.homeFurnitureView == null) {
            this.homeFurnitureView = this.viewFactory.createHomeFurnitureView(this.preferences, this);
        }
        return this.homeFurnitureView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    HomeFurnitureController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    HomeFurnitureController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    HomeFurnitureController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates edited properties from selected furniture in the home edited by this controller.
     */
    HomeFurnitureController.prototype.updateProperties = function () {
        var selectedFurniture = Home.getFurnitureSubList(this.home.getSelectedItems());
        var textureController = this.getTextureController();
        var modelMaterialsController = this.getModelMaterialsController();
        if ( /* isEmpty */(selectedFurniture.length == 0)) {
            this.setIcon(null);
            this.setName(null);
            this.setNameVisible(null);
            this.setDescription(null);
            this.setPrice(null, false);
            this.priceEditable = false;
            this.setValueAddedTaxPercentage(null);
            this.valueAddedTaxPercentageEditable = false;
            this.setX(null);
            this.setY(null);
            this.setElevation(null);
            this.basePlanItemEnabled = false;
            this.setAngleInDegrees(null);
            this.setRoll(null);
            this.setPitch(null);
            this.setHorizontalAxis(null);
            this.rollAndPitchEditable = false;
            this.setWidth$java_lang_Float$boolean$boolean$boolean(null, true, false, false);
            this.setDepth$java_lang_Float$boolean$boolean$boolean(null, true, false, false);
            this.setHeight$java_lang_Float$boolean$boolean(null, true, false);
            this.setColor(null);
            if (textureController != null) {
                textureController.setTexture(null);
            }
            if (modelMaterialsController != null) {
                modelMaterialsController.setMaterials(null);
                modelMaterialsController.setModel(null);
                modelMaterialsController.setModelCreator(null);
            }
            this.setPaint(null);
            this.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A(null);
            this.doorOrWindow = false;
            this.wallThickness = 1;
            this.wallDistance = 0;
            this.wallWidth = 1;
            this.wallLeft = 0;
            this.wallHeight = 1;
            this.wallTop = 0;
            this.sashes = [];
            this.setShininess(null);
            this.visibleEditable = false;
            this.setVisible(null);
            this.setModelMirrored(null);
            this.lightPowerEditable = false;
            this.setLightPower(null);
            this.setResizable(true);
            this.setDeformable(true);
            this.setTexturable(true);
            this.setProportional(false);
        }
        else {
            var firstPiece = selectedFurniture[0];
            var icon = firstPiece.getIcon();
            if (icon != null) {
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if (!(function (o1, o2) { if (o1 && o1.equals) {
                            return o1.equals(o2);
                        }
                        else {
                            return o1 === o2;
                        } })(icon, /* get */ selectedFurniture[i].getIcon())) {
                            icon = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setIcon(icon);
            var name_7 = firstPiece.getName();
            if (name_7 != null) {
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if (!(name_7 === /* get */ selectedFurniture[i].getName())) {
                            name_7 = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setName(name_7);
            var nameVisible = firstPiece.isNameVisible();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if (nameVisible !== /* get */ selectedFurniture[i].isNameVisible()) {
                        nameVisible = null;
                        break;
                    }
                }
                ;
            }
            this.setNameVisible(nameVisible);
            var description = firstPiece.getDescription();
            if (description != null) {
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if (!(description === /* get */ selectedFurniture[i].getDescription())) {
                            description = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setDescription(description);
            var priceEditable = this.preferences.getCurrency() != null;
            if (priceEditable) {
                for (var i = 0; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if ( /* get */selectedFurniture[i] != null && /* get */ selectedFurniture[i] instanceof HomeFurnitureGroup) {
                            priceEditable = false;
                            break;
                        }
                    }
                    ;
                }
            }
            this.priceEditable = priceEditable;
            if (priceEditable) {
                var price = firstPiece.getPrice();
                if (price != null) {
                    for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                        {
                            if (!(( /* get */selectedFurniture[i].getPrice()) != null ? price.eq(/* get */ selectedFurniture[i].getPrice()) : (price === ( /* get */selectedFurniture[i].getPrice())))) {
                                price = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                this.setPrice(price, false);
                this.valueAddedTaxPercentageEditable = this.preferences.isValueAddedTaxEnabled();
                var valueAddedTaxPercentage = firstPiece.getValueAddedTaxPercentage();
                if (valueAddedTaxPercentage != null) {
                    for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                        {
                            if (!(( /* get */selectedFurniture[i].getValueAddedTaxPercentage()) != null ? valueAddedTaxPercentage.eq(/* get */ selectedFurniture[i].getValueAddedTaxPercentage()) : (valueAddedTaxPercentage === ( /* get */selectedFurniture[i].getValueAddedTaxPercentage())))) {
                                valueAddedTaxPercentage = null;
                                break;
                            }
                        }
                        ;
                    }
                }
                this.setValueAddedTaxPercentage(valueAddedTaxPercentage);
            }
            else {
                this.setPrice(null, false);
                this.setValueAddedTaxPercentage(null);
                this.valueAddedTaxPercentageEditable = false;
            }
            var x = firstPiece.getX();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */x !== /* get */ selectedFurniture[i].getX()) {
                        x = null;
                        break;
                    }
                }
                ;
            }
            this.setX(x);
            var y = firstPiece.getY();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */y !== /* get */ selectedFurniture[i].getY()) {
                        y = null;
                        break;
                    }
                }
                ;
            }
            this.setY(y);
            var elevation = firstPiece.getElevation();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */elevation !== /* get */ selectedFurniture[i].getElevation()) {
                        elevation = null;
                        break;
                    }
                }
                ;
            }
            this.setElevation(elevation);
            var basePlanItemEnabled = !firstPiece.isDoorOrWindow();
            for (var i = 1; !basePlanItemEnabled && i < /* size */ selectedFurniture.length; i++) {
                {
                    if (!selectedFurniture[i].isDoorOrWindow()) {
                        basePlanItemEnabled = true;
                    }
                }
                ;
            }
            this.basePlanItemEnabled = basePlanItemEnabled;
            var basePlanItem = !firstPiece.isMovable();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* booleanValue */basePlanItem !== !selectedFurniture[i].isMovable()) {
                        basePlanItem = null;
                        break;
                    }
                }
                ;
            }
            this.setBasePlanItem(basePlanItem);
            var angle = firstPiece.getAngle();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */angle !== /* get */ selectedFurniture[i].getAngle()) {
                        angle = null;
                        break;
                    }
                }
                ;
            }
            this.setAngle(angle);
            var rollAndPitchEditable = true;
            for (var i = 0; rollAndPitchEditable && i < /* size */ selectedFurniture.length; i++) {
                {
                    var piece = selectedFurniture[i];
                    rollAndPitchEditable = piece.isHorizontallyRotatable() && piece.getStaircaseCutOutShape() == null;
                }
                ;
            }
            this.rollAndPitchEditable = rollAndPitchEditable;
            if (this.rollAndPitchEditable) {
                var roll = firstPiece.getRoll();
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if ( /* floatValue */roll !== /* get */ selectedFurniture[i].getRoll()) {
                            roll = null;
                            break;
                        }
                    }
                    ;
                }
                this.setRoll(roll);
                var pitch = firstPiece.getPitch();
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if ( /* floatValue */pitch !== /* get */ selectedFurniture[i].getPitch()) {
                            pitch = null;
                            break;
                        }
                    }
                    ;
                }
                this.setPitch(pitch);
                if (roll == null && pitch == null || (roll != null && roll !== 0 && pitch != null && pitch !== 0) || (roll != null && roll === 0 && pitch != null && pitch === 0)) {
                    this.setHorizontalAxis(null);
                }
                else if (roll == null && pitch != null && pitch === 0 || roll != null && roll !== 0) {
                    this.setHorizontalAxis(HomeFurnitureController.FurnitureHorizontalAxis.ROLL);
                }
                else {
                    this.setHorizontalAxis(HomeFurnitureController.FurnitureHorizontalAxis.PITCH);
                }
            }
            else {
                this.setRoll(null);
                this.setPitch(null);
                this.setHorizontalAxis(null);
            }
            var width = firstPiece.getWidth();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */width !== /* get */ selectedFurniture[i].getWidth()) {
                        width = null;
                        break;
                    }
                }
                ;
            }
            this.setWidth$java_lang_Float$boolean$boolean$boolean(width, true, false, false);
            var depth = firstPiece.getDepth();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */depth !== /* get */ selectedFurniture[i].getDepth()) {
                        depth = null;
                        break;
                    }
                }
                ;
            }
            this.setDepth$java_lang_Float$boolean$boolean$boolean(depth, true, false, false);
            var height = firstPiece.getHeight();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* floatValue */height !== /* get */ selectedFurniture[i].getHeight()) {
                        height = null;
                        break;
                    }
                }
                ;
            }
            this.setHeight$java_lang_Float$boolean$boolean(height, true, false);
            var selectedFurnitureWithoutGroups = this.getFurnitureWithoutGroups(selectedFurniture);
            var firstPieceExceptGroup = selectedFurnitureWithoutGroups[0];
            var color = firstPieceExceptGroup.getColor();
            if (color != null) {
                for (var i = 1; i < /* size */ selectedFurnitureWithoutGroups.length; i++) {
                    {
                        if (!(color === /* get */ selectedFurnitureWithoutGroups[i].getColor())) {
                            color = null;
                            break;
                        }
                    }
                    ;
                }
            }
            this.setColor(color);
            var texture = firstPieceExceptGroup.getTexture();
            if (texture != null) {
                for (var i = 1; i < /* size */ selectedFurnitureWithoutGroups.length; i++) {
                    {
                        if (!texture.equals(/* get */ selectedFurnitureWithoutGroups[i].getTexture())) {
                            texture = null;
                            break;
                        }
                    }
                    ;
                }
            }
            if (textureController != null) {
                textureController.setTexture(texture);
            }
            var modelMaterials = firstPieceExceptGroup.getModelMaterials();
            var model = firstPieceExceptGroup.getModel();
            var creator = firstPieceExceptGroup.getCreator();
            if (model != null) {
                for (var i = 1; i < /* size */ selectedFurnitureWithoutGroups.length; i++) {
                    {
                        var piece = selectedFurnitureWithoutGroups[i];
                        if (!(function (a1, a2) { if (a1 == null && a2 == null)
                            return true; if (a1 == null || a2 == null)
                            return false; if (a1.length != a2.length)
                            return false; for (var i_14 = 0; i_14 < a1.length; i_14++) {
                            if (a1[i_14] != a2[i_14])
                                return false;
                        } return true; })(modelMaterials, piece.getModelMaterials()) || model !== piece.getModel()) {
                            modelMaterials = null;
                            model = null;
                            creator = null;
                            break;
                        }
                    }
                    ;
                }
            }
            if (modelMaterialsController != null) {
                modelMaterialsController.setMaterials(modelMaterials);
                modelMaterialsController.setModel(model);
                modelMaterialsController.setModelCreator(creator);
                modelMaterialsController.setModelSize(firstPieceExceptGroup.getWidth(), firstPieceExceptGroup.getDepth(), firstPieceExceptGroup.getHeight());
                modelMaterialsController.setModelRotation(firstPieceExceptGroup.getModelRotation());
                modelMaterialsController.setModelTransformations(firstPieceExceptGroup.getModelTransformations());
                modelMaterialsController.setBackFaceShown(firstPieceExceptGroup.isBackFaceShown());
            }
            var defaultColorsAndTextures = true;
            for (var i = 0; i < /* size */ selectedFurnitureWithoutGroups.length; i++) {
                {
                    var piece = selectedFurnitureWithoutGroups[i];
                    if (piece.getColor() != null || piece.getTexture() != null || piece.getModelMaterials() != null) {
                        defaultColorsAndTextures = false;
                        break;
                    }
                }
                ;
            }
            if (color != null) {
                this.setPaint(HomeFurnitureController.FurniturePaint.COLORED);
            }
            else if (texture != null) {
                this.setPaint(HomeFurnitureController.FurniturePaint.TEXTURED);
            }
            else if (modelMaterials != null) {
                this.setPaint(HomeFurnitureController.FurniturePaint.MODEL_MATERIALS);
            }
            else if (defaultColorsAndTextures) {
                this.setPaint(HomeFurnitureController.FurniturePaint.DEFAULT);
            }
            else {
                this.setPaint(null);
            }
            var modelTransformations = firstPiece.getModelTransformations();
            if ( /* size */selectedFurniture.length !== 1) {
                modelTransformations = null;
            }
            else {
                if (modelTransformations == null) {
                    modelTransformations = [];
                }
                if (firstPiece != null && firstPiece instanceof HomeDoorOrWindow) {
                    var editedDoorOrWindow = firstPiece;
                    this.doorOrWindow = true;
                    this.wallThickness = editedDoorOrWindow.getWallThickness();
                    this.wallDistance = editedDoorOrWindow.getWallDistance();
                    this.wallWidth = editedDoorOrWindow.getWallWidth();
                    this.wallLeft = editedDoorOrWindow.getWallLeft();
                    this.wallHeight = editedDoorOrWindow.getWallHeight();
                    this.wallTop = editedDoorOrWindow.getWallTop();
                    this.sashes = editedDoorOrWindow.getSashes();
                }
            }
            this.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A(modelTransformations);
            var firstPieceShininess = firstPieceExceptGroup.getShininess();
            var shininess = firstPieceShininess == null ? HomeFurnitureController.FurnitureShininess.DEFAULT : ( /* floatValue */firstPieceShininess === 0 ? HomeFurnitureController.FurnitureShininess.MATT : HomeFurnitureController.FurnitureShininess.SHINY);
            for (var i = 1; i < /* size */ selectedFurnitureWithoutGroups.length; i++) {
                {
                    var piece = selectedFurnitureWithoutGroups[i];
                    if (firstPieceShininess !== piece.getShininess() || (firstPieceShininess != null && !(firstPieceShininess === piece.getShininess()))) {
                        shininess = null;
                        break;
                    }
                }
                ;
            }
            this.setShininess(shininess);
            var visibleEditable = true;
            var homeFurniture = this.home.getFurniture();
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    if (!(homeFurniture.indexOf((piece)) >= 0)) {
                        visibleEditable = false;
                        break;
                    }
                }
            }
            this.visibleEditable = visibleEditable;
            if (visibleEditable) {
                var visible = firstPiece.isVisible();
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if (visible !== /* get */ selectedFurniture[i].isVisible()) {
                            visible = null;
                            break;
                        }
                    }
                    ;
                }
                this.setVisible(visible);
            }
            else {
                this.setVisible(null);
            }
            var modelMirrored = firstPiece.isModelMirrored();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if (modelMirrored !== /* get */ selectedFurniture[i].isModelMirrored()) {
                        modelMirrored = null;
                        break;
                    }
                }
                ;
            }
            this.setModelMirrored(modelMirrored);
            var lightPowerEditable = (firstPiece != null && firstPiece instanceof HomeLight);
            for (var i = 1; lightPowerEditable && i < /* size */ selectedFurniture.length; i++) {
                {
                    lightPowerEditable = ( /* get */selectedFurniture[i] != null && /* get */ selectedFurniture[i] instanceof HomeLight);
                }
                ;
            }
            this.lightPowerEditable = lightPowerEditable;
            if (lightPowerEditable) {
                var lightPower = firstPiece.getPower();
                for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                    {
                        if ( /* floatValue */lightPower !== selectedFurniture[i].getPower()) {
                            lightPower = null;
                            break;
                        }
                    }
                    ;
                }
                this.setLightPower(lightPower);
            }
            else {
                this.setLightPower(null);
            }
            var resizable = firstPiece.isResizable();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* booleanValue */resizable !== /* get */ selectedFurniture[i].isResizable()) {
                        resizable = null;
                        break;
                    }
                }
                ;
            }
            this.setResizable(resizable != null && /* booleanValue */ resizable);
            var deformable = true;
            for (var i = 0; deformable && i < /* size */ selectedFurniture.length; i++) {
                {
                    var piece = selectedFurniture[i];
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        {
                            var array = piece.getAllFurniture();
                            for (var index = 0; index < array.length; index++) {
                                var childPiece = array[index];
                                {
                                    if (!childPiece.isDeformable() || childPiece.isHorizontallyRotated() || childPiece.getModelTransformations() != null) {
                                        deformable = false;
                                        break;
                                    }
                                }
                            }
                        }
                    }
                    else {
                        deformable = piece.isDeformable() && piece.getModelTransformations() == null;
                    }
                }
                ;
            }
            this.setDeformable(deformable);
            if (!this.isDeformable()) {
                this.setProportional(true);
            }
            this.widthDepthDeformable = true;
            for (var i = 0; this.widthDepthDeformable && i < /* size */ selectedFurniture.length; i++) {
                {
                    var piece = selectedFurniture[i];
                    this.widthDepthDeformable = piece.isWidthDepthDeformable();
                }
                ;
            }
            var texturable = firstPiece.isTexturable();
            for (var i = 1; i < /* size */ selectedFurniture.length; i++) {
                {
                    if ( /* booleanValue */texturable !== /* get */ selectedFurniture[i].isTexturable()) {
                        texturable = null;
                        break;
                    }
                }
                ;
            }
            this.setTexturable(texturable == null || /* booleanValue */ texturable);
        }
    };
    /**
     * Returns all the pieces of the given <code>furniture</code> list except groups.
     * @param {HomePieceOfFurniture[]} furniture
     * @return {HomePieceOfFurniture[]}
     * @private
     */
    HomeFurnitureController.prototype.getFurnitureWithoutGroups = function (furniture) {
        var pieces = ([]);
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(pieces, this.getFurnitureWithoutGroups(piece.getFurniture()));
                }
                else {
                    /* add */ (pieces.push(piece) > 0);
                }
            }
        }
        return pieces;
    };
    /**
     * Returns <code>true</code> if the given <code>property</code> is editable.
     * Depending on whether a property is editable or not, the view associated to this controller
     * may render it differently.
     * The implementation of this method always returns <code>true</code> except for <code>DESCRIPTION</code> and <code>PRICE</code> properties.
     * @param {string} property
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isPropertyEditable = function (property) {
        switch ((property)) {
            case "DESCRIPTION":
                return false;
            case "PRICE":
                return this.isPriceEditable();
            case "VALUE_ADDED_TAX_PERCENTAGE":
                return this.isValueAddedTaxPercentageEditable();
            case "ROLL":
            case "PITCH":
                return this.isRollAndPitchEditable();
            case "MODEL_TRANSFORMATIONS":
                return this.getModelTransformations() != null;
            case "LIGHT_POWER":
                return this.isLightPowerEditable();
            case "VISIBLE":
                return this.visibleEditable;
            default:
                return true;
        }
    };
    /**
     * Sets the edited icon.
     * @param {Object} icon
     * @private
     */
    HomeFurnitureController.prototype.setIcon = function (icon) {
        if (icon !== this.icon) {
            var oldIcon = this.icon;
            this.icon = icon;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ICON", oldIcon, icon);
        }
    };
    /**
     * Returns the edited icon.
     * @return {Object}
     */
    HomeFurnitureController.prototype.getIcon = function () {
        return this.icon;
    };
    /**
     * Sets the edited name.
     * @param {string} name
     */
    HomeFurnitureController.prototype.setName = function (name) {
        if (name !== this.name) {
            var oldName = this.name;
            this.name = name;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns the edited name.
     * @return {string}
     */
    HomeFurnitureController.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets whether furniture name is visible or not.
     * @param {boolean} nameVisible
     */
    HomeFurnitureController.prototype.setNameVisible = function (nameVisible) {
        if (nameVisible !== this.nameVisible) {
            var oldNameVisible = this.nameVisible;
            this.nameVisible = nameVisible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NAME_VISIBLE", oldNameVisible, nameVisible);
        }
    };
    /**
     * Returns whether furniture name should be drawn or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.getNameVisible = function () {
        return this.nameVisible;
    };
    /**
     * Sets the edited description.
     * @param {string} description
     */
    HomeFurnitureController.prototype.setDescription = function (description) {
        if (description !== this.description) {
            var oldDescription = this.description;
            this.description = description;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DESCRIPTION", oldDescription, description);
        }
    };
    /**
     * Returns the edited description.
     * @return {string}
     */
    HomeFurnitureController.prototype.getDescription = function () {
        return this.description;
    };
    HomeFurnitureController.prototype.setPrice = function (price, updateCurrencyAndValueAddedTaxPercentage) {
        if (updateCurrencyAndValueAddedTaxPercentage === void 0) { updateCurrencyAndValueAddedTaxPercentage = true; }
        if (price !== this.price && (price == null || !((this.price) != null ? price.eq(this.price) : (price === (this.price))))) {
            var oldPrice = this.price;
            this.price = price;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PRICE", oldPrice, price);
            if (updateCurrencyAndValueAddedTaxPercentage) {
                if (price != null && this.isValueAddedTaxPercentageEditable() && this.getValueAddedTaxPercentage() == null && /* size */ Home.getFurnitureSubList(this.home.getSelectedItems()).length === 1) {
                    this.setValueAddedTaxPercentage(this.preferences.getDefaultValueAddedTaxPercentage());
                }
            }
        }
    };
    /**
     * Returns the edited price.
     * @return {Big}
     */
    HomeFurnitureController.prototype.getPrice = function () {
        return this.price;
    };
    /**
     * Returns whether the price can be edited or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isPriceEditable = function () {
        return this.priceEditable;
    };
    /**
     * Sets the edited Value Added Tax percentage.
     * @param {Big} valueAddedTaxPercentage
     */
    HomeFurnitureController.prototype.setValueAddedTaxPercentage = function (valueAddedTaxPercentage) {
        if (valueAddedTaxPercentage !== this.valueAddedTaxPercentage && (valueAddedTaxPercentage == null || !((this.valueAddedTaxPercentage) != null ? valueAddedTaxPercentage.eq(this.valueAddedTaxPercentage) : (valueAddedTaxPercentage === (this.valueAddedTaxPercentage))))) {
            var oldValueAddedTaxPercentage = this.valueAddedTaxPercentage;
            this.valueAddedTaxPercentage = valueAddedTaxPercentage;
            this.propertyChangeSupport.firePropertyChange(/* name */ "VALUE_ADDED_TAX_PERCENTAGE", oldValueAddedTaxPercentage, valueAddedTaxPercentage);
        }
    };
    /**
     * Returns edited Value Added Tax percentage.
     * @return {Big}
     */
    HomeFurnitureController.prototype.getValueAddedTaxPercentage = function () {
        return this.valueAddedTaxPercentage;
    };
    /**
     * Returns whether the Value Added Tax percentage can be edited or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isValueAddedTaxPercentageEditable = function () {
        return this.valueAddedTaxPercentageEditable;
    };
    /**
     * Sets the edited abscissa.
     * @param {number} x
     */
    HomeFurnitureController.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.propertyChangeSupport.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the edited abscissa.
     * @return {number}
     */
    HomeFurnitureController.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the edited ordinate.
     * @param {number} y
     */
    HomeFurnitureController.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.propertyChangeSupport.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the edited ordinate.
     * @return {number}
     */
    HomeFurnitureController.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the edited elevation.
     * @param {number} elevation
     */
    HomeFurnitureController.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns the edited elevation.
     * @return {number}
     */
    HomeFurnitureController.prototype.getElevation = function () {
        return this.elevation;
    };
    HomeFurnitureController.prototype.setAngleInDegrees = function (angleInDegrees, updateAngle) {
        if (updateAngle === void 0) { updateAngle = true; }
        if (angleInDegrees !== this.angleInDegrees) {
            var oldAngleInDegrees = this.angleInDegrees;
            this.angleInDegrees = angleInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ANGLE_IN_DEGREES", oldAngleInDegrees, angleInDegrees);
            if (updateAngle) {
                if (this.angleInDegrees == null) {
                    this.setAngle(null, false);
                }
                else {
                    this.setAngle(new Number(/* toRadians */ (function (x) { return x * Math.PI / 180; })(this.angleInDegrees)).valueOf(), false);
                }
            }
        }
    };
    /**
     * Returns the edited angle in degrees.
     * @return {number}
     */
    HomeFurnitureController.prototype.getAngleInDegrees = function () {
        return this.angleInDegrees;
    };
    HomeFurnitureController.prototype.setAngle = function (angle, updateAngleInDegrees) {
        if (updateAngleInDegrees === void 0) { updateAngleInDegrees = true; }
        if (angle !== this.angle) {
            var oldAngle = this.angle;
            this.angle = angle;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ANGLE", oldAngle, angle);
            if (updateAngleInDegrees) {
                if (angle == null) {
                    this.setAngleInDegrees(null, false);
                }
                else {
                    this.setAngleInDegrees(((Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(angle)) + 360) | 0) % 360, false);
                }
            }
        }
    };
    /**
     * Returns the edited angle in radians.
     * @return {number}
     */
    HomeFurnitureController.prototype.getAngle = function () {
        return this.angle;
    };
    /**
     * Returns whether roll and pitch angles can be edited.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isRollAndPitchEditable = function () {
        return this.rollAndPitchEditable;
    };
    /**
     * Sets the edited roll angle in radians.
     * @param {number} roll
     */
    HomeFurnitureController.prototype.setRoll = function (roll) {
        if (roll !== this.roll) {
            var oldRoll = this.roll;
            this.roll = roll;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ROLL", oldRoll, roll);
        }
    };
    /**
     * Returns the edited roll angle in radians.
     * @return {number}
     */
    HomeFurnitureController.prototype.getRoll = function () {
        return this.roll;
    };
    /**
     * Sets the edited pitch in radians.
     * @param {number} pitch
     */
    HomeFurnitureController.prototype.setPitch = function (pitch) {
        if (pitch !== this.pitch) {
            var oldPitch = this.pitch;
            this.pitch = pitch;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PITCH", oldPitch, pitch);
        }
    };
    /**
     * Returns the edited pitch in radians.
     * @return {number}
     */
    HomeFurnitureController.prototype.getPitch = function () {
        return this.pitch;
    };
    /**
     * Sets the edited horizontal axis.
     * @param {HomeFurnitureController.FurnitureHorizontalAxis} horizontalAxis
     */
    HomeFurnitureController.prototype.setHorizontalAxis = function (horizontalAxis) {
        if (horizontalAxis !== this.horizontalAxis) {
            var oldAxis = this.horizontalAxis;
            this.horizontalAxis = horizontalAxis;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HORIZONTAL_AXIS", oldAxis, horizontalAxis);
        }
    };
    /**
     * Returns the edited horizontal axis.
     * @return {HomeFurnitureController.FurnitureHorizontalAxis}
     */
    HomeFurnitureController.prototype.getHorizontalAxis = function () {
        return this.horizontalAxis;
    };
    /**
     * Returns <code>true</code> if base plan item is an enabled property.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isBasePlanItemEnabled = function () {
        return this.basePlanItemEnabled;
    };
    /**
     * Returns <code>true</code> if base plan item is an enabled property.
     * @deprecated the method is wrongly named and should be replaced by <code>isBasePlanItemEnabled</code>.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isBasePlanItemEditable = function () {
        return this.basePlanItemEnabled;
    };
    /**
     * Sets whether furniture is a base plan item or not.
     * @param {boolean} basePlanItem
     */
    HomeFurnitureController.prototype.setBasePlanItem = function (basePlanItem) {
        if (basePlanItem !== this.basePlanItem) {
            var oldMovable = this.basePlanItem;
            this.basePlanItem = basePlanItem;
            this.propertyChangeSupport.firePropertyChange(/* name */ "BASE_PLAN_ITEM", oldMovable, basePlanItem);
        }
    };
    /**
     * Returns whether furniture is a base plan item or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.getBasePlanItem = function () {
        return this.basePlanItem;
    };
    HomeFurnitureController.prototype.setWidth$java_lang_Float = function (width) {
        this.setWidth$java_lang_Float$boolean$boolean$boolean(width, false, this.isProportional() || !this.widthDepthDeformable, this.isProportional());
    };
    HomeFurnitureController.prototype.setWidth$java_lang_Float$boolean$boolean$boolean = function (width, keepProportionalWidthUnchanged, updateDepth, updateHeight) {
        var adjustedWidth = width != null ? Math.max(width, 0.001) : null;
        if (adjustedWidth === width || adjustedWidth != null && (adjustedWidth === width) || !keepProportionalWidthUnchanged) {
            this.proportionalWidth = width;
        }
        if (adjustedWidth == null && this.width != null || adjustedWidth != null && !(adjustedWidth === this.width)) {
            var oldWidth = this.width;
            this.width = adjustedWidth;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WIDTH", oldWidth, adjustedWidth);
            if (oldWidth != null && adjustedWidth != null) {
                var ratio = adjustedWidth / oldWidth;
                if (updateDepth && this.proportionalDepth != null) {
                    this.setDepth$java_lang_Float$boolean$boolean$boolean(this.proportionalDepth * ratio, true, false, false);
                }
                if (updateHeight && this.proportionalHeight != null) {
                    this.setHeight$java_lang_Float$boolean$boolean(this.proportionalHeight * ratio, true, false);
                }
            }
            else {
                if (updateDepth) {
                    this.setDepth$java_lang_Float$boolean$boolean$boolean(null, false, false, false);
                }
                if (updateHeight) {
                    this.setHeight$java_lang_Float$boolean$boolean(null, false, false);
                }
            }
        }
    };
    HomeFurnitureController.prototype.setWidth = function (width, keepProportionalWidthUnchanged, updateDepth, updateHeight) {
        if (((typeof width === 'number') || width === null) && ((typeof keepProportionalWidthUnchanged === 'boolean') || keepProportionalWidthUnchanged === null) && ((typeof updateDepth === 'boolean') || updateDepth === null) && ((typeof updateHeight === 'boolean') || updateHeight === null)) {
            return this.setWidth$java_lang_Float$boolean$boolean$boolean(width, keepProportionalWidthUnchanged, updateDepth, updateHeight);
        }
        else if (((typeof width === 'number') || width === null) && keepProportionalWidthUnchanged === undefined && updateDepth === undefined && updateHeight === undefined) {
            return this.setWidth$java_lang_Float(width);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the edited width.
     * @return {number}
     */
    HomeFurnitureController.prototype.getWidth = function () {
        return this.width;
    };
    HomeFurnitureController.prototype.setDepth$java_lang_Float = function (depth) {
        this.setDepth$java_lang_Float$boolean$boolean$boolean(depth, false, this.isProportional() || !this.widthDepthDeformable, this.isProportional());
    };
    HomeFurnitureController.prototype.setDepth$java_lang_Float$boolean$boolean$boolean = function (depth, keepProportionalDepthUnchanged, updateWidth, updateHeight) {
        var adjustedDepth = depth != null ? Math.max(depth, 0.001) : null;
        if (adjustedDepth === depth || adjustedDepth != null && (adjustedDepth === depth) || !keepProportionalDepthUnchanged) {
            this.proportionalDepth = depth;
        }
        if (adjustedDepth == null && this.depth != null || adjustedDepth != null && !(adjustedDepth === this.depth)) {
            var oldDepth = this.depth;
            this.depth = adjustedDepth;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DEPTH", oldDepth, adjustedDepth);
            if (oldDepth != null && adjustedDepth != null) {
                var ratio = adjustedDepth / oldDepth;
                if (updateWidth && this.proportionalWidth != null) {
                    this.setWidth$java_lang_Float$boolean$boolean$boolean(this.proportionalWidth * ratio, true, false, false);
                }
                if (updateHeight && this.proportionalHeight != null) {
                    this.setHeight$java_lang_Float$boolean$boolean(this.proportionalHeight * ratio, true, false);
                }
            }
            else {
                if (updateWidth) {
                    this.setWidth$java_lang_Float$boolean$boolean$boolean(null, false, false, false);
                }
                if (updateHeight) {
                    this.setHeight$java_lang_Float$boolean$boolean(null, false, false);
                }
            }
        }
    };
    HomeFurnitureController.prototype.setDepth = function (depth, keepProportionalDepthUnchanged, updateWidth, updateHeight) {
        if (((typeof depth === 'number') || depth === null) && ((typeof keepProportionalDepthUnchanged === 'boolean') || keepProportionalDepthUnchanged === null) && ((typeof updateWidth === 'boolean') || updateWidth === null) && ((typeof updateHeight === 'boolean') || updateHeight === null)) {
            return this.setDepth$java_lang_Float$boolean$boolean$boolean(depth, keepProportionalDepthUnchanged, updateWidth, updateHeight);
        }
        else if (((typeof depth === 'number') || depth === null) && keepProportionalDepthUnchanged === undefined && updateWidth === undefined && updateHeight === undefined) {
            return this.setDepth$java_lang_Float(depth);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the edited depth.
     * @return {number}
     */
    HomeFurnitureController.prototype.getDepth = function () {
        return this.depth;
    };
    HomeFurnitureController.prototype.setHeight$java_lang_Float = function (height) {
        this.setHeight$java_lang_Float$boolean$boolean(height, false, this.isProportional());
    };
    HomeFurnitureController.prototype.setHeight$java_lang_Float$boolean$boolean = function (height, keepProportionalHeightUnchanged, updateWidthAndDepth) {
        var adjustedHeight = height != null ? Math.max(height, 0.001) : null;
        if (adjustedHeight === height || adjustedHeight != null && (adjustedHeight === height) || !keepProportionalHeightUnchanged) {
            this.proportionalHeight = height;
        }
        if (adjustedHeight == null && this.height != null || adjustedHeight != null && !(adjustedHeight === this.height)) {
            var oldHeight = this.height;
            this.height = adjustedHeight;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, adjustedHeight);
            if (updateWidthAndDepth) {
                if (oldHeight != null && adjustedHeight != null) {
                    var ratio = adjustedHeight / oldHeight;
                    if (this.proportionalWidth != null) {
                        this.setWidth$java_lang_Float$boolean$boolean$boolean(this.proportionalWidth * ratio, true, false, false);
                    }
                    if (this.proportionalDepth != null) {
                        this.setDepth$java_lang_Float$boolean$boolean$boolean(this.proportionalDepth * ratio, true, false, false);
                    }
                }
                else {
                    this.setWidth$java_lang_Float$boolean$boolean$boolean(null, false, false, false);
                    this.setDepth$java_lang_Float$boolean$boolean$boolean(null, false, false, false);
                }
            }
        }
    };
    HomeFurnitureController.prototype.setHeight = function (height, keepProportionalHeightUnchanged, updateWidthAndDepth) {
        if (((typeof height === 'number') || height === null) && ((typeof keepProportionalHeightUnchanged === 'boolean') || keepProportionalHeightUnchanged === null) && ((typeof updateWidthAndDepth === 'boolean') || updateWidthAndDepth === null)) {
            return this.setHeight$java_lang_Float$boolean$boolean(height, keepProportionalHeightUnchanged, updateWidthAndDepth);
        }
        else if (((typeof height === 'number') || height === null) && keepProportionalHeightUnchanged === undefined && updateWidthAndDepth === undefined) {
            return this.setHeight$java_lang_Float(height);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the edited height.
     * @return {number}
     */
    HomeFurnitureController.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets whether furniture proportions should be kept.
     * @param {boolean} proportional
     */
    HomeFurnitureController.prototype.setProportional = function (proportional) {
        if (proportional !== this.proportional) {
            var oldProportional = this.proportional;
            this.proportional = proportional;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PROPORTIONAL", oldProportional, proportional);
        }
    };
    /**
     * Returns whether furniture proportions should be kept or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isProportional = function () {
        return this.proportional;
    };
    /**
     * Sets the edited color.
     * @param {number} color
     */
    HomeFurnitureController.prototype.setColor = function (color) {
        if (color !== this.color) {
            var oldColor = this.color;
            this.color = color;
            this.propertyChangeSupport.firePropertyChange(/* name */ "COLOR", oldColor, color);
        }
    };
    /**
     * Returns the edited color.
     * @return {number}
     */
    HomeFurnitureController.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets whether the piece is colored, textured, uses customized materials or unknown painted.
     * @param {HomeFurnitureController.FurniturePaint} paint
     */
    HomeFurnitureController.prototype.setPaint = function (paint) {
        if (paint !== this.paint) {
            var oldPaint = this.paint;
            this.paint = paint;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PAINT", oldPaint, paint);
        }
    };
    /**
     * Returns whether the piece is colored, textured, uses customized materials or unknown painted.
     * @return {HomeFurnitureController.FurniturePaint}
     */
    HomeFurnitureController.prototype.getPaint = function () {
        return this.paint;
    };
    HomeFurnitureController.prototype.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A = function (modelTransformations) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(modelTransformations, this.modelTransformations)) {
            var oldModelTransformations = this.modelTransformations;
            this.modelTransformations = modelTransformations;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODEL_TRANSFORMATIONS", oldModelTransformations, modelTransformations);
            this.setDeformable(modelTransformations == null || modelTransformations.length === 0);
            this.setProportional(modelTransformations != null && modelTransformations.length > 0);
        }
    };
    HomeFurnitureController.prototype.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A$float$float$float$float$float$float = function (transformations, x, y, elevation, width, depth, height) {
        if (this.doorOrWindow) {
            var currentX = this.getX();
            var currentY = this.getY();
            var currentElevation = this.getElevation();
            var currentWidth = this.getWidth();
            var currentDepth = this.getDepth();
            var currentHeight = this.getHeight();
            var angle = -this.getAngle();
            var currentXAlongWidth = (currentX * Math.cos(angle) - currentY * Math.sin(angle));
            var updatedXAlongWidth = (x * Math.cos(angle) - y * Math.sin(angle));
            var currentWallLeft = this.wallLeft * currentWidth;
            var wallWidth = this.wallWidth * currentWidth;
            var xWallLeft = currentXAlongWidth - currentWidth / 2 + currentWallLeft;
            var newWallLeft = xWallLeft - updatedXAlongWidth + width / 2;
            var currentYAlongDepth = (currentX * Math.sin(angle) + currentY * Math.cos(angle));
            var updatedYAlongDepth = (x * Math.sin(angle) + y * Math.cos(angle));
            var currentWallDistance = this.wallDistance * currentDepth;
            var wallThickness = this.wallThickness * currentDepth;
            var yWallBack = currentYAlongDepth - currentDepth / 2 + currentWallDistance;
            var newWallDistance = yWallBack - updatedYAlongDepth + depth / 2;
            var currentWallTop = this.wallTop * currentHeight;
            var wallHeight = this.wallHeight * currentHeight;
            var newWallTop = currentWallTop + elevation + height - (currentElevation + currentHeight);
            var sashes = this.sashes;
            for (var i = 0; i < sashes.length; i++) {
                {
                    var sash = sashes[i];
                    var xAxis = sash.getXAxis() * currentWidth;
                    xAxis += newWallLeft - currentWallLeft;
                    var yAxis = sash.getYAxis() * currentDepth;
                    yAxis += newWallDistance - currentWallDistance;
                    sashes[i] = new Sash(xAxis / width, yAxis / depth, sash.getWidth() * currentWidth / width, sash.getStartAngle(), sash.getEndAngle());
                }
                ;
            }
            this.wallThickness = wallThickness / depth;
            this.wallDistance = newWallDistance / depth;
            this.wallWidth = wallWidth / width;
            this.wallLeft = newWallLeft / width;
            this.wallHeight = wallHeight / height;
            this.wallTop = newWallTop / height;
            this.sashes = sashes;
        }
        this.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A(transformations);
        this.setX(x);
        this.setY(y);
        this.setWidth$java_lang_Float$boolean$boolean$boolean(width, false, false, false);
        this.setDepth$java_lang_Float$boolean$boolean$boolean(depth, false, false, false);
        this.setHeight$java_lang_Float$boolean$boolean(height, false, false);
    };
    /**
     * Sets model transformations and updated dimensions of the edited piece.
     * @param {com.eteks.sweethome3d.model.Transformation[]} transformations
     * @param {number} x
     * @param {number} y
     * @param {number} elevation
     * @param {number} width
     * @param {number} depth
     * @param {number} height
     */
    HomeFurnitureController.prototype.setModelTransformations = function (transformations, x, y, elevation, width, depth, height) {
        if (((transformations != null && transformations instanceof Array && (transformations.length == 0 || transformations[0] == null || (transformations[0] != null && transformations[0] instanceof Transformation))) || transformations === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null)) {
            return this.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A$float$float$float$float$float$float(transformations, x, y, elevation, width, depth, height);
        }
        else if (((transformations != null && transformations instanceof Array && (transformations.length == 0 || transformations[0] == null || (transformations[0] != null && transformations[0] instanceof Transformation))) || transformations === null) && x === undefined && y === undefined && elevation === undefined && width === undefined && depth === undefined && height === undefined) {
            return this.setModelTransformations$com_eteks_sweethome3d_model_Transformation_A(transformations);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns model transformations.
     * @return {com.eteks.sweethome3d.model.Transformation[]}
     */
    HomeFurnitureController.prototype.getModelTransformations = function () {
        return this.modelTransformations;
    };
    /**
     * Sets whether the piece shininess is the default one, matt, shiny or unknown.
     * @param {HomeFurnitureController.FurnitureShininess} shininess
     */
    HomeFurnitureController.prototype.setShininess = function (shininess) {
        if (shininess !== this.shininess) {
            var oldShininess = this.shininess;
            this.shininess = shininess;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SHININESS", oldShininess, shininess);
        }
    };
    /**
     * Returns whether the piece is shininess is the default one, matt, shiny or unknown.
     * @return {HomeFurnitureController.FurnitureShininess}
     */
    HomeFurnitureController.prototype.getShininess = function () {
        return this.shininess;
    };
    /**
     * Sets whether furniture is visible or not.
     * @param {boolean} visible
     */
    HomeFurnitureController.prototype.setVisible = function (visible) {
        if (visible !== this.visible) {
            var oldVisible = this.visible;
            this.visible = visible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "VISIBLE", oldVisible, visible);
        }
    };
    /**
     * Returns whether furniture is visible or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.getVisible = function () {
        return this.visible;
    };
    /**
     * Sets whether furniture model is mirrored or not.
     * @param {boolean} modelMirrored
     */
    HomeFurnitureController.prototype.setModelMirrored = function (modelMirrored) {
        if (modelMirrored !== this.modelMirrored) {
            var oldModelMirrored = this.modelMirrored;
            this.modelMirrored = modelMirrored;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODEL_MIRRORED", oldModelMirrored, modelMirrored);
        }
    };
    /**
     * Returns whether furniture model is mirrored or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.getModelMirrored = function () {
        return this.modelMirrored;
    };
    /**
     * Returns <code>true</code> if light power is an editable property.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isLightPowerEditable = function () {
        return this.lightPowerEditable;
    };
    /**
     * Returns the edited light power.
     * @return {number}
     */
    HomeFurnitureController.prototype.getLightPower = function () {
        return this.lightPower;
    };
    /**
     * Sets the edited light power.
     * @param {number} lightPower
     */
    HomeFurnitureController.prototype.setLightPower = function (lightPower) {
        if (lightPower !== this.lightPower) {
            var oldLightPower = this.lightPower;
            this.lightPower = lightPower;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LIGHT_POWER", oldLightPower, lightPower);
        }
    };
    /**
     * Sets whether furniture model can be resized or not.
     * @param {boolean} resizable
     * @private
     */
    HomeFurnitureController.prototype.setResizable = function (resizable) {
        if (resizable !== this.resizable) {
            var oldResizable = this.resizable;
            this.resizable = resizable;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RESIZABLE", oldResizable, resizable);
        }
    };
    /**
     * Returns whether furniture model can be resized or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isResizable = function () {
        return this.resizable;
    };
    /**
     * Sets whether furniture model can be deformed or not.
     * @param {boolean} deformable
     * @private
     */
    HomeFurnitureController.prototype.setDeformable = function (deformable) {
        if (deformable !== this.deformable) {
            var oldDeformable = this.deformable;
            this.deformable = deformable;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DEFORMABLE", oldDeformable, deformable);
        }
    };
    /**
     * Returns whether furniture model can be deformed or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isDeformable = function () {
        return this.deformable;
    };
    /**
     * Sets whether the color or the texture of the furniture model can be changed or not.
     * @param {boolean} texturable
     * @private
     */
    HomeFurnitureController.prototype.setTexturable = function (texturable) {
        if (texturable !== this.texturable) {
            var oldTexturable = this.texturable;
            this.texturable = texturable;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TEXTURABLE", oldTexturable, texturable);
        }
    };
    /**
     * Returns whether the color or the texture of the furniture model can be changed or not.
     * @return {boolean}
     */
    HomeFurnitureController.prototype.isTexturable = function () {
        return this.texturable;
    };
    /**
     * Controls the modification of selected furniture in the edited home.
     */
    HomeFurnitureController.prototype.modifyFurniture = function () {
        var oldSelection = this.home.getSelectedItems();
        var selectedFurniture = Home.getFurnitureSubList(oldSelection);
        if (!(selectedFurniture.length == 0)) {
            var name_8 = this.getName();
            var nameVisible = this.getNameVisible();
            var description = this.getDescription();
            var price = this.getPrice();
            var removePrice = selectedFurniture.length === 1 && price == null;
            var valueAddedTaxPercentage = this.getValueAddedTaxPercentage();
            var removeValueAddedTaxPercentage = selectedFurniture.length === 1 && valueAddedTaxPercentage == null;
            var currency = this.preferences.getCurrency();
            var x = this.getX();
            var y = this.getY();
            var elevation = this.getElevation();
            var angle = this.getAngle();
            var roll = this.getRoll();
            var pitch = this.getPitch();
            var horizontalAxis = this.getHorizontalAxis();
            var basePlanItem = this.getBasePlanItem();
            var width = this.getWidth();
            var depth = this.getDepth();
            var height = this.getHeight();
            var proportional = this.isProportional() && (width == null || depth == null || height == null);
            var paint = this.getPaint();
            var color = paint === HomeFurnitureController.FurniturePaint.COLORED ? this.getColor() : null;
            var textureController = this.getTextureController();
            var texture = void 0;
            if (textureController != null && paint === HomeFurnitureController.FurniturePaint.TEXTURED) {
                texture = textureController.getTexture();
            }
            else {
                texture = null;
            }
            var modelMaterialsController = this.getModelMaterialsController();
            var modelMaterials = void 0;
            if (modelMaterialsController != null && paint === HomeFurnitureController.FurniturePaint.MODEL_MATERIALS) {
                modelMaterials = modelMaterialsController.getMaterials();
            }
            else {
                modelMaterials = null;
            }
            var modelTransformations = this.getModelTransformations();
            var defaultShininess = this.getShininess() === HomeFurnitureController.FurnitureShininess.DEFAULT;
            var shininess = this.getShininess() === HomeFurnitureController.FurnitureShininess.SHINY ? new Number(0.5).valueOf() : (this.getShininess() === HomeFurnitureController.FurnitureShininess.MATT ? new Number(0).valueOf() : null);
            var visible = this.getVisible();
            var modelMirrored = this.getModelMirrored();
            var lightPower = this.getLightPower();
            var modifiedFurniture = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ selectedFurniture.length);
            for (var i = 0; i < modifiedFurniture.length; i++) {
                {
                    var piece = selectedFurniture[i];
                    if (piece != null && piece instanceof HomeLight) {
                        modifiedFurniture[i] = new HomeFurnitureController.ModifiedLight(piece);
                    }
                    else if (piece != null && piece instanceof HomeDoorOrWindow) {
                        modifiedFurniture[i] = new HomeFurnitureController.ModifiedDoorOrWindow(piece);
                    }
                    else if (piece != null && piece instanceof HomeFurnitureGroup) {
                        modifiedFurniture[i] = new HomeFurnitureController.ModifiedFurnitureGroup(piece);
                    }
                    else {
                        modifiedFurniture[i] = new HomeFurnitureController.ModifiedPieceOfFurniture(piece);
                    }
                }
                ;
            }
            HomeFurnitureController.doModifyFurniture(modifiedFurniture, name_8, nameVisible, description, price, removePrice, valueAddedTaxPercentage, removeValueAddedTaxPercentage, currency, x, y, elevation, angle, roll, pitch, horizontalAxis, basePlanItem, width, depth, height, proportional, modelTransformations, this.wallThickness, this.wallDistance, this.wallWidth, this.wallLeft, this.wallHeight, this.wallTop, this.sashes, paint, color, texture, modelMaterials, defaultShininess, shininess, visible, modelMirrored, lightPower);
            if (this.undoSupport != null) {
                var newSelection = this.home.getSelectedItems();
                this.undoSupport.postEdit(new HomeFurnitureController.FurnitureModificationUndoableEdit(this.home, this.preferences, /* toArray */ oldSelection.slice(0), /* toArray */ newSelection.slice(0), modifiedFurniture, name_8, nameVisible, description, price, removePrice, valueAddedTaxPercentage, removeValueAddedTaxPercentage, currency, x, y, elevation, angle, roll, pitch, horizontalAxis, basePlanItem, width, depth, height, proportional, modelTransformations, this.wallThickness, this.wallDistance, this.wallWidth, this.wallLeft, this.wallHeight, this.wallTop, this.sashes, paint, color, texture, modelMaterials, defaultShininess, shininess, visible, modelMirrored, lightPower));
            }
            if (name_8 != null) {
                this.preferences.addAutoCompletionString("HomePieceOfFurnitureName", name_8);
            }
            if (description != null) {
                this.preferences.addAutoCompletionString("HomePieceOfFurnitureDescription", description);
            }
            if (valueAddedTaxPercentage != null) {
                this.preferences.setDefaultValueAddedTaxPercentage(valueAddedTaxPercentage);
            }
        }
    };
    /**
     * Modifies furniture properties with the values in parameter.
     * @param {com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.ModifiedPieceOfFurniture[]} modifiedFurniture
     * @param {string} name
     * @param {boolean} nameVisible
     * @param {string} description
     * @param {Big} price
     * @param {boolean} removePrice
     * @param {Big} valueAddedTaxPercentage
     * @param {boolean} removeValueAddedTaxPercenage
     * @param {string} currency
     * @param {number} x
     * @param {number} y
     * @param {number} elevation
     * @param {number} angle
     * @param {number} roll
     * @param {number} pitch
     * @param {HomeFurnitureController.FurnitureHorizontalAxis} horizontalAxis
     * @param {boolean} basePlanItem
     * @param {number} width
     * @param {number} depth
     * @param {number} height
     * @param {boolean} proportional
     * @param {com.eteks.sweethome3d.model.Transformation[]} modelTransformations
     * @param {number} wallThickness
     * @param {number} wallDistance
     * @param {number} wallWidth
     * @param {number} wallLeft
     * @param {number} wallHeight
     * @param {number} wallTop
     * @param {com.eteks.sweethome3d.model.Sash[]} sashes
     * @param {HomeFurnitureController.FurniturePaint} paint
     * @param {number} color
     * @param {HomeTexture} texture
     * @param {com.eteks.sweethome3d.model.HomeMaterial[]} modelMaterials
     * @param {boolean} defaultShininess
     * @param {number} shininess
     * @param {boolean} visible
     * @param {boolean} modelMirrored
     * @param {number} lightPower
     * @private
     */
    HomeFurnitureController.doModifyFurniture = function (modifiedFurniture, name, nameVisible, description, price, removePrice, valueAddedTaxPercentage, removeValueAddedTaxPercenage, currency, x, y, elevation, angle, roll, pitch, horizontalAxis, basePlanItem, width, depth, height, proportional, modelTransformations, wallThickness, wallDistance, wallWidth, wallLeft, wallHeight, wallTop, sashes, paint, color, texture, modelMaterials, defaultShininess, shininess, visible, modelMirrored, lightPower) {
        for (var index = 0; index < modifiedFurniture.length; index++) {
            var modifiedPiece = modifiedFurniture[index];
            {
                var piece = modifiedPiece.getPieceOfFurniture();
                if (name != null) {
                    piece.setName(name);
                }
                if (nameVisible != null) {
                    piece.setNameVisible(nameVisible);
                }
                if (description != null) {
                    piece.setDescription(description);
                }
                if (!(piece != null && piece instanceof HomeFurnitureGroup)) {
                    if (price != null || removePrice) {
                        if (price !== piece.getPrice() && (price == null || !((piece.getPrice()) != null ? price.eq(piece.getPrice()) : (price === (piece.getPrice()))))) {
                            piece.setCurrency(price != null ? currency : null);
                        }
                        if (price != null) {
                            try {
                                price = /* setScale */ price.round(/* getDefaultFractionDigits */ (['JPY', 'VND'].indexOf(currency) >= 0 ? 0 : 2));
                            }
                            catch (ex) {
                            }
                        }
                        piece.setPrice(price);
                    }
                    if (valueAddedTaxPercentage != null || removeValueAddedTaxPercenage) {
                        piece.setValueAddedTaxPercentage(valueAddedTaxPercentage);
                    }
                }
                if (x != null) {
                    piece.setX(x);
                }
                if (y != null) {
                    piece.setY(y);
                }
                if (elevation != null) {
                    piece.setElevation(elevation);
                }
                if (angle != null) {
                    piece.setAngle(angle);
                }
                if (horizontalAxis != null) {
                    switch ((horizontalAxis)) {
                        case HomeFurnitureController.FurnitureHorizontalAxis.ROLL:
                            if (roll != null) {
                                piece.setRoll(roll);
                                piece.setPitch(0);
                            }
                            break;
                        case HomeFurnitureController.FurnitureHorizontalAxis.PITCH:
                            if (pitch != null) {
                                piece.setPitch(pitch);
                                piece.setRoll(0);
                            }
                            break;
                    }
                }
                if (basePlanItem != null && !piece.isDoorOrWindow()) {
                    piece.setMovable(!basePlanItem);
                }
                if (piece.isResizable()) {
                    var oldWidth = piece.getWidth();
                    var oldDepth = piece.getDepth();
                    var deformable = !proportional && piece.isDeformable();
                    if (deformable) {
                        if (width != null) {
                            piece.setWidth(width);
                        }
                        else if (depth != null && !piece.isWidthDepthDeformable()) {
                            piece.setWidth(piece.getWidth() * depth / oldDepth);
                        }
                        if (depth != null) {
                            piece.setDepth(depth);
                        }
                        else if (width != null && !piece.isWidthDepthDeformable()) {
                            piece.setDepth(piece.getDepth() * width / oldWidth);
                        }
                        if (height != null) {
                            piece.setHeight(height);
                        }
                    }
                    else {
                        if (width != null) {
                            piece.scale(width / piece.getWidth());
                        }
                        else if (depth != null) {
                            piece.scale(depth / piece.getDepth());
                        }
                        else if (height != null) {
                            piece.scale(height / piece.getHeight());
                        }
                    }
                    if (modelMirrored != null) {
                        piece.setModelMirrored(modelMirrored);
                    }
                    if ((piece != null && piece instanceof HomeDoorOrWindow) && modifiedFurniture.length === 1 && !(JSON.stringify(piece.getModelTransformations()) === JSON.stringify(modelTransformations != null && modelTransformations.length > 0 ? modelTransformations : null))) {
                        var doorOrWindow = piece;
                        doorOrWindow.setWallThickness(wallThickness);
                        doorOrWindow.setWallDistance(wallDistance);
                        doorOrWindow.setWallWidth(wallWidth);
                        doorOrWindow.setWallLeft(wallLeft);
                        doorOrWindow.setWallHeight(wallHeight);
                        doorOrWindow.setWallTop(wallTop);
                        doorOrWindow.setSashes(sashes);
                    }
                }
                if (piece.isTexturable()) {
                    if (paint != null) {
                        switch ((paint)) {
                            case HomeFurnitureController.FurniturePaint.DEFAULT:
                                piece.setColor(null);
                                piece.setTexture(null);
                                piece.setModelMaterials(null);
                                break;
                            case HomeFurnitureController.FurniturePaint.COLORED:
                                piece.setColor(color);
                                piece.setTexture(null);
                                piece.setModelMaterials(null);
                                break;
                            case HomeFurnitureController.FurniturePaint.TEXTURED:
                                piece.setColor(null);
                                piece.setTexture(texture);
                                piece.setModelMaterials(null);
                                break;
                            case HomeFurnitureController.FurniturePaint.MODEL_MATERIALS:
                                piece.setColor(null);
                                piece.setTexture(null);
                                piece.setModelMaterials(modelMaterials);
                                break;
                        }
                    }
                    if (defaultShininess) {
                        piece.setShininess(null);
                    }
                    else if (shininess != null) {
                        piece.setShininess(shininess);
                    }
                }
                if (modelTransformations != null) {
                    piece.setModelTransformations(modelTransformations.length > 0 ? modelTransformations : null);
                }
                if (visible != null) {
                    piece.setVisible(visible);
                }
                if (lightPower != null) {
                    piece.setPower(lightPower);
                }
            }
        }
    };
    /**
     * Restores furniture properties from the values stored in <code>modifiedFurniture</code>.
     * @param {com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.ModifiedPieceOfFurniture[]} modifiedFurniture
     * @private
     */
    HomeFurnitureController.undoModifyFurniture = function (modifiedFurniture) {
        for (var index = 0; index < modifiedFurniture.length; index++) {
            var modifiedPiece = modifiedFurniture[index];
            {
                modifiedPiece.reset();
            }
        }
    };
    return HomeFurnitureController;
}());
HomeFurnitureController["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeFurnitureController";
HomeFurnitureController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (HomeFurnitureController) {
    /**
     * The possible values for {@linkplain #getPaint() paint type}.
     * @enum
     * @property {HomeFurnitureController.FurniturePaint} DEFAULT
     * @property {HomeFurnitureController.FurniturePaint} COLORED
     * @property {HomeFurnitureController.FurniturePaint} TEXTURED
     * @property {HomeFurnitureController.FurniturePaint} MODEL_MATERIALS
     * @class
     */
    var FurniturePaint;
    (function (FurniturePaint) {
        FurniturePaint[FurniturePaint["DEFAULT"] = 0] = "DEFAULT";
        FurniturePaint[FurniturePaint["COLORED"] = 1] = "COLORED";
        FurniturePaint[FurniturePaint["TEXTURED"] = 2] = "TEXTURED";
        FurniturePaint[FurniturePaint["MODEL_MATERIALS"] = 3] = "MODEL_MATERIALS";
    })(FurniturePaint = HomeFurnitureController.FurniturePaint || (HomeFurnitureController.FurniturePaint = {}));
    /**
     * The possible values for {@linkplain #getShininess() shininess type}.
     * @enum
     * @property {HomeFurnitureController.FurnitureShininess} DEFAULT
     * @property {HomeFurnitureController.FurnitureShininess} MATT
     * @property {HomeFurnitureController.FurnitureShininess} SHINY
     * @class
     */
    var FurnitureShininess;
    (function (FurnitureShininess) {
        FurnitureShininess[FurnitureShininess["DEFAULT"] = 0] = "DEFAULT";
        FurnitureShininess[FurnitureShininess["MATT"] = 1] = "MATT";
        FurnitureShininess[FurnitureShininess["SHINY"] = 2] = "SHINY";
    })(FurnitureShininess = HomeFurnitureController.FurnitureShininess || (HomeFurnitureController.FurnitureShininess = {}));
    /**
     * The possible values for {@linkplain #getHorizontalAxis() horizontal axis}.
     * @enum
     * @property {HomeFurnitureController.FurnitureHorizontalAxis} ROLL
     * @property {HomeFurnitureController.FurnitureHorizontalAxis} PITCH
     * @class
     */
    var FurnitureHorizontalAxis;
    (function (FurnitureHorizontalAxis) {
        FurnitureHorizontalAxis[FurnitureHorizontalAxis["ROLL"] = 0] = "ROLL";
        FurnitureHorizontalAxis[FurnitureHorizontalAxis["PITCH"] = 1] = "PITCH";
    })(FurnitureHorizontalAxis = HomeFurnitureController.FurnitureHorizontalAxis || (HomeFurnitureController.FurnitureHorizontalAxis = {}));
    /**
     * Undoable edit for furniture modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var FurnitureModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(FurnitureModificationUndoableEdit, _super);
        function FurnitureModificationUndoableEdit(home, preferences, oldSelection, newSelection, modifiedFurniture, name, nameVisible, description, price, removePrice, valueAddedTaxPercentage, removeValueAddedTaxPercenage, currency, x, y, elevation, angle, roll, pitch, horizontalAxis, basePlanItem, width, depth, height, proportional, modelTransformations, wallThickness, wallDistance, wallWidth, wallLeft, wallHeight, wallTop, sashes, paint, color, texture, modelMaterials, defaultShininess, shininess, visible, modelMirrored, lightPower) {
            var _this = _super.call(this, preferences, HomeFurnitureController, "undoModifyFurnitureName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.modifiedFurniture === undefined) {
                _this.modifiedFurniture = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.newSelection === undefined) {
                _this.newSelection = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.nameVisible === undefined) {
                _this.nameVisible = null;
            }
            if (_this.description === undefined) {
                _this.description = null;
            }
            if (_this.price === undefined) {
                _this.price = null;
            }
            if (_this.removePrice === undefined) {
                _this.removePrice = false;
            }
            if (_this.currency === undefined) {
                _this.currency = null;
            }
            if (_this.valueAddedTaxPercentage === undefined) {
                _this.valueAddedTaxPercentage = null;
            }
            if (_this.removeValueAddedTaxPercentage === undefined) {
                _this.removeValueAddedTaxPercentage = false;
            }
            if (_this.x === undefined) {
                _this.x = null;
            }
            if (_this.y === undefined) {
                _this.y = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.angle === undefined) {
                _this.angle = null;
            }
            if (_this.roll === undefined) {
                _this.roll = null;
            }
            if (_this.pitch === undefined) {
                _this.pitch = null;
            }
            if (_this.horizontalAxis === undefined) {
                _this.horizontalAxis = null;
            }
            if (_this.basePlanItem === undefined) {
                _this.basePlanItem = null;
            }
            if (_this.width === undefined) {
                _this.width = null;
            }
            if (_this.depth === undefined) {
                _this.depth = null;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.modelTransformations === undefined) {
                _this.modelTransformations = null;
            }
            if (_this.paint === undefined) {
                _this.paint = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.modelMaterials === undefined) {
                _this.modelMaterials = null;
            }
            if (_this.defaultShininess === undefined) {
                _this.defaultShininess = false;
            }
            if (_this.shininess === undefined) {
                _this.shininess = null;
            }
            if (_this.visible === undefined) {
                _this.visible = null;
            }
            if (_this.modelMirrored === undefined) {
                _this.modelMirrored = null;
            }
            if (_this.lightPower === undefined) {
                _this.lightPower = null;
            }
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallWidth === undefined) {
                _this.wallWidth = 0;
            }
            if (_this.wallLeft === undefined) {
                _this.wallLeft = 0;
            }
            if (_this.wallHeight === undefined) {
                _this.wallHeight = 0;
            }
            if (_this.wallTop === undefined) {
                _this.wallTop = 0;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.widthsInPlan === undefined) {
                _this.widthsInPlan = null;
            }
            if (_this.depthsInPlan === undefined) {
                _this.depthsInPlan = null;
            }
            if (_this.heightsInPlan === undefined) {
                _this.heightsInPlan = null;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.newSelection = newSelection;
            _this.modifiedFurniture = modifiedFurniture;
            _this.name = name;
            _this.nameVisible = nameVisible;
            _this.description = description;
            _this.price = price;
            _this.removePrice = removePrice;
            _this.valueAddedTaxPercentage = valueAddedTaxPercentage;
            _this.removeValueAddedTaxPercentage = removeValueAddedTaxPercenage;
            _this.currency = currency;
            _this.x = x;
            _this.y = y;
            _this.elevation = elevation;
            _this.angle = angle;
            _this.roll = roll;
            _this.pitch = pitch;
            _this.horizontalAxis = horizontalAxis;
            _this.basePlanItem = basePlanItem;
            _this.width = width;
            _this.depth = depth;
            _this.height = height;
            _this.proportional = proportional;
            _this.modelTransformations = modelTransformations;
            _this.wallThickness = wallThickness;
            _this.wallDistance = wallDistance;
            _this.wallWidth = wallWidth;
            _this.wallLeft = wallLeft;
            _this.wallHeight = wallHeight;
            _this.wallTop = wallTop;
            _this.sashes = sashes;
            _this.paint = paint;
            _this.color = color;
            _this.texture = texture;
            _this.modelMaterials = modelMaterials;
            _this.defaultShininess = defaultShininess;
            _this.shininess = shininess;
            _this.visible = visible;
            _this.modelMirrored = modelMirrored;
            _this.lightPower = lightPower;
            _this.widthsInPlan = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(modifiedFurniture.length);
            _this.depthsInPlan = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(modifiedFurniture.length);
            _this.heightsInPlan = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(modifiedFurniture.length);
            for (var i = 0; i < modifiedFurniture.length; i++) {
                {
                    var piece = modifiedFurniture[i].getPieceOfFurniture();
                    _this.widthsInPlan[i] = piece.getWidthInPlan();
                    _this.depthsInPlan[i] = piece.getDepthInPlan();
                    _this.heightsInPlan[i] = piece.getHeightInPlan();
                }
                ;
            }
            return _this;
        }
        /**
         *
         */
        FurnitureModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            HomeFurnitureController.undoModifyFurniture(this.modifiedFurniture);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        FurnitureModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            HomeFurnitureController.doModifyFurniture(this.modifiedFurniture, this.name, this.nameVisible, this.description, this.price, this.removePrice, this.valueAddedTaxPercentage, this.removeValueAddedTaxPercentage, this.currency, this.x, this.y, this.elevation, this.angle, this.roll, this.pitch, this.horizontalAxis, this.basePlanItem, this.width, this.depth, this.height, this.proportional, this.modelTransformations, this.wallThickness, this.wallDistance, this.wallWidth, this.wallLeft, this.wallHeight, this.wallTop, this.sashes, this.paint, this.color, this.texture, this.modelMaterials, this.defaultShininess, this.shininess, this.visible, this.modelMirrored, this.lightPower);
            for (var i = 0; i < this.modifiedFurniture.length; i++) {
                {
                    var piece = this.modifiedFurniture[i].getPieceOfFurniture();
                    piece.setWidthInPlan(this.widthsInPlan[i]);
                    piece.setDepthInPlan(this.depthsInPlan[i]);
                    piece.setHeightInPlan(this.heightsInPlan[i]);
                }
                ;
            }
            this.home.setSelectedItems(/* asList */ this.newSelection.slice(0));
        };
        return FurnitureModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    HomeFurnitureController.FurnitureModificationUndoableEdit = FurnitureModificationUndoableEdit;
    FurnitureModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.FurnitureModificationUndoableEdit";
    FurnitureModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the current properties values of a modified piece of furniture.
     * @param {HomePieceOfFurniture} piece
     * @class
     */
    var ModifiedPieceOfFurniture = /** @class */ (function () {
        function ModifiedPieceOfFurniture(piece) {
            if (this.piece === undefined) {
                this.piece = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.nameVisible === undefined) {
                this.nameVisible = false;
            }
            if (this.description === undefined) {
                this.description = null;
            }
            if (this.price === undefined) {
                this.price = null;
            }
            if (this.valueAddedTaxPercentage === undefined) {
                this.valueAddedTaxPercentage = null;
            }
            if (this.currency === undefined) {
                this.currency = null;
            }
            if (this.x === undefined) {
                this.x = 0;
            }
            if (this.y === undefined) {
                this.y = 0;
            }
            if (this.elevation === undefined) {
                this.elevation = 0;
            }
            if (this.angle === undefined) {
                this.angle = 0;
            }
            if (this.roll === undefined) {
                this.roll = 0;
            }
            if (this.pitch === undefined) {
                this.pitch = 0;
            }
            if (this.movable === undefined) {
                this.movable = false;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.widthInPlan === undefined) {
                this.widthInPlan = 0;
            }
            if (this.depthInPlan === undefined) {
                this.depthInPlan = 0;
            }
            if (this.heightInPlan === undefined) {
                this.heightInPlan = 0;
            }
            if (this.modelTransformations === undefined) {
                this.modelTransformations = null;
            }
            if (this.color === undefined) {
                this.color = null;
            }
            if (this.texture === undefined) {
                this.texture = null;
            }
            if (this.modelMaterials === undefined) {
                this.modelMaterials = null;
            }
            if (this.shininess === undefined) {
                this.shininess = null;
            }
            if (this.visible === undefined) {
                this.visible = false;
            }
            if (this.modelMirrored === undefined) {
                this.modelMirrored = false;
            }
            this.piece = piece;
            this.name = piece.getName();
            this.nameVisible = piece.isNameVisible();
            this.description = piece.getDescription();
            this.price = piece.getPrice();
            this.valueAddedTaxPercentage = piece.getValueAddedTaxPercentage();
            this.currency = piece.getCurrency();
            this.x = piece.getX();
            this.y = piece.getY();
            this.elevation = piece.getElevation();
            this.angle = piece.getAngle();
            this.roll = piece.getRoll();
            this.pitch = piece.getPitch();
            this.movable = piece.isMovable();
            this.width = piece.getWidth();
            this.depth = piece.getDepth();
            this.height = piece.getHeight();
            this.widthInPlan = piece.getWidthInPlan();
            this.depthInPlan = piece.getDepthInPlan();
            this.heightInPlan = piece.getHeightInPlan();
            this.modelTransformations = piece.getModelTransformations();
            this.color = piece.getColor();
            this.texture = piece.getTexture();
            this.modelMaterials = piece.getModelMaterials();
            this.shininess = piece.getShininess();
            this.visible = piece.isVisible();
            this.modelMirrored = piece.isModelMirrored();
        }
        ModifiedPieceOfFurniture.prototype.getPieceOfFurniture = function () {
            return this.piece;
        };
        ModifiedPieceOfFurniture.prototype.reset = function () {
            this.piece.setName(this.name);
            this.piece.setNameVisible(this.nameVisible);
            this.piece.setDescription(this.description);
            if (!(this.piece != null && this.piece instanceof HomeFurnitureGroup)) {
                this.piece.setPrice(this.price);
                this.piece.setValueAddedTaxPercentage(this.valueAddedTaxPercentage);
                this.piece.setCurrency(this.currency);
            }
            this.piece.setX(this.x);
            this.piece.setY(this.y);
            this.piece.setElevation(this.elevation);
            this.piece.setAngle(this.angle);
            if (this.piece.isHorizontallyRotatable()) {
                this.piece.setRoll(this.roll);
                this.piece.setPitch(this.pitch);
            }
            this.piece.setMovable(this.movable);
            if (this.piece.isResizable()) {
                this.piece.setWidth(this.width);
                this.piece.setDepth(this.depth);
                this.piece.setHeight(this.height);
                this.piece.setModelMirrored(this.modelMirrored);
            }
            this.piece.setWidthInPlan(this.widthInPlan);
            this.piece.setDepthInPlan(this.depthInPlan);
            this.piece.setHeightInPlan(this.heightInPlan);
            this.piece.setModelTransformations(this.modelTransformations);
            if (this.piece.isTexturable()) {
                this.piece.setColor(this.color);
                this.piece.setTexture(this.texture);
                this.piece.setModelMaterials(this.modelMaterials);
                this.piece.setShininess(this.shininess);
            }
            this.piece.setVisible(this.visible);
        };
        return ModifiedPieceOfFurniture;
    }());
    HomeFurnitureController.ModifiedPieceOfFurniture = ModifiedPieceOfFurniture;
    ModifiedPieceOfFurniture["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.ModifiedPieceOfFurniture";
    /**
     * Stores the current properties values of a modified door or window.
     * @param {HomeDoorOrWindow} doorOrWindow
     * @class
     * @extends HomeFurnitureController.ModifiedPieceOfFurniture
     */
    var ModifiedDoorOrWindow = /** @class */ (function (_super) {
        __extends(ModifiedDoorOrWindow, _super);
        function ModifiedDoorOrWindow(doorOrWindow) {
            var _this = _super.call(this, doorOrWindow) || this;
            if (_this.boundToWall === undefined) {
                _this.boundToWall = false;
            }
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallWidth === undefined) {
                _this.wallWidth = 0;
            }
            if (_this.wallLeft === undefined) {
                _this.wallLeft = 0;
            }
            if (_this.wallHeight === undefined) {
                _this.wallHeight = 0;
            }
            if (_this.wallTop === undefined) {
                _this.wallTop = 0;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            _this.boundToWall = doorOrWindow.isBoundToWall();
            _this.wallThickness = doorOrWindow.getWallThickness();
            _this.wallDistance = doorOrWindow.getWallDistance();
            _this.wallWidth = doorOrWindow.getWallWidth();
            _this.wallLeft = doorOrWindow.getWallLeft();
            _this.wallHeight = doorOrWindow.getWallHeight();
            _this.wallTop = doorOrWindow.getWallTop();
            _this.sashes = doorOrWindow.getSashes();
            return _this;
        }
        ModifiedDoorOrWindow.prototype.reset = function () {
            _super.prototype.reset.call(this);
            var doorOrWindow = this.getPieceOfFurniture();
            doorOrWindow.setBoundToWall(this.boundToWall);
            doorOrWindow.setWallThickness(this.wallThickness);
            doorOrWindow.setWallDistance(this.wallDistance);
            doorOrWindow.setWallWidth(this.wallWidth);
            doorOrWindow.setWallLeft(this.wallLeft);
            doorOrWindow.setWallHeight(this.wallHeight);
            doorOrWindow.setWallTop(this.wallTop);
            doorOrWindow.setSashes(this.sashes);
        };
        return ModifiedDoorOrWindow;
    }(HomeFurnitureController.ModifiedPieceOfFurniture));
    HomeFurnitureController.ModifiedDoorOrWindow = ModifiedDoorOrWindow;
    ModifiedDoorOrWindow["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.ModifiedDoorOrWindow";
    /**
     * Stores the current properties values of a modified light.
     * @param {HomeLight} light
     * @class
     * @extends HomeFurnitureController.ModifiedPieceOfFurniture
     */
    var ModifiedLight = /** @class */ (function (_super) {
        __extends(ModifiedLight, _super);
        function ModifiedLight(light) {
            var _this = _super.call(this, light) || this;
            if (_this.power === undefined) {
                _this.power = 0;
            }
            _this.power = light.getPower();
            return _this;
        }
        ModifiedLight.prototype.reset = function () {
            _super.prototype.reset.call(this);
            this.getPieceOfFurniture().setPower(this.power);
        };
        return ModifiedLight;
    }(HomeFurnitureController.ModifiedPieceOfFurniture));
    HomeFurnitureController.ModifiedLight = ModifiedLight;
    ModifiedLight["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.ModifiedLight";
    /**
     * Stores the current properties values of a modified group.
     * @param {HomeFurnitureGroup} group
     * @class
     * @extends HomeFurnitureController.ModifiedPieceOfFurniture
     */
    var ModifiedFurnitureGroup = /** @class */ (function (_super) {
        __extends(ModifiedFurnitureGroup, _super);
        function ModifiedFurnitureGroup(group) {
            var _this = _super.call(this, group) || this;
            if (_this.groupFurnitureX === undefined) {
                _this.groupFurnitureX = null;
            }
            if (_this.groupFurnitureY === undefined) {
                _this.groupFurnitureY = null;
            }
            if (_this.groupFurnitureWidth === undefined) {
                _this.groupFurnitureWidth = null;
            }
            if (_this.groupFurnitureDepth === undefined) {
                _this.groupFurnitureDepth = null;
            }
            if (_this.groupFurnitureColor === undefined) {
                _this.groupFurnitureColor = null;
            }
            if (_this.groupFurnitureTexture === undefined) {
                _this.groupFurnitureTexture = null;
            }
            if (_this.groupFurnitureModelMaterials === undefined) {
                _this.groupFurnitureModelMaterials = null;
            }
            if (_this.groupFurnitureShininess === undefined) {
                _this.groupFurnitureShininess = null;
            }
            var groupFurniture = _this.getGroupFurniture(group);
            _this.groupFurnitureX = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureY = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureWidth = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureDepth = (function (s) { var a = []; while (s-- > 0)
                a.push(0); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureColor = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureTexture = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureShininess = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ groupFurniture.length);
            _this.groupFurnitureModelMaterials = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ groupFurniture.length);
            for (var i = 0; i < /* size */ groupFurniture.length; i++) {
                {
                    var groupPiece = groupFurniture[i];
                    _this.groupFurnitureX[i] = groupPiece.getX();
                    _this.groupFurnitureY[i] = groupPiece.getY();
                    _this.groupFurnitureWidth[i] = groupPiece.getWidth();
                    _this.groupFurnitureDepth[i] = groupPiece.getDepth();
                    _this.groupFurnitureColor[i] = groupPiece.getColor();
                    _this.groupFurnitureTexture[i] = groupPiece.getTexture();
                    _this.groupFurnitureShininess[i] = groupPiece.getShininess();
                    _this.groupFurnitureModelMaterials[i] = groupPiece.getModelMaterials();
                }
                ;
            }
            return _this;
        }
        ModifiedFurnitureGroup.prototype.reset = function () {
            _super.prototype.reset.call(this);
            var group = this.getPieceOfFurniture();
            var groupFurniture = this.getGroupFurniture(group);
            for (var i = 0; i < /* size */ groupFurniture.length; i++) {
                {
                    var groupPiece = groupFurniture[i];
                    if (group.isResizable()) {
                        groupPiece.setX(this.groupFurnitureX[i]);
                        groupPiece.setY(this.groupFurnitureY[i]);
                        groupPiece.setWidth(this.groupFurnitureWidth[i]);
                        groupPiece.setDepth(this.groupFurnitureDepth[i]);
                    }
                    if (group.isTexturable() && !(groupPiece != null && groupPiece instanceof HomeFurnitureGroup)) {
                        groupPiece.setColor(this.groupFurnitureColor[i]);
                        groupPiece.setTexture(this.groupFurnitureTexture[i]);
                        groupPiece.setModelMaterials(this.groupFurnitureModelMaterials[i]);
                        groupPiece.setShininess(this.groupFurnitureShininess[i]);
                    }
                }
                ;
            }
        };
        /**
         * Returns all the children of the given <code>furnitureGroup</code>.
         * @param {HomeFurnitureGroup} furnitureGroup
         * @return {HomePieceOfFurniture[]}
         * @private
         */
        ModifiedFurnitureGroup.prototype.getGroupFurniture = function (furnitureGroup) {
            var pieces = ([]);
            {
                var array = furnitureGroup.getFurniture();
                for (var index = 0; index < array.length; index++) {
                    var piece = array[index];
                    {
                        /* add */ (pieces.push(piece) > 0);
                        if (piece != null && piece instanceof HomeFurnitureGroup) {
                            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(pieces, this.getGroupFurniture(piece));
                        }
                    }
                }
            }
            return pieces;
        };
        return ModifiedFurnitureGroup;
    }(HomeFurnitureController.ModifiedPieceOfFurniture));
    HomeFurnitureController.ModifiedFurnitureGroup = ModifiedFurnitureGroup;
    ModifiedFurnitureGroup["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeFurnitureController.ModifiedFurnitureGroup";
    var HomeFurnitureController$0 = /** @class */ (function () {
        function HomeFurnitureController$0(__parent) {
            this.__parent = __parent;
        }
        HomeFurnitureController$0.prototype.propertyChange = function (ev) {
            this.__parent.setPaint(HomeFurnitureController.FurniturePaint.TEXTURED);
        };
        return HomeFurnitureController$0;
    }());
    HomeFurnitureController.HomeFurnitureController$0 = HomeFurnitureController$0;
    var HomeFurnitureController$1 = /** @class */ (function () {
        function HomeFurnitureController$1(__parent) {
            this.__parent = __parent;
        }
        HomeFurnitureController$1.prototype.propertyChange = function (ev) {
            this.__parent.setPaint(HomeFurnitureController.FurniturePaint.MODEL_MATERIALS);
        };
        return HomeFurnitureController$1;
    }());
    HomeFurnitureController.HomeFurnitureController$1 = HomeFurnitureController$1;
    var HomeFurnitureController$2 = /** @class */ (function () {
        function HomeFurnitureController$2(__parent) {
            this.__parent = __parent;
        }
        HomeFurnitureController$2.prototype.propertyChange = function (ev) {
            if (this.__parent.getWidth() != null && this.__parent.getDepth() != null && this.__parent.getHeight() != null) {
                this.__parent.modelMaterialsController.setModelSize(this.__parent.getWidth(), this.__parent.getDepth(), this.__parent.getHeight());
            }
        };
        return HomeFurnitureController$2;
    }());
    HomeFurnitureController.HomeFurnitureController$2 = HomeFurnitureController$2;
    var HomeFurnitureController$3 = /** @class */ (function () {
        function HomeFurnitureController$3(__parent) {
            this.__parent = __parent;
        }
        HomeFurnitureController$3.prototype.propertyChange = function (ev) {
            if (this.__parent.getModelTransformations() != null) {
                this.__parent.modelMaterialsController.setModelTransformations(this.__parent.getModelTransformations());
            }
        };
        return HomeFurnitureController$3;
    }());
    HomeFurnitureController.HomeFurnitureController$3 = HomeFurnitureController$3;
})(HomeFurnitureController || (HomeFurnitureController = {}));
/**
 * A MVC controller for the compass view.
 * @author Emmanuel Puybaret
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 */
var CompassController = /** @class */ (function () {
    function CompassController(home, preferences, viewFactory, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.compassView === undefined) {
            this.compassView = null;
        }
        if (this.x === undefined) {
            this.x = 0;
        }
        if (this.y === undefined) {
            this.y = 0;
        }
        if (this.diameter === undefined) {
            this.diameter = 0;
        }
        if (this.visible === undefined) {
            this.visible = false;
        }
        if (this.northDirectionInDegrees === undefined) {
            this.northDirectionInDegrees = 0;
        }
        if (this.latitudeInDegrees === undefined) {
            this.latitudeInDegrees = 0;
        }
        if (this.longitudeInDegrees === undefined) {
            this.longitudeInDegrees = 0;
        }
        if (this.timeZone === undefined) {
            this.timeZone = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.updateProperties();
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    CompassController.prototype.getView = function () {
        if (this.compassView == null) {
            this.compassView = this.viewFactory.createCompassView(this.preferences, this);
        }
        return this.compassView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    CompassController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    CompassController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    CompassController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Updates compass properties edited by this controller.
     */
    CompassController.prototype.updateProperties = function () {
        var compass = this.home.getCompass();
        this.setX(compass.getX());
        this.setY(compass.getY());
        this.setDiameter(compass.getDiameter());
        this.setVisible(compass.isVisible());
        this.setNorthDirectionInDegrees((function (x) { return x * 180 / Math.PI; })(compass.getNorthDirection()));
        this.setLatitudeInDegrees((function (x) { return x * 180 / Math.PI; })(compass.getLatitude()));
        this.setLongitudeInDegrees((function (x) { return x * 180 / Math.PI; })(compass.getLongitude()));
        this.setTimeZone(compass.getTimeZone());
    };
    /**
     * Returns the edited abscissa of the center.
     * @return {number}
     */
    CompassController.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the edited abscissa of the center.
     * @param {number} x
     */
    CompassController.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.propertyChangeSupport.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the edited ordinate of the center.
     * @return {number}
     */
    CompassController.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the edited ordinate of the center.
     * @param {number} y
     */
    CompassController.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.propertyChangeSupport.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the edited diameter.
     * @return {number}
     */
    CompassController.prototype.getDiameter = function () {
        return this.diameter;
    };
    /**
     * Sets the edited diameter.
     * @param {number} diameter
     */
    CompassController.prototype.setDiameter = function (diameter) {
        if (diameter !== this.diameter) {
            var oldDiameter = this.diameter;
            this.diameter = diameter;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DIAMETER", oldDiameter, diameter);
        }
    };
    /**
     * Returns whether compass is visible or not.
     * @return {boolean}
     */
    CompassController.prototype.isVisible = function () {
        return this.visible;
    };
    /**
     * Sets whether this compass is visible or not.
     * @param {boolean} visible
     */
    CompassController.prototype.setVisible = function (visible) {
        if (visible !== this.visible) {
            this.visible = visible;
            this.propertyChangeSupport.firePropertyChange(/* name */ "VISIBLE", !visible, visible);
        }
    };
    /**
     * Returns the edited North direction angle in degrees.
     * @return {number}
     */
    CompassController.prototype.getNorthDirectionInDegrees = function () {
        return this.northDirectionInDegrees;
    };
    /**
     * Sets the edited North direction angle.
     * @param {number} northDirectionInDegrees
     */
    CompassController.prototype.setNorthDirectionInDegrees = function (northDirectionInDegrees) {
        if (northDirectionInDegrees !== this.northDirectionInDegrees) {
            var oldNorthDirectionInDegrees = this.northDirectionInDegrees;
            this.northDirectionInDegrees = northDirectionInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NORTH_DIRECTION_IN_DEGREES", oldNorthDirectionInDegrees, northDirectionInDegrees);
        }
    };
    /**
     * Returns the edited latitude in degrees.
     * @return {number}
     */
    CompassController.prototype.getLatitudeInDegrees = function () {
        return this.latitudeInDegrees;
    };
    /**
     * Sets the edited latitude in degrees.
     * @param {number} latitudeInDegrees
     */
    CompassController.prototype.setLatitudeInDegrees = function (latitudeInDegrees) {
        if (latitudeInDegrees !== this.latitudeInDegrees) {
            var oldLatitudeInDegrees = this.latitudeInDegrees;
            this.latitudeInDegrees = latitudeInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LATITUDE_IN_DEGREES", oldLatitudeInDegrees, latitudeInDegrees);
        }
    };
    /**
     * Returns the edited longitude in degrees.
     * @return {number}
     */
    CompassController.prototype.getLongitudeInDegrees = function () {
        return this.longitudeInDegrees;
    };
    /**
     * Sets the edited longitude of the center.
     * @param {number} longitudeInDegrees
     */
    CompassController.prototype.setLongitudeInDegrees = function (longitudeInDegrees) {
        if (longitudeInDegrees !== this.longitudeInDegrees) {
            var oldLongitudeInDegrees = this.longitudeInDegrees;
            this.longitudeInDegrees = longitudeInDegrees;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LONGITUDE_IN_DEGREES", oldLongitudeInDegrees, longitudeInDegrees);
        }
    };
    /**
     * Returns the edited time zone identifier.
     * @return {string}
     */
    CompassController.prototype.getTimeZone = function () {
        return this.timeZone;
    };
    /**
     * Sets the edited time zone identifier.
     * @param {string} timeZone
     */
    CompassController.prototype.setTimeZone = function (timeZone) {
        if (!(timeZone === this.timeZone)) {
            var oldTimeZone = this.timeZone;
            this.timeZone = timeZone;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TIME_ZONE", oldTimeZone, timeZone);
        }
    };
    /**
     * Modifies home compass from the values stored in this controller.
     */
    CompassController.prototype.modifyCompass = function () {
        var x = this.getX();
        var y = this.getY();
        var diameter = this.getDiameter();
        var visible = this.isVisible();
        var northDirection = (function (x) { return x * Math.PI / 180; })(this.getNorthDirectionInDegrees());
        var latitude = (function (x) { return x * Math.PI / 180; })(this.getLatitudeInDegrees());
        var longitude = (function (x) { return x * Math.PI / 180; })(this.getLongitudeInDegrees());
        var timeZone = this.getTimeZone();
        var undoableEdit = new CompassController.CompassUndoableEdit(this.home.getCompass(), this.preferences, x, y, diameter, visible, northDirection, latitude, longitude, timeZone);
        CompassController.doModifyCompass(this.home.getCompass(), x, y, diameter, visible, northDirection, latitude, longitude, timeZone);
        this.undoSupport.postEdit(undoableEdit);
    };
    CompassController.doModifyCompass = function (compass, x, y, diameter, visible, northDirection, latitude, longitude, timeZone) {
        compass.setX(x);
        compass.setY(y);
        compass.setDiameter(diameter);
        compass.setVisible(visible);
        compass.setNorthDirection(northDirection);
        compass.setLatitude(latitude);
        compass.setLongitude(longitude);
        compass.setTimeZone(timeZone);
    };
    return CompassController;
}());
CompassController["__class"] = "com.eteks.sweethome3d.viewcontroller.CompassController";
CompassController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (CompassController) {
    /**
     * Undoable edit for compass. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @param {Compass} compass
     * @param {UserPreferences} preferences
     * @param {number} newX
     * @param {number} newY
     * @param {number} newDiameter
     * @param {boolean} newVisible
     * @param {number} newNorthDirection
     * @param {number} newLatitude
     * @param {number} newLongitude
     * @param {string} newTimeZone
     * @class
     * @extends LocalizedUndoableEdit
     */
    var CompassUndoableEdit = /** @class */ (function (_super) {
        __extends(CompassUndoableEdit, _super);
        function CompassUndoableEdit(compass, preferences, newX, newY, newDiameter, newVisible, newNorthDirection, newLatitude, newLongitude, newTimeZone) {
            var _this = _super.call(this, preferences, CompassController, "undoModifyCompassName") || this;
            if (_this.compass === undefined) {
                _this.compass = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.oldDiameter === undefined) {
                _this.oldDiameter = 0;
            }
            if (_this.oldNorthDirection === undefined) {
                _this.oldNorthDirection = 0;
            }
            if (_this.oldLatitude === undefined) {
                _this.oldLatitude = 0;
            }
            if (_this.oldLongitude === undefined) {
                _this.oldLongitude = 0;
            }
            if (_this.oldTimeZone === undefined) {
                _this.oldTimeZone = null;
            }
            if (_this.oldVisible === undefined) {
                _this.oldVisible = false;
            }
            if (_this.newX === undefined) {
                _this.newX = 0;
            }
            if (_this.newY === undefined) {
                _this.newY = 0;
            }
            if (_this.newDiameter === undefined) {
                _this.newDiameter = 0;
            }
            if (_this.newNorthDirection === undefined) {
                _this.newNorthDirection = 0;
            }
            if (_this.newLatitude === undefined) {
                _this.newLatitude = 0;
            }
            if (_this.newLongitude === undefined) {
                _this.newLongitude = 0;
            }
            if (_this.newTimeZone === undefined) {
                _this.newTimeZone = null;
            }
            if (_this.newVisible === undefined) {
                _this.newVisible = false;
            }
            _this.compass = compass;
            _this.oldX = compass.getX();
            _this.oldY = compass.getY();
            _this.oldDiameter = compass.getDiameter();
            _this.oldVisible = compass.isVisible();
            _this.oldNorthDirection = compass.getNorthDirection();
            _this.oldLatitude = compass.getLatitude();
            _this.oldLongitude = compass.getLongitude();
            _this.oldTimeZone = compass.getTimeZone();
            _this.newX = newX;
            _this.newY = newY;
            _this.newDiameter = newDiameter;
            _this.newVisible = newVisible;
            _this.newNorthDirection = newNorthDirection;
            _this.newLatitude = newLatitude;
            _this.newLongitude = newLongitude;
            _this.newTimeZone = newTimeZone;
            return _this;
        }
        /**
         *
         */
        CompassUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            CompassController.doModifyCompass(this.compass, this.oldX, this.oldY, this.oldDiameter, this.oldVisible, this.oldNorthDirection, this.oldLatitude, this.oldLongitude, this.oldTimeZone);
        };
        /**
         *
         */
        CompassUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            CompassController.doModifyCompass(this.compass, this.newX, this.newY, this.newDiameter, this.newVisible, this.newNorthDirection, this.newLatitude, this.newLongitude, this.newTimeZone);
        };
        return CompassUndoableEdit;
    }(LocalizedUndoableEdit));
    CompassController.CompassUndoableEdit = CompassUndoableEdit;
    CompassUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.CompassController.CompassUndoableEdit";
    CompassUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
})(CompassController || (CompassController = {}));
/**
 * Creates the controller of page setup with undo support.
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @author Emmanuel Puybaret
 * @ignore
 */
var PageSetupController = /** @class */ (function () {
    function PageSetupController(home, preferences, viewFactory, undoSupport) {
        if (this.home === undefined) {
            this.home = null;
        }
        if (this.preferences === undefined) {
            this.preferences = null;
        }
        if (this.viewFactory === undefined) {
            this.viewFactory = null;
        }
        if (this.undoSupport === undefined) {
            this.undoSupport = null;
        }
        if (this.propertyChangeSupport === undefined) {
            this.propertyChangeSupport = null;
        }
        if (this.pageSetupView === undefined) {
            this.pageSetupView = null;
        }
        if (this.print === undefined) {
            this.print = null;
        }
        this.home = home;
        this.preferences = preferences;
        this.viewFactory = viewFactory;
        this.undoSupport = undoSupport;
        this.propertyChangeSupport = new PropertyChangeSupport(this);
        this.setPrint(home.getPrint());
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    PageSetupController.prototype.getView = function () {
        if (this.pageSetupView == null) {
            this.pageSetupView = this.viewFactory.createPageSetupView(this.preferences, this);
        }
        return this.pageSetupView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    PageSetupController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    PageSetupController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    PageSetupController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Sets the edited print attributes.
     * @param {HomePrint} print
     */
    PageSetupController.prototype.setPrint = function (print) {
        if (print !== this.print) {
            var oldPrint = this.print;
            this.print = print;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PRINT", oldPrint, print);
        }
    };
    /**
     * Returns the edited print attributes.
     * @return {HomePrint}
     */
    PageSetupController.prototype.getPrint = function () {
        return this.print;
    };
    /**
     * Controls the modification of home print attributes.
     */
    PageSetupController.prototype.modifyPageSetup = function () {
        var oldHomePrint = this.home.getPrint();
        var homePrint = this.getPrint();
        this.home.setPrint(homePrint);
        var undoableEdit = new PageSetupController.HomePrintModificationUndoableEdit(this.home, this.preferences, oldHomePrint, homePrint);
        this.undoSupport.postEdit(undoableEdit);
    };
    return PageSetupController;
}());
PageSetupController["__class"] = "com.eteks.sweethome3d.viewcontroller.PageSetupController";
PageSetupController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (PageSetupController) {
    /**
     * Undoable edit for home print modification. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var HomePrintModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(HomePrintModificationUndoableEdit, _super);
        function HomePrintModificationUndoableEdit(home, preferences, oldHomePrint, homePrint) {
            var _this = _super.call(this, preferences, PageSetupController, "undoPageSetupName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldHomePrint === undefined) {
                _this.oldHomePrint = null;
            }
            if (_this.homePrint === undefined) {
                _this.homePrint = null;
            }
            _this.home = home;
            _this.oldHomePrint = oldHomePrint;
            _this.homePrint = homePrint;
            return _this;
        }
        /**
         *
         */
        HomePrintModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.setPrint(this.oldHomePrint);
        };
        /**
         *
         */
        HomePrintModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setPrint(this.homePrint);
        };
        return HomePrintModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PageSetupController.HomePrintModificationUndoableEdit = HomePrintModificationUndoableEdit;
    HomePrintModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PageSetupController.HomePrintModificationUndoableEdit";
    HomePrintModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
})(PageSetupController || (PageSetupController = {}));
/**
 * Creates the controller of home view.
 * @param {Home} home the home edited by this controller and its view.
 * @param {HomeApplication} application the instance of current application.
 * @param {Object} viewFactory a factory able to create views.
 * @param {Object} contentManager the content manager of the application.
 * @class
 * @author Emmanuel Puybaret
 */
var HomeController = /** @class */ (function () {
    function HomeController(home, application, preferences, viewFactory, contentManager) {
        if (((home != null && home instanceof Home) || home === null) && ((application != null && application instanceof HomeApplication) || application === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null)) {
            var __args = arguments;
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.application === undefined) {
                this.application = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.undoManager === undefined) {
                this.undoManager = null;
            }
            if (this.homeView === undefined) {
                this.homeView = null;
            }
            if (this.childControllers === undefined) {
                this.childControllers = null;
            }
            if (this.furnitureCatalogController === undefined) {
                this.furnitureCatalogController = null;
            }
            if (this.furnitureController === undefined) {
                this.furnitureController = null;
            }
            if (this.planController === undefined) {
                this.planController = null;
            }
            if (this.homeController3D === undefined) {
                this.homeController3D = null;
            }
            if (this.saveUndoLevel === undefined) {
                this.saveUndoLevel = 0;
            }
            if (this.notUndoableModifications === undefined) {
                this.notUndoableModifications = false;
            }
            if (this.focusedView === undefined) {
                this.focusedView = null;
            }
            this.home = home;
            this.preferences = preferences;
            this.viewFactory = viewFactory;
            this.contentManager = contentManager;
            this.application = application;
            this.undoSupport = new HomeController.HomeController$0(this);
            this.undoManager = new javax.swing.undo.UndoManager();
            this.undoSupport.addUndoableEditListener(this.undoManager);
            if (home.getName() != null) {
                var recentHomes = (this.preferences.getRecentHomes().slice(0));
                /* remove */ (function (a) { var index = a.indexOf(home.getName()); if (index >= 0) {
                    a.splice(index, 1);
                    return true;
                }
                else {
                    return false;
                } })(recentHomes);
                /* add */ recentHomes.splice(0, 0, home.getName());
                this.updateUserPreferencesRecentHomes(recentHomes);
            }
        }
        else if (((home != null && home instanceof Home) || home === null) && ((application != null && application instanceof HomeApplication) || application === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || viewFactory === null) && contentManager === undefined) {
            var __args = arguments;
            var viewFactory_4 = __args[2];
            var contentManager_5 = __args[3];
            {
                var __args_44 = arguments;
                var preferences_5 = __args_44[1].getUserPreferences();
                if (this.home === undefined) {
                    this.home = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.application === undefined) {
                    this.application = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.undoSupport === undefined) {
                    this.undoSupport = null;
                }
                if (this.undoManager === undefined) {
                    this.undoManager = null;
                }
                if (this.homeView === undefined) {
                    this.homeView = null;
                }
                if (this.childControllers === undefined) {
                    this.childControllers = null;
                }
                if (this.furnitureCatalogController === undefined) {
                    this.furnitureCatalogController = null;
                }
                if (this.furnitureController === undefined) {
                    this.furnitureController = null;
                }
                if (this.planController === undefined) {
                    this.planController = null;
                }
                if (this.homeController3D === undefined) {
                    this.homeController3D = null;
                }
                if (this.saveUndoLevel === undefined) {
                    this.saveUndoLevel = 0;
                }
                if (this.notUndoableModifications === undefined) {
                    this.notUndoableModifications = false;
                }
                if (this.focusedView === undefined) {
                    this.focusedView = null;
                }
                this.home = home;
                this.preferences = preferences_5;
                this.viewFactory = viewFactory_4;
                this.contentManager = contentManager_5;
                this.application = application;
                this.undoSupport = new HomeController.HomeController$0(this);
                this.undoManager = new javax.swing.undo.UndoManager();
                this.undoSupport.addUndoableEditListener(this.undoManager);
                if (home.getName() != null) {
                    var recentHomes = (this.preferences.getRecentHomes().slice(0));
                    /* remove */ (function (a) { var index = a.indexOf(home.getName()); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(recentHomes);
                    /* add */ recentHomes.splice(0, 0, home.getName());
                    this.updateUserPreferencesRecentHomes(recentHomes);
                }
            }
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.application === undefined) {
                this.application = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.undoManager === undefined) {
                this.undoManager = null;
            }
            if (this.homeView === undefined) {
                this.homeView = null;
            }
            if (this.childControllers === undefined) {
                this.childControllers = null;
            }
            if (this.furnitureCatalogController === undefined) {
                this.furnitureCatalogController = null;
            }
            if (this.furnitureController === undefined) {
                this.furnitureController = null;
            }
            if (this.planController === undefined) {
                this.planController = null;
            }
            if (this.homeController3D === undefined) {
                this.homeController3D = null;
            }
            if (this.saveUndoLevel === undefined) {
                this.saveUndoLevel = 0;
            }
            if (this.notUndoableModifications === undefined) {
                this.notUndoableModifications = false;
            }
            if (this.focusedView === undefined) {
                this.focusedView = null;
            }
        }
        else if (((home != null && home instanceof Home) || home === null) && ((application != null && application instanceof UserPreferences) || application === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || viewFactory === null) && contentManager === undefined) {
            var __args = arguments;
            var preferences_6 = __args[1];
            var viewFactory_5 = __args[2];
            var contentManager_6 = __args[3];
            {
                var __args_45 = arguments;
                var application_1 = null;
                if (this.home === undefined) {
                    this.home = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.application === undefined) {
                    this.application = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.undoSupport === undefined) {
                    this.undoSupport = null;
                }
                if (this.undoManager === undefined) {
                    this.undoManager = null;
                }
                if (this.homeView === undefined) {
                    this.homeView = null;
                }
                if (this.childControllers === undefined) {
                    this.childControllers = null;
                }
                if (this.furnitureCatalogController === undefined) {
                    this.furnitureCatalogController = null;
                }
                if (this.furnitureController === undefined) {
                    this.furnitureController = null;
                }
                if (this.planController === undefined) {
                    this.planController = null;
                }
                if (this.homeController3D === undefined) {
                    this.homeController3D = null;
                }
                if (this.saveUndoLevel === undefined) {
                    this.saveUndoLevel = 0;
                }
                if (this.notUndoableModifications === undefined) {
                    this.notUndoableModifications = false;
                }
                if (this.focusedView === undefined) {
                    this.focusedView = null;
                }
                this.home = home;
                this.preferences = preferences_6;
                this.viewFactory = viewFactory_5;
                this.contentManager = contentManager_6;
                this.application = application_1;
                this.undoSupport = new HomeController.HomeController$0(this);
                this.undoManager = new javax.swing.undo.UndoManager();
                this.undoSupport.addUndoableEditListener(this.undoManager);
                if (home.getName() != null) {
                    var recentHomes = (this.preferences.getRecentHomes().slice(0));
                    /* remove */ (function (a) { var index = a.indexOf(home.getName()); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(recentHomes);
                    /* add */ recentHomes.splice(0, 0, home.getName());
                    this.updateUserPreferencesRecentHomes(recentHomes);
                }
            }
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.application === undefined) {
                this.application = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.undoManager === undefined) {
                this.undoManager = null;
            }
            if (this.homeView === undefined) {
                this.homeView = null;
            }
            if (this.childControllers === undefined) {
                this.childControllers = null;
            }
            if (this.furnitureCatalogController === undefined) {
                this.furnitureCatalogController = null;
            }
            if (this.furnitureController === undefined) {
                this.furnitureController = null;
            }
            if (this.planController === undefined) {
                this.planController = null;
            }
            if (this.homeController3D === undefined) {
                this.homeController3D = null;
            }
            if (this.saveUndoLevel === undefined) {
                this.saveUndoLevel = 0;
            }
            if (this.notUndoableModifications === undefined) {
                this.notUndoableModifications = false;
            }
            if (this.focusedView === undefined) {
                this.focusedView = null;
            }
        }
        else if (((home != null && home instanceof Home) || home === null) && ((application != null && application instanceof HomeApplication) || application === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && viewFactory === undefined && contentManager === undefined) {
            var __args = arguments;
            var viewFactory_6 = __args[2];
            {
                var __args_46 = arguments;
                var preferences_7 = __args_46[1].getUserPreferences();
                var contentManager_7 = null;
                if (this.home === undefined) {
                    this.home = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.application === undefined) {
                    this.application = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.undoSupport === undefined) {
                    this.undoSupport = null;
                }
                if (this.undoManager === undefined) {
                    this.undoManager = null;
                }
                if (this.homeView === undefined) {
                    this.homeView = null;
                }
                if (this.childControllers === undefined) {
                    this.childControllers = null;
                }
                if (this.furnitureCatalogController === undefined) {
                    this.furnitureCatalogController = null;
                }
                if (this.furnitureController === undefined) {
                    this.furnitureController = null;
                }
                if (this.planController === undefined) {
                    this.planController = null;
                }
                if (this.homeController3D === undefined) {
                    this.homeController3D = null;
                }
                if (this.saveUndoLevel === undefined) {
                    this.saveUndoLevel = 0;
                }
                if (this.notUndoableModifications === undefined) {
                    this.notUndoableModifications = false;
                }
                if (this.focusedView === undefined) {
                    this.focusedView = null;
                }
                this.home = home;
                this.preferences = preferences_7;
                this.viewFactory = viewFactory_6;
                this.contentManager = contentManager_7;
                this.application = application;
                this.undoSupport = new HomeController.HomeController$0(this);
                this.undoManager = new javax.swing.undo.UndoManager();
                this.undoSupport.addUndoableEditListener(this.undoManager);
                if (home.getName() != null) {
                    var recentHomes = (this.preferences.getRecentHomes().slice(0));
                    /* remove */ (function (a) { var index = a.indexOf(home.getName()); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(recentHomes);
                    /* add */ recentHomes.splice(0, 0, home.getName());
                    this.updateUserPreferencesRecentHomes(recentHomes);
                }
            }
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.application === undefined) {
                this.application = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.undoManager === undefined) {
                this.undoManager = null;
            }
            if (this.homeView === undefined) {
                this.homeView = null;
            }
            if (this.childControllers === undefined) {
                this.childControllers = null;
            }
            if (this.furnitureCatalogController === undefined) {
                this.furnitureCatalogController = null;
            }
            if (this.furnitureController === undefined) {
                this.furnitureController = null;
            }
            if (this.planController === undefined) {
                this.planController = null;
            }
            if (this.homeController3D === undefined) {
                this.homeController3D = null;
            }
            if (this.saveUndoLevel === undefined) {
                this.saveUndoLevel = 0;
            }
            if (this.notUndoableModifications === undefined) {
                this.notUndoableModifications = false;
            }
            if (this.focusedView === undefined) {
                this.focusedView = null;
            }
        }
        else if (((home != null && home instanceof Home) || home === null) && ((application != null && application instanceof UserPreferences) || application === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && viewFactory === undefined && contentManager === undefined) {
            var __args = arguments;
            var preferences_8 = __args[1];
            var viewFactory_7 = __args[2];
            {
                var __args_47 = arguments;
                var application_2 = null;
                var contentManager_8 = null;
                if (this.home === undefined) {
                    this.home = null;
                }
                if (this.preferences === undefined) {
                    this.preferences = null;
                }
                if (this.application === undefined) {
                    this.application = null;
                }
                if (this.viewFactory === undefined) {
                    this.viewFactory = null;
                }
                if (this.contentManager === undefined) {
                    this.contentManager = null;
                }
                if (this.undoSupport === undefined) {
                    this.undoSupport = null;
                }
                if (this.undoManager === undefined) {
                    this.undoManager = null;
                }
                if (this.homeView === undefined) {
                    this.homeView = null;
                }
                if (this.childControllers === undefined) {
                    this.childControllers = null;
                }
                if (this.furnitureCatalogController === undefined) {
                    this.furnitureCatalogController = null;
                }
                if (this.furnitureController === undefined) {
                    this.furnitureController = null;
                }
                if (this.planController === undefined) {
                    this.planController = null;
                }
                if (this.homeController3D === undefined) {
                    this.homeController3D = null;
                }
                if (this.saveUndoLevel === undefined) {
                    this.saveUndoLevel = 0;
                }
                if (this.notUndoableModifications === undefined) {
                    this.notUndoableModifications = false;
                }
                if (this.focusedView === undefined) {
                    this.focusedView = null;
                }
                this.home = home;
                this.preferences = preferences_8;
                this.viewFactory = viewFactory_7;
                this.contentManager = contentManager_8;
                this.application = application_2;
                this.undoSupport = new HomeController.HomeController$0(this);
                this.undoManager = new javax.swing.undo.UndoManager();
                this.undoSupport.addUndoableEditListener(this.undoManager);
                if (home.getName() != null) {
                    var recentHomes = (this.preferences.getRecentHomes().slice(0));
                    /* remove */ (function (a) { var index = a.indexOf(home.getName()); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(recentHomes);
                    /* add */ recentHomes.splice(0, 0, home.getName());
                    this.updateUserPreferencesRecentHomes(recentHomes);
                }
            }
            if (this.home === undefined) {
                this.home = null;
            }
            if (this.preferences === undefined) {
                this.preferences = null;
            }
            if (this.application === undefined) {
                this.application = null;
            }
            if (this.viewFactory === undefined) {
                this.viewFactory = null;
            }
            if (this.contentManager === undefined) {
                this.contentManager = null;
            }
            if (this.undoSupport === undefined) {
                this.undoSupport = null;
            }
            if (this.undoManager === undefined) {
                this.undoManager = null;
            }
            if (this.homeView === undefined) {
                this.homeView = null;
            }
            if (this.childControllers === undefined) {
                this.childControllers = null;
            }
            if (this.furnitureCatalogController === undefined) {
                this.furnitureCatalogController = null;
            }
            if (this.furnitureController === undefined) {
                this.furnitureController = null;
            }
            if (this.planController === undefined) {
                this.planController = null;
            }
            if (this.homeController3D === undefined) {
                this.homeController3D = null;
            }
            if (this.saveUndoLevel === undefined) {
                this.saveUndoLevel = 0;
            }
            if (this.notUndoableModifications === undefined) {
                this.notUndoableModifications = false;
            }
            if (this.focusedView === undefined) {
                this.focusedView = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    /**
     * Enables actions at controller instantiation.
     * @param {Object} homeView
     * @private
     */
    HomeController.prototype.enableDefaultActions = function (homeView) {
        var applicationExists = this.application != null;
        homeView.setEnabled(HomeView.ActionType.NEW_HOME, applicationExists);
        homeView.setEnabled(HomeView.ActionType.NEW_HOME_FROM_EXAMPLE, applicationExists);
        homeView.setEnabled(HomeView.ActionType.OPEN, applicationExists);
        homeView.setEnabled(HomeView.ActionType.DELETE_RECENT_HOMES, applicationExists && !(this.preferences.getRecentHomes().length == 0));
        homeView.setEnabled(HomeView.ActionType.CLOSE, applicationExists);
        homeView.setEnabled(HomeView.ActionType.SAVE, applicationExists);
        homeView.setEnabled(HomeView.ActionType.SAVE_AS, applicationExists);
        homeView.setEnabled(HomeView.ActionType.SAVE_AND_COMPRESS, applicationExists);
        homeView.setEnabled(HomeView.ActionType.PAGE_SETUP, true);
        homeView.setEnabled(HomeView.ActionType.PRINT_PREVIEW, true);
        homeView.setEnabled(HomeView.ActionType.PRINT, true);
        homeView.setEnabled(HomeView.ActionType.PRINT_TO_PDF, true);
        homeView.setEnabled(HomeView.ActionType.PREFERENCES, true);
        homeView.setEnabled(HomeView.ActionType.EXIT, applicationExists);
        homeView.setEnabled(HomeView.ActionType.IMPORT_FURNITURE, true);
        homeView.setEnabled(HomeView.ActionType.IMPORT_FURNITURE_LIBRARY, true);
        homeView.setEnabled(HomeView.ActionType.IMPORT_TEXTURE, true);
        homeView.setEnabled(HomeView.ActionType.IMPORT_TEXTURES_LIBRARY, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_CATALOG_ID, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_NAME, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_CREATOR, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_WIDTH, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_HEIGHT, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_DEPTH, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_X, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_Y, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_ELEVATION, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_ANGLE, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_LEVEL, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_MODEL_SIZE, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_COLOR, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_TEXTURE, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_MOVABILITY, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_TYPE, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_VISIBILITY, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_PRICE, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX_PERCENTAGE, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_VALUE_ADDED_TAX, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_PRICE_VALUE_ADDED_TAX_INCLUDED, true);
        homeView.setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, this.home.getFurnitureSortedProperty() != null);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_CATALOG_ID, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_NAME, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_CREATOR, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_WIDTH, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_DEPTH, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_HEIGHT, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_X, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_Y, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_ELEVATION, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_ANGLE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_LEVEL, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_MODEL_SIZE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_COLOR, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_TEXTURE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_MOVABLE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_DOOR_OR_WINDOW, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_VISIBLE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_PRICE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX_PERCENTAGE, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_VALUE_ADDED_TAX, true);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_HOME_FURNITURE_PRICE_VALUE_ADDED_TAX_INCLUDED, true);
        homeView.setEnabled(HomeView.ActionType.EXPORT_TO_CSV, true);
        homeView.setEnabled(HomeView.ActionType.SELECT, true);
        homeView.setEnabled(HomeView.ActionType.PAN, true);
        homeView.setEnabled(HomeView.ActionType.LOCK_BASE_PLAN, true);
        homeView.setEnabled(HomeView.ActionType.UNLOCK_BASE_PLAN, true);
        homeView.setEnabled(HomeView.ActionType.ENABLE_MAGNETISM, true);
        homeView.setEnabled(HomeView.ActionType.DISABLE_MAGNETISM, true);
        homeView.setEnabled(HomeView.ActionType.MODIFY_COMPASS, true);
        var selectedLevel = this.home.getSelectedLevel();
        this.enableBackgroungImageActions(homeView, selectedLevel != null ? selectedLevel.getBackgroundImage() : this.home.getBackgroundImage());
        this.enableLevelActions(homeView);
        homeView.setEnabled(HomeView.ActionType.ZOOM_IN, true);
        homeView.setEnabled(HomeView.ActionType.ZOOM_OUT, true);
        homeView.setEnabled(HomeView.ActionType.EXPORT_TO_SVG, true);
        homeView.setEnabled(HomeView.ActionType.VIEW_FROM_TOP, true);
        homeView.setEnabled(HomeView.ActionType.VIEW_FROM_OBSERVER, true);
        homeView.setEnabled(HomeView.ActionType.MODIFY_OBSERVER, this.home.getCamera() === this.home.getObserverCamera());
        homeView.setEnabled(HomeView.ActionType.STORE_POINT_OF_VIEW, true);
        var emptyStoredCameras = (this.home.getStoredCameras().length == 0);
        homeView.setEnabled(HomeView.ActionType.DELETE_POINTS_OF_VIEW, !emptyStoredCameras);
        homeView.setEnabled(HomeView.ActionType.CREATE_PHOTOS_AT_POINTS_OF_VIEW, !emptyStoredCameras);
        homeView.setEnabled(HomeView.ActionType.DETACH_3D_VIEW, true);
        homeView.setEnabled(HomeView.ActionType.ATTACH_3D_VIEW, true);
        homeView.setEnabled(HomeView.ActionType.VIEW_FROM_OBSERVER, true);
        homeView.setEnabled(HomeView.ActionType.MODIFY_3D_ATTRIBUTES, true);
        homeView.setEnabled(HomeView.ActionType.CREATE_PHOTO, true);
        homeView.setEnabled(HomeView.ActionType.CREATE_VIDEO, true);
        homeView.setEnabled(HomeView.ActionType.EXPORT_TO_OBJ, true);
        homeView.setEnabled(HomeView.ActionType.HELP, true);
        homeView.setEnabled(HomeView.ActionType.ABOUT, true);
        this.enableCreationToolsActions(homeView);
        homeView.setTransferEnabled(true);
    };
    /**
     * Enables actions handling levels.
     * @param {Object} homeView
     * @private
     */
    HomeController.prototype.enableLevelActions = function (homeView) {
        var modificationState = this.getPlanController().isModificationState();
        homeView.setEnabled(HomeView.ActionType.ADD_LEVEL, !modificationState);
        homeView.setEnabled(HomeView.ActionType.ADD_LEVEL_AT_SAME_ELEVATION, !modificationState);
        var levels = this.home.getLevels();
        var selectedLevel = this.home.getSelectedLevel();
        var homeContainsOneSelectedLevel = levels.length > 1 && selectedLevel != null;
        homeView.setEnabled(HomeView.ActionType.SELECT_ALL_AT_ALL_LEVELS, !modificationState && /* size */ levels.length > 1);
        homeView.setEnabled(HomeView.ActionType.MAKE_LEVEL_VIEWABLE, !modificationState && homeContainsOneSelectedLevel);
        homeView.setEnabled(HomeView.ActionType.MAKE_LEVEL_UNVIEWABLE, !modificationState && homeContainsOneSelectedLevel);
        homeView.setEnabled(HomeView.ActionType.MAKE_LEVEL_ONLY_VIEWABLE_ONE, homeContainsOneSelectedLevel);
        homeView.setEnabled(HomeView.ActionType.MAKE_ALL_LEVELS_VIEWABLE, /* size */ levels.length > 1);
        homeView.setEnabled(HomeView.ActionType.MODIFY_LEVEL, homeContainsOneSelectedLevel);
        homeView.setEnabled(HomeView.ActionType.DELETE_LEVEL, !modificationState && homeContainsOneSelectedLevel);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_ALL_LEVELS, /* size */ levels.length > 1);
        homeView.setEnabled(HomeView.ActionType.DISPLAY_SELECTED_LEVEL, /* size */ levels.length > 1);
    };
    /**
     * Enables plan actions depending on the selected level is viewable or not.
     * @param {Object} homeView
     * @private
     */
    HomeController.prototype.enableCreationToolsActions = function (homeView) {
        var selectedLevel = this.home.getSelectedLevel();
        var viewableLevel = selectedLevel == null || selectedLevel.isViewable();
        homeView.setEnabled(HomeView.ActionType.CREATE_WALLS, viewableLevel);
        homeView.setEnabled(HomeView.ActionType.CREATE_ROOMS, viewableLevel);
        homeView.setEnabled(HomeView.ActionType.CREATE_POLYLINES, viewableLevel);
        homeView.setEnabled(HomeView.ActionType.CREATE_DIMENSION_LINES, viewableLevel);
        homeView.setEnabled(HomeView.ActionType.CREATE_LABELS, viewableLevel);
    };
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    HomeController.prototype.getView = function () {
        var _this = this;
        if (this.homeView == null) {
            this.homeView = this.viewFactory.createHomeView(this.home, this.preferences, this);
            this.enableDefaultActions(this.homeView);
            this.addListeners();
            if (this.home.getName() != null && this.home.getVersion() > Home.CURRENT_VERSION) {
                this.homeView.invokeLater(function () {
                    var message = _this.preferences.getLocalizedString(HomeController, "moreRecentVersionHome", _this.home.getName());
                    _this.getView().showMessage(message);
                });
            }
        }
        return this.homeView;
    };
    /**
     * Returns the content manager of this controller.
     * @return {Object}
     */
    HomeController.prototype.getContentManager = function () {
        return this.contentManager;
    };
    /**
     * Returns the furniture catalog controller managed by this controller.
     * @return {FurnitureCatalogController}
     */
    HomeController.prototype.getFurnitureCatalogController = function () {
        if (this.furnitureCatalogController == null) {
            this.furnitureCatalogController = new FurnitureCatalogController(this.preferences.getFurnitureCatalog(), this.preferences, this.viewFactory, this.contentManager);
        }
        return this.furnitureCatalogController;
    };
    /**
     * Returns the furniture controller managed by this controller.
     * @return {FurnitureController}
     */
    HomeController.prototype.getFurnitureController = function () {
        if (this.furnitureController == null) {
            this.furnitureController = new FurnitureController(this.home, this.preferences, this.viewFactory, this.contentManager, this.getUndoableEditSupport());
        }
        return this.furnitureController;
    };
    /**
     * Returns the controller of home plan.
     * @return {PlanController}
     */
    HomeController.prototype.getPlanController = function () {
        if (this.planController == null) {
            this.planController = new PlanController(this.home, this.preferences, this.viewFactory, this.contentManager, this.getUndoableEditSupport());
        }
        return this.planController;
    };
    /**
     * Returns the controller of home 3D view.
     * @return {HomeController3D}
     */
    HomeController.prototype.getHomeController3D = function () {
        if (this.homeController3D == null) {
            this.homeController3D = new HomeController3D(this.home, this.preferences, this.viewFactory, this.contentManager, this.getUndoableEditSupport());
        }
        return this.homeController3D;
    };
    /**
     * Returns the undoable edit support managed by this controller.
     * @return {javax.swing.undo.UndoableEditSupport}
     */
    HomeController.prototype.getUndoableEditSupport = function () {
        return this.undoSupport;
    };
    /**
     * Adds listeners that updates the enabled / disabled state of actions.
     * @private
     */
    HomeController.prototype.addListeners = function () {
        this.preferences.getFurnitureCatalog().addFurnitureListener((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(new HomeController.FurnitureCatalogChangeListener(this)));
        this.preferences.getTexturesCatalog().addTexturesListener((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(new HomeController.TexturesCatalogChangeListener(this)));
        this.preferences.addPropertyChangeListener(new HomeController.UserPreferencesPropertiesChangeListener(this));
        this.addCatalogSelectionListener();
        this.addHomeBackgroundImageListener();
        this.addNotUndoableModificationListeners();
        this.addHomeSelectionListener();
        this.addFurnitureSortListener();
        this.addUndoSupportListener();
        this.addHomeItemsListener();
        this.addLevelListeners();
        this.addStoredCamerasListener();
        this.addPlanControllerListeners();
        this.addLanguageListener();
    };
    /**
     * Adds a selection listener to catalog that enables / disables Add Furniture action.
     * @private
     */
    HomeController.prototype.addCatalogSelectionListener = function () {
        this.getFurnitureCatalogController().addSelectionListener(new HomeController.HomeController$1(this));
    };
    /**
     * Adds a property change listener to <code>preferences</code> to update
     * undo and redo presentation names when preferred language changes.
     * @private
     */
    HomeController.prototype.addLanguageListener = function () {
        this.preferences.addPropertyChangeListener("LANGUAGE", new HomeController.LanguageChangeListener(this));
    };
    /**
     * Adds a selection listener to home that enables / disables actions on selection.
     * @private
     */
    HomeController.prototype.addHomeSelectionListener = function () {
        if (this.home != null) {
            this.home.addSelectionListener(new HomeController.HomeController$2(this));
        }
    };
    /**
     * Adds a property change listener to home that enables / disables sort order action.
     * @private
     */
    HomeController.prototype.addFurnitureSortListener = function () {
        if (this.home != null) {
            this.home.addPropertyChangeListener("FURNITURE_SORTED_PROPERTY", new HomeController.HomeController$3(this));
        }
    };
    /**
     * Adds a property change listener to home that enables / disables background image actions.
     * @private
     */
    HomeController.prototype.addHomeBackgroundImageListener = function () {
        if (this.home != null) {
            this.home.addPropertyChangeListener("BACKGROUND_IMAGE", new HomeController.HomeController$4(this));
        }
    };
    /**
     * Enables background image actions.
     * @param {Object} homeView
     * @param {BackgroundImage} backgroundImage
     * @private
     */
    HomeController.prototype.enableBackgroungImageActions = function (homeView, backgroundImage) {
        var selectedLevel = this.home.getSelectedLevel();
        var homeHasBackgroundImage = backgroundImage != null && (selectedLevel == null || selectedLevel.isViewable());
        this.getView().setEnabled(HomeView.ActionType.IMPORT_BACKGROUND_IMAGE, !homeHasBackgroundImage);
        this.getView().setEnabled(HomeView.ActionType.MODIFY_BACKGROUND_IMAGE, homeHasBackgroundImage);
        this.getView().setEnabled(HomeView.ActionType.HIDE_BACKGROUND_IMAGE, homeHasBackgroundImage && backgroundImage.isVisible());
        this.getView().setEnabled(HomeView.ActionType.SHOW_BACKGROUND_IMAGE, homeHasBackgroundImage && !backgroundImage.isVisible());
        this.getView().setEnabled(HomeView.ActionType.DELETE_BACKGROUND_IMAGE, homeHasBackgroundImage);
    };
    /**
     * Adds listeners to track property changes that are not undoable.
     * @private
     */
    HomeController.prototype.addNotUndoableModificationListeners = function () {
        if (this.home != null) {
            var notUndoableModificationListener = new HomeController.HomeController$5(this);
            this.home.addPropertyChangeListener("STORED_CAMERAS", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("OBSERVER_CAMERA_ELEVATION_ADJUSTED", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("VIDEO_WIDTH", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("VIDEO_ASPECT_RATIO", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("VIDEO_FRAME_RATE", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("VIDEO_QUALITY", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("VIDEO_CAMERA_PATH", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("CEILING_LIGHT_COLOR", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("PHOTO_QUALITY", notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("PHOTO_ASPECT_RATIO", notUndoableModificationListener);
            var photoSizeModificationListener = new HomeController.HomeController$6(this, notUndoableModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("PHOTO_WIDTH", photoSizeModificationListener);
            this.home.getEnvironment().addPropertyChangeListener("PHOTO_HEIGHT", photoSizeModificationListener);
            var timeOrLensModificationListener = new HomeController.HomeController$7(this, notUndoableModificationListener);
            this.home.getObserverCamera().addPropertyChangeListener(timeOrLensModificationListener);
            this.home.getTopCamera().addPropertyChangeListener(timeOrLensModificationListener);
        }
    };
    /**
     * Enables or disables action bound to selection.
     * This method will be called when selection in plan or in catalog changes and when
     * focused component or modification state in plan changes.
     */
    HomeController.prototype.enableActionsBoundToSelection = function () {
        var modificationState = this.getPlanController().isModificationState();
        var catalogSelectedItems = this.getFurnitureCatalogController().getSelectedFurniture();
        var catalogSelectionContainsFurniture = !(catalogSelectedItems.length == 0);
        var catalogSelectionContainsOneModifiablePiece = catalogSelectedItems.length === 1 && /* get */ catalogSelectedItems[0].isModifiable();
        var selectedItems = this.home.getSelectedItems();
        var homeSelectionContainsDeletableItems = false;
        var homeSelectionContainsFurniture = false;
        var homeSelectionContainsDeletableFurniture = false;
        var homeSelectionContainsOneCopiableItemOrMore = false;
        var homeSelectionContainsOneMovablePieceOfFurnitureOrMore = false;
        var homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore = false;
        var homeSelectionContainsTwoMovableGroupablePiecesOfFurnitureOrMore = false;
        var homeSelectionContainsThreeMovablePiecesOfFurnitureOrMore = false;
        var homeSelectionContainsOnlyOneGroup = selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof HomeFurnitureGroup);
        var homeSelectionContainsFurnitureGroup = false;
        var homeSelectionContainsWalls = false;
        var homeSelectionContainsOneWall = false;
        var homeSelectionContainsOneOrTwoWallsWithOneFreeEnd = false;
        var homeSelectionContainsRooms = false;
        var homeSelectionContainsPolylines = false;
        var homeSelectionContainsOnlyOneRoom = false;
        var homeSelectionContainsOnlyOneRoomWithFourPointsOrMore = false;
        var homeSelectionContainsLabels = false;
        var homeSelectionContainsItemsWithText = false;
        var homeSelectionContainsCompass = false;
        var furnitureController = this.getFurnitureController();
        if (!modificationState) {
            for (var index = 0; index < selectedItems.length; index++) {
                var item = selectedItems[index];
                {
                    if (this.getPlanController().isItemDeletable(item)) {
                        homeSelectionContainsDeletableItems = true;
                        break;
                    }
                }
            }
            var selectedFurniture = Home.getFurnitureSubList(selectedItems);
            homeSelectionContainsFurniture = !(selectedFurniture.length == 0);
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    if (furnitureController.isPieceOfFurnitureDeletable(piece)) {
                        homeSelectionContainsDeletableFurniture = true;
                        break;
                    }
                }
            }
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        homeSelectionContainsFurnitureGroup = true;
                        break;
                    }
                }
            }
            var movablePiecesOfFurnitureCount = 0;
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    if (furnitureController.isPieceOfFurnitureMovable(piece)) {
                        homeSelectionContainsOneMovablePieceOfFurnitureOrMore = true;
                        movablePiecesOfFurnitureCount++;
                        if (movablePiecesOfFurnitureCount >= 2) {
                            homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore = true;
                        }
                        if (movablePiecesOfFurnitureCount >= 3) {
                            homeSelectionContainsThreeMovablePiecesOfFurnitureOrMore = true;
                            break;
                        }
                    }
                }
            }
            if (homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore) {
                homeSelectionContainsTwoMovableGroupablePiecesOfFurnitureOrMore = true;
                var furniture = this.home.getFurniture();
                for (var index = 0; index < selectedFurniture.length; index++) {
                    var piece = selectedFurniture[index];
                    {
                        if (!furnitureController.isPieceOfFurnitureMovable(piece) || !(furniture.indexOf((piece)) >= 0)) {
                            homeSelectionContainsTwoMovableGroupablePiecesOfFurnitureOrMore = false;
                            break;
                        }
                    }
                }
            }
            var selectedWalls = Home.getWallsSubList(selectedItems);
            homeSelectionContainsWalls = !(selectedWalls.length == 0);
            homeSelectionContainsOneWall = /* size */ selectedWalls.length === 1;
            if ( /* size */selectedWalls.length >= 2) {
                var wallsWithFreeEnd = [null, null, null];
                for (var index = 0; index < selectedWalls.length; index++) {
                    var wall = selectedWalls[index];
                    {
                        if ((wall.getArcExtent() == null || wall.getArcExtent() === 0.0) && (wall.getWallAtStart() == null || wall.getWallAtEnd() == null)) {
                            for (var i = 0; i < wallsWithFreeEnd.length; i++) {
                                {
                                    if (wallsWithFreeEnd[i] == null) {
                                        wallsWithFreeEnd[i] = wall;
                                        break;
                                    }
                                }
                                ;
                            }
                            if (wallsWithFreeEnd[2] != null) {
                                break;
                            }
                        }
                    }
                }
                homeSelectionContainsOneOrTwoWallsWithOneFreeEnd = wallsWithFreeEnd[2] == null && wallsWithFreeEnd[0] != null && (wallsWithFreeEnd[1] == null && !(selectedWalls.indexOf((wallsWithFreeEnd[0].getWallAtStart())) >= 0) && !(selectedWalls.indexOf((wallsWithFreeEnd[0].getWallAtEnd())) >= 0) || wallsWithFreeEnd[0].getWallAtEnd() !== wallsWithFreeEnd[1] && wallsWithFreeEnd[0].getWallAtStart() !== wallsWithFreeEnd[1]);
            }
            var selectedRooms = Home.getRoomsSubList(selectedItems);
            homeSelectionContainsRooms = !(selectedRooms.length == 0);
            homeSelectionContainsOnlyOneRoom = /* size */ selectedItems.length === 1 && /* size */ selectedRooms.length === 1;
            homeSelectionContainsOnlyOneRoomWithFourPointsOrMore = homeSelectionContainsOnlyOneRoom && /* get */ selectedRooms[0].getPointCount() >= 4;
            var homeSelectionContainsDimensionLines = !(Home.getDimensionLinesSubList(selectedItems).length == 0);
            homeSelectionContainsPolylines = !(Home.getPolylinesSubList(selectedItems).length == 0);
            homeSelectionContainsLabels = !(Home.getLabelsSubList(selectedItems).length == 0);
            homeSelectionContainsCompass = /* contains */ (selectedItems.indexOf((this.home.getCompass())) >= 0);
            homeSelectionContainsOneCopiableItemOrMore = homeSelectionContainsFurniture || homeSelectionContainsWalls || homeSelectionContainsRooms || homeSelectionContainsDimensionLines || homeSelectionContainsPolylines || homeSelectionContainsLabels || homeSelectionContainsCompass;
            homeSelectionContainsItemsWithText = homeSelectionContainsFurniture || homeSelectionContainsRooms || homeSelectionContainsDimensionLines || homeSelectionContainsLabels;
        }
        var view = this.getView();
        if (this.focusedView === this.getFurnitureCatalogController().getView()) {
            view.setEnabled(HomeView.ActionType.COPY, !modificationState && catalogSelectionContainsFurniture);
            view.setEnabled(HomeView.ActionType.CUT, false);
            view.setEnabled(HomeView.ActionType.DELETE, false);
            for (var index = 0; index < catalogSelectedItems.length; index++) {
                var piece = catalogSelectedItems[index];
                {
                    if (piece.isModifiable()) {
                        view.setEnabled(HomeView.ActionType.DELETE, true);
                        break;
                    }
                }
            }
        }
        else if (this.focusedView === furnitureController.getView()) {
            view.setEnabled(HomeView.ActionType.COPY, homeSelectionContainsFurniture);
            view.setEnabled(HomeView.ActionType.CUT, homeSelectionContainsDeletableFurniture);
            view.setEnabled(HomeView.ActionType.DELETE, homeSelectionContainsDeletableFurniture);
        }
        else if (this.focusedView === this.getPlanController().getView()) {
            view.setEnabled(HomeView.ActionType.COPY, homeSelectionContainsOneCopiableItemOrMore);
            view.setEnabled(HomeView.ActionType.CUT, homeSelectionContainsDeletableItems);
            view.setEnabled(HomeView.ActionType.DELETE, homeSelectionContainsDeletableItems);
        }
        else {
            view.setEnabled(HomeView.ActionType.COPY, false);
            view.setEnabled(HomeView.ActionType.CUT, false);
            view.setEnabled(HomeView.ActionType.DELETE, false);
        }
        this.enablePasteToGroupAction();
        this.enablePasteStyleAction();
        var selectedLevel = this.home.getSelectedLevel();
        var viewableLevel = selectedLevel == null || selectedLevel.isViewable();
        view.setEnabled(HomeView.ActionType.ADD_HOME_FURNITURE, catalogSelectionContainsFurniture && viewableLevel);
        view.setEnabled(HomeView.ActionType.ADD_FURNITURE_TO_GROUP, catalogSelectionContainsFurniture && viewableLevel && homeSelectionContainsOnlyOneGroup);
        view.setEnabled(HomeView.ActionType.DELETE_HOME_FURNITURE, homeSelectionContainsDeletableFurniture);
        view.setEnabled(HomeView.ActionType.DELETE_SELECTION, (catalogSelectionContainsFurniture && this.focusedView === this.getFurnitureCatalogController().getView()) || (homeSelectionContainsDeletableItems && (this.focusedView === furnitureController.getView() || this.focusedView === this.getPlanController().getView() || this.focusedView === this.getHomeController3D().getView())));
        view.setEnabled(HomeView.ActionType.MODIFY_FURNITURE, (catalogSelectionContainsOneModifiablePiece && this.focusedView === this.getFurnitureCatalogController().getView()) || (homeSelectionContainsFurniture && (this.focusedView === furnitureController.getView() || this.focusedView === this.getPlanController().getView() || this.focusedView === this.getHomeController3D().getView())));
        view.setEnabled(HomeView.ActionType.MODIFY_WALL, homeSelectionContainsWalls);
        view.setEnabled(HomeView.ActionType.FLIP_HORIZONTALLY, homeSelectionContainsOneCopiableItemOrMore);
        view.setEnabled(HomeView.ActionType.FLIP_VERTICALLY, homeSelectionContainsOneCopiableItemOrMore);
        view.setEnabled(HomeView.ActionType.JOIN_WALLS, homeSelectionContainsOneOrTwoWallsWithOneFreeEnd);
        view.setEnabled(HomeView.ActionType.REVERSE_WALL_DIRECTION, homeSelectionContainsWalls);
        view.setEnabled(HomeView.ActionType.SPLIT_WALL, homeSelectionContainsOneWall);
        view.setEnabled(HomeView.ActionType.MODIFY_ROOM, homeSelectionContainsRooms);
        view.setEnabled(HomeView.ActionType.MODIFY_POLYLINE, homeSelectionContainsPolylines);
        view.setEnabled(HomeView.ActionType.MODIFY_LABEL, homeSelectionContainsLabels);
        view.setEnabled(HomeView.ActionType.TOGGLE_BOLD_STYLE, homeSelectionContainsItemsWithText);
        view.setEnabled(HomeView.ActionType.TOGGLE_ITALIC_STYLE, homeSelectionContainsItemsWithText);
        view.setEnabled(HomeView.ActionType.INCREASE_TEXT_SIZE, homeSelectionContainsItemsWithText);
        view.setEnabled(HomeView.ActionType.DECREASE_TEXT_SIZE, homeSelectionContainsItemsWithText);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_TOP, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_BOTTOM, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_LEFT, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_RIGHT, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_FRONT_SIDE, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_BACK_SIDE, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_LEFT_SIDE, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_ON_RIGHT_SIDE, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.ALIGN_FURNITURE_SIDE_BY_SIDE, homeSelectionContainsTwoMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.DISTRIBUTE_FURNITURE_HORIZONTALLY, homeSelectionContainsThreeMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.DISTRIBUTE_FURNITURE_VERTICALLY, homeSelectionContainsThreeMovablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.RESET_FURNITURE_ELEVATION, homeSelectionContainsOneMovablePieceOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.GROUP_FURNITURE, homeSelectionContainsTwoMovableGroupablePiecesOfFurnitureOrMore);
        view.setEnabled(HomeView.ActionType.UNGROUP_FURNITURE, homeSelectionContainsFurnitureGroup);
        var selectionMode = this.getPlanController() != null && this.getPlanController().getMode() === PlanController.Mode.SELECTION_$LI$();
        view.setEnabled(HomeView.ActionType.ADD_ROOM_POINT, homeSelectionContainsOnlyOneRoom && selectionMode);
        view.setEnabled(HomeView.ActionType.DELETE_ROOM_POINT, homeSelectionContainsOnlyOneRoomWithFourPointsOrMore && selectionMode);
    };
    /**
     * Enables clipboard paste action if clipboard isn't empty.
     */
    HomeController.prototype.enablePasteAction = function () {
        var view = this.getView();
        var pasteEnabled = false;
        if (this.focusedView === this.getFurnitureController().getView() || this.focusedView === this.getPlanController().getView()) {
            var selectedLevel = this.home.getSelectedLevel();
            pasteEnabled = (selectedLevel == null || selectedLevel.isViewable()) && !this.getPlanController().isModificationState() && !view.isClipboardEmpty();
        }
        view.setEnabled(HomeView.ActionType.PASTE, pasteEnabled);
        this.enablePasteToGroupAction();
        this.enablePasteStyleAction();
    };
    /**
     * Enables paste to group action if clipboard contains furniture and
     * home selected item is a furniture group.
     * @private
     */
    HomeController.prototype.enablePasteToGroupAction = function () {
        var view = this.getView();
        var pasteToGroupEnabled = false;
        if (this.focusedView === this.getFurnitureController().getView() || this.focusedView === this.getPlanController().getView()) {
            var selectedLevel = this.home.getSelectedLevel();
            if ((selectedLevel == null || selectedLevel.isViewable()) && !this.getPlanController().isModificationState()) {
                var selectedItems = this.home.getSelectedItems();
                if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof HomeFurnitureGroup)) {
                    var clipboardItems = view.getClipboardItems();
                    if (clipboardItems != null) {
                        pasteToGroupEnabled = true;
                        for (var index = 0; index < clipboardItems.length; index++) {
                            var item = clipboardItems[index];
                            {
                                if (!(item != null && item instanceof HomePieceOfFurniture)) {
                                    pasteToGroupEnabled = false;
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        view.setEnabled(HomeView.ActionType.PASTE_TO_GROUP, pasteToGroupEnabled);
    };
    /**
     * Enables clipboard paste style action if selection contains some items of a class
     * compatible with the clipboard item.
     * @private
     */
    HomeController.prototype.enablePasteStyleAction = function () {
        var view = this.getView();
        var pasteStyleEnabled = false;
        if ((this.focusedView === this.getFurnitureController().getView() || this.focusedView === this.getPlanController().getView()) && !this.getPlanController().isModificationState()) {
            var clipboardItems = view.getClipboardItems();
            if (clipboardItems != null && /* size */ clipboardItems.length === 1) {
                var clipboardItem = clipboardItems[0];
                {
                    var array = this.home.getSelectedItems();
                    for (var index = 0; index < array.length; index++) {
                        var item = array[index];
                        {
                            if ((item != null && item instanceof HomePieceOfFurniture) && (clipboardItem != null && clipboardItem instanceof HomePieceOfFurniture) || (item != null && item instanceof Wall) && (clipboardItem != null && clipboardItem instanceof Wall) || (item != null && item instanceof Room) && (clipboardItem != null && clipboardItem instanceof Room) || (item != null && item instanceof Polyline) && (clipboardItem != null && clipboardItem instanceof Polyline) || (item != null && item instanceof Label) && (clipboardItem != null && clipboardItem instanceof Label)) {
                                pasteStyleEnabled = true;
                                break;
                            }
                        }
                    }
                }
            }
        }
        view.setEnabled(HomeView.ActionType.PASTE_STYLE, pasteStyleEnabled);
    };
    /**
     * Enables select all action if home isn't empty.
     */
    HomeController.prototype.enableSelectAllAction = function () {
        var view = this.getView();
        var modificationState = this.getPlanController().isModificationState();
        if (this.focusedView === this.getFurnitureController().getView()) {
            view.setEnabled(HomeView.ActionType.SELECT_ALL, !modificationState && /* size */ this.home.getFurniture().length > 0);
        }
        else if (this.focusedView === this.getPlanController().getView() || this.focusedView === this.getHomeController3D().getView()) {
            var homeContainsOneSelectableItemOrMore = !this.home.isEmpty() || this.home.getCompass().isVisible();
            view.setEnabled(HomeView.ActionType.SELECT_ALL, !modificationState && homeContainsOneSelectableItemOrMore);
        }
        else {
            view.setEnabled(HomeView.ActionType.SELECT_ALL, false);
        }
    };
    /**
     * Enables zoom actions depending on current scale.
     * @private
     */
    HomeController.prototype.enableZoomActions = function () {
        var planController = this.getPlanController();
        var scale = planController.getScale();
        var view = this.getView();
        view.setEnabled(HomeView.ActionType.ZOOM_IN, scale < planController.getMaximumScale());
        view.setEnabled(HomeView.ActionType.ZOOM_OUT, scale > planController.getMinimumScale());
    };
    /**
     * Adds undoable edit listener to undo support that enables Undo action.
     * @private
     */
    HomeController.prototype.addUndoSupportListener = function () {
        this.getUndoableEditSupport().addUndoableEditListener(new HomeController.HomeController$8(this));
        this.home.addPropertyChangeListener("MODIFIED", new HomeController.HomeController$9(this));
    };
    /**
     * Adds a furniture listener to home that enables / disables actions on furniture list change.
     * @private
     */
    HomeController.prototype.addHomeItemsListener = function () {
        var _this = this;
        var homeItemsListener = function (ev) {
            if (ev.getType() === CollectionEvent.Type.ADD || ev.getType() === CollectionEvent.Type.DELETE) {
                _this.enableSelectAllAction();
            }
        };
        this.home.addFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(homeItemsListener)))));
        this.home.addWallsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(homeItemsListener)))));
        this.home.addRoomsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(homeItemsListener)))));
        this.home.addPolylinesListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(homeItemsListener)))));
        this.home.addDimensionLinesListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(homeItemsListener)))));
        this.home.addLabelsListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(homeItemsListener)))));
        this.home.getCompass().addPropertyChangeListener(new HomeController.HomeController$10(this));
        this.home.addPropertyChangeListener("CAMERA", new HomeController.HomeController$11(this));
    };
    /**
     * Adds a property change listener to home to
     * enable/disable authorized actions according to selected level.
     * @private
     */
    HomeController.prototype.addLevelListeners = function () {
        var _this = this;
        var selectedLevelListener = new HomeController.HomeController$12(this);
        this.home.addPropertyChangeListener("SELECTED_LEVEL", selectedLevelListener);
        var backgroundImageChangeListener = new HomeController.HomeController$13(this);
        {
            var array = this.home.getLevels();
            for (var index = 0; index < array.length; index++) {
                var level = array[index];
                {
                    level.addPropertyChangeListener(backgroundImageChangeListener);
                }
            }
        }
        this.home.addLevelsListener(function (ev) {
            switch ((ev.getType())) {
                case CollectionEvent.Type.ADD:
                    _this.home.setSelectedLevel(ev.getItem());
                    ev.getItem().addPropertyChangeListener(backgroundImageChangeListener);
                    break;
                case CollectionEvent.Type.DELETE:
                    selectedLevelListener.propertyChange(null);
                    ev.getItem().removePropertyChangeListener(backgroundImageChangeListener);
                    break;
            }
        });
    };
    /**
     * Adds a property change listener to home to
     * enable/disable authorized actions according to stored cameras change.
     * @private
     */
    HomeController.prototype.addStoredCamerasListener = function () {
        this.home.addPropertyChangeListener("STORED_CAMERAS", new HomeController.HomeController$14(this));
    };
    /**
     * Adds a property change listener to plan controller to
     * enable/disable authorized actions according to its modification state and the plan scale.
     * @private
     */
    HomeController.prototype.addPlanControllerListeners = function () {
        this.getPlanController().addPropertyChangeListener("MODIFICATION_STATE", new HomeController.HomeController$15(this));
        this.getPlanController().addPropertyChangeListener("MODE", new HomeController.HomeController$16(this));
        this.getPlanController().addPropertyChangeListener("SCALE", new HomeController.HomeController$17(this));
    };
    /**
     * Adds the selected furniture in catalog to home and selects it.
     */
    HomeController.prototype.addHomeFurniture = function () {
        this.addFurniture(null);
    };
    /**
     * Adds the selected furniture in catalog to the selected group and selects it.
     */
    HomeController.prototype.addFurnitureToGroup = function () {
        this.addFurniture(this.home.getSelectedItems()[0]);
    };
    HomeController.prototype.addFurniture = function (group) {
        this.getPlanController().setMode(PlanController.Mode.SELECTION_$LI$());
        var selectedFurniture = this.getFurnitureCatalogController().getSelectedFurniture();
        if (!(selectedFurniture.length == 0)) {
            var addedFurniture = ([]);
            for (var index = 0; index < selectedFurniture.length; index++) {
                var piece = selectedFurniture[index];
                {
                    /* add */ (addedFurniture.push(this.getFurnitureController().createHomePieceOfFurniture(piece)) > 0);
                }
            }
            if (group != null) {
                this.getFurnitureController().addFurnitureToGroup(addedFurniture, group);
            }
            else {
                this.getFurnitureController().addFurniture$java_util_List(addedFurniture);
            }
            this.adjustFurnitureSizeAndElevation(addedFurniture, false);
        }
    };
    /**
     * Modifies the selected furniture of the focused view.
     */
    HomeController.prototype.modifySelectedFurniture = function () {
        if (this.focusedView === this.getFurnitureCatalogController().getView()) {
            this.getFurnitureCatalogController().modifySelectedFurniture();
        }
        else if (this.focusedView === this.getFurnitureController().getView() || this.focusedView === this.getPlanController().getView() || this.focusedView === this.getHomeController3D().getView()) {
            this.getFurnitureController().modifySelectedFurniture();
        }
    };
    HomeController.prototype.importLanguageLibrary$ = function () {
        var _this = this;
        this.getView().invokeLater(function () {
            var languageLibraryName = _this.getView().showImportLanguageLibraryDialog();
            if (languageLibraryName != null) {
                _this.importLanguageLibrary$java_lang_String(languageLibraryName);
            }
        });
    };
    HomeController.prototype.importLanguageLibrary$java_lang_String = function (languageLibraryName) {
        try {
            if (!this.preferences.languageLibraryExists(languageLibraryName) || this.getView().confirmReplaceLanguageLibrary(languageLibraryName)) {
                this.preferences.addLanguageLibrary(languageLibraryName);
            }
        }
        catch (ex) {
            var message = this.preferences.getLocalizedString(HomeController, "importLanguageLibraryError", languageLibraryName);
            this.getView().showError(message);
        }
    };
    /**
     * Imports a given language library.
     * @param {string} languageLibraryName
     */
    HomeController.prototype.importLanguageLibrary = function (languageLibraryName) {
        if (((typeof languageLibraryName === 'string') || languageLibraryName === null)) {
            return this.importLanguageLibrary$java_lang_String(languageLibraryName);
        }
        else if (languageLibraryName === undefined) {
            return this.importLanguageLibrary$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Imports furniture to the catalog or home depending on the focused view.
     */
    HomeController.prototype.importFurniture = function () {
        this.getPlanController().setMode(PlanController.Mode.SELECTION_$LI$());
        if (this.focusedView === this.getFurnitureCatalogController().getView()) {
            this.getFurnitureCatalogController().importFurniture$();
        }
        else {
            this.getFurnitureController().importFurniture$();
        }
    };
    HomeController.prototype.importFurnitureLibrary$ = function () {
        var _this = this;
        this.getView().invokeLater(function () {
            var furnitureLibraryName = _this.getView().showImportFurnitureLibraryDialog();
            if (furnitureLibraryName != null) {
                _this.importFurnitureLibrary$java_lang_String(furnitureLibraryName);
            }
        });
    };
    HomeController.prototype.importFurnitureLibrary$java_lang_String = function (furnitureLibraryName) {
        try {
            if (!this.preferences.furnitureLibraryExists(furnitureLibraryName) || this.getView().confirmReplaceFurnitureLibrary(furnitureLibraryName)) {
                this.preferences.addFurnitureLibrary(furnitureLibraryName);
                this.getView().showMessage(this.preferences.getLocalizedString(HomeController, "importedFurnitureLibraryMessage", this.contentManager != null ? this.contentManager.getPresentationName(furnitureLibraryName, ContentManager.ContentType.FURNITURE_LIBRARY) : furnitureLibraryName));
            }
        }
        catch (ex) {
            var message = this.preferences.getLocalizedString(HomeController, "importFurnitureLibraryError", furnitureLibraryName);
            this.getView().showError(message);
        }
    };
    /**
     * Imports a given furniture library.
     * @param {string} furnitureLibraryName
     */
    HomeController.prototype.importFurnitureLibrary = function (furnitureLibraryName) {
        if (((typeof furnitureLibraryName === 'string') || furnitureLibraryName === null)) {
            return this.importFurnitureLibrary$java_lang_String(furnitureLibraryName);
        }
        else if (furnitureLibraryName === undefined) {
            return this.importFurnitureLibrary$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Imports a texture to the texture catalog.
     */
    HomeController.prototype.importTexture = function () {
        new ImportedTextureWizardController(this.preferences, this.viewFactory, this.contentManager).displayView(this.getView());
    };
    HomeController.prototype.importTexturesLibrary$ = function () {
        var _this = this;
        this.getView().invokeLater(function () {
            var texturesLibraryName = _this.getView().showImportTexturesLibraryDialog();
            if (texturesLibraryName != null) {
                _this.importTexturesLibrary$java_lang_String(texturesLibraryName);
            }
        });
    };
    HomeController.prototype.importTexturesLibrary$java_lang_String = function (texturesLibraryName) {
        try {
            if (!this.preferences.texturesLibraryExists(texturesLibraryName) || this.getView().confirmReplaceTexturesLibrary(texturesLibraryName)) {
                this.preferences.addTexturesLibrary(texturesLibraryName);
                this.getView().showMessage(this.preferences.getLocalizedString(HomeController, "importedTexturesLibraryMessage", this.contentManager != null ? this.contentManager.getPresentationName(texturesLibraryName, ContentManager.ContentType.TEXTURES_LIBRARY) : texturesLibraryName));
            }
        }
        catch (ex) {
            var message = this.preferences.getLocalizedString(HomeController, "importTexturesLibraryError", texturesLibraryName);
            this.getView().showError(message);
        }
    };
    /**
     * Imports a given textures library.
     * @param {string} texturesLibraryName
     */
    HomeController.prototype.importTexturesLibrary = function (texturesLibraryName) {
        if (((typeof texturesLibraryName === 'string') || texturesLibraryName === null)) {
            return this.importTexturesLibrary$java_lang_String(texturesLibraryName);
        }
        else if (texturesLibraryName === undefined) {
            return this.importTexturesLibrary$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Undoes last operation.
     */
    HomeController.prototype.undo = function () {
        this.undoManager.undo();
        var view = this.getView();
        var moreUndo = this.undoManager.canUndo();
        view.setEnabled(HomeView.ActionType.UNDO, moreUndo);
        view.setEnabled(HomeView.ActionType.REDO, true);
        if (moreUndo) {
            view.setUndoRedoName(this.undoManager.getUndoPresentationName(), this.undoManager.getRedoPresentationName());
        }
        else {
            view.setUndoRedoName(null, this.undoManager.getRedoPresentationName());
        }
        this.saveUndoLevel--;
        this.home.setModified(this.saveUndoLevel !== 0 || this.notUndoableModifications);
    };
    /**
     * Redoes last undone operation.
     */
    HomeController.prototype.redo = function () {
        this.undoManager.redo();
        var view = this.getView();
        var moreRedo = this.undoManager.canRedo();
        view.setEnabled(HomeView.ActionType.UNDO, true);
        view.setEnabled(HomeView.ActionType.REDO, moreRedo);
        if (moreRedo) {
            view.setUndoRedoName(this.undoManager.getUndoPresentationName(), this.undoManager.getRedoPresentationName());
        }
        else {
            view.setUndoRedoName(this.undoManager.getUndoPresentationName(), null);
        }
        this.saveUndoLevel++;
        this.home.setModified(this.saveUndoLevel !== 0 || this.notUndoableModifications);
    };
    /**
     * Deletes items and post a cut operation to undo support.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     */
    HomeController.prototype.cut = function (items) {
        var undoSupport = this.getUndoableEditSupport();
        undoSupport.beginUpdate();
        this.getPlanController().deleteItems(items);
        undoSupport.postEdit(new LocalizedUndoableEdit(this.preferences, HomeController, "undoCutName"));
        undoSupport.endUpdate();
    };
    /**
     * Adds items to home and posts a paste operation to undo support.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     */
    HomeController.prototype.paste = function (items) {
        var selectedItems = this.home.getSelectedItems();
        var pastedItemsDelta = 0;
        if ( /* size */items.length === /* size */ selectedItems.length) {
            pastedItemsDelta = 20;
            for (var index = 0; index < items.length; index++) {
                var pastedItem = items[index];
                {
                    var pastedItemPoints = pastedItem.getPoints();
                    var pastedItemOverlapSelectedItem = false;
                    for (var index1 = 0; index1 < selectedItems.length; index1++) {
                        var selectedItem = selectedItems[index1];
                        {
                            if ( /* deepEquals */(JSON.stringify(pastedItemPoints) === JSON.stringify(selectedItem.getPoints()))) {
                                pastedItemOverlapSelectedItem = true;
                                break;
                            }
                        }
                    }
                    if (!pastedItemOverlapSelectedItem) {
                        pastedItemsDelta = 0;
                        break;
                    }
                }
            }
        }
        this.addPastedItems(items, null, pastedItemsDelta, pastedItemsDelta, null, "undoPasteName");
    };
    HomeController.prototype.drop$java_util_List$float$float = function (items, dx, dy) {
        this.drop$java_util_List$com_eteks_sweethome3d_viewcontroller_View$float$float(items, null, dx, dy);
    };
    HomeController.prototype.drop$java_util_List$com_eteks_sweethome3d_viewcontroller_View$float$float = function (items, destinationView, dx, dy) {
        this.addPastedItems(items, destinationView, dx, dy, null, "undoDropName");
    };
    /**
     * Adds items to home, moves them of (dx, dy)
     * and posts a drop operation to undo support.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @param {Object} destinationView
     * @param {number} dx
     * @param {number} dy
     */
    HomeController.prototype.drop = function (items, destinationView, dx, dy) {
        if (((items != null && (items instanceof Array)) || items === null) && ((destinationView != null && (destinationView.constructor != null && destinationView.constructor["__interfaces"] != null && destinationView.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.View") >= 0)) || destinationView === null) && ((typeof dx === 'number') || dx === null) && ((typeof dy === 'number') || dy === null)) {
            return this.drop$java_util_List$com_eteks_sweethome3d_viewcontroller_View$float$float(items, destinationView, dx, dy);
        }
        else if (((items != null && (items instanceof Array)) || items === null) && ((destinationView != null && (destinationView.constructor != null && destinationView.constructor["__interfaces"] != null && destinationView.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.View") >= 0)) || destinationView === null) && ((dx != null && (dx.constructor != null && dx.constructor["__interfaces"] != null && dx.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Selectable") >= 0)) || dx === null) && dy === undefined) {
            return this.drop$java_util_List$com_eteks_sweethome3d_viewcontroller_View$com_eteks_sweethome3d_model_Selectable(items, destinationView, dx);
        }
        else if (((items != null && (items instanceof Array)) || items === null) && ((typeof destinationView === 'number') || destinationView === null) && ((typeof dx === 'number') || dx === null) && dy === undefined) {
            return this.drop$java_util_List$float$float(items, destinationView, dx);
        }
        else
            throw new Error('invalid overload');
    };
    HomeController.prototype.drop$java_util_List$com_eteks_sweethome3d_viewcontroller_View$com_eteks_sweethome3d_model_Selectable = function (items, destinationView, beforeItem) {
        this.addPastedItems(items, destinationView, 0, 0, beforeItem, "undoDropName");
    };
    /**
     * Adds items to home.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @param {Object} destinationView
     * @param {number} dx
     * @param {number} dy
     * @param {Object} beforeItem
     * @param {string} presentationNameKey
     * @private
     */
    HomeController.prototype.addPastedItems = function (items, destinationView, dx, dy, beforeItem, presentationNameKey) {
        if ( /* size */items.length > 1 || ( /* size */items.length === 1 && !( /* get */items[0] != null && /* get */ items[0] instanceof Compass))) {
            var compassList = Home.getSubList(items, Compass);
            if ( /* size */compassList.length !== 0) {
                items = (items.slice(0));
                /* removeAll */ (function (a, r) { var b = false; for (var i = 0; i < r.length; i++) {
                    var ndx = a.indexOf(r[i]);
                    if (ndx >= 0) {
                        a.splice(ndx, 1);
                        b = true;
                    }
                } return b; })(items, compassList);
            }
            this.getPlanController().setMode(PlanController.Mode.SELECTION_$LI$());
            var undoSupport = this.getUndoableEditSupport();
            undoSupport.beginUpdate();
            if (destinationView != null && destinationView === this.getFurnitureController().getView()) {
                this.getFurnitureController().addFurniture$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture(Home.getFurnitureSubList(items), beforeItem);
            }
            else {
                this.getPlanController().addItems(items);
            }
            var addedFurniture = Home.getFurnitureSubList(items);
            this.adjustFurnitureSizeAndElevation(addedFurniture, dx === 0 && dy === 0 && destinationView == null);
            this.getPlanController().moveItems(items, dx, dy);
            if (destinationView === this.getPlanController().getView()) {
                if (this.preferences.isMagnetismEnabled() && /* size */ items.length === 1 && /* size */ addedFurniture.length === 1) {
                    this.getPlanController().adjustMagnetizedPieceOfFurniture(items[0], dx, dy);
                }
            }
            undoSupport.postEdit(new LocalizedUndoableEdit(this.preferences, HomeController, presentationNameKey));
            undoSupport.endUpdate();
        }
    };
    /**
     * Adjusts furniture size and elevation if magnetism is enabled.
     * This method should be called after the given furniture is added to the plan,
     * to ensure its size in plan is adjusted too.
     * @param {HomePieceOfFurniture[]} furniture
     * @param {boolean} keepDoorAndWindowDepth
     * @private
     */
    HomeController.prototype.adjustFurnitureSizeAndElevation = function (furniture, keepDoorAndWindowDepth) {
        if (this.preferences.isMagnetismEnabled()) {
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    if (!(piece != null && piece instanceof HomeFurnitureGroup) && piece.isResizable()) {
                        piece.setWidth(this.preferences.getLengthUnit().getMagnetizedLength(piece.getWidth(), 0.1));
                        if (!(piece != null && piece instanceof HomeDoorOrWindow) || !keepDoorAndWindowDepth) {
                            piece.setDepth(this.preferences.getLengthUnit().getMagnetizedLength(piece.getDepth(), 0.1));
                        }
                        piece.setHeight(this.preferences.getLengthUnit().getMagnetizedLength(piece.getHeight(), 0.1));
                    }
                    piece.setElevation(this.preferences.getLengthUnit().getMagnetizedLength(piece.getElevation(), 0.1));
                }
            }
        }
    };
    /**
     * Adds imported models to home, moves them of (dx, dy)
     * and post a drop operation to undo support.
     * @param {string[]} importableModels
     * @param {number} dx
     * @param {number} dy
     */
    HomeController.prototype.dropFiles = function (importableModels, dx, dy) {
        this.getPlanController().setMode(PlanController.Mode.SELECTION_$LI$());
        var importedFurniture = ([]);
        var addedFurnitureListener = function (ev) {
            /* add */ (importedFurniture.push(ev.getItem()) > 0);
        };
        this.home.addFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
        var undoSupport = this.getUndoableEditSupport();
        undoSupport.beginUpdate();
        for (var index = 0; index < importableModels.length; index++) {
            var model = importableModels[index];
            {
                this.getFurnitureController().importFurniture$java_lang_String(model);
            }
        }
        this.home.removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(addedFurnitureListener)));
        if ( /* size */importedFurniture.length > 0) {
            this.getPlanController().moveItems(importedFurniture, dx, dy);
            this.home.setSelectedItems(importedFurniture);
            undoSupport.postEdit(new HomeController.DroppingEndUndoableEdit(this.home, this.preferences, /* toArray */ importedFurniture.slice(0)));
        }
        undoSupport.endUpdate();
    };
    /**
     * Paste the furniture in clipboard to the selected group in home.
     */
    HomeController.prototype.pasteToGroup = function () {
        var undoSupport = this.getUndoableEditSupport();
        undoSupport.beginUpdate();
        var addedFurniture = Home.getFurnitureSubList(this.getView().getClipboardItems());
        this.getFurnitureController().addFurnitureToGroup(addedFurniture, this.home.getSelectedItems()[0]);
        this.adjustFurnitureSizeAndElevation(addedFurniture, true);
        undoSupport.postEdit(new LocalizedUndoableEdit(this.preferences, HomeController, "undoPasteToGroupName"));
        undoSupport.endUpdate();
    };
    /**
     * Paste the style of the item in clipboard on selected items compatible with it.
     */
    HomeController.prototype.pasteStyle = function () {
        var undoSupport = this.getUndoableEditSupport();
        undoSupport.beginUpdate();
        var clipboardItem = this.getView().getClipboardItems()[0];
        var selectedItems = this.home.getSelectedItems();
        if (clipboardItem != null && clipboardItem instanceof HomePieceOfFurniture) {
            var clipboardPiece = clipboardItem;
            var furnitureController = new HomeFurnitureController(this.home, this.preferences, this.viewFactory, this.contentManager, undoSupport);
            var materials = clipboardPiece.getModelMaterials();
            if (materials != null) {
                furnitureController.getModelMaterialsController().setMaterials(clipboardPiece.getModelMaterials());
                furnitureController.setPaint(HomeFurnitureController.FurniturePaint.MODEL_MATERIALS);
            }
            else if (clipboardPiece.getTexture() != null) {
                furnitureController.getTextureController().setTexture(clipboardPiece.getTexture());
                furnitureController.setPaint(HomeFurnitureController.FurniturePaint.TEXTURED);
            }
            else if (clipboardPiece.getColor() != null) {
                furnitureController.setColor(clipboardPiece.getColor());
                furnitureController.setPaint(HomeFurnitureController.FurniturePaint.COLORED);
            }
            else {
                furnitureController.setPaint(HomeFurnitureController.FurniturePaint.DEFAULT);
            }
            var shininess = clipboardPiece.getShininess();
            furnitureController.setShininess(shininess == null ? HomeFurnitureController.FurnitureShininess.DEFAULT : ( /* floatValue */shininess === 0 ? HomeFurnitureController.FurnitureShininess.MATT : HomeFurnitureController.FurnitureShininess.SHINY));
            furnitureController.modifyFurniture();
        }
        else if (clipboardItem != null && clipboardItem instanceof Wall) {
            var clipboardWall = clipboardItem;
            var wallController = new WallController(this.home, this.preferences, this.viewFactory, this.contentManager, undoSupport);
            if (clipboardWall.getLeftSideColor() != null) {
                wallController.setLeftSideColor(clipboardWall.getLeftSideColor());
                wallController.setLeftSidePaint(WallController.WallPaint.COLORED);
            }
            else if (clipboardWall.getLeftSideTexture() != null) {
                wallController.getLeftSideTextureController().setTexture(clipboardWall.getLeftSideTexture());
                wallController.setLeftSidePaint(WallController.WallPaint.TEXTURED);
            }
            else {
                wallController.setLeftSidePaint(WallController.WallPaint.DEFAULT);
            }
            wallController.setLeftSideShininess(clipboardWall.getLeftSideShininess());
            wallController.getLeftSideBaseboardController().setBaseboard(clipboardWall.getLeftSideBaseboard());
            if (clipboardWall.getRightSideColor() != null) {
                wallController.setRightSideColor(clipboardWall.getRightSideColor());
                wallController.setRightSidePaint(WallController.WallPaint.COLORED);
            }
            else if (clipboardWall.getRightSideTexture() != null) {
                wallController.getRightSideTextureController().setTexture(clipboardWall.getRightSideTexture());
                wallController.setRightSidePaint(WallController.WallPaint.TEXTURED);
            }
            else {
                wallController.setRightSidePaint(WallController.WallPaint.DEFAULT);
            }
            wallController.setRightSideShininess(clipboardWall.getRightSideShininess());
            wallController.getRightSideBaseboardController().setBaseboard(clipboardWall.getRightSideBaseboard());
            wallController.setPattern(clipboardWall.getPattern());
            wallController.setTopColor(clipboardWall.getTopColor());
            wallController.setTopPaint(clipboardWall.getTopColor() != null ? WallController.WallPaint.COLORED : WallController.WallPaint.DEFAULT);
            wallController.modifyWalls();
        }
        else if (clipboardItem != null && clipboardItem instanceof Room) {
            var clipboardRoom = clipboardItem;
            var roomController = new RoomController(this.home, this.preferences, this.viewFactory, this.contentManager, undoSupport);
            if (clipboardRoom.getFloorColor() != null) {
                roomController.setFloorColor(clipboardRoom.getFloorColor());
                roomController.setFloorPaint(RoomController.RoomPaint.COLORED);
            }
            else if (clipboardRoom.getFloorTexture() != null) {
                roomController.getFloorTextureController().setTexture(clipboardRoom.getFloorTexture());
                roomController.setFloorPaint(RoomController.RoomPaint.TEXTURED);
            }
            else {
                roomController.setFloorPaint(RoomController.RoomPaint.DEFAULT);
            }
            roomController.setFloorShininess(clipboardRoom.getFloorShininess());
            if (clipboardRoom.getCeilingColor() != null) {
                roomController.setCeilingColor(clipboardRoom.getCeilingColor());
                roomController.setCeilingPaint(RoomController.RoomPaint.COLORED);
            }
            else if (clipboardRoom.getCeilingTexture() != null) {
                roomController.getCeilingTextureController().setTexture(clipboardRoom.getCeilingTexture());
                roomController.setCeilingPaint(RoomController.RoomPaint.TEXTURED);
            }
            else {
                roomController.setCeilingPaint(RoomController.RoomPaint.DEFAULT);
            }
            roomController.setCeilingShininess(clipboardRoom.getCeilingShininess());
            roomController.modifyRooms();
        }
        else if (clipboardItem != null && clipboardItem instanceof Polyline) {
            var clipboardPolyline = clipboardItem;
            var polylineController = new PolylineController(this.home, this.preferences, this.viewFactory, this.contentManager, undoSupport);
            polylineController.setThickness(clipboardPolyline.getThickness());
            polylineController.setJoinStyle(clipboardPolyline.getJoinStyle());
            polylineController.setCapStyle(clipboardPolyline.getCapStyle());
            polylineController.setStartArrowStyle(clipboardPolyline.getStartArrowStyle());
            polylineController.setEndArrowStyle(clipboardPolyline.getEndArrowStyle());
            polylineController.setDashStyle(clipboardPolyline.getDashStyle());
            polylineController.setDashPattern(clipboardPolyline.getDashPattern());
            polylineController.setDashOffset(clipboardPolyline.getDashOffset());
            polylineController.setColor(clipboardPolyline.getColor());
            polylineController.modifyPolylines();
        }
        else if (clipboardItem != null && clipboardItem instanceof Label) {
            var clipboardLabel = clipboardItem;
            var labelController = new LabelController(this.home, this.preferences, this.viewFactory, undoSupport);
            labelController.setColor(clipboardLabel.getColor());
            var labelStyle = clipboardLabel.getStyle();
            if (labelStyle != null) {
                labelController.setAlignment(labelStyle.getAlignment());
                labelController.setFontName(labelStyle.getFontName());
                labelController.setFontSize(labelStyle.getFontSize());
            }
            else {
                labelController.setAlignment(null);
                labelController.setFontName(null);
                labelController.setFontSize(this.preferences.getDefaultTextStyle(Label).getFontSize());
            }
            labelController.modifyLabels();
        }
        undoSupport.postEdit(new HomeController.PastingStyleEndUndoableEdit(this.home, this.preferences, /* toArray */ selectedItems.slice(0)));
        undoSupport.endUpdate();
    };
    /**
     * Returns the transfer data matching the requested types.
     * @param {Object} observer
     * @param {com.eteks.sweethome3d.viewcontroller.TransferableView.DataType[]} dataTypes
     */
    HomeController.prototype.createTransferData = function (observer) {
        var dataTypes = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            dataTypes[_i - 1] = arguments[_i];
        }
        var data = ([]);
        for (var i = 0; i < dataTypes.length; i++) {
            {
                if (this.childControllers == null) {
                    this.childControllers = ([]);
                    /* add */ (this.childControllers.push(this.getFurnitureCatalogController()) > 0);
                    /* add */ (this.childControllers.push(this.getFurnitureController()) > 0);
                    /* add */ (this.childControllers.push(this.getPlanController()) > 0);
                    /* add */ (this.childControllers.push(this.getHomeController3D()) > 0);
                }
                for (var index = 0; index < this.childControllers.length; index++) {
                    var childController = this.childControllers[index];
                    {
                        if (childController.getView() != null && (childController.getView().constructor != null && childController.getView().constructor["__interfaces"] != null && childController.getView().constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.TransferableView") >= 0)) {
                            /* add */ (data.push(childController.getView().createTransferData(dataTypes[i])) > 0);
                        }
                    }
                }
            }
            ;
        }
        observer.dataReady(/* toArray */ data.slice(0));
    };
    /**
     * Deletes the selection in the focused component.
     */
    HomeController.prototype["delete"] = function () {
        if (this.focusedView === this.getFurnitureCatalogController().getView()) {
            if (this.getView().confirmDeleteCatalogSelection()) {
                this.getFurnitureCatalogController().deleteSelection();
            }
        }
        else if (this.focusedView === this.getFurnitureController().getView()) {
            this.getFurnitureController().deleteSelection();
        }
        else if (this.focusedView === this.getPlanController().getView()) {
            this.getPlanController().deleteSelection();
        }
    };
    /**
     * Updates actions when focused view changed.
     * @param {Object} focusedView
     */
    HomeController.prototype.focusedViewChanged = function (focusedView) {
        this.focusedView = focusedView;
        this.enableActionsBoundToSelection();
        this.enablePasteAction();
        this.enablePasteToGroupAction();
        this.enablePasteStyleAction();
        this.enableSelectAllAction();
    };
    /**
     * Selects everything in the focused component.
     */
    HomeController.prototype.selectAll = function () {
        if (this.focusedView === this.getFurnitureController().getView()) {
            this.getFurnitureController().selectAll();
        }
        else if (this.focusedView === this.getPlanController().getView() || this.focusedView === this.getHomeController3D().getView()) {
            this.getPlanController().selectAll();
        }
    };
    /**
     * Creates a new home and adds it to application home list.
     */
    HomeController.prototype.newHome = function () {
        var home;
        if (this.application != null) {
            home = this.application.createHome();
        }
        else {
            home = new Home(this.preferences.getNewWallHeight());
        }
        this.application.addHome(home);
    };
    HomeController.prototype.newHomeFromExample = function () {
    };
    /**
     * Returns a map with entries containing furniture name associated to their id.
     * @param {FurnitureCatalog} catalog
     * @return {Object}
     * @private
     */
    HomeController.prototype.getCatalogFurnitureNames = function (catalog) {
        var furnitureNames = ({});
        {
            var array = catalog.getCategories();
            for (var index = 0; index < array.length; index++) {
                var category = array[index];
                {
                    {
                        var array1 = category.getFurniture();
                        for (var index1 = 0; index1 < array1.length; index1++) {
                            var piece = array1[index1];
                            {
                                if (piece.getId() != null) {
                                    /* put */ (furnitureNames[piece.getId()] = piece.getName());
                                }
                            }
                        }
                    }
                }
            }
        }
        return furnitureNames;
    };
    /**
     * Renames the given <code>piece</code> from the piece name with the same id in <code>furnitureNames</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {Object} furnitureNames
     * @param {string} groupName
     * @private
     */
    HomeController.prototype.renameToCatalogName = function (piece, furnitureNames, groupName) {
        if (piece != null && piece instanceof HomeFurnitureGroup) {
            piece.setName(groupName);
            {
                var array = piece.getFurniture();
                for (var index = 0; index < array.length; index++) {
                    var groupPiece = array[index];
                    {
                        this.renameToCatalogName(groupPiece, furnitureNames, groupName);
                    }
                }
            }
        }
        else {
            var id = piece.getCatalogId();
            if (id != null) {
                piece.setName(/* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(furnitureNames, id));
            }
        }
    };
    HomeController.prototype.open = function () {
    };
    /**
     * Adds the given home to application.
     * @param {Home} home
     * @private
     */
    HomeController.prototype.addHomeToApplication = function (home) {
        var _this = this;
        this.getView().invokeLater(function () {
            _this.application.addHome(home);
        });
    };
    /**
     * Updates user preferences <code>recentHomes</code> and write preferences.
     * @param {string[]} recentHomes
     * @private
     */
    HomeController.prototype.updateUserPreferencesRecentHomes = function (recentHomes) {
        if (this.application != null) {
            for (var i = recentHomes.length - 1; i >= 0; i--) {
                {
                    try {
                        if (!null /*erased method exists(java.lang.String)*/) {
                            /* remove */ recentHomes.splice(i, 1)[0];
                        }
                    }
                    catch (ex) {
                    }
                }
                ;
            }
            this.preferences.setRecentHomes(recentHomes);
        }
    };
    /**
     * Returns a list of displayable recent homes.
     * @return {string[]}
     */
    HomeController.prototype.getRecentHomes = function () {
        if (this.application != null) {
            var recentHomes = ([]);
            {
                var array = this.preferences.getRecentHomes();
                for (var index = 0; index < array.length; index++) {
                    var homeName = array[index];
                    {
                        try {
                            if (null /*erased method exists(java.lang.String)*/) {
                                /* add */ (recentHomes.push(homeName) > 0);
                                if ( /* size */recentHomes.length === this.preferences.getRecentHomesMaxCount()) {
                                    break;
                                }
                            }
                        }
                        catch (ex) {
                        }
                    }
                }
            }
            this.getView().setEnabled(HomeView.ActionType.DELETE_RECENT_HOMES, !(recentHomes.length == 0));
            return /* unmodifiableList */ recentHomes.slice(0);
        }
        else {
            return ([]);
        }
    };
    /**
     * Returns the version of the application for display purpose.
     * @return {string}
     */
    HomeController.prototype.getVersion = function () {
        if (this.application != null) {
            var applicationVersion = this.application.getVersion();
            try {
                var deploymentInformation = 'JS';
                if (deploymentInformation != null) {
                    applicationVersion += " " + deploymentInformation;
                }
            }
            catch (ex) {
            }
            return applicationVersion;
        }
        else {
            return "";
        }
    };
    /**
     * Deletes the list of recent homes in user preferences.
     */
    HomeController.prototype.deleteRecentHomes = function () {
        this.updateUserPreferencesRecentHomes(([]));
        this.getView().setEnabled(HomeView.ActionType.DELETE_RECENT_HOMES, false);
    };
    HomeController.prototype.close = function () {
    };
    HomeController.prototype.save = function () {
    };
    HomeController.prototype.saveAs = function () {
    };
    HomeController.prototype.saveAndCompress = function () {
    };
    HomeController.prototype.saveAsAndCompress = function () {
    };
    /**
     * Updates the saved home and executes <code>postSaveTask</code>
     * if it's not <code>null</code>.
     * @param {string} homeName
     * @param {number} savedVersion
     * @param {() => void} postSaveTask
     * @private
     */
    HomeController.prototype.updateSavedHome = function (homeName, savedVersion, postSaveTask) {
        var _this = this;
        this.getView().invokeLater(function () {
            _this.home.setName(homeName);
            _this.home.setModified(false);
            _this.home.setRecovered(false);
            _this.home.setRepaired(false);
            _this.home.setVersion(savedVersion);
            var recentHomes = (_this.preferences.getRecentHomes().slice(0));
            var homeNameIndex = recentHomes.indexOf(homeName);
            if (homeNameIndex >= 0) {
                /* remove */ recentHomes.splice(homeNameIndex, 1)[0];
            }
            /* add */ recentHomes.splice(0, 0, homeName);
            _this.updateUserPreferencesRecentHomes(recentHomes);
            if (postSaveTask != null) {
                (function (target) { return (typeof target === 'function') ? target() : target.run(); })(postSaveTask);
            }
        });
    };
    HomeController.prototype.exportToCSV = function () {
    };
    HomeController.prototype.exportToSVG = function () {
    };
    HomeController.prototype.exportToOBJ = function () {
    };
    HomeController.prototype.createPhotos = function () {
    };
    HomeController.prototype.createPhoto = function () {
    };
    HomeController.prototype.createVideo = function () {
    };
    HomeController.prototype.setupPage = function () {
    };
    HomeController.prototype.previewPrint = function () {
    };
    HomeController.prototype.print = function () {
    };
    HomeController.prototype.printToPDF = function () {
    };
    /**
     * Controls application exit. If any home in application homes list is modified,
     * the user will be {@link HomeView#confirmExit() prompted} in view whether he wants
     * to discard his modifications or not.
     */
    HomeController.prototype.exit = function () {
        {
            var array = this.application.getHomes();
            for (var index = 0; index < array.length; index++) {
                var home = array[index];
                {
                    if (home.isModified() || home.isRecovered() || home.isRepaired()) {
                        if (this.getView().confirmExit()) {
                            break;
                        }
                        else {
                            return;
                        }
                    }
                }
            }
        }
        {
            var array = this.application.getHomes();
            for (var index = 0; index < array.length; index++) {
                var home = array[index];
                {
                    home.setRecovered(false);
                    this.application.deleteHome(home);
                }
            }
        }
    };
    /**
     * Edits preferences and changes them if user agrees.
     */
    HomeController.prototype.editPreferences = function () {
        new UserPreferencesController(this.preferences, this.viewFactory, this.contentManager, this).displayView(this.getView());
    };
    /**
     * Enables magnetism in preferences.
     */
    HomeController.prototype.enableMagnetism = function () {
        this.preferences.setMagnetismEnabled(true);
    };
    /**
     * Disables magnetism in preferences.
     */
    HomeController.prototype.disableMagnetism = function () {
        this.preferences.setMagnetismEnabled(false);
    };
    /**
     * Displays a tip message dialog depending on the given mode and
     * sets the active mode of the plan controller.
     * @param {PlanController.Mode} mode
     */
    HomeController.prototype.setMode = function (mode) {
        var _this = this;
        if (this.getPlanController().getMode() !== mode) {
            var actionKey_1;
            if (mode === PlanController.Mode.WALL_CREATION_$LI$()) {
                actionKey_1 = /* Enum.name */ HomeView.ActionType[HomeView.ActionType.CREATE_WALLS];
            }
            else if (mode === PlanController.Mode.ROOM_CREATION_$LI$()) {
                actionKey_1 = /* Enum.name */ HomeView.ActionType[HomeView.ActionType.CREATE_ROOMS];
            }
            else if (mode === PlanController.Mode.POLYLINE_CREATION_$LI$()) {
                actionKey_1 = /* Enum.name */ HomeView.ActionType[HomeView.ActionType.CREATE_POLYLINES];
            }
            else if (mode === PlanController.Mode.DIMENSION_LINE_CREATION_$LI$()) {
                actionKey_1 = /* Enum.name */ HomeView.ActionType[HomeView.ActionType.CREATE_DIMENSION_LINES];
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                actionKey_1 = /* Enum.name */ HomeView.ActionType[HomeView.ActionType.CREATE_LABELS];
            }
            else {
                actionKey_1 = null;
            }
            if (actionKey_1 != null && !this.preferences.isActionTipIgnored(actionKey_1)) {
                this.getView().invokeLater(function () {
                    if (_this.getView().showActionTipMessage(actionKey_1)) {
                        _this.preferences.setActionTipIgnored(actionKey_1);
                    }
                });
            }
            this.getPlanController().setMode(mode);
        }
    };
    /**
     * Displays the wizard that helps to import home background image.
     */
    HomeController.prototype.importBackgroundImage = function () {
        new BackgroundImageWizardController(this.home, this.preferences, this.viewFactory, this.contentManager, this.getUndoableEditSupport()).displayView(this.getView());
    };
    /**
     * Displays the wizard that helps to change home background image.
     */
    HomeController.prototype.modifyBackgroundImage = function () {
        this.importBackgroundImage();
    };
    /**
     * Hides the home background image.
     */
    HomeController.prototype.hideBackgroundImage = function () {
        this.toggleBackgroundImageVisibility("undoHideBackgroundImageName");
    };
    /**
     * Shows the home background image.
     */
    HomeController.prototype.showBackgroundImage = function () {
        this.toggleBackgroundImageVisibility("undoShowBackgroundImageName");
    };
    /**
     * Toggles visibility of the background image and posts an undoable operation.
     * @param {string} presentationName
     * @private
     */
    HomeController.prototype.toggleBackgroundImageVisibility = function (presentationName) {
        var selectedLevel = this.home.getSelectedLevel();
        HomeController.doToggleBackgroundImageVisibility(this.home);
        this.getUndoableEditSupport().postEdit(new HomeController.BackgroundImageVisibilityTogglingUndoableEdit(this.home, this.preferences, presentationName, selectedLevel));
    };
    /**
     * Toggles visibility of the background image.
     * @param {Home} home
     * @private
     */
    HomeController.doToggleBackgroundImageVisibility = function (home) {
        var backgroundImage = home.getSelectedLevel() != null ? home.getSelectedLevel().getBackgroundImage() : home.getBackgroundImage();
        backgroundImage = new BackgroundImage(backgroundImage.getImage(), backgroundImage.getScaleDistance(), backgroundImage.getScaleDistanceXStart(), backgroundImage.getScaleDistanceYStart(), backgroundImage.getScaleDistanceXEnd(), backgroundImage.getScaleDistanceYEnd(), backgroundImage.getXOrigin(), backgroundImage.getYOrigin(), !backgroundImage.isVisible());
        if (home.getSelectedLevel() != null) {
            home.getSelectedLevel().setBackgroundImage(backgroundImage);
        }
        else {
            home.setBackgroundImage(backgroundImage);
        }
    };
    /**
     * Deletes home background image and posts and posts an undoable operation.
     */
    HomeController.prototype.deleteBackgroundImage = function () {
        var selectedLevel = this.home.getSelectedLevel();
        var oldImage;
        if (selectedLevel != null) {
            oldImage = selectedLevel.getBackgroundImage();
            selectedLevel.setBackgroundImage(null);
        }
        else {
            oldImage = this.home.getBackgroundImage();
            this.home.setBackgroundImage(null);
        }
        this.getUndoableEditSupport().postEdit(new HomeController.BackgroundImageDeletionUndoableEdit(this.home, this.preferences, selectedLevel, oldImage));
    };
    /**
     * Zooms out in plan.
     */
    HomeController.prototype.zoomOut = function () {
        var planController = this.getPlanController();
        var newScale = planController.getScale() / 1.5;
        planController.setScale(newScale);
        planController.getView().makeSelectionVisible();
    };
    /**
     * Zooms in in plan.
     */
    HomeController.prototype.zoomIn = function () {
        var planController = this.getPlanController();
        var newScale = planController.getScale() * 1.5;
        planController.setScale(newScale);
        planController.getView().makeSelectionVisible();
    };
    /**
     * Prompts a name for the current camera and stores it in home.
     */
    HomeController.prototype.storeCamera = function () {
        var now = new Date().toLocaleDateString(this.preferences.getLanguage().replace('_', '-'));
        var name = this.getView().showStoreCameraDialog(now);
        if (name != null) {
            this.getHomeController3D().storeCamera(name);
        }
    };
    /**
     * Prompts stored cameras in home to be deleted and deletes the ones selected by the user.
     */
    HomeController.prototype.deleteCameras = function () {
        var deletedCameras = this.getView().showDeletedCamerasDialog();
        if (deletedCameras != null) {
            this.getHomeController3D().deleteCameras(deletedCameras);
        }
    };
    /**
     * Detaches the given <code>view</code> from home view.
     * @param {Object} view
     */
    HomeController.prototype.detachView = function (view) {
        if (view != null) {
            this.getView().detachView(view);
            this.notUndoableModifications = true;
            this.home.setModified(true);
        }
    };
    /**
     * Attaches the given <code>view</code> to home view.
     * @param {Object} view
     */
    HomeController.prototype.attachView = function (view) {
        if (view != null) {
            this.getView().attachView(view);
            this.notUndoableModifications = true;
            this.home.setModified(true);
        }
    };
    HomeController.prototype.help = function () {
    };
    /**
     * Displays about dialog.
     */
    HomeController.prototype.about = function () {
        this.getView().showAboutDialog();
    };
    /**
     * Controls the change of value of a visual property in home.
     * @deprecated {@link #setVisualProperty(String, Object) setVisualProperty} should be replaced by a call to
     * {@link #setHomeProperty(String, String)} to ensure the property can be easily saved and read.
     * @param {string} propertyName
     * @param {Object} propertyValue
     */
    HomeController.prototype.setVisualProperty = function (propertyName, propertyValue) {
        this.home.setVisualProperty(propertyName, propertyValue);
    };
    /**
     * Controls the change of value of a property in home.
     * @param {string} propertyName
     * @param {string} propertyValue
     */
    HomeController.prototype.setHomeProperty = function (propertyName, propertyValue) {
        this.home.setProperty(propertyName, propertyValue);
    };
    HomeController.helpController = null;
    return HomeController;
}());
HomeController["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController";
HomeController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (HomeController) {
    /**
     * Super class of catalog listeners that writes preferences each time a piece of furniture or a texture
     * is deleted or added in furniture or textures catalog.
     * @class
     */
    var UserPreferencesChangeListener = /** @class */ (function () {
        function UserPreferencesChangeListener() {
        }
        UserPreferencesChangeListener.writingPreferences_$LI$ = function () { if (UserPreferencesChangeListener.writingPreferences == null) {
            UserPreferencesChangeListener.writingPreferences = ([]);
        } return UserPreferencesChangeListener.writingPreferences; };
        UserPreferencesChangeListener.prototype.writePreferences = function (controller) {
            if (!(UserPreferencesChangeListener.writingPreferences_$LI$().indexOf((controller.preferences)) >= 0)) {
                /* add */ (function (s, e) { if (s.indexOf(e) == -1) {
                    s.push(e);
                    return true;
                }
                else {
                    return false;
                } })(UserPreferencesChangeListener.writingPreferences_$LI$(), controller.preferences);
                controller.getView().invokeLater(function () {
                    try {
                        controller.preferences.write();
                        /* remove */ (function (a) { var index = a.indexOf(controller.preferences); if (index >= 0) {
                            a.splice(index, 1);
                            return true;
                        }
                        else {
                            return false;
                        } })(UserPreferencesChangeListener.writingPreferences_$LI$());
                    }
                    catch (ex) {
                        controller.getView().showError(controller.preferences.getLocalizedString(HomeController, "savePreferencesError"));
                    }
                });
            }
        };
        return UserPreferencesChangeListener;
    }());
    HomeController.UserPreferencesChangeListener = UserPreferencesChangeListener;
    UserPreferencesChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.UserPreferencesChangeListener";
    /**
     * Preferences property listener bound to this component with a weak reference to avoid
     * strong link between preferences and this component.
     * @param {HomeController} homeController
     * @class
     */
    var LanguageChangeListener = /** @class */ (function () {
        function LanguageChangeListener(homeController) {
            if (this.homeController === undefined) {
                this.homeController = null;
            }
            this.homeController = (homeController);
        }
        LanguageChangeListener.prototype.propertyChange = function (ev) {
            var homeController = this.homeController;
            if (homeController == null) {
                (ev.getSource()).removePropertyChangeListener("LANGUAGE", this);
            }
            else {
                homeController.getView().setUndoRedoName(homeController.undoManager.canUndo() ? homeController.undoManager.getUndoPresentationName() : null, homeController.undoManager.canRedo() ? homeController.undoManager.getRedoPresentationName() : null);
            }
        };
        return LanguageChangeListener;
    }());
    HomeController.LanguageChangeListener = LanguageChangeListener;
    LanguageChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.LanguageChangeListener";
    /**
     * Undoable edit for dropping end.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.HomePieceOfFurniture[]} importedFurniture
     * @class
     * @extends LocalizedUndoableEdit
     */
    var DroppingEndUndoableEdit = /** @class */ (function (_super) {
        __extends(DroppingEndUndoableEdit, _super);
        function DroppingEndUndoableEdit(home, preferences, importedFurniture) {
            var _this = _super.call(this, preferences, HomeController, "undoDropName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.importedFurniture === undefined) {
                _this.importedFurniture = null;
            }
            _this.home = home;
            _this.importedFurniture = importedFurniture;
            return _this;
        }
        /**
         *
         */
        DroppingEndUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.importedFurniture.slice(0));
        };
        return DroppingEndUndoableEdit;
    }(LocalizedUndoableEdit));
    HomeController.DroppingEndUndoableEdit = DroppingEndUndoableEdit;
    DroppingEndUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.DroppingEndUndoableEdit";
    DroppingEndUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for pasting style end.
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} selectedItems
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PastingStyleEndUndoableEdit = /** @class */ (function (_super) {
        __extends(PastingStyleEndUndoableEdit, _super);
        function PastingStyleEndUndoableEdit(home, preferences, selectedItems) {
            var _this = _super.call(this, preferences, HomeController, "undoPasteStyleName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.selectedItems === undefined) {
                _this.selectedItems = null;
            }
            _this.home = home;
            _this.selectedItems = selectedItems;
            return _this;
        }
        /**
         *
         */
        PastingStyleEndUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.selectedItems.slice(0));
        };
        return PastingStyleEndUndoableEdit;
    }(LocalizedUndoableEdit));
    HomeController.PastingStyleEndUndoableEdit = PastingStyleEndUndoableEdit;
    PastingStyleEndUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.PastingStyleEndUndoableEdit";
    PastingStyleEndUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for toggling background image visibility.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var BackgroundImageVisibilityTogglingUndoableEdit = /** @class */ (function (_super) {
        __extends(BackgroundImageVisibilityTogglingUndoableEdit, _super);
        function BackgroundImageVisibilityTogglingUndoableEdit(home, preferences, presentationName, selectedLevel) {
            var _this = _super.call(this, preferences, HomeController, presentationName) || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.selectedLevel === undefined) {
                _this.selectedLevel = null;
            }
            _this.home = home;
            _this.selectedLevel = selectedLevel;
            return _this;
        }
        /**
         *
         */
        BackgroundImageVisibilityTogglingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.setSelectedLevel(this.selectedLevel);
            HomeController.doToggleBackgroundImageVisibility(this.home);
        };
        /**
         *
         */
        BackgroundImageVisibilityTogglingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedLevel(this.selectedLevel);
            HomeController.doToggleBackgroundImageVisibility(this.home);
        };
        return BackgroundImageVisibilityTogglingUndoableEdit;
    }(LocalizedUndoableEdit));
    HomeController.BackgroundImageVisibilityTogglingUndoableEdit = BackgroundImageVisibilityTogglingUndoableEdit;
    BackgroundImageVisibilityTogglingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.BackgroundImageVisibilityTogglingUndoableEdit";
    BackgroundImageVisibilityTogglingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for background image deletion.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var BackgroundImageDeletionUndoableEdit = /** @class */ (function (_super) {
        __extends(BackgroundImageDeletionUndoableEdit, _super);
        function BackgroundImageDeletionUndoableEdit(home, preferences, selectedLevel, oldImage) {
            var _this = _super.call(this, preferences, HomeController, "undoDeleteBackgroundImageName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.selectedLevel === undefined) {
                _this.selectedLevel = null;
            }
            if (_this.oldImage === undefined) {
                _this.oldImage = null;
            }
            _this.home = home;
            _this.oldImage = oldImage;
            _this.selectedLevel = selectedLevel;
            return _this;
        }
        /**
         *
         */
        BackgroundImageDeletionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.setSelectedLevel(this.selectedLevel);
            if (this.selectedLevel != null) {
                this.selectedLevel.setBackgroundImage(this.oldImage);
            }
            else {
                this.home.setBackgroundImage(this.oldImage);
            }
        };
        /**
         *
         */
        BackgroundImageDeletionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedLevel(this.selectedLevel);
            if (this.selectedLevel != null) {
                this.selectedLevel.setBackgroundImage(null);
            }
            else {
                this.home.setBackgroundImage(null);
            }
        };
        return BackgroundImageDeletionUndoableEdit;
    }(LocalizedUndoableEdit));
    HomeController.BackgroundImageDeletionUndoableEdit = BackgroundImageDeletionUndoableEdit;
    BackgroundImageDeletionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.BackgroundImageDeletionUndoableEdit";
    BackgroundImageDeletionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Furniture catalog listener that writes preferences each time a piece of furniture
     * is deleted or added in furniture catalog. This listener is bound to this controller
     * with a weak reference to avoid strong link between catalog and this controller.
     * @param {HomeController} homeController
     * @class
     * @extends HomeController.UserPreferencesChangeListener
     */
    var FurnitureCatalogChangeListener = /** @class */ (function (_super) {
        __extends(FurnitureCatalogChangeListener, _super);
        function FurnitureCatalogChangeListener(homeController) {
            var _this = _super.call(this) || this;
            if (_this.homeController === undefined) {
                _this.homeController = null;
            }
            _this.homeController = (homeController);
            return _this;
        }
        FurnitureCatalogChangeListener.prototype.collectionChanged = function (ev) {
            var controller = this.homeController;
            if (controller == null) {
                ev.getSource().removeFurnitureListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                    return funcInst;
                } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this)));
            }
            else {
                this.writePreferences(controller);
            }
        };
        return FurnitureCatalogChangeListener;
    }(HomeController.UserPreferencesChangeListener));
    HomeController.FurnitureCatalogChangeListener = FurnitureCatalogChangeListener;
    FurnitureCatalogChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.FurnitureCatalogChangeListener";
    FurnitureCatalogChangeListener["__interfaces"] = ["com.eteks.sweethome3d.model.CollectionListener"];
    /**
     * Textures catalog listener that writes preferences each time a texture
     * is deleted or added in textures catalog. This listener is bound to this controller
     * with a weak reference to avoid strong link between catalog and this controller.
     * @param {HomeController} homeController
     * @class
     * @extends HomeController.UserPreferencesChangeListener
     */
    var TexturesCatalogChangeListener = /** @class */ (function (_super) {
        __extends(TexturesCatalogChangeListener, _super);
        function TexturesCatalogChangeListener(homeController) {
            var _this = _super.call(this) || this;
            if (_this.homeController === undefined) {
                _this.homeController = null;
            }
            _this.homeController = (homeController);
            return _this;
        }
        TexturesCatalogChangeListener.prototype.collectionChanged = function (ev) {
            var controller = this.homeController;
            if (controller == null) {
                ev.getSource().removeTexturesListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
                    return funcInst;
                } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(this)));
            }
            else {
                this.writePreferences(controller);
            }
        };
        return TexturesCatalogChangeListener;
    }(HomeController.UserPreferencesChangeListener));
    HomeController.TexturesCatalogChangeListener = TexturesCatalogChangeListener;
    TexturesCatalogChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.TexturesCatalogChangeListener";
    TexturesCatalogChangeListener["__interfaces"] = ["com.eteks.sweethome3d.model.CollectionListener"];
    /**
     * Properties listener that writes preferences each time the value of one of its properties changes.
     * This listener is bound to this controller with a weak reference to avoid strong link
     * between catalog and this controller.
     * @param {HomeController} homeController
     * @class
     * @extends HomeController.UserPreferencesChangeListener
     */
    var UserPreferencesPropertiesChangeListener = /** @class */ (function (_super) {
        __extends(UserPreferencesPropertiesChangeListener, _super);
        function UserPreferencesPropertiesChangeListener(homeController) {
            var _this = _super.call(this) || this;
            if (_this.homeController === undefined) {
                _this.homeController = null;
            }
            _this.homeController = (homeController);
            return _this;
        }
        UserPreferencesPropertiesChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.homeController;
            if (controller == null) {
                (ev.getSource()).removePropertyChangeListener(/* valueOf */ ev.getPropertyName(), this);
            }
            else {
                this.writePreferences(controller);
            }
        };
        return UserPreferencesPropertiesChangeListener;
    }(HomeController.UserPreferencesChangeListener));
    HomeController.UserPreferencesPropertiesChangeListener = UserPreferencesPropertiesChangeListener;
    UserPreferencesPropertiesChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.HomeController.UserPreferencesPropertiesChangeListener";
    var HomeController$0 = /** @class */ (function (_super) {
        __extends(HomeController$0, _super);
        function HomeController$0(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         * @param {Object} edit
         */
        HomeController$0.prototype._postEdit = function (edit) {
            if (!(edit != null && edit instanceof javax.swing.undo.CompoundEdit) || edit.isSignificant()) {
                _super.prototype._postEdit.call(this, edit);
            }
        };
        return HomeController$0;
    }(javax.swing.undo.UndoableEditSupport));
    HomeController.HomeController$0 = HomeController$0;
    var HomeController$1 = /** @class */ (function () {
        function HomeController$1(__parent) {
            this.__parent = __parent;
        }
        HomeController$1.prototype.selectionChanged = function (ev) {
            this.__parent.enableActionsBoundToSelection();
        };
        return HomeController$1;
    }());
    HomeController.HomeController$1 = HomeController$1;
    HomeController$1["__interfaces"] = ["com.eteks.sweethome3d.model.SelectionListener"];
    var HomeController$2 = /** @class */ (function () {
        function HomeController$2(__parent) {
            this.__parent = __parent;
        }
        HomeController$2.prototype.selectionChanged = function (ev) {
            this.__parent.enableActionsBoundToSelection();
        };
        return HomeController$2;
    }());
    HomeController.HomeController$2 = HomeController$2;
    HomeController$2["__interfaces"] = ["com.eteks.sweethome3d.model.SelectionListener"];
    var HomeController$3 = /** @class */ (function () {
        function HomeController$3(__parent) {
            this.__parent = __parent;
        }
        HomeController$3.prototype.propertyChange = function (ev) {
            this.__parent.getView().setEnabled(HomeView.ActionType.SORT_HOME_FURNITURE_BY_DESCENDING_ORDER, ev.getNewValue() != null);
        };
        return HomeController$3;
    }());
    HomeController.HomeController$3 = HomeController$3;
    var HomeController$4 = /** @class */ (function () {
        function HomeController$4(__parent) {
            this.__parent = __parent;
        }
        HomeController$4.prototype.propertyChange = function (ev) {
            this.__parent.enableBackgroungImageActions(this.__parent.getView(), ev.getNewValue());
        };
        return HomeController$4;
    }());
    HomeController.HomeController$4 = HomeController$4;
    var HomeController$5 = /** @class */ (function () {
        function HomeController$5(__parent) {
            this.__parent = __parent;
        }
        HomeController$5.prototype.propertyChange = function (ev) {
            this.__parent.notUndoableModifications = true;
            this.__parent.home.setModified(true);
        };
        return HomeController$5;
    }());
    HomeController.HomeController$5 = HomeController$5;
    var HomeController$6 = /** @class */ (function () {
        function HomeController$6(__parent, notUndoableModificationListener) {
            this.notUndoableModificationListener = notUndoableModificationListener;
            this.__parent = __parent;
        }
        HomeController$6.prototype.propertyChange = function (ev) {
            if (this.__parent.home.getEnvironment().getPhotoAspectRatio() !== AspectRatio.VIEW_3D_RATIO) {
                this.notUndoableModificationListener.propertyChange(ev);
            }
        };
        return HomeController$6;
    }());
    HomeController.HomeController$6 = HomeController$6;
    var HomeController$7 = /** @class */ (function () {
        function HomeController$7(__parent, notUndoableModificationListener) {
            this.notUndoableModificationListener = notUndoableModificationListener;
            this.__parent = __parent;
        }
        HomeController$7.prototype.propertyChange = function (ev) {
            if ((ev.getPropertyName() === /* name */ "TIME") || (ev.getPropertyName() === /* name */ "LENS")) {
                this.notUndoableModificationListener.propertyChange(ev);
            }
        };
        return HomeController$7;
    }());
    HomeController.HomeController$7 = HomeController$7;
    var HomeController$8 = /** @class */ (function () {
        function HomeController$8(__parent) {
            this.__parent = __parent;
        }
        HomeController$8.prototype.undoableEditHappened = function (ev) {
            var view = this.__parent.getView();
            view.setEnabled(HomeView.ActionType.UNDO, !this.__parent.getPlanController().isModificationState());
            view.setEnabled(HomeView.ActionType.REDO, false);
            view.setUndoRedoName(ev.getEdit().getUndoPresentationName(), null);
            this.__parent.saveUndoLevel++;
            this.__parent.home.setModified(true);
        };
        return HomeController$8;
    }());
    HomeController.HomeController$8 = HomeController$8;
    HomeController$8["__interfaces"] = ["javax.swing.event.UndoableEditListener"];
    var HomeController$9 = /** @class */ (function () {
        function HomeController$9(__parent) {
            this.__parent = __parent;
        }
        HomeController$9.prototype.propertyChange = function (ev) {
            if (!this.__parent.home.isModified()) {
                this.__parent.saveUndoLevel = 0;
                this.__parent.notUndoableModifications = false;
            }
        };
        return HomeController$9;
    }());
    HomeController.HomeController$9 = HomeController$9;
    var HomeController$10 = /** @class */ (function () {
        function HomeController$10(__parent) {
            this.__parent = __parent;
        }
        HomeController$10.prototype.propertyChange = function (ev) {
            if ( /* name */"VISIBLE" === ev.getPropertyName()) {
                this.__parent.enableSelectAllAction();
            }
        };
        return HomeController$10;
    }());
    HomeController.HomeController$10 = HomeController$10;
    var HomeController$11 = /** @class */ (function () {
        function HomeController$11(__parent) {
            this.__parent = __parent;
        }
        HomeController$11.prototype.propertyChange = function (ev) {
            this.__parent.getView().setEnabled(HomeView.ActionType.MODIFY_OBSERVER, this.__parent.home.getCamera() === this.__parent.home.getObserverCamera());
        };
        return HomeController$11;
    }());
    HomeController.HomeController$11 = HomeController$11;
    var HomeController$12 = /** @class */ (function () {
        function HomeController$12(__parent) {
            this.__parent = __parent;
        }
        HomeController$12.prototype.propertyChange = function (ev) {
            var selectedLevel = this.__parent.home.getSelectedLevel();
            if (!this.__parent.home.isAllLevelsSelection()) {
                var selectedItemsAtLevel = ([]);
                {
                    var array = this.__parent.home.getSelectedItems();
                    for (var index = 0; index < array.length; index++) {
                        var item = array[index];
                        {
                            if (!(item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) || item.isAtLevel(selectedLevel)) {
                                /* add */ (selectedItemsAtLevel.push(item) > 0);
                            }
                        }
                    }
                }
                this.__parent.home.setSelectedItems(selectedItemsAtLevel);
            }
            var view = this.__parent.getView();
            this.__parent.enableCreationToolsActions(view);
            this.__parent.enableBackgroungImageActions(view, selectedLevel == null ? this.__parent.home.getBackgroundImage() : selectedLevel.getBackgroundImage());
            this.__parent.enableLevelActions(view);
        };
        return HomeController$12;
    }());
    HomeController.HomeController$12 = HomeController$12;
    var HomeController$13 = /** @class */ (function () {
        function HomeController$13(__parent) {
            this.__parent = __parent;
        }
        HomeController$13.prototype.propertyChange = function (ev) {
            if ( /* name */"BACKGROUND_IMAGE" === ev.getPropertyName()) {
                this.__parent.enableBackgroungImageActions(this.__parent.getView(), ev.getNewValue());
            }
            else if ( /* name */"VIEWABLE" === ev.getPropertyName()) {
                this.__parent.enableCreationToolsActions(this.__parent.getView());
                if (!ev.getNewValue()) {
                    var mode = this.__parent.getPlanController().getMode();
                    if (mode !== PlanController.Mode.SELECTION_$LI$() && mode !== PlanController.Mode.PANNING_$LI$()) {
                        this.__parent.getPlanController().setMode(PlanController.Mode.SELECTION_$LI$());
                    }
                }
            }
        };
        return HomeController$13;
    }());
    HomeController.HomeController$13 = HomeController$13;
    var HomeController$14 = /** @class */ (function () {
        function HomeController$14(__parent) {
            this.__parent = __parent;
        }
        HomeController$14.prototype.propertyChange = function (ev) {
            var emptyStoredCameras = (this.__parent.home.getStoredCameras().length == 0);
            this.__parent.getView().setEnabled(HomeView.ActionType.DELETE_POINTS_OF_VIEW, !emptyStoredCameras);
            this.__parent.getView().setEnabled(HomeView.ActionType.CREATE_PHOTOS_AT_POINTS_OF_VIEW, !emptyStoredCameras);
        };
        return HomeController$14;
    }());
    HomeController.HomeController$14 = HomeController$14;
    var HomeController$15 = /** @class */ (function () {
        function HomeController$15(__parent) {
            this.__parent = __parent;
        }
        HomeController$15.prototype.propertyChange = function (ev) {
            this.__parent.enableActionsBoundToSelection();
            this.__parent.enableSelectAllAction();
            var view = this.__parent.getView();
            this.__parent.enableLevelActions(view);
            var modificationState = this.__parent.getPlanController().isModificationState();
            if (modificationState) {
                view.setEnabled(HomeView.ActionType.PASTE, false);
                view.setEnabled(HomeView.ActionType.UNDO, false);
                view.setEnabled(HomeView.ActionType.REDO, false);
            }
            else {
                this.__parent.enablePasteAction();
                view.setEnabled(HomeView.ActionType.UNDO, this.__parent.undoManager.canUndo());
                view.setEnabled(HomeView.ActionType.REDO, this.__parent.undoManager.canRedo());
            }
            view.setEnabled(HomeView.ActionType.LOCK_BASE_PLAN, !modificationState);
            view.setEnabled(HomeView.ActionType.UNLOCK_BASE_PLAN, !modificationState);
        };
        return HomeController$15;
    }());
    HomeController.HomeController$15 = HomeController$15;
    var HomeController$16 = /** @class */ (function () {
        function HomeController$16(__parent) {
            this.__parent = __parent;
        }
        HomeController$16.prototype.propertyChange = function (ev) {
            this.__parent.enableActionsBoundToSelection();
        };
        return HomeController$16;
    }());
    HomeController.HomeController$16 = HomeController$16;
    var HomeController$17 = /** @class */ (function () {
        function HomeController$17(__parent) {
            this.__parent = __parent;
        }
        HomeController$17.prototype.propertyChange = function (ev) {
            this.__parent.enableZoomActions();
        };
        return HomeController$17;
    }());
    HomeController.HomeController$17 = HomeController$17;
})(HomeController || (HomeController = {}));
/**
 * Wizard controller for background image in plan.
 * @author Emmanuel Puybaret
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @extends WizardController
 */
var BackgroundImageWizardController = /** @class */ (function (_super) {
    __extends(BackgroundImageWizardController, _super);
    function BackgroundImageWizardController(home, preferences, viewFactory, contentManager, undoSupport) {
        var _this = _super.call(this, preferences, viewFactory) || this;
        if (_this.home === undefined) {
            _this.home = null;
        }
        if (_this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_preferences === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_preferences = null;
        }
        if (_this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_viewFactory === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_viewFactory = null;
        }
        if (_this.contentManager === undefined) {
            _this.contentManager = null;
        }
        if (_this.undoSupport === undefined) {
            _this.undoSupport = null;
        }
        if (_this.imageChoiceStepState === undefined) {
            _this.imageChoiceStepState = null;
        }
        if (_this.imageScaleStepState === undefined) {
            _this.imageScaleStepState = null;
        }
        if (_this.imageOriginStepState === undefined) {
            _this.imageOriginStepState = null;
        }
        if (_this.stepsView === undefined) {
            _this.stepsView = null;
        }
        if (_this.step === undefined) {
            _this.step = null;
        }
        if (_this.referenceBackgroundImage === undefined) {
            _this.referenceBackgroundImage = null;
        }
        if (_this.image === undefined) {
            _this.image = null;
        }
        if (_this.scaleDistance === undefined) {
            _this.scaleDistance = null;
        }
        if (_this.scaleDistanceXStart === undefined) {
            _this.scaleDistanceXStart = 0;
        }
        if (_this.scaleDistanceYStart === undefined) {
            _this.scaleDistanceYStart = 0;
        }
        if (_this.scaleDistanceXEnd === undefined) {
            _this.scaleDistanceXEnd = 0;
        }
        if (_this.scaleDistanceYEnd === undefined) {
            _this.scaleDistanceYEnd = 0;
        }
        if (_this.xOrigin === undefined) {
            _this.xOrigin = 0;
        }
        if (_this.yOrigin === undefined) {
            _this.yOrigin = 0;
        }
        _this.home = home;
        _this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_preferences = preferences;
        _this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_viewFactory = viewFactory;
        _this.contentManager = contentManager;
        _this.undoSupport = undoSupport;
        /* Use propertyChangeSupport defined in super class */ ;
        _this.setTitle(preferences.getLocalizedString(BackgroundImageWizardController, "wizard.title"));
        _this.setResizable(true);
        _this.imageChoiceStepState = new BackgroundImageWizardController.ImageChoiceStepState(_this);
        _this.imageScaleStepState = new BackgroundImageWizardController.ImageScaleStepState(_this);
        _this.imageOriginStepState = new BackgroundImageWizardController.ImageOriginStepState(_this);
        _this.setStepState(_this.imageChoiceStepState);
        var selectedLevel = _this.home.getSelectedLevel();
        if (selectedLevel != null) {
            var levels = _this.home.getLevels();
            var levelIndex = levels.indexOf(selectedLevel);
            for (var i = levelIndex - 1; i >= 0 && _this.referenceBackgroundImage == null; i--) {
                {
                    _this.referenceBackgroundImage = /* get */ levels[i].getBackgroundImage();
                }
                ;
            }
            for (var i = levelIndex + 1; i < /* size */ levels.length && _this.referenceBackgroundImage == null; i++) {
                {
                    _this.referenceBackgroundImage = /* get */ levels[i].getBackgroundImage();
                }
                ;
            }
        }
        return _this;
    }
    /**
     * Changes background image in model and posts an undoable operation.
     */
    BackgroundImageWizardController.prototype.finish = function () {
        var selectedLevel = this.home.getSelectedLevel();
        var oldImage = selectedLevel != null ? selectedLevel.getBackgroundImage() : this.home.getBackgroundImage();
        var scaleDistancePoints = this.getScaleDistancePoints();
        var image = new BackgroundImage(this.getImage(), this.getScaleDistance(), scaleDistancePoints[0][0], scaleDistancePoints[0][1], scaleDistancePoints[1][0], scaleDistancePoints[1][1], this.getXOrigin(), this.getYOrigin());
        if (selectedLevel != null) {
            selectedLevel.setBackgroundImage(image);
        }
        else {
            this.home.setBackgroundImage(image);
        }
        var modification = oldImage == null;
        this.undoSupport.postEdit(new BackgroundImageWizardController.BackgroundImageUndoableEdit(this.home, this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_preferences, selectedLevel, oldImage, image, modification));
    };
    /**
     * Returns the content manager of this controller.
     * @return {Object}
     */
    BackgroundImageWizardController.prototype.getContentManager = function () {
        return this.contentManager;
    };
    /**
     * Returns the current step state.
     * @return {BackgroundImageWizardController.BackgroundImageWizardStepState}
     */
    BackgroundImageWizardController.prototype.getStepState = function () {
        return _super.prototype.getStepState.call(this);
    };
    /**
     * Returns the image choice step state.
     * @return {BackgroundImageWizardController.BackgroundImageWizardStepState}
     */
    BackgroundImageWizardController.prototype.getImageChoiceStepState = function () {
        return this.imageChoiceStepState;
    };
    /**
     * Returns the image origin step state.
     * @return {BackgroundImageWizardController.BackgroundImageWizardStepState}
     */
    BackgroundImageWizardController.prototype.getImageOriginStepState = function () {
        return this.imageOriginStepState;
    };
    /**
     * Returns the image scale step state.
     * @return {BackgroundImageWizardController.BackgroundImageWizardStepState}
     */
    BackgroundImageWizardController.prototype.getImageScaleStepState = function () {
        return this.imageScaleStepState;
    };
    /**
     * Returns the unique wizard view used for all steps.
     * @return {Object}
     */
    BackgroundImageWizardController.prototype.getStepsView = function () {
        if (this.stepsView == null) {
            var image = this.home.getSelectedLevel() != null ? this.home.getSelectedLevel().getBackgroundImage() : this.home.getBackgroundImage();
            this.stepsView = this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_viewFactory.createBackgroundImageWizardStepsView(image, this.__com_eteks_sweethome3d_viewcontroller_BackgroundImageWizardController_preferences, this);
        }
        return this.stepsView;
    };
    /**
     * Switch in the wizard view to the given <code>step</code>.
     * @param {BackgroundImageWizardController.Step} step
     */
    BackgroundImageWizardController.prototype.setStep = function (step) {
        if (step !== this.step) {
            var oldStep = this.step;
            this.step = step;
            this.propertyChangeSupport.firePropertyChange(/* name */ "STEP", oldStep, step);
        }
    };
    /**
     * Returns the current step in wizard view.
     * @return {BackgroundImageWizardController.Step}
     */
    BackgroundImageWizardController.prototype.getStep = function () {
        return this.step;
    };
    /**
     * Returns the background image of another level that can be used to initialize
     * the scale values of the edited image.
     * @return {BackgroundImage}
     */
    BackgroundImageWizardController.prototype.getReferenceBackgroundImage = function () {
        return this.referenceBackgroundImage;
    };
    /**
     * Sets the image content of the background image.
     * @param {Object} image
     */
    BackgroundImageWizardController.prototype.setImage = function (image) {
        if (image !== this.image) {
            var oldImage = this.image;
            this.image = image;
            this.propertyChangeSupport.firePropertyChange(/* name */ "IMAGE", oldImage, image);
        }
    };
    /**
     * Returns the image content of the background image.
     * @return {Object}
     */
    BackgroundImageWizardController.prototype.getImage = function () {
        return this.image;
    };
    /**
     * Sets the scale distance of the background image.
     * @param {number} scaleDistance
     */
    BackgroundImageWizardController.prototype.setScaleDistance = function (scaleDistance) {
        if (scaleDistance !== this.scaleDistance) {
            var oldScaleDistance = this.scaleDistance;
            this.scaleDistance = scaleDistance;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SCALE_DISTANCE", oldScaleDistance, scaleDistance);
        }
    };
    /**
     * Returns the scale distance of the background image.
     * @return {number}
     */
    BackgroundImageWizardController.prototype.getScaleDistance = function () {
        return this.scaleDistance;
    };
    /**
     * Sets the coordinates of the scale distance points of the background image.
     * @param {number} scaleDistanceXStart
     * @param {number} scaleDistanceYStart
     * @param {number} scaleDistanceXEnd
     * @param {number} scaleDistanceYEnd
     */
    BackgroundImageWizardController.prototype.setScaleDistancePoints = function (scaleDistanceXStart, scaleDistanceYStart, scaleDistanceXEnd, scaleDistanceYEnd) {
        if (scaleDistanceXStart !== this.scaleDistanceXStart || scaleDistanceYStart !== this.scaleDistanceYStart || scaleDistanceXEnd !== this.scaleDistanceXEnd || scaleDistanceYEnd !== this.scaleDistanceYEnd) {
            var oldDistancePoints = [[this.scaleDistanceXStart, this.scaleDistanceYStart], [this.scaleDistanceXEnd, this.scaleDistanceYEnd]];
            this.scaleDistanceXStart = scaleDistanceXStart;
            this.scaleDistanceYStart = scaleDistanceYStart;
            this.scaleDistanceXEnd = scaleDistanceXEnd;
            this.scaleDistanceYEnd = scaleDistanceYEnd;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SCALE_DISTANCE_POINTS", oldDistancePoints, [[scaleDistanceXStart, scaleDistanceYStart], [scaleDistanceXEnd, scaleDistanceYEnd]]);
        }
    };
    /**
     * Returns the coordinates of the scale distance points of the background image.
     * @return {float[][]}
     */
    BackgroundImageWizardController.prototype.getScaleDistancePoints = function () {
        return [[this.scaleDistanceXStart, this.scaleDistanceYStart], [this.scaleDistanceXEnd, this.scaleDistanceYEnd]];
    };
    /**
     * Sets the origin of the background image.
     * @param {number} xOrigin
     * @param {number} yOrigin
     */
    BackgroundImageWizardController.prototype.setOrigin = function (xOrigin, yOrigin) {
        if (xOrigin !== this.xOrigin) {
            var oldXOrigin = this.xOrigin;
            this.xOrigin = xOrigin;
            this.propertyChangeSupport.firePropertyChange(/* name */ "X_ORIGIN", oldXOrigin, xOrigin);
        }
        if (yOrigin !== this.yOrigin) {
            var oldYOrigin = this.yOrigin;
            this.yOrigin = yOrigin;
            this.propertyChangeSupport.firePropertyChange(/* name */ "Y_ORIGIN", oldYOrigin, yOrigin);
        }
    };
    /**
     * Returns the abscissa of the origin of the background image.
     * @return {number}
     */
    BackgroundImageWizardController.prototype.getXOrigin = function () {
        return this.xOrigin;
    };
    /**
     * Returns the ordinate of the origin of the background image.
     * @return {number}
     */
    BackgroundImageWizardController.prototype.getYOrigin = function () {
        return this.yOrigin;
    };
    return BackgroundImageWizardController;
}(WizardController));
BackgroundImageWizardController["__class"] = "com.eteks.sweethome3d.viewcontroller.BackgroundImageWizardController";
BackgroundImageWizardController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (BackgroundImageWizardController) {
    var Step;
    (function (Step) {
        Step[Step["CHOICE"] = 0] = "CHOICE";
        Step[Step["SCALE"] = 1] = "SCALE";
        Step[Step["ORIGIN"] = 2] = "ORIGIN";
    })(Step = BackgroundImageWizardController.Step || (BackgroundImageWizardController.Step = {}));
    /**
     * Undoable edit for background image. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var BackgroundImageUndoableEdit = /** @class */ (function (_super) {
        __extends(BackgroundImageUndoableEdit, _super);
        function BackgroundImageUndoableEdit(home, preferences, level, oldImage, image, modification) {
            var _this = _super.call(this, preferences, BackgroundImageWizardController, modification ? "undoImportBackgroundImageName" : "undoModifyBackgroundImageName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.oldImage === undefined) {
                _this.oldImage = null;
            }
            if (_this.image === undefined) {
                _this.image = null;
            }
            _this.home = home;
            _this.level = level;
            _this.oldImage = oldImage;
            _this.image = image;
            return _this;
        }
        /**
         *
         */
        BackgroundImageUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.setSelectedLevel(this.level);
            if (this.level != null) {
                this.level.setBackgroundImage(this.oldImage);
            }
            else {
                this.home.setBackgroundImage(this.oldImage);
            }
        };
        /**
         *
         */
        BackgroundImageUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedLevel(this.level);
            if (this.level != null) {
                this.level.setBackgroundImage(this.image);
            }
            else {
                this.home.setBackgroundImage(this.image);
            }
        };
        return BackgroundImageUndoableEdit;
    }(LocalizedUndoableEdit));
    BackgroundImageWizardController.BackgroundImageUndoableEdit = BackgroundImageUndoableEdit;
    BackgroundImageUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.BackgroundImageWizardController.BackgroundImageUndoableEdit";
    BackgroundImageUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Step state superclass. All step state share the same step view,
     * that will display a different component depending on their class name.
     * @extends WizardController.WizardControllerStepState
     * @class
     */
    var BackgroundImageWizardStepState = /** @class */ (function (_super) {
        __extends(BackgroundImageWizardStepState, _super);
        function BackgroundImageWizardStepState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            _this.icon = /* getResource */ "resources/backgroundImageWizard.png";
            return _this;
        }
        /**
         *
         */
        BackgroundImageWizardStepState.prototype.enter = function () {
            this.__parent.setStep(this.getStep());
        };
        /**
         *
         * @return {Object}
         */
        BackgroundImageWizardStepState.prototype.getView = function () {
            return this.__parent.getStepsView();
        };
        /**
         *
         * @return {string}
         */
        BackgroundImageWizardStepState.prototype.getIcon = function () {
            return this.icon;
        };
        return BackgroundImageWizardStepState;
    }(WizardController.WizardControllerStepState));
    BackgroundImageWizardController.BackgroundImageWizardStepState = BackgroundImageWizardStepState;
    BackgroundImageWizardStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.BackgroundImageWizardController.BackgroundImageWizardStepState";
    /**
     * Image choice step state (first step).
     * @class
     * @extends BackgroundImageWizardController.BackgroundImageWizardStepState
     */
    var ImageChoiceStepState = /** @class */ (function (_super) {
        __extends(ImageChoiceStepState, _super);
        function ImageChoiceStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            __parent.addPropertyChangeListener("IMAGE", new ImageChoiceStepState.ImageChoiceStepState$0(_this));
            return _this;
        }
        /**
         *
         */
        ImageChoiceStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setFirstStep(true);
            this.setNextStepEnabled(this.__parent.getImage() != null);
        };
        /**
         *
         * @return {BackgroundImageWizardController.Step}
         */
        ImageChoiceStepState.prototype.getStep = function () {
            return BackgroundImageWizardController.Step.CHOICE;
        };
        /**
         *
         */
        ImageChoiceStepState.prototype.goToNextStep = function () {
            this.__parent.setStepState(this.__parent.getImageScaleStepState());
        };
        return ImageChoiceStepState;
    }(BackgroundImageWizardController.BackgroundImageWizardStepState));
    BackgroundImageWizardController.ImageChoiceStepState = ImageChoiceStepState;
    ImageChoiceStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.BackgroundImageWizardController.ImageChoiceStepState";
    (function (ImageChoiceStepState) {
        var ImageChoiceStepState$0 = /** @class */ (function () {
            function ImageChoiceStepState$0(__parent) {
                this.__parent = __parent;
            }
            ImageChoiceStepState$0.prototype.propertyChange = function (evt) {
                this.__parent.setNextStepEnabled(this.__parent.__parent.getImage() != null);
            };
            return ImageChoiceStepState$0;
        }());
        ImageChoiceStepState.ImageChoiceStepState$0 = ImageChoiceStepState$0;
    })(ImageChoiceStepState = BackgroundImageWizardController.ImageChoiceStepState || (BackgroundImageWizardController.ImageChoiceStepState = {}));
    /**
     * Image scale step state (second step).
     * @class
     * @extends BackgroundImageWizardController.BackgroundImageWizardStepState
     */
    var ImageScaleStepState = /** @class */ (function (_super) {
        __extends(ImageScaleStepState, _super);
        function ImageScaleStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            __parent.addPropertyChangeListener("SCALE_DISTANCE", new ImageScaleStepState.ImageScaleStepState$0(_this));
            return _this;
        }
        /**
         *
         */
        ImageScaleStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setNextStepEnabled(this.__parent.getScaleDistance() != null);
        };
        /**
         *
         * @return {BackgroundImageWizardController.Step}
         */
        ImageScaleStepState.prototype.getStep = function () {
            return BackgroundImageWizardController.Step.SCALE;
        };
        /**
         *
         */
        ImageScaleStepState.prototype.goBackToPreviousStep = function () {
            this.__parent.setStepState(this.__parent.getImageChoiceStepState());
        };
        /**
         *
         */
        ImageScaleStepState.prototype.goToNextStep = function () {
            this.__parent.setStepState(this.__parent.getImageOriginStepState());
        };
        return ImageScaleStepState;
    }(BackgroundImageWizardController.BackgroundImageWizardStepState));
    BackgroundImageWizardController.ImageScaleStepState = ImageScaleStepState;
    ImageScaleStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.BackgroundImageWizardController.ImageScaleStepState";
    (function (ImageScaleStepState) {
        var ImageScaleStepState$0 = /** @class */ (function () {
            function ImageScaleStepState$0(__parent) {
                this.__parent = __parent;
            }
            ImageScaleStepState$0.prototype.propertyChange = function (evt) {
                this.__parent.setNextStepEnabled(this.__parent.__parent.getScaleDistance() != null);
            };
            return ImageScaleStepState$0;
        }());
        ImageScaleStepState.ImageScaleStepState$0 = ImageScaleStepState$0;
    })(ImageScaleStepState = BackgroundImageWizardController.ImageScaleStepState || (BackgroundImageWizardController.ImageScaleStepState = {}));
    /**
     * Image origin step state (last step).
     * @extends BackgroundImageWizardController.BackgroundImageWizardStepState
     * @class
     */
    var ImageOriginStepState = /** @class */ (function (_super) {
        __extends(ImageOriginStepState, _super);
        function ImageOriginStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         */
        ImageOriginStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setLastStep(true);
            this.setNextStepEnabled(true);
        };
        /**
         *
         * @return {BackgroundImageWizardController.Step}
         */
        ImageOriginStepState.prototype.getStep = function () {
            return BackgroundImageWizardController.Step.ORIGIN;
        };
        /**
         *
         */
        ImageOriginStepState.prototype.goBackToPreviousStep = function () {
            this.__parent.setStepState(this.__parent.getImageScaleStepState());
        };
        return ImageOriginStepState;
    }(BackgroundImageWizardController.BackgroundImageWizardStepState));
    BackgroundImageWizardController.ImageOriginStepState = ImageOriginStepState;
    ImageOriginStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.BackgroundImageWizardController.ImageOriginStepState";
})(BackgroundImageWizardController || (BackgroundImageWizardController = {}));
/**
 * Creates a controller that edits a new catalog texture with a given
 * <code>textureName</code>.
 * @param {string} textureName
 * @param {UserPreferences} preferences
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 * @extends WizardController
 * @author Emmanuel Puybaret
 */
var ImportedTextureWizardController = /** @class */ (function (_super) {
    __extends(ImportedTextureWizardController, _super);
    function ImportedTextureWizardController(texture, textureName, preferences, viewFactory, contentManager) {
        var _this = this;
        if (((texture != null && texture instanceof CatalogTexture) || texture === null) && ((typeof textureName === 'string') || textureName === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null)) {
            var __args = arguments;
            _this = _super.call(this, preferences, viewFactory) || this;
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.textureName === undefined) {
                _this.textureName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.textureImageStepState === undefined) {
                _this.textureImageStepState = null;
            }
            if (_this.textureAttributesStepState === undefined) {
                _this.textureAttributesStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.image === undefined) {
                _this.image = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            _this.texture = texture;
            _this.textureName = textureName;
            _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = preferences;
            _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = viewFactory;
            _this.contentManager = contentManager;
            /* Use propertyChangeSupport defined in super class */ ;
            _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences.getLocalizedString(ImportedTextureWizardController, texture == null ? "importTextureWizard.title" : "modifyTextureWizard.title"));
            _this.textureImageStepState = new ImportedTextureWizardController.TextureImageStepState(_this);
            _this.textureAttributesStepState = new ImportedTextureWizardController.TextureAttributesStepState(_this);
            _this.setStepState(_this.textureImageStepState);
        }
        else if (((typeof texture === 'string') || texture === null) && ((textureName != null && textureName instanceof UserPreferences) || textureName === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || viewFactory === null) && contentManager === undefined) {
            var __args = arguments;
            var textureName_1 = __args[0];
            var preferences_9 = __args[1];
            var viewFactory_8 = __args[2];
            var contentManager_9 = __args[3];
            {
                var __args_48 = arguments;
                var texture_2 = null;
                _this = _super.call(this, preferences_9, viewFactory_8) || this;
                if (_this.texture === undefined) {
                    _this.texture = null;
                }
                if (_this.textureName === undefined) {
                    _this.textureName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.textureImageStepState === undefined) {
                    _this.textureImageStepState = null;
                }
                if (_this.textureAttributesStepState === undefined) {
                    _this.textureAttributesStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.image === undefined) {
                    _this.image = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                _this.texture = texture_2;
                _this.textureName = textureName_1;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = preferences_9;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = viewFactory_8;
                _this.contentManager = contentManager_9;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences.getLocalizedString(ImportedTextureWizardController, texture_2 == null ? "importTextureWizard.title" : "modifyTextureWizard.title"));
                _this.textureImageStepState = new ImportedTextureWizardController.TextureImageStepState(_this);
                _this.textureAttributesStepState = new ImportedTextureWizardController.TextureAttributesStepState(_this);
                _this.setStepState(_this.textureImageStepState);
            }
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.textureName === undefined) {
                _this.textureName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.textureImageStepState === undefined) {
                _this.textureImageStepState = null;
            }
            if (_this.textureAttributesStepState === undefined) {
                _this.textureAttributesStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.image === undefined) {
                _this.image = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
        }
        else if (((texture != null && texture instanceof CatalogTexture) || texture === null) && ((textureName != null && textureName instanceof UserPreferences) || textureName === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || viewFactory === null) && contentManager === undefined) {
            var __args = arguments;
            var preferences_10 = __args[1];
            var viewFactory_9 = __args[2];
            var contentManager_10 = __args[3];
            {
                var __args_49 = arguments;
                var textureName_2 = null;
                _this = _super.call(this, preferences_10, viewFactory_9) || this;
                if (_this.texture === undefined) {
                    _this.texture = null;
                }
                if (_this.textureName === undefined) {
                    _this.textureName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.textureImageStepState === undefined) {
                    _this.textureImageStepState = null;
                }
                if (_this.textureAttributesStepState === undefined) {
                    _this.textureAttributesStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.image === undefined) {
                    _this.image = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                _this.texture = texture;
                _this.textureName = textureName_2;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = preferences_10;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = viewFactory_9;
                _this.contentManager = contentManager_10;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences.getLocalizedString(ImportedTextureWizardController, texture == null ? "importTextureWizard.title" : "modifyTextureWizard.title"));
                _this.textureImageStepState = new ImportedTextureWizardController.TextureImageStepState(_this);
                _this.textureAttributesStepState = new ImportedTextureWizardController.TextureAttributesStepState(_this);
                _this.setStepState(_this.textureImageStepState);
            }
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.textureName === undefined) {
                _this.textureName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.textureImageStepState === undefined) {
                _this.textureImageStepState = null;
            }
            if (_this.textureAttributesStepState === undefined) {
                _this.textureAttributesStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.image === undefined) {
                _this.image = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
        }
        else if (((texture != null && texture instanceof UserPreferences) || texture === null) && ((textureName != null && (textureName.constructor != null && textureName.constructor["__interfaces"] != null && textureName.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || textureName === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || preferences === null) && viewFactory === undefined && contentManager === undefined) {
            var __args = arguments;
            var preferences_11 = __args[0];
            var viewFactory_10 = __args[1];
            var contentManager_11 = __args[2];
            {
                var __args_50 = arguments;
                var texture_3 = null;
                var textureName_3 = null;
                _this = _super.call(this, preferences_11, viewFactory_10) || this;
                if (_this.texture === undefined) {
                    _this.texture = null;
                }
                if (_this.textureName === undefined) {
                    _this.textureName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.textureImageStepState === undefined) {
                    _this.textureImageStepState = null;
                }
                if (_this.textureAttributesStepState === undefined) {
                    _this.textureAttributesStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.image === undefined) {
                    _this.image = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                _this.texture = texture_3;
                _this.textureName = textureName_3;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = preferences_11;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = viewFactory_10;
                _this.contentManager = contentManager_11;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences.getLocalizedString(ImportedTextureWizardController, texture_3 == null ? "importTextureWizard.title" : "modifyTextureWizard.title"));
                _this.textureImageStepState = new ImportedTextureWizardController.TextureImageStepState(_this);
                _this.textureAttributesStepState = new ImportedTextureWizardController.TextureAttributesStepState(_this);
                _this.setStepState(_this.textureImageStepState);
            }
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.textureName === undefined) {
                _this.textureName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.textureImageStepState === undefined) {
                _this.textureImageStepState = null;
            }
            if (_this.textureAttributesStepState === undefined) {
                _this.textureAttributesStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.image === undefined) {
                _this.image = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Changes background image in model and posts an undoable operation.
     */
    ImportedTextureWizardController.prototype.finish = function () {
        var newTexture = new CatalogTexture(null, this.getName(), this.getImage(), this.getWidth(), this.getHeight(), this.getCreator(), true);
        var catalog = this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences.getTexturesCatalog();
        if (this.texture != null) {
            catalog["delete"](this.texture);
        }
        catalog.add(this.category, newTexture);
    };
    /**
     * Returns the content manager of this controller.
     * @return {Object}
     */
    ImportedTextureWizardController.prototype.getContentManager = function () {
        return this.contentManager;
    };
    /**
     * Returns the current step state.
     * @return {ImportedTextureWizardController.ImportedTextureWizardStepState}
     */
    ImportedTextureWizardController.prototype.getStepState = function () {
        return _super.prototype.getStepState.call(this);
    };
    /**
     * Returns the texture image step state.
     * @return {ImportedTextureWizardController.ImportedTextureWizardStepState}
     */
    ImportedTextureWizardController.prototype.getTextureImageStepState = function () {
        return this.textureImageStepState;
    };
    /**
     * Returns the texture attributes step state.
     * @return {ImportedTextureWizardController.ImportedTextureWizardStepState}
     */
    ImportedTextureWizardController.prototype.getTextureAttributesStepState = function () {
        return this.textureAttributesStepState;
    };
    /**
     * Returns the unique wizard view used for all steps.
     * @return {Object}
     */
    ImportedTextureWizardController.prototype.getStepsView = function () {
        if (this.stepsView == null) {
            this.stepsView = this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_viewFactory.createImportedTextureWizardStepsView(this.texture, this.textureName, this.__com_eteks_sweethome3d_viewcontroller_ImportedTextureWizardController_preferences, this);
        }
        return this.stepsView;
    };
    /**
     * Switch in the wizard view to the given <code>step</code>.
     * @param {ImportedTextureWizardController.Step} step
     */
    ImportedTextureWizardController.prototype.setStep = function (step) {
        if (step !== this.step) {
            var oldStep = this.step;
            this.step = step;
            this.propertyChangeSupport.firePropertyChange(/* name */ "STEP", oldStep, step);
        }
    };
    /**
     * Returns the current step in wizard view.
     * @return {ImportedTextureWizardController.Step}
     */
    ImportedTextureWizardController.prototype.getStep = function () {
        return this.step;
    };
    /**
     * Sets the image content of the imported texture.
     * @param {Object} image
     */
    ImportedTextureWizardController.prototype.setImage = function (image) {
        if (image !== this.image) {
            var oldImage = this.image;
            this.image = image;
            this.propertyChangeSupport.firePropertyChange(/* name */ "IMAGE", oldImage, image);
        }
    };
    /**
     * Returns the image content of the imported texture.
     * @return {Object}
     */
    ImportedTextureWizardController.prototype.getImage = function () {
        return this.image;
    };
    /**
     * Returns the name of the imported texture.
     * @return {string}
     */
    ImportedTextureWizardController.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of the imported texture.
     * @param {string} name
     */
    ImportedTextureWizardController.prototype.setName = function (name) {
        if (name !== this.name) {
            var oldName = this.name;
            this.name = name;
            if (this.propertyChangeSupport != null) {
                this.propertyChangeSupport.firePropertyChange(/* name */ "NAME", oldName, name);
            }
        }
    };
    /**
     * Returns the category of the imported texture.
     * @return {TexturesCategory}
     */
    ImportedTextureWizardController.prototype.getCategory = function () {
        return this.category;
    };
    /**
     * Sets the category of the imported texture.
     * @param {TexturesCategory} category
     */
    ImportedTextureWizardController.prototype.setCategory = function (category) {
        if (category !== this.category) {
            var oldCategory = this.category;
            this.category = category;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CATEGORY", oldCategory, category);
        }
    };
    /**
     * Returns the creator of the imported piece.
     * @return {string}
     */
    ImportedTextureWizardController.prototype.getCreator = function () {
        return this.creator;
    };
    /**
     * Sets the creator of the imported piece.
     * @param {string} creator
     */
    ImportedTextureWizardController.prototype.setCreator = function (creator) {
        if (creator !== this.creator) {
            var oldCreator = this.creator;
            this.creator = creator;
            if (this.propertyChangeSupport != null) {
                this.propertyChangeSupport.firePropertyChange(/* name */ "CREATOR", oldCreator, creator);
            }
        }
    };
    /**
     * Returns the width.
     * @return {number}
     */
    ImportedTextureWizardController.prototype.getWidth = function () {
        return this.width;
    };
    /**
     * Sets the width of the imported texture.
     * @param {number} width
     */
    ImportedTextureWizardController.prototype.setWidth = function (width) {
        if (width !== this.width) {
            var oldWidth = this.width;
            this.width = width;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WIDTH", oldWidth, width);
        }
    };
    /**
     * Returns the height.
     * @return {number}
     */
    ImportedTextureWizardController.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the size of the imported texture.
     * @param {number} height
     */
    ImportedTextureWizardController.prototype.setHeight = function (height) {
        if (height !== this.height) {
            var oldHeight = this.height;
            this.height = height;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
        }
    };
    /**
     * Returns <code>true</code> if texture name is valid.
     * @return {boolean}
     */
    ImportedTextureWizardController.prototype.isTextureNameValid = function () {
        return this.name != null && this.name.length > 0 && this.category != null;
    };
    return ImportedTextureWizardController;
}(WizardController));
ImportedTextureWizardController["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedTextureWizardController";
ImportedTextureWizardController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (ImportedTextureWizardController) {
    var Step;
    (function (Step) {
        Step[Step["IMAGE"] = 0] = "IMAGE";
        Step[Step["ATTRIBUTES"] = 1] = "ATTRIBUTES";
    })(Step = ImportedTextureWizardController.Step || (ImportedTextureWizardController.Step = {}));
    /**
     * Step state superclass. All step state share the same step view,
     * that will display a different component depending on their class name.
     * @extends WizardController.WizardControllerStepState
     * @class
     */
    var ImportedTextureWizardStepState = /** @class */ (function (_super) {
        __extends(ImportedTextureWizardStepState, _super);
        function ImportedTextureWizardStepState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            _this.icon = /* getResource */ "resources/importedTextureWizard.png";
            return _this;
        }
        /**
         *
         */
        ImportedTextureWizardStepState.prototype.enter = function () {
            this.__parent.setStep(this.getStep());
        };
        /**
         *
         * @return {Object}
         */
        ImportedTextureWizardStepState.prototype.getView = function () {
            return this.__parent.getStepsView();
        };
        /**
         *
         * @return {string}
         */
        ImportedTextureWizardStepState.prototype.getIcon = function () {
            return this.icon;
        };
        return ImportedTextureWizardStepState;
    }(WizardController.WizardControllerStepState));
    ImportedTextureWizardController.ImportedTextureWizardStepState = ImportedTextureWizardStepState;
    ImportedTextureWizardStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedTextureWizardController.ImportedTextureWizardStepState";
    /**
     * Texture image choice step state (first step).
     * @class
     * @extends ImportedTextureWizardController.ImportedTextureWizardStepState
     */
    var TextureImageStepState = /** @class */ (function (_super) {
        __extends(TextureImageStepState, _super);
        function TextureImageStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            __parent.addPropertyChangeListener("IMAGE", new TextureImageStepState.TextureImageStepState$0(_this));
            return _this;
        }
        /**
         *
         */
        TextureImageStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setFirstStep(true);
            this.setNextStepEnabled(this.__parent.getImage() != null);
        };
        /**
         *
         * @return {ImportedTextureWizardController.Step}
         */
        TextureImageStepState.prototype.getStep = function () {
            return ImportedTextureWizardController.Step.IMAGE;
        };
        /**
         *
         */
        TextureImageStepState.prototype.goToNextStep = function () {
            this.__parent.setStepState(this.__parent.getTextureAttributesStepState());
        };
        return TextureImageStepState;
    }(ImportedTextureWizardController.ImportedTextureWizardStepState));
    ImportedTextureWizardController.TextureImageStepState = TextureImageStepState;
    TextureImageStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedTextureWizardController.TextureImageStepState";
    (function (TextureImageStepState) {
        var TextureImageStepState$0 = /** @class */ (function () {
            function TextureImageStepState$0(__parent) {
                this.__parent = __parent;
            }
            TextureImageStepState$0.prototype.propertyChange = function (evt) {
                this.__parent.setNextStepEnabled(this.__parent.__parent.getImage() != null);
            };
            return TextureImageStepState$0;
        }());
        TextureImageStepState.TextureImageStepState$0 = TextureImageStepState$0;
    })(TextureImageStepState = ImportedTextureWizardController.TextureImageStepState || (ImportedTextureWizardController.TextureImageStepState = {}));
    /**
     * Texture image attributes step state (last step).
     * @class
     * @extends ImportedTextureWizardController.ImportedTextureWizardStepState
     */
    var TextureAttributesStepState = /** @class */ (function (_super) {
        __extends(TextureAttributesStepState, _super);
        function TextureAttributesStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.widthChangeListener === undefined) {
                _this.widthChangeListener = null;
            }
            if (_this.heightChangeListener === undefined) {
                _this.heightChangeListener = null;
            }
            if (_this.nameAndCategoryChangeListener === undefined) {
                _this.nameAndCategoryChangeListener = null;
            }
            _this.widthChangeListener = new TextureAttributesStepState.TextureAttributesStepState$0(_this);
            _this.heightChangeListener = new TextureAttributesStepState.TextureAttributesStepState$1(_this);
            _this.nameAndCategoryChangeListener = new TextureAttributesStepState.TextureAttributesStepState$2(_this);
            return _this;
        }
        /**
         *
         */
        TextureAttributesStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setLastStep(true);
            this.__parent.addPropertyChangeListener("WIDTH", this.widthChangeListener);
            this.__parent.addPropertyChangeListener("HEIGHT", this.heightChangeListener);
            this.__parent.addPropertyChangeListener("NAME", this.nameAndCategoryChangeListener);
            this.__parent.addPropertyChangeListener("CATEGORY", this.nameAndCategoryChangeListener);
            this.setNextStepEnabled(this.__parent.isTextureNameValid());
        };
        /**
         *
         * @return {ImportedTextureWizardController.Step}
         */
        TextureAttributesStepState.prototype.getStep = function () {
            return ImportedTextureWizardController.Step.ATTRIBUTES;
        };
        /**
         *
         */
        TextureAttributesStepState.prototype.goBackToPreviousStep = function () {
            this.__parent.setStepState(this.__parent.getTextureImageStepState());
        };
        /**
         *
         */
        TextureAttributesStepState.prototype.exit = function () {
            this.__parent.removePropertyChangeListener("WIDTH", this.widthChangeListener);
            this.__parent.removePropertyChangeListener("HEIGHT", this.heightChangeListener);
            this.__parent.removePropertyChangeListener("NAME", this.nameAndCategoryChangeListener);
            this.__parent.removePropertyChangeListener("CATEGORY", this.nameAndCategoryChangeListener);
        };
        return TextureAttributesStepState;
    }(ImportedTextureWizardController.ImportedTextureWizardStepState));
    ImportedTextureWizardController.TextureAttributesStepState = TextureAttributesStepState;
    TextureAttributesStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedTextureWizardController.TextureAttributesStepState";
    (function (TextureAttributesStepState) {
        var TextureAttributesStepState$0 = /** @class */ (function () {
            function TextureAttributesStepState$0(__parent) {
                this.__parent = __parent;
            }
            TextureAttributesStepState$0.prototype.propertyChange = function (ev) {
                this.__parent.__parent.removePropertyChangeListener("HEIGHT", this.__parent.heightChangeListener);
                var ratio = ev.getNewValue() / ev.getOldValue();
                this.__parent.__parent.setHeight(this.__parent.__parent.getHeight() * ratio);
                this.__parent.__parent.addPropertyChangeListener("HEIGHT", this.__parent.heightChangeListener);
            };
            return TextureAttributesStepState$0;
        }());
        TextureAttributesStepState.TextureAttributesStepState$0 = TextureAttributesStepState$0;
        var TextureAttributesStepState$1 = /** @class */ (function () {
            function TextureAttributesStepState$1(__parent) {
                this.__parent = __parent;
            }
            TextureAttributesStepState$1.prototype.propertyChange = function (ev) {
                this.__parent.__parent.removePropertyChangeListener("WIDTH", this.__parent.widthChangeListener);
                var ratio = ev.getNewValue() / ev.getOldValue();
                this.__parent.__parent.setWidth(this.__parent.__parent.getWidth() * ratio);
                this.__parent.__parent.addPropertyChangeListener("WIDTH", this.__parent.widthChangeListener);
            };
            return TextureAttributesStepState$1;
        }());
        TextureAttributesStepState.TextureAttributesStepState$1 = TextureAttributesStepState$1;
        var TextureAttributesStepState$2 = /** @class */ (function () {
            function TextureAttributesStepState$2(__parent) {
                this.__parent = __parent;
            }
            TextureAttributesStepState$2.prototype.propertyChange = function (ev) {
                this.__parent.setNextStepEnabled(this.__parent.__parent.isTextureNameValid());
            };
            return TextureAttributesStepState$2;
        }());
        TextureAttributesStepState.TextureAttributesStepState$2 = TextureAttributesStepState$2;
    })(TextureAttributesStepState = ImportedTextureWizardController.TextureAttributesStepState || (ImportedTextureWizardController.TextureAttributesStepState = {}));
})(ImportedTextureWizardController || (ImportedTextureWizardController = {}));
/**
 * Creates a controller that edits a new imported home piece of furniture
 * with a given <code>modelName</code>.
 * @param {Home} home
 * @param {string} modelName
 * @param {UserPreferences} preferences
 * @param {FurnitureController} furnitureController
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport
 * @class
 * @extends WizardController
 * @author Emmanuel Puybaret
 * @ignore
 */
var ImportedFurnitureWizardController = /** @class */ (function (_super) {
    __extends(ImportedFurnitureWizardController, _super);
    function ImportedFurnitureWizardController(home, piece, modelName, preferences, furnitureController, viewFactory, contentManager, undoSupport) {
        var _this = this;
        if (((home != null && home instanceof Home) || home === null) && ((piece != null && piece instanceof CatalogPieceOfFurniture) || piece === null) && ((typeof modelName === 'string') || modelName === null) && ((preferences != null && preferences instanceof UserPreferences) || preferences === null) && ((furnitureController != null && furnitureController instanceof FurnitureController) || furnitureController === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || viewFactory === null) && ((contentManager != null && (contentManager.constructor != null && contentManager.constructor["__interfaces"] != null && contentManager.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || contentManager === null) && ((undoSupport != null && undoSupport instanceof javax.swing.undo.UndoableEditSupport) || undoSupport === null)) {
            var __args = arguments;
            _this = _super.call(this, preferences, viewFactory) || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.modelName === undefined) {
                _this.modelName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
            }
            if (_this.furnitureController === undefined) {
                _this.furnitureController = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.undoSupport === undefined) {
                _this.undoSupport = null;
            }
            if (_this.furnitureModelStepState === undefined) {
                _this.furnitureModelStepState = null;
            }
            if (_this.furnitureOrientationStepState === undefined) {
                _this.furnitureOrientationStepState = null;
            }
            if (_this.furnitureAttributesStepState === undefined) {
                _this.furnitureAttributesStepState = null;
            }
            if (_this.furnitureIconStepState === undefined) {
                _this.furnitureIconStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.proportionalWidth === undefined) {
                _this.proportionalWidth = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.proportionalDepth === undefined) {
                _this.proportionalDepth = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.proportionalHeight === undefined) {
                _this.proportionalHeight = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = 0;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.iconYaw === undefined) {
                _this.iconYaw = 0;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
            }
            _this.home = home;
            _this.piece = piece;
            _this.modelName = modelName;
            _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = preferences;
            _this.furnitureController = furnitureController;
            _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = viewFactory;
            _this.undoSupport = undoSupport;
            _this.contentManager = contentManager;
            /* Use propertyChangeSupport defined in super class */ ;
            _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getLocalizedString(ImportedFurnitureWizardController, piece == null ? "importFurnitureWizard.title" : "modifyFurnitureWizard.title"));
            _this.furnitureModelStepState = new ImportedFurnitureWizardController.FurnitureModelStepState(_this);
            _this.furnitureOrientationStepState = new ImportedFurnitureWizardController.FurnitureOrientationStepState(_this);
            _this.furnitureAttributesStepState = new ImportedFurnitureWizardController.FurnitureAttributesStepState(_this);
            _this.furnitureIconStepState = new ImportedFurnitureWizardController.FurnitureIconStepState(_this);
            _this.setStepState(_this.furnitureModelStepState);
        }
        else if (((home != null && home instanceof Home) || home === null) && ((typeof piece === 'string') || piece === null) && ((modelName != null && modelName instanceof UserPreferences) || modelName === null) && ((preferences != null && preferences instanceof FurnitureController) || preferences === null) && ((furnitureController != null && (furnitureController.constructor != null && furnitureController.constructor["__interfaces"] != null && furnitureController.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || furnitureController === null) && ((viewFactory != null && (viewFactory.constructor != null && viewFactory.constructor["__interfaces"] != null && viewFactory.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || viewFactory === null) && ((contentManager != null && contentManager instanceof javax.swing.undo.UndoableEditSupport) || contentManager === null) && undoSupport === undefined) {
            var __args = arguments;
            var modelName_1 = __args[1];
            var preferences_12 = __args[2];
            var furnitureController_1 = __args[3];
            var viewFactory_11 = __args[4];
            var contentManager_12 = __args[5];
            var undoSupport_4 = __args[6];
            {
                var __args_51 = arguments;
                var piece_2 = null;
                _this = _super.call(this, preferences_12, viewFactory_11) || this;
                if (_this.home === undefined) {
                    _this.home = null;
                }
                if (_this.piece === undefined) {
                    _this.piece = null;
                }
                if (_this.modelName === undefined) {
                    _this.modelName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
                }
                if (_this.furnitureController === undefined) {
                    _this.furnitureController = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.undoSupport === undefined) {
                    _this.undoSupport = null;
                }
                if (_this.furnitureModelStepState === undefined) {
                    _this.furnitureModelStepState = null;
                }
                if (_this.furnitureOrientationStepState === undefined) {
                    _this.furnitureOrientationStepState = null;
                }
                if (_this.furnitureAttributesStepState === undefined) {
                    _this.furnitureAttributesStepState = null;
                }
                if (_this.furnitureIconStepState === undefined) {
                    _this.furnitureIconStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.model === undefined) {
                    _this.model = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.proportionalWidth === undefined) {
                    _this.proportionalWidth = 0;
                }
                if (_this.depth === undefined) {
                    _this.depth = 0;
                }
                if (_this.proportionalDepth === undefined) {
                    _this.proportionalDepth = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.proportionalHeight === undefined) {
                    _this.proportionalHeight = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.movable === undefined) {
                    _this.movable = false;
                }
                if (_this.doorOrWindow === undefined) {
                    _this.doorOrWindow = false;
                }
                if (_this.staircaseCutOutShape === undefined) {
                    _this.staircaseCutOutShape = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.backFaceShown === undefined) {
                    _this.backFaceShown = false;
                }
                if (_this.modelSize === undefined) {
                    _this.modelSize = 0;
                }
                if (_this.modelRotation === undefined) {
                    _this.modelRotation = null;
                }
                if (_this.iconYaw === undefined) {
                    _this.iconYaw = 0;
                }
                if (_this.proportional === undefined) {
                    _this.proportional = false;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
                }
                _this.home = home;
                _this.piece = piece_2;
                _this.modelName = modelName_1;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = preferences_12;
                _this.furnitureController = furnitureController_1;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = viewFactory_11;
                _this.undoSupport = undoSupport_4;
                _this.contentManager = contentManager_12;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getLocalizedString(ImportedFurnitureWizardController, piece_2 == null ? "importFurnitureWizard.title" : "modifyFurnitureWizard.title"));
                _this.furnitureModelStepState = new ImportedFurnitureWizardController.FurnitureModelStepState(_this);
                _this.furnitureOrientationStepState = new ImportedFurnitureWizardController.FurnitureOrientationStepState(_this);
                _this.furnitureAttributesStepState = new ImportedFurnitureWizardController.FurnitureAttributesStepState(_this);
                _this.furnitureIconStepState = new ImportedFurnitureWizardController.FurnitureIconStepState(_this);
                _this.setStepState(_this.furnitureModelStepState);
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.modelName === undefined) {
                _this.modelName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
            }
            if (_this.furnitureController === undefined) {
                _this.furnitureController = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.undoSupport === undefined) {
                _this.undoSupport = null;
            }
            if (_this.furnitureModelStepState === undefined) {
                _this.furnitureModelStepState = null;
            }
            if (_this.furnitureOrientationStepState === undefined) {
                _this.furnitureOrientationStepState = null;
            }
            if (_this.furnitureAttributesStepState === undefined) {
                _this.furnitureAttributesStepState = null;
            }
            if (_this.furnitureIconStepState === undefined) {
                _this.furnitureIconStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.proportionalWidth === undefined) {
                _this.proportionalWidth = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.proportionalDepth === undefined) {
                _this.proportionalDepth = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.proportionalHeight === undefined) {
                _this.proportionalHeight = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = 0;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.iconYaw === undefined) {
                _this.iconYaw = 0;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
            }
        }
        else if (((home != null && home instanceof Home) || home === null) && ((piece != null && piece instanceof UserPreferences) || piece === null) && ((modelName != null && modelName instanceof FurnitureController) || modelName === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || preferences === null) && ((furnitureController != null && (furnitureController.constructor != null && furnitureController.constructor["__interfaces"] != null && furnitureController.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || furnitureController === null) && ((viewFactory != null && viewFactory instanceof javax.swing.undo.UndoableEditSupport) || viewFactory === null) && contentManager === undefined && undoSupport === undefined) {
            var __args = arguments;
            var preferences_13 = __args[1];
            var furnitureController_2 = __args[2];
            var viewFactory_12 = __args[3];
            var contentManager_13 = __args[4];
            var undoSupport_5 = __args[5];
            {
                var __args_52 = arguments;
                var piece_3 = null;
                var modelName_2 = null;
                _this = _super.call(this, preferences_13, viewFactory_12) || this;
                if (_this.home === undefined) {
                    _this.home = null;
                }
                if (_this.piece === undefined) {
                    _this.piece = null;
                }
                if (_this.modelName === undefined) {
                    _this.modelName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
                }
                if (_this.furnitureController === undefined) {
                    _this.furnitureController = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.undoSupport === undefined) {
                    _this.undoSupport = null;
                }
                if (_this.furnitureModelStepState === undefined) {
                    _this.furnitureModelStepState = null;
                }
                if (_this.furnitureOrientationStepState === undefined) {
                    _this.furnitureOrientationStepState = null;
                }
                if (_this.furnitureAttributesStepState === undefined) {
                    _this.furnitureAttributesStepState = null;
                }
                if (_this.furnitureIconStepState === undefined) {
                    _this.furnitureIconStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.model === undefined) {
                    _this.model = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.proportionalWidth === undefined) {
                    _this.proportionalWidth = 0;
                }
                if (_this.depth === undefined) {
                    _this.depth = 0;
                }
                if (_this.proportionalDepth === undefined) {
                    _this.proportionalDepth = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.proportionalHeight === undefined) {
                    _this.proportionalHeight = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.movable === undefined) {
                    _this.movable = false;
                }
                if (_this.doorOrWindow === undefined) {
                    _this.doorOrWindow = false;
                }
                if (_this.staircaseCutOutShape === undefined) {
                    _this.staircaseCutOutShape = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.backFaceShown === undefined) {
                    _this.backFaceShown = false;
                }
                if (_this.modelSize === undefined) {
                    _this.modelSize = 0;
                }
                if (_this.modelRotation === undefined) {
                    _this.modelRotation = null;
                }
                if (_this.iconYaw === undefined) {
                    _this.iconYaw = 0;
                }
                if (_this.proportional === undefined) {
                    _this.proportional = false;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
                }
                _this.home = home;
                _this.piece = piece_3;
                _this.modelName = modelName_2;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = preferences_13;
                _this.furnitureController = furnitureController_2;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = viewFactory_12;
                _this.undoSupport = undoSupport_5;
                _this.contentManager = contentManager_13;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getLocalizedString(ImportedFurnitureWizardController, piece_3 == null ? "importFurnitureWizard.title" : "modifyFurnitureWizard.title"));
                _this.furnitureModelStepState = new ImportedFurnitureWizardController.FurnitureModelStepState(_this);
                _this.furnitureOrientationStepState = new ImportedFurnitureWizardController.FurnitureOrientationStepState(_this);
                _this.furnitureAttributesStepState = new ImportedFurnitureWizardController.FurnitureAttributesStepState(_this);
                _this.furnitureIconStepState = new ImportedFurnitureWizardController.FurnitureIconStepState(_this);
                _this.setStepState(_this.furnitureModelStepState);
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.modelName === undefined) {
                _this.modelName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
            }
            if (_this.furnitureController === undefined) {
                _this.furnitureController = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.undoSupport === undefined) {
                _this.undoSupport = null;
            }
            if (_this.furnitureModelStepState === undefined) {
                _this.furnitureModelStepState = null;
            }
            if (_this.furnitureOrientationStepState === undefined) {
                _this.furnitureOrientationStepState = null;
            }
            if (_this.furnitureAttributesStepState === undefined) {
                _this.furnitureAttributesStepState = null;
            }
            if (_this.furnitureIconStepState === undefined) {
                _this.furnitureIconStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.proportionalWidth === undefined) {
                _this.proportionalWidth = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.proportionalDepth === undefined) {
                _this.proportionalDepth = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.proportionalHeight === undefined) {
                _this.proportionalHeight = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = 0;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.iconYaw === undefined) {
                _this.iconYaw = 0;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
            }
        }
        else if (((typeof home === 'string') || home === null) && ((piece != null && piece instanceof UserPreferences) || piece === null) && ((modelName != null && (modelName.constructor != null && modelName.constructor["__interfaces"] != null && modelName.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || modelName === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || preferences === null) && furnitureController === undefined && viewFactory === undefined && contentManager === undefined && undoSupport === undefined) {
            var __args = arguments;
            var modelName_3 = __args[0];
            var preferences_14 = __args[1];
            var viewFactory_13 = __args[2];
            var contentManager_14 = __args[3];
            {
                var __args_53 = arguments;
                var home_1 = null;
                var piece_4 = null;
                var furnitureController_3 = null;
                var undoSupport_6 = null;
                _this = _super.call(this, preferences_14, viewFactory_13) || this;
                if (_this.home === undefined) {
                    _this.home = null;
                }
                if (_this.piece === undefined) {
                    _this.piece = null;
                }
                if (_this.modelName === undefined) {
                    _this.modelName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
                }
                if (_this.furnitureController === undefined) {
                    _this.furnitureController = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.undoSupport === undefined) {
                    _this.undoSupport = null;
                }
                if (_this.furnitureModelStepState === undefined) {
                    _this.furnitureModelStepState = null;
                }
                if (_this.furnitureOrientationStepState === undefined) {
                    _this.furnitureOrientationStepState = null;
                }
                if (_this.furnitureAttributesStepState === undefined) {
                    _this.furnitureAttributesStepState = null;
                }
                if (_this.furnitureIconStepState === undefined) {
                    _this.furnitureIconStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.model === undefined) {
                    _this.model = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.proportionalWidth === undefined) {
                    _this.proportionalWidth = 0;
                }
                if (_this.depth === undefined) {
                    _this.depth = 0;
                }
                if (_this.proportionalDepth === undefined) {
                    _this.proportionalDepth = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.proportionalHeight === undefined) {
                    _this.proportionalHeight = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.movable === undefined) {
                    _this.movable = false;
                }
                if (_this.doorOrWindow === undefined) {
                    _this.doorOrWindow = false;
                }
                if (_this.staircaseCutOutShape === undefined) {
                    _this.staircaseCutOutShape = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.backFaceShown === undefined) {
                    _this.backFaceShown = false;
                }
                if (_this.modelSize === undefined) {
                    _this.modelSize = 0;
                }
                if (_this.modelRotation === undefined) {
                    _this.modelRotation = null;
                }
                if (_this.iconYaw === undefined) {
                    _this.iconYaw = 0;
                }
                if (_this.proportional === undefined) {
                    _this.proportional = false;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
                }
                _this.home = home_1;
                _this.piece = piece_4;
                _this.modelName = modelName_3;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = preferences_14;
                _this.furnitureController = furnitureController_3;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = viewFactory_13;
                _this.undoSupport = undoSupport_6;
                _this.contentManager = contentManager_14;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getLocalizedString(ImportedFurnitureWizardController, piece_4 == null ? "importFurnitureWizard.title" : "modifyFurnitureWizard.title"));
                _this.furnitureModelStepState = new ImportedFurnitureWizardController.FurnitureModelStepState(_this);
                _this.furnitureOrientationStepState = new ImportedFurnitureWizardController.FurnitureOrientationStepState(_this);
                _this.furnitureAttributesStepState = new ImportedFurnitureWizardController.FurnitureAttributesStepState(_this);
                _this.furnitureIconStepState = new ImportedFurnitureWizardController.FurnitureIconStepState(_this);
                _this.setStepState(_this.furnitureModelStepState);
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.modelName === undefined) {
                _this.modelName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
            }
            if (_this.furnitureController === undefined) {
                _this.furnitureController = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.undoSupport === undefined) {
                _this.undoSupport = null;
            }
            if (_this.furnitureModelStepState === undefined) {
                _this.furnitureModelStepState = null;
            }
            if (_this.furnitureOrientationStepState === undefined) {
                _this.furnitureOrientationStepState = null;
            }
            if (_this.furnitureAttributesStepState === undefined) {
                _this.furnitureAttributesStepState = null;
            }
            if (_this.furnitureIconStepState === undefined) {
                _this.furnitureIconStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.proportionalWidth === undefined) {
                _this.proportionalWidth = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.proportionalDepth === undefined) {
                _this.proportionalDepth = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.proportionalHeight === undefined) {
                _this.proportionalHeight = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = 0;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.iconYaw === undefined) {
                _this.iconYaw = 0;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
            }
        }
        else if (((home != null && home instanceof CatalogPieceOfFurniture) || home === null) && ((piece != null && piece instanceof UserPreferences) || piece === null) && ((modelName != null && (modelName.constructor != null && modelName.constructor["__interfaces"] != null && modelName.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || modelName === null) && ((preferences != null && (preferences.constructor != null && preferences.constructor["__interfaces"] != null && preferences.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || preferences === null) && furnitureController === undefined && viewFactory === undefined && contentManager === undefined && undoSupport === undefined) {
            var __args = arguments;
            var piece_5 = __args[0];
            var preferences_15 = __args[1];
            var viewFactory_14 = __args[2];
            var contentManager_15 = __args[3];
            {
                var __args_54 = arguments;
                var home_2 = null;
                var modelName_4 = null;
                var furnitureController_4 = null;
                var undoSupport_7 = null;
                _this = _super.call(this, preferences_15, viewFactory_14) || this;
                if (_this.home === undefined) {
                    _this.home = null;
                }
                if (_this.piece === undefined) {
                    _this.piece = null;
                }
                if (_this.modelName === undefined) {
                    _this.modelName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
                }
                if (_this.furnitureController === undefined) {
                    _this.furnitureController = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.undoSupport === undefined) {
                    _this.undoSupport = null;
                }
                if (_this.furnitureModelStepState === undefined) {
                    _this.furnitureModelStepState = null;
                }
                if (_this.furnitureOrientationStepState === undefined) {
                    _this.furnitureOrientationStepState = null;
                }
                if (_this.furnitureAttributesStepState === undefined) {
                    _this.furnitureAttributesStepState = null;
                }
                if (_this.furnitureIconStepState === undefined) {
                    _this.furnitureIconStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.model === undefined) {
                    _this.model = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.proportionalWidth === undefined) {
                    _this.proportionalWidth = 0;
                }
                if (_this.depth === undefined) {
                    _this.depth = 0;
                }
                if (_this.proportionalDepth === undefined) {
                    _this.proportionalDepth = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.proportionalHeight === undefined) {
                    _this.proportionalHeight = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.movable === undefined) {
                    _this.movable = false;
                }
                if (_this.doorOrWindow === undefined) {
                    _this.doorOrWindow = false;
                }
                if (_this.staircaseCutOutShape === undefined) {
                    _this.staircaseCutOutShape = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.backFaceShown === undefined) {
                    _this.backFaceShown = false;
                }
                if (_this.modelSize === undefined) {
                    _this.modelSize = 0;
                }
                if (_this.modelRotation === undefined) {
                    _this.modelRotation = null;
                }
                if (_this.iconYaw === undefined) {
                    _this.iconYaw = 0;
                }
                if (_this.proportional === undefined) {
                    _this.proportional = false;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
                }
                _this.home = home_2;
                _this.piece = piece_5;
                _this.modelName = modelName_4;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = preferences_15;
                _this.furnitureController = furnitureController_4;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = viewFactory_14;
                _this.undoSupport = undoSupport_7;
                _this.contentManager = contentManager_15;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getLocalizedString(ImportedFurnitureWizardController, piece_5 == null ? "importFurnitureWizard.title" : "modifyFurnitureWizard.title"));
                _this.furnitureModelStepState = new ImportedFurnitureWizardController.FurnitureModelStepState(_this);
                _this.furnitureOrientationStepState = new ImportedFurnitureWizardController.FurnitureOrientationStepState(_this);
                _this.furnitureAttributesStepState = new ImportedFurnitureWizardController.FurnitureAttributesStepState(_this);
                _this.furnitureIconStepState = new ImportedFurnitureWizardController.FurnitureIconStepState(_this);
                _this.setStepState(_this.furnitureModelStepState);
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.modelName === undefined) {
                _this.modelName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
            }
            if (_this.furnitureController === undefined) {
                _this.furnitureController = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.undoSupport === undefined) {
                _this.undoSupport = null;
            }
            if (_this.furnitureModelStepState === undefined) {
                _this.furnitureModelStepState = null;
            }
            if (_this.furnitureOrientationStepState === undefined) {
                _this.furnitureOrientationStepState = null;
            }
            if (_this.furnitureAttributesStepState === undefined) {
                _this.furnitureAttributesStepState = null;
            }
            if (_this.furnitureIconStepState === undefined) {
                _this.furnitureIconStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.proportionalWidth === undefined) {
                _this.proportionalWidth = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.proportionalDepth === undefined) {
                _this.proportionalDepth = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.proportionalHeight === undefined) {
                _this.proportionalHeight = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = 0;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.iconYaw === undefined) {
                _this.iconYaw = 0;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
            }
        }
        else if (((home != null && home instanceof UserPreferences) || home === null) && ((piece != null && (piece.constructor != null && piece.constructor["__interfaces"] != null && piece.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ViewFactory") >= 0)) || piece === null) && ((modelName != null && (modelName.constructor != null && modelName.constructor["__interfaces"] != null && modelName.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.viewcontroller.ContentManager") >= 0)) || modelName === null) && preferences === undefined && furnitureController === undefined && viewFactory === undefined && contentManager === undefined && undoSupport === undefined) {
            var __args = arguments;
            var preferences_16 = __args[0];
            var viewFactory_15 = __args[1];
            var contentManager_16 = __args[2];
            {
                var __args_55 = arguments;
                var home_3 = null;
                var piece_6 = null;
                var modelName_5 = null;
                var furnitureController_5 = null;
                var undoSupport_8 = null;
                _this = _super.call(this, preferences_16, viewFactory_15) || this;
                if (_this.home === undefined) {
                    _this.home = null;
                }
                if (_this.piece === undefined) {
                    _this.piece = null;
                }
                if (_this.modelName === undefined) {
                    _this.modelName = null;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
                }
                if (_this.furnitureController === undefined) {
                    _this.furnitureController = null;
                }
                if (_this.contentManager === undefined) {
                    _this.contentManager = null;
                }
                if (_this.undoSupport === undefined) {
                    _this.undoSupport = null;
                }
                if (_this.furnitureModelStepState === undefined) {
                    _this.furnitureModelStepState = null;
                }
                if (_this.furnitureOrientationStepState === undefined) {
                    _this.furnitureOrientationStepState = null;
                }
                if (_this.furnitureAttributesStepState === undefined) {
                    _this.furnitureAttributesStepState = null;
                }
                if (_this.furnitureIconStepState === undefined) {
                    _this.furnitureIconStepState = null;
                }
                if (_this.stepsView === undefined) {
                    _this.stepsView = null;
                }
                if (_this.step === undefined) {
                    _this.step = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.model === undefined) {
                    _this.model = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.proportionalWidth === undefined) {
                    _this.proportionalWidth = 0;
                }
                if (_this.depth === undefined) {
                    _this.depth = 0;
                }
                if (_this.proportionalDepth === undefined) {
                    _this.proportionalDepth = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.proportionalHeight === undefined) {
                    _this.proportionalHeight = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.movable === undefined) {
                    _this.movable = false;
                }
                if (_this.doorOrWindow === undefined) {
                    _this.doorOrWindow = false;
                }
                if (_this.staircaseCutOutShape === undefined) {
                    _this.staircaseCutOutShape = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.category === undefined) {
                    _this.category = null;
                }
                if (_this.backFaceShown === undefined) {
                    _this.backFaceShown = false;
                }
                if (_this.modelSize === undefined) {
                    _this.modelSize = 0;
                }
                if (_this.modelRotation === undefined) {
                    _this.modelRotation = null;
                }
                if (_this.iconYaw === undefined) {
                    _this.iconYaw = 0;
                }
                if (_this.proportional === undefined) {
                    _this.proportional = false;
                }
                if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                    _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
                }
                _this.home = home_3;
                _this.piece = piece_6;
                _this.modelName = modelName_5;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = preferences_16;
                _this.furnitureController = furnitureController_5;
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = viewFactory_15;
                _this.undoSupport = undoSupport_8;
                _this.contentManager = contentManager_16;
                /* Use propertyChangeSupport defined in super class */ ;
                _this.setTitle(_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getLocalizedString(ImportedFurnitureWizardController, piece_6 == null ? "importFurnitureWizard.title" : "modifyFurnitureWizard.title"));
                _this.furnitureModelStepState = new ImportedFurnitureWizardController.FurnitureModelStepState(_this);
                _this.furnitureOrientationStepState = new ImportedFurnitureWizardController.FurnitureOrientationStepState(_this);
                _this.furnitureAttributesStepState = new ImportedFurnitureWizardController.FurnitureAttributesStepState(_this);
                _this.furnitureIconStepState = new ImportedFurnitureWizardController.FurnitureIconStepState(_this);
                _this.setStepState(_this.furnitureModelStepState);
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.modelName === undefined) {
                _this.modelName = null;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences = null;
            }
            if (_this.furnitureController === undefined) {
                _this.furnitureController = null;
            }
            if (_this.contentManager === undefined) {
                _this.contentManager = null;
            }
            if (_this.undoSupport === undefined) {
                _this.undoSupport = null;
            }
            if (_this.furnitureModelStepState === undefined) {
                _this.furnitureModelStepState = null;
            }
            if (_this.furnitureOrientationStepState === undefined) {
                _this.furnitureOrientationStepState = null;
            }
            if (_this.furnitureAttributesStepState === undefined) {
                _this.furnitureAttributesStepState = null;
            }
            if (_this.furnitureIconStepState === undefined) {
                _this.furnitureIconStepState = null;
            }
            if (_this.stepsView === undefined) {
                _this.stepsView = null;
            }
            if (_this.step === undefined) {
                _this.step = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.proportionalWidth === undefined) {
                _this.proportionalWidth = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.proportionalDepth === undefined) {
                _this.proportionalDepth = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.proportionalHeight === undefined) {
                _this.proportionalHeight = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.category === undefined) {
                _this.category = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = 0;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.iconYaw === undefined) {
                _this.iconYaw = 0;
            }
            if (_this.proportional === undefined) {
                _this.proportional = false;
            }
            if (_this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory === undefined) {
                _this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Imports piece in catalog and/or home and posts an undoable operation.
     */
    ImportedFurnitureWizardController.prototype.finish = function () {
        var newPiece;
        if (this.isDoorOrWindow()) {
            newPiece = new CatalogDoorOrWindow(this.getName(), this.getIcon(), this.getModel(), this.getWidth(), this.getDepth(), this.getHeight(), this.getElevation(), this.isMovable(), 1, 0, [], this.getColor(), this.getModelRotation(), this.isBackFaceShown(), this.getModelSize(), this.getCreator(), this.getIconYaw(), this.isProportional());
        }
        else {
            newPiece = new CatalogPieceOfFurniture(this.getName(), this.getIcon(), this.getModel(), this.getWidth(), this.getDepth(), this.getHeight(), this.getElevation(), this.isMovable(), this.getStaircaseCutOutShape(), this.getColor(), this.getModelRotation(), this.isBackFaceShown(), this.getModelSize(), this.getCreator(), this.getIconYaw(), this.isProportional());
        }
        if (this.home != null) {
            this.addPieceOfFurniture(this.furnitureController.createHomePieceOfFurniture(newPiece));
        }
        var catalog = this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences.getFurnitureCatalog();
        if (this.piece != null) {
            catalog["delete"](this.piece);
        }
        if (this.category != null) {
            catalog.add(this.category, newPiece);
        }
    };
    /**
     * Controls new piece added to home.
     * Once added the furniture will be selected in view
     * and undo support will receive a new undoable edit.
     * @param {HomePieceOfFurniture} piece the piece of furniture to add.
     */
    ImportedFurnitureWizardController.prototype.addPieceOfFurniture = function (piece) {
        var basePlanLocked = this.home.isBasePlanLocked();
        var allLevelsSelection = this.home.isAllLevelsSelection();
        var oldSelection = this.home.getSelectedItems();
        var pieceIndex = this.home.getFurniture().length;
        this.home.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$int(piece, pieceIndex);
        this.home.setSelectedItems(/* asList */ [piece]);
        if (!piece.isMovable() && basePlanLocked) {
            this.home.setBasePlanLocked(false);
        }
        this.home.setAllLevelsSelection(false);
        if (this.undoSupport != null) {
            var undoableEdit = new ImportedFurnitureWizardController.PieceOfFurnitureImportationUndoableEdit(this.home, this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences, /* toArray */ oldSelection.slice(0), basePlanLocked, allLevelsSelection, piece, pieceIndex);
            this.undoSupport.postEdit(undoableEdit);
        }
    };
    /**
     * Returns the content manager of this controller.
     * @return {Object}
     */
    ImportedFurnitureWizardController.prototype.getContentManager = function () {
        return this.contentManager;
    };
    /**
     * Returns the current step state.
     * @return {ImportedFurnitureWizardController.ImportedFurnitureWizardStepState}
     */
    ImportedFurnitureWizardController.prototype.getStepState = function () {
        return _super.prototype.getStepState.call(this);
    };
    /**
     * Returns the furniture choice step state.
     * @return {ImportedFurnitureWizardController.ImportedFurnitureWizardStepState}
     */
    ImportedFurnitureWizardController.prototype.getFurnitureModelStepState = function () {
        return this.furnitureModelStepState;
    };
    /**
     * Returns the furniture orientation step state.
     * @return {ImportedFurnitureWizardController.ImportedFurnitureWizardStepState}
     */
    ImportedFurnitureWizardController.prototype.getFurnitureOrientationStepState = function () {
        return this.furnitureOrientationStepState;
    };
    /**
     * Returns the furniture attributes step state.
     * @return {ImportedFurnitureWizardController.ImportedFurnitureWizardStepState}
     */
    ImportedFurnitureWizardController.prototype.getFurnitureAttributesStepState = function () {
        return this.furnitureAttributesStepState;
    };
    /**
     * Returns the furniture icon step state.
     * @return {ImportedFurnitureWizardController.ImportedFurnitureWizardStepState}
     */
    ImportedFurnitureWizardController.prototype.getFurnitureIconStepState = function () {
        return this.furnitureIconStepState;
    };
    /**
     * Returns the unique wizard view used for all steps.
     * @return {Object}
     */
    ImportedFurnitureWizardController.prototype.getStepsView = function () {
        if (this.stepsView == null) {
            this.stepsView = this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_viewFactory.createImportedFurnitureWizardStepsView(this.piece, this.modelName, this.home != null, this.__com_eteks_sweethome3d_viewcontroller_ImportedFurnitureWizardController_preferences, this);
        }
        return this.stepsView;
    };
    /**
     * Switch in the wizard view to the given <code>step</code>.
     * @param {ImportedFurnitureWizardController.Step} step
     */
    ImportedFurnitureWizardController.prototype.setStep = function (step) {
        if (step !== this.step) {
            var oldStep = this.step;
            this.step = step;
            this.propertyChangeSupport.firePropertyChange(/* name */ "STEP", oldStep, step);
        }
    };
    /**
     * Returns the current step in wizard view.
     * @return {ImportedFurnitureWizardController.Step}
     */
    ImportedFurnitureWizardController.prototype.getStep = function () {
        return this.step;
    };
    /**
     * Returns the model content of the imported piece.
     * @return {Object}
     */
    ImportedFurnitureWizardController.prototype.getModel = function () {
        return this.model;
    };
    /**
     * Sets the model content of the imported piece.
     * @param {Object} model
     */
    ImportedFurnitureWizardController.prototype.setModel = function (model) {
        if (model !== this.model) {
            var oldModel = this.model;
            this.model = model;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODEL", oldModel, model);
        }
    };
    /**
     * Returns <code>true</code> if imported piece back face should be shown.
     * @return {boolean}
     */
    ImportedFurnitureWizardController.prototype.isBackFaceShown = function () {
        return this.backFaceShown;
    };
    /**
     * Sets whether imported piece back face should be shown.
     * @param {boolean} backFaceShown
     */
    ImportedFurnitureWizardController.prototype.setBackFaceShown = function (backFaceShown) {
        if (backFaceShown !== this.backFaceShown) {
            this.backFaceShown = backFaceShown;
            this.propertyChangeSupport.firePropertyChange(/* name */ "BACK_FACE_SHOWN", !backFaceShown, backFaceShown);
        }
    };
    /**
     * Returns the model size of the imported piece.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getModelSize = function () {
        return this.modelSize;
    };
    /**
     * Sets the model size of the content of the imported piece.
     * @param {number} modelSize
     */
    ImportedFurnitureWizardController.prototype.setModelSize = function (modelSize) {
        if (modelSize !== this.modelSize) {
            var oldModelSize = this.modelSize;
            this.modelSize = modelSize;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODEL_SIZE", oldModelSize, modelSize);
        }
    };
    /**
     * Returns the pitch angle of the imported piece model.
     * @return {float[][]}
     */
    ImportedFurnitureWizardController.prototype.getModelRotation = function () {
        return this.modelRotation;
    };
    /**
     * Sets the orientation pitch angle of the imported piece model.
     * @param {float[][]} modelRotation
     */
    ImportedFurnitureWizardController.prototype.setModelRotation = function (modelRotation) {
        if (modelRotation !== this.modelRotation) {
            var oldModelRotation = this.modelRotation;
            this.modelRotation = modelRotation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODEL_ROTATION", oldModelRotation, modelRotation);
        }
    };
    /**
     * Returns the name of the imported piece.
     * @return {string}
     */
    ImportedFurnitureWizardController.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of the imported piece.
     * @param {string} name
     */
    ImportedFurnitureWizardController.prototype.setName = function (name) {
        if (name !== this.name) {
            var oldName = this.name;
            this.name = name;
            if (this.propertyChangeSupport != null) {
                this.propertyChangeSupport.firePropertyChange(/* name */ "NAME", oldName, name);
            }
        }
    };
    /**
     * Returns the creator of the imported piece.
     * @return {string}
     */
    ImportedFurnitureWizardController.prototype.getCreator = function () {
        return this.creator;
    };
    /**
     * Sets the creator of the imported piece.
     * @param {string} creator
     */
    ImportedFurnitureWizardController.prototype.setCreator = function (creator) {
        if (creator !== this.creator) {
            var oldCreator = this.creator;
            this.creator = creator;
            if (this.propertyChangeSupport != null) {
                this.propertyChangeSupport.firePropertyChange(/* name */ "CREATOR", oldCreator, creator);
            }
        }
    };
    /**
     * Returns the width.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getWidth = function () {
        return this.width;
    };
    ImportedFurnitureWizardController.prototype.setWidth$float = function (width) {
        this.setWidth$float$boolean(width, false);
    };
    ImportedFurnitureWizardController.prototype.setWidth$float$boolean = function (width, keepProportionalWidthUnchanged) {
        var adjustedWidth = Math.max(width, 0.001);
        if (adjustedWidth === width || !keepProportionalWidthUnchanged) {
            this.proportionalWidth = width;
        }
        if (adjustedWidth !== this.width) {
            var oldWidth = this.width;
            this.width = adjustedWidth;
            this.propertyChangeSupport.firePropertyChange(/* name */ "WIDTH", oldWidth, adjustedWidth);
        }
    };
    /**
     * Sets the width of the imported piece.
     * @param {number} width
     * @param {boolean} keepProportionalWidthUnchanged
     * @private
     */
    ImportedFurnitureWizardController.prototype.setWidth = function (width, keepProportionalWidthUnchanged) {
        if (((typeof width === 'number') || width === null) && ((typeof keepProportionalWidthUnchanged === 'boolean') || keepProportionalWidthUnchanged === null)) {
            return this.setWidth$float$boolean(width, keepProportionalWidthUnchanged);
        }
        else if (((typeof width === 'number') || width === null) && keepProportionalWidthUnchanged === undefined) {
            return this.setWidth$float(width);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the depth of the imported piece.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getDepth = function () {
        return this.depth;
    };
    ImportedFurnitureWizardController.prototype.setDepth$float = function (depth) {
        this.setDepth$float$boolean(depth, false);
    };
    ImportedFurnitureWizardController.prototype.setDepth$float$boolean = function (depth, keepProportionalDepthUnchanged) {
        var adjustedDepth = Math.max(depth, 0.001);
        if (adjustedDepth === depth || !keepProportionalDepthUnchanged) {
            this.proportionalDepth = depth;
        }
        if (adjustedDepth !== this.depth) {
            var oldDepth = this.depth;
            this.depth = adjustedDepth;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DEPTH", oldDepth, adjustedDepth);
        }
    };
    /**
     * Sets the depth of the imported piece.
     * @param {number} depth
     * @param {boolean} keepProportionalDepthUnchanged
     * @private
     */
    ImportedFurnitureWizardController.prototype.setDepth = function (depth, keepProportionalDepthUnchanged) {
        if (((typeof depth === 'number') || depth === null) && ((typeof keepProportionalDepthUnchanged === 'boolean') || keepProportionalDepthUnchanged === null)) {
            return this.setDepth$float$boolean(depth, keepProportionalDepthUnchanged);
        }
        else if (((typeof depth === 'number') || depth === null) && keepProportionalDepthUnchanged === undefined) {
            return this.setDepth$float(depth);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the height.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getHeight = function () {
        return this.height;
    };
    ImportedFurnitureWizardController.prototype.setHeight$float = function (height) {
        this.setHeight$float$boolean(height, false);
    };
    ImportedFurnitureWizardController.prototype.setHeight$float$boolean = function (height, keepProportionalHeightUnchanged) {
        var adjustedHeight = Math.max(height, 0.001);
        if (adjustedHeight === height || !keepProportionalHeightUnchanged) {
            this.proportionalHeight = height;
        }
        if (adjustedHeight !== this.height) {
            var oldHeight = this.height;
            this.height = adjustedHeight;
            this.propertyChangeSupport.firePropertyChange(/* name */ "HEIGHT", oldHeight, adjustedHeight);
        }
    };
    /**
     * Sets the size of the imported piece.
     * @param {number} height
     * @param {boolean} keepProportionalHeightUnchanged
     * @private
     */
    ImportedFurnitureWizardController.prototype.setHeight = function (height, keepProportionalHeightUnchanged) {
        if (((typeof height === 'number') || height === null) && ((typeof keepProportionalHeightUnchanged === 'boolean') || keepProportionalHeightUnchanged === null)) {
            return this.setHeight$float$boolean(height, keepProportionalHeightUnchanged);
        }
        else if (((typeof height === 'number') || height === null) && keepProportionalHeightUnchanged === undefined) {
            return this.setHeight$float(height);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns the elevation of the imported piece.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Sets the elevation of the imported piece.
     * @param {number} elevation
     */
    ImportedFurnitureWizardController.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns <code>true</code> if imported piece is movable.
     * @return {boolean}
     */
    ImportedFurnitureWizardController.prototype.isMovable = function () {
        return this.movable;
    };
    /**
     * Sets whether imported piece is movable.
     * @param {boolean} movable
     */
    ImportedFurnitureWizardController.prototype.setMovable = function (movable) {
        if (movable !== this.movable) {
            this.movable = movable;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MOVABLE", !movable, movable);
        }
    };
    /**
     * Returns <code>true</code> if imported piece is a door or a window.
     * @return {boolean}
     */
    ImportedFurnitureWizardController.prototype.isDoorOrWindow = function () {
        return this.doorOrWindow;
    };
    /**
     * Sets whether imported piece is a door or a window.
     * @param {boolean} doorOrWindow
     */
    ImportedFurnitureWizardController.prototype.setDoorOrWindow = function (doorOrWindow) {
        if (doorOrWindow !== this.doorOrWindow) {
            this.doorOrWindow = doorOrWindow;
            this.propertyChangeSupport.firePropertyChange(/* name */ "DOOR_OR_WINDOW", !doorOrWindow, doorOrWindow);
            if (doorOrWindow) {
                this.setStaircaseCutOutShape(null);
                this.setMovable(false);
            }
        }
    };
    /**
     * Returns the shape used to cut out upper levels at its intersection with a staircase.
     * @return {string}
     */
    ImportedFurnitureWizardController.prototype.getStaircaseCutOutShape = function () {
        return this.staircaseCutOutShape;
    };
    /**
     * Sets the shape used to cut out upper levels at its intersection with a staircase.
     * @param {string} staircaseCutOutShape
     */
    ImportedFurnitureWizardController.prototype.setStaircaseCutOutShape = function (staircaseCutOutShape) {
        if (staircaseCutOutShape !== this.staircaseCutOutShape) {
            var oldStaircaseCutOutShape = this.staircaseCutOutShape;
            this.staircaseCutOutShape = staircaseCutOutShape;
            if (this.propertyChangeSupport != null) {
                this.propertyChangeSupport.firePropertyChange(/* name */ "STAIRCASE_CUT_OUT_SHAPE", oldStaircaseCutOutShape, staircaseCutOutShape);
            }
            if (this.staircaseCutOutShape != null) {
                this.setDoorOrWindow(false);
                this.setMovable(false);
            }
        }
    };
    /**
     * Returns the color of the imported piece.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets the color of the imported piece.
     * @param {number} color
     */
    ImportedFurnitureWizardController.prototype.setColor = function (color) {
        if (color !== this.color) {
            var oldColor = this.color;
            this.color = color;
            this.propertyChangeSupport.firePropertyChange(/* name */ "COLOR", oldColor, color);
        }
    };
    /**
     * Returns the category of the imported piece.
     * @return {FurnitureCategory}
     */
    ImportedFurnitureWizardController.prototype.getCategory = function () {
        return this.category;
    };
    /**
     * Sets the category of the imported piece.
     * @param {FurnitureCategory} category
     */
    ImportedFurnitureWizardController.prototype.setCategory = function (category) {
        if (category !== this.category) {
            var oldCategory = this.category;
            this.category = category;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CATEGORY", oldCategory, category);
        }
    };
    /**
     * Returns the icon of the imported piece.
     * @return {Object}
     * @private
     */
    ImportedFurnitureWizardController.prototype.getIcon = function () {
        return this.getStepsView().getIcon();
    };
    /**
     * Returns the yaw of the piece icon.
     * @return {number}
     */
    ImportedFurnitureWizardController.prototype.getIconYaw = function () {
        return this.iconYaw;
    };
    /**
     * Sets the yaw angle of the piece icon.
     * @param {number} iconYaw
     */
    ImportedFurnitureWizardController.prototype.setIconYaw = function (iconYaw) {
        if (iconYaw !== this.iconYaw) {
            var oldIconYaw = this.iconYaw;
            this.iconYaw = iconYaw;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ICON_YAW", oldIconYaw, iconYaw);
        }
    };
    /**
     * Returns <code>true</code> if piece proportions should be kept.
     * @return {boolean}
     */
    ImportedFurnitureWizardController.prototype.isProportional = function () {
        return this.proportional;
    };
    /**
     * Sets whether piece proportions should be kept or not.
     * @param {boolean} proportional
     */
    ImportedFurnitureWizardController.prototype.setProportional = function (proportional) {
        if (proportional !== this.proportional) {
            this.proportional = proportional;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PROPORTIONAL", !proportional, proportional);
        }
    };
    /**
     * Returns <code>true</code> if piece name is valid.
     * @return {boolean}
     */
    ImportedFurnitureWizardController.prototype.isPieceOfFurnitureNameValid = function () {
        return this.name != null && this.name.length > 0;
    };
    return ImportedFurnitureWizardController;
}(WizardController));
ImportedFurnitureWizardController["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController";
ImportedFurnitureWizardController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (ImportedFurnitureWizardController) {
    var Step;
    (function (Step) {
        Step[Step["MODEL"] = 0] = "MODEL";
        Step[Step["ROTATION"] = 1] = "ROTATION";
        Step[Step["ATTRIBUTES"] = 2] = "ATTRIBUTES";
        Step[Step["ICON"] = 3] = "ICON";
    })(Step = ImportedFurnitureWizardController.Step || (ImportedFurnitureWizardController.Step = {}));
    /**
     * Undoable edit for piece importation. This class isn't anonymous to avoid
     * being bound to controller and its view.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var PieceOfFurnitureImportationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureImportationUndoableEdit, _super);
        function PieceOfFurnitureImportationUndoableEdit(home, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, piece, pieceIndex) {
            var _this = _super.call(this, preferences, ImportedFurnitureWizardController, "undoImportFurnitureName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.pieceIndex === undefined) {
                _this.pieceIndex = 0;
            }
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.piece = piece;
            _this.pieceIndex = pieceIndex;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureImportationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.deletePieceOfFurniture(this.piece);
            this.home.setSelectedItems(/* asList */ this.oldSelection.slice(0));
            this.home.setAllLevelsSelection(this.oldAllLevelsSelection);
            this.home.setBasePlanLocked(this.oldBasePlanLocked);
        };
        /**
         *
         */
        PieceOfFurnitureImportationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$int(this.piece, this.pieceIndex);
            this.home.setSelectedItems(/* asList */ [this.piece]);
            if (!this.piece.isMovable() && this.oldBasePlanLocked) {
                this.home.setBasePlanLocked(false);
            }
            this.home.setAllLevelsSelection(false);
        };
        return PieceOfFurnitureImportationUndoableEdit;
    }(LocalizedUndoableEdit));
    ImportedFurnitureWizardController.PieceOfFurnitureImportationUndoableEdit = PieceOfFurnitureImportationUndoableEdit;
    PieceOfFurnitureImportationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController.PieceOfFurnitureImportationUndoableEdit";
    PieceOfFurnitureImportationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Step state superclass. All step state share the same step view,
     * that will display a different component depending on their class name.
     * @extends WizardController.WizardControllerStepState
     * @class
     */
    var ImportedFurnitureWizardStepState = /** @class */ (function (_super) {
        __extends(ImportedFurnitureWizardStepState, _super);
        function ImportedFurnitureWizardStepState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            _this.icon = /* getResource */ "resources/importedFurnitureWizard.png";
            return _this;
        }
        /**
         *
         */
        ImportedFurnitureWizardStepState.prototype.enter = function () {
            this.__parent.setStep(this.getStep());
        };
        /**
         *
         * @return {Object}
         */
        ImportedFurnitureWizardStepState.prototype.getView = function () {
            return this.__parent.getStepsView();
        };
        /**
         *
         * @return {string}
         */
        ImportedFurnitureWizardStepState.prototype.getIcon = function () {
            return this.icon;
        };
        return ImportedFurnitureWizardStepState;
    }(WizardController.WizardControllerStepState));
    ImportedFurnitureWizardController.ImportedFurnitureWizardStepState = ImportedFurnitureWizardStepState;
    ImportedFurnitureWizardStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController.ImportedFurnitureWizardStepState";
    /**
     * Furniture model step state (first step).
     * @extends ImportedFurnitureWizardController.ImportedFurnitureWizardStepState
     * @class
     */
    var FurnitureModelStepState = /** @class */ (function (_super) {
        __extends(FurnitureModelStepState, _super);
        function FurnitureModelStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            _this.modelChangeListener = new FurnitureModelStepState.FurnitureModelStepState$0(_this);
            return _this;
        }
        /**
         *
         */
        FurnitureModelStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setFirstStep(true);
            this.setNextStepEnabled(this.__parent.getModel() != null);
            this.__parent.addPropertyChangeListener("MODEL", this.modelChangeListener);
        };
        /**
         *
         * @return {ImportedFurnitureWizardController.Step}
         */
        FurnitureModelStepState.prototype.getStep = function () {
            return ImportedFurnitureWizardController.Step.MODEL;
        };
        /**
         *
         */
        FurnitureModelStepState.prototype.goToNextStep = function () {
            this.__parent.setStepState(this.__parent.getFurnitureOrientationStepState());
        };
        /**
         *
         */
        FurnitureModelStepState.prototype.exit = function () {
            this.__parent.removePropertyChangeListener("MODEL", this.modelChangeListener);
        };
        return FurnitureModelStepState;
    }(ImportedFurnitureWizardController.ImportedFurnitureWizardStepState));
    ImportedFurnitureWizardController.FurnitureModelStepState = FurnitureModelStepState;
    FurnitureModelStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController.FurnitureModelStepState";
    (function (FurnitureModelStepState) {
        var FurnitureModelStepState$0 = /** @class */ (function () {
            function FurnitureModelStepState$0(__parent) {
                this.__parent = __parent;
            }
            FurnitureModelStepState$0.prototype.propertyChange = function (ev) {
                this.__parent.setNextStepEnabled(this.__parent.__parent.getModel() != null);
            };
            return FurnitureModelStepState$0;
        }());
        FurnitureModelStepState.FurnitureModelStepState$0 = FurnitureModelStepState$0;
    })(FurnitureModelStepState = ImportedFurnitureWizardController.FurnitureModelStepState || (ImportedFurnitureWizardController.FurnitureModelStepState = {}));
    /**
     * Furniture orientation step state (second step).
     * @extends ImportedFurnitureWizardController.ImportedFurnitureWizardStepState
     * @class
     */
    var FurnitureOrientationStepState = /** @class */ (function (_super) {
        __extends(FurnitureOrientationStepState, _super);
        function FurnitureOrientationStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         */
        FurnitureOrientationStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setNextStepEnabled(true);
        };
        /**
         *
         * @return {ImportedFurnitureWizardController.Step}
         */
        FurnitureOrientationStepState.prototype.getStep = function () {
            return ImportedFurnitureWizardController.Step.ROTATION;
        };
        /**
         *
         */
        FurnitureOrientationStepState.prototype.goBackToPreviousStep = function () {
            this.__parent.setStepState(this.__parent.getFurnitureModelStepState());
        };
        /**
         *
         */
        FurnitureOrientationStepState.prototype.goToNextStep = function () {
            this.__parent.setStepState(this.__parent.getFurnitureAttributesStepState());
        };
        return FurnitureOrientationStepState;
    }(ImportedFurnitureWizardController.ImportedFurnitureWizardStepState));
    ImportedFurnitureWizardController.FurnitureOrientationStepState = FurnitureOrientationStepState;
    FurnitureOrientationStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController.FurnitureOrientationStepState";
    /**
     * Furniture attributes step state (third step).
     * @extends ImportedFurnitureWizardController.ImportedFurnitureWizardStepState
     * @class
     */
    var FurnitureAttributesStepState = /** @class */ (function (_super) {
        __extends(FurnitureAttributesStepState, _super);
        function FurnitureAttributesStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            _this.widthChangeListener = new FurnitureAttributesStepState.FurnitureAttributesStepState$0(_this);
            _this.depthChangeListener = new FurnitureAttributesStepState.FurnitureAttributesStepState$1(_this);
            _this.heightChangeListener = new FurnitureAttributesStepState.FurnitureAttributesStepState$2(_this);
            _this.nameAndCategoryChangeListener = new FurnitureAttributesStepState.FurnitureAttributesStepState$3(_this);
            return _this;
        }
        /**
         *
         */
        FurnitureAttributesStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.__parent.addPropertyChangeListener("WIDTH", this.widthChangeListener);
            this.__parent.addPropertyChangeListener("DEPTH", this.depthChangeListener);
            this.__parent.addPropertyChangeListener("HEIGHT", this.heightChangeListener);
            this.__parent.addPropertyChangeListener("NAME", this.nameAndCategoryChangeListener);
            this.__parent.addPropertyChangeListener("CATEGORY", this.nameAndCategoryChangeListener);
            this.checkPieceOfFurnitureNameInCategory();
        };
        FurnitureAttributesStepState.prototype.checkPieceOfFurnitureNameInCategory = function () {
            this.setNextStepEnabled(this.__parent.isPieceOfFurnitureNameValid());
        };
        /**
         *
         * @return {ImportedFurnitureWizardController.Step}
         */
        FurnitureAttributesStepState.prototype.getStep = function () {
            return ImportedFurnitureWizardController.Step.ATTRIBUTES;
        };
        /**
         *
         */
        FurnitureAttributesStepState.prototype.goBackToPreviousStep = function () {
            this.__parent.setStepState(this.__parent.getFurnitureOrientationStepState());
        };
        /**
         *
         */
        FurnitureAttributesStepState.prototype.goToNextStep = function () {
            this.__parent.setStepState(this.__parent.getFurnitureIconStepState());
        };
        /**
         *
         */
        FurnitureAttributesStepState.prototype.exit = function () {
            this.__parent.removePropertyChangeListener("WIDTH", this.widthChangeListener);
            this.__parent.removePropertyChangeListener("DEPTH", this.depthChangeListener);
            this.__parent.removePropertyChangeListener("HEIGHT", this.heightChangeListener);
            this.__parent.removePropertyChangeListener("NAME", this.nameAndCategoryChangeListener);
            this.__parent.removePropertyChangeListener("CATEGORY", this.nameAndCategoryChangeListener);
        };
        return FurnitureAttributesStepState;
    }(ImportedFurnitureWizardController.ImportedFurnitureWizardStepState));
    ImportedFurnitureWizardController.FurnitureAttributesStepState = FurnitureAttributesStepState;
    FurnitureAttributesStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController.FurnitureAttributesStepState";
    (function (FurnitureAttributesStepState) {
        var FurnitureAttributesStepState$0 = /** @class */ (function () {
            function FurnitureAttributesStepState$0(__parent) {
                this.__parent = __parent;
            }
            FurnitureAttributesStepState$0.prototype.propertyChange = function (ev) {
                if (this.__parent.__parent.isProportional()) {
                    this.__parent.__parent.removePropertyChangeListener("DEPTH", this.__parent.depthChangeListener);
                    this.__parent.__parent.removePropertyChangeListener("HEIGHT", this.__parent.heightChangeListener);
                    var ratio = ev.getNewValue() / ev.getOldValue();
                    this.__parent.__parent.setDepth(this.__parent.__parent.proportionalDepth * ratio, true);
                    this.__parent.__parent.setHeight(this.__parent.__parent.proportionalHeight * ratio, true);
                    this.__parent.__parent.addPropertyChangeListener("DEPTH", this.__parent.depthChangeListener);
                    this.__parent.__parent.addPropertyChangeListener("HEIGHT", this.__parent.heightChangeListener);
                }
            };
            return FurnitureAttributesStepState$0;
        }());
        FurnitureAttributesStepState.FurnitureAttributesStepState$0 = FurnitureAttributesStepState$0;
        var FurnitureAttributesStepState$1 = /** @class */ (function () {
            function FurnitureAttributesStepState$1(__parent) {
                this.__parent = __parent;
            }
            FurnitureAttributesStepState$1.prototype.propertyChange = function (ev) {
                if (this.__parent.__parent.isProportional()) {
                    this.__parent.__parent.removePropertyChangeListener("WIDTH", this.__parent.widthChangeListener);
                    this.__parent.__parent.removePropertyChangeListener("HEIGHT", this.__parent.heightChangeListener);
                    var ratio = ev.getNewValue() / ev.getOldValue();
                    this.__parent.__parent.setWidth(this.__parent.__parent.proportionalWidth * ratio, true);
                    this.__parent.__parent.setHeight(this.__parent.__parent.proportionalHeight * ratio, true);
                    this.__parent.__parent.addPropertyChangeListener("WIDTH", this.__parent.widthChangeListener);
                    this.__parent.__parent.addPropertyChangeListener("HEIGHT", this.__parent.heightChangeListener);
                }
            };
            return FurnitureAttributesStepState$1;
        }());
        FurnitureAttributesStepState.FurnitureAttributesStepState$1 = FurnitureAttributesStepState$1;
        var FurnitureAttributesStepState$2 = /** @class */ (function () {
            function FurnitureAttributesStepState$2(__parent) {
                this.__parent = __parent;
            }
            FurnitureAttributesStepState$2.prototype.propertyChange = function (ev) {
                if (this.__parent.__parent.isProportional()) {
                    this.__parent.__parent.removePropertyChangeListener("WIDTH", this.__parent.widthChangeListener);
                    this.__parent.__parent.removePropertyChangeListener("DEPTH", this.__parent.depthChangeListener);
                    var ratio = ev.getNewValue() / ev.getOldValue();
                    this.__parent.__parent.setWidth(this.__parent.__parent.proportionalWidth * ratio, true);
                    this.__parent.__parent.setDepth(this.__parent.__parent.proportionalDepth * ratio, true);
                    this.__parent.__parent.addPropertyChangeListener("WIDTH", this.__parent.widthChangeListener);
                    this.__parent.__parent.addPropertyChangeListener("DEPTH", this.__parent.depthChangeListener);
                }
            };
            return FurnitureAttributesStepState$2;
        }());
        FurnitureAttributesStepState.FurnitureAttributesStepState$2 = FurnitureAttributesStepState$2;
        var FurnitureAttributesStepState$3 = /** @class */ (function () {
            function FurnitureAttributesStepState$3(__parent) {
                this.__parent = __parent;
            }
            FurnitureAttributesStepState$3.prototype.propertyChange = function (ev) {
                this.__parent.checkPieceOfFurnitureNameInCategory();
            };
            return FurnitureAttributesStepState$3;
        }());
        FurnitureAttributesStepState.FurnitureAttributesStepState$3 = FurnitureAttributesStepState$3;
    })(FurnitureAttributesStepState = ImportedFurnitureWizardController.FurnitureAttributesStepState || (ImportedFurnitureWizardController.FurnitureAttributesStepState = {}));
    /**
     * Furniture icon step state (last step).
     * @extends ImportedFurnitureWizardController.ImportedFurnitureWizardStepState
     * @class
     */
    var FurnitureIconStepState = /** @class */ (function (_super) {
        __extends(FurnitureIconStepState, _super);
        function FurnitureIconStepState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         */
        FurnitureIconStepState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.setLastStep(true);
            this.setNextStepEnabled(true);
        };
        /**
         *
         * @return {ImportedFurnitureWizardController.Step}
         */
        FurnitureIconStepState.prototype.getStep = function () {
            return ImportedFurnitureWizardController.Step.ICON;
        };
        /**
         *
         */
        FurnitureIconStepState.prototype.goBackToPreviousStep = function () {
            this.__parent.setStepState(this.__parent.getFurnitureAttributesStepState());
        };
        return FurnitureIconStepState;
    }(ImportedFurnitureWizardController.ImportedFurnitureWizardStepState));
    ImportedFurnitureWizardController.FurnitureIconStepState = FurnitureIconStepState;
    FurnitureIconStepState["__class"] = "com.eteks.sweethome3d.viewcontroller.ImportedFurnitureWizardController.FurnitureIconStepState";
})(ImportedFurnitureWizardController || (ImportedFurnitureWizardController = {}));
/**
 * The controller of the photo creation view.
 * @author Emmanuel Puybaret
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} view3D
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 * @extends AbstractPhotoController
 * @ignore
 */
var PhotoController = /** @class */ (function (_super) {
    __extends(PhotoController, _super);
    function PhotoController(home, preferences, view3D, viewFactory, contentManager) {
        var _this = _super.call(this, home, preferences, view3D, contentManager) || this;
        if (_this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home = null;
        }
        if (_this.preferences === undefined) {
            _this.preferences = null;
        }
        if (_this.viewFactory === undefined) {
            _this.viewFactory = null;
        }
        if (_this.cameraChangeListener === undefined) {
            _this.cameraChangeListener = null;
        }
        if (_this.photoView === undefined) {
            _this.photoView = null;
        }
        if (_this.time === undefined) {
            _this.time = 0;
        }
        if (_this.lens === undefined) {
            _this.lens = null;
        }
        _this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home = home;
        _this.preferences = preferences;
        _this.viewFactory = viewFactory;
        /* Use propertyChangeSupport defined in super class */ ;
        _this.cameraChangeListener = new PhotoController.CameraChangeListener(_this);
        home.getCamera().addPropertyChangeListener(_this.cameraChangeListener);
        home.addPropertyChangeListener("CAMERA", new PhotoController.HomeCameraChangeListener(_this));
        _this.updateProperties();
        return _this;
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    PhotoController.prototype.getView = function () {
        if (this.photoView == null) {
            this.photoView = this.viewFactory.createPhotoView(this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home, this.preferences, this);
        }
        return this.photoView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    PhotoController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Updates edited properties from the photo creation preferences.
     */
    PhotoController.prototype.updateProperties = function () {
        if (this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home != null) {
            _super.prototype.updateProperties.call(this);
            this.setTime(this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home.getCamera().getTime());
            this.setLens(this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home.getCamera().getLens());
        }
    };
    /**
     * Sets the edited time in UTC time zone.
     * @param {number} time
     */
    PhotoController.prototype.setTime = function (time) {
        if (this.time !== time) {
            var oldTime = this.time;
            this.time = time;
            this.propertyChangeSupport.firePropertyChange(/* name */ "TIME", oldTime, time);
            var homeCamera = this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home.getCamera();
            homeCamera.removePropertyChangeListener(this.cameraChangeListener);
            homeCamera.setTime(time);
            homeCamera.addPropertyChangeListener(this.cameraChangeListener);
        }
    };
    /**
     * Returns the edited time in UTC time zone.
     * @return {number}
     */
    PhotoController.prototype.getTime = function () {
        return this.time;
    };
    /**
     * Sets the edited camera lens.
     * @param {Camera.Lens} lens
     */
    PhotoController.prototype.setLens = function (lens) {
        if (this.lens !== lens) {
            var oldLens = this.lens;
            this.lens = lens;
            this.propertyChangeSupport.firePropertyChange(/* name */ "LENS", oldLens, lens);
            if (lens === Camera.Lens.SPHERICAL) {
                this.setAspectRatio(AspectRatio.RATIO_2_1);
            }
            else if (lens === Camera.Lens.FISHEYE) {
                this.setAspectRatio(AspectRatio.SQUARE_RATIO);
            }
            this.__com_eteks_sweethome3d_viewcontroller_PhotoController_home.getCamera().setLens(this.lens);
        }
    };
    /**
     * Returns the edited camera lens.
     * @return {Camera.Lens}
     */
    PhotoController.prototype.getLens = function () {
        return this.lens;
    };
    return PhotoController;
}(AbstractPhotoController));
PhotoController["__class"] = "com.eteks.sweethome3d.viewcontroller.PhotoController";
PhotoController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (PhotoController) {
    /**
     * Home camera listener that updates properties when home camera changes. This listener is bound to this controller
     * with a weak reference to avoid strong link between home and this controller.
     * @param {PhotoController} photoController
     * @class
     */
    var HomeCameraChangeListener = /** @class */ (function () {
        function HomeCameraChangeListener(photoController) {
            if (this.photoController === undefined) {
                this.photoController = null;
            }
            this.photoController = (photoController);
        }
        HomeCameraChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.photoController;
            if (controller == null) {
                ev.getSource().removePropertyChangeListener("CAMERA", this);
            }
            else {
                ev.getOldValue().removePropertyChangeListener(controller.cameraChangeListener);
                controller.updateProperties();
                ev.getNewValue().addPropertyChangeListener(controller.cameraChangeListener);
            }
        };
        return HomeCameraChangeListener;
    }());
    PhotoController.HomeCameraChangeListener = HomeCameraChangeListener;
    HomeCameraChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.PhotoController.HomeCameraChangeListener";
    /**
     * Camera listener that updates properties when camera changes. This listener is bound to this controller
     * with a weak reference to avoid strong link between home and this controller.
     * @param {AbstractPhotoController} photoController
     * @class
     */
    var CameraChangeListener = /** @class */ (function () {
        function CameraChangeListener(photoController) {
            if (this.photoController === undefined) {
                this.photoController = null;
            }
            this.photoController = (photoController);
        }
        CameraChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.photoController;
            if (controller == null) {
                ev.getSource().removePropertyChangeListener(this);
            }
            else {
                controller.updateProperties();
            }
        };
        return CameraChangeListener;
    }());
    PhotoController.CameraChangeListener = CameraChangeListener;
    CameraChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.PhotoController.CameraChangeListener";
})(PhotoController || (PhotoController = {}));
/**
 * The controller of multiple photos creation view.
 * @author Emmanuel Puybaret
 * @param {Home} home
 * @param {UserPreferences} preferences
 * @param {Object} view3D
 * @param {Object} viewFactory
 * @param {Object} contentManager
 * @class
 * @extends AbstractPhotoController
 * @ignore
 */
var PhotosController = /** @class */ (function (_super) {
    __extends(PhotosController, _super);
    function PhotosController(home, preferences, view3D, viewFactory, contentManager) {
        var _this = _super.call(this, home, preferences, view3D, contentManager) || this;
        if (_this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home = null;
        }
        if (_this.preferences === undefined) {
            _this.preferences = null;
        }
        if (_this.viewFactory === undefined) {
            _this.viewFactory = null;
        }
        if (_this.photoView === undefined) {
            _this.photoView = null;
        }
        if (_this.cameras === undefined) {
            _this.cameras = null;
        }
        if (_this.selectedCameras === undefined) {
            _this.selectedCameras = null;
        }
        if (_this.fileFormat === undefined) {
            _this.fileFormat = null;
        }
        if (_this.fileCompressionQuality === undefined) {
            _this.fileCompressionQuality = null;
        }
        _this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home = home;
        _this.preferences = preferences;
        _this.viewFactory = viewFactory;
        /* Use propertyChangeSupport defined in super class */ ;
        _this.cameras = /* emptyList */ [];
        _this.selectedCameras = /* emptyList */ [];
        home.addPropertyChangeListener("STORED_CAMERAS", new PhotosController.HomeStoredCamerasChangeListener(_this));
        _this.updateProperties();
        return _this;
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    PhotosController.prototype.getView = function () {
        if (this.photoView == null) {
            this.photoView = this.viewFactory.createPhotosView(this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home, this.preferences, this);
        }
        return this.photoView;
    };
    /**
     * Displays the view controlled by this controller.
     * @param {Object} parentView
     */
    PhotosController.prototype.displayView = function (parentView) {
        this.getView().displayView(parentView);
    };
    /**
     * Updates edited properties from the photo creation preferences.
     */
    PhotosController.prototype.updateProperties = function () {
        if (this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home != null) {
            _super.prototype.updateProperties.call(this);
            this.setCameras(this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home.getStoredCameras());
            this.setSelectedCameras(this.__com_eteks_sweethome3d_viewcontroller_PhotosController_home.getStoredCameras());
        }
    };
    /**
     * Returns the cameras available to create photos.
     * @return {Camera[]}
     */
    PhotosController.prototype.getCameras = function () {
        return this.cameras;
    };
    /**
     * Sets the cameras available to create photos.
     * @param {Camera[]} cameras
     * @private
     */
    PhotosController.prototype.setCameras = function (cameras) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(cameras, this.cameras)) {
            var oldCameras = this.cameras;
            this.cameras = (cameras.slice(0));
            this.propertyChangeSupport.firePropertyChange(/* name */ "CAMERAS", /* unmodifiableList */ oldCameras.slice(0), /* unmodifiableList */ cameras.slice(0));
        }
    };
    /**
     * Returns the selected cameras to create photos.
     * @return {Camera[]}
     */
    PhotosController.prototype.getSelectedCameras = function () {
        return this.selectedCameras;
    };
    /**
     * Sets the selected cameras to create photos.
     * @param {Camera[]} selectedCameras
     */
    PhotosController.prototype.setSelectedCameras = function (selectedCameras) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(selectedCameras, this.selectedCameras)) {
            var oldSelectedCameras = this.selectedCameras;
            this.selectedCameras = (selectedCameras.slice(0));
            this.propertyChangeSupport.firePropertyChange(/* name */ "SELECTED_CAMERAS", /* unmodifiableList */ oldSelectedCameras.slice(0), /* unmodifiableList */ selectedCameras.slice(0));
        }
    };
    /**
     * Returns the format used to save image files.
     * @return {string}
     */
    PhotosController.prototype.getFileFormat = function () {
        return this.fileFormat;
    };
    /**
     * Sets the format used to save image files.
     * @param {string} fileFormat
     */
    PhotosController.prototype.setFileFormat = function (fileFormat) {
        if (fileFormat !== this.fileFormat) {
            var oldFileFormat = this.fileFormat;
            this.fileFormat = fileFormat;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FILE_FORMAT", oldFileFormat, fileFormat);
        }
    };
    /**
     * Returns the compression quality used to save image files.
     * @return {number}
     */
    PhotosController.prototype.getFileCompressionQuality = function () {
        return this.fileCompressionQuality;
    };
    /**
     * Sets the compression quality used to save image files.
     * @param {number} fileCompressionQuality
     */
    PhotosController.prototype.setFileCompressionQuality = function (fileCompressionQuality) {
        if (fileCompressionQuality !== this.fileCompressionQuality) {
            var oldFileCompressionQuality = this.fileCompressionQuality;
            this.fileCompressionQuality = fileCompressionQuality;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FILE_COMPRESSION_QUALITY", oldFileCompressionQuality, fileCompressionQuality);
        }
    };
    return PhotosController;
}(AbstractPhotoController));
PhotosController["__class"] = "com.eteks.sweethome3d.viewcontroller.PhotosController";
PhotosController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (PhotosController) {
    /**
     * Home cameras listener that updates properties when home cameras change. This listener is bound to this controller
     * with a weak reference to avoid strong link between home and this controller.
     * @param {PhotosController} photoController
     * @class
     */
    var HomeStoredCamerasChangeListener = /** @class */ (function () {
        function HomeStoredCamerasChangeListener(photoController) {
            if (this.photosController === undefined) {
                this.photosController = null;
            }
            this.photosController = (photoController);
        }
        HomeStoredCamerasChangeListener.prototype.propertyChange = function (ev) {
            var controller = this.photosController;
            if (controller == null) {
                ev.getSource().removePropertyChangeListener("STORED_CAMERAS", this);
            }
            else {
                controller.updateProperties();
            }
        };
        return HomeStoredCamerasChangeListener;
    }());
    PhotosController.HomeStoredCamerasChangeListener = HomeStoredCamerasChangeListener;
    HomeStoredCamerasChangeListener["__class"] = "com.eteks.sweethome3d.viewcontroller.PhotosController.HomeStoredCamerasChangeListener";
})(PhotosController || (PhotosController = {}));
/**
 * Creates a compass drawn at the given point.
 * North direction is set to zero, time zone to default
 * and the latitude and the longitude of this new compass is equal
 * to the geographic point matching the default time zone.
 * @param {string} id
 * @param {number} x
 * @param {number} y
 * @param {number} diameter
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Compass = /** @class */ (function (_super) {
    __extends(Compass, _super);
    function Compass(id, x, y, diameter) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof diameter === 'number') || diameter === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.diameter === undefined) {
                _this.diameter = 0;
            }
            if (_this.visible === undefined) {
                _this.visible = false;
            }
            if (_this.northDirection === undefined) {
                _this.northDirection = 0;
            }
            if (_this.latitude === undefined) {
                _this.latitude = 0;
            }
            if (_this.longitude === undefined) {
                _this.longitude = 0;
            }
            if (_this.timeZone === undefined) {
                _this.timeZone = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.dateCache === undefined) {
                _this.dateCache = null;
            }
            if (_this.sunElevationCache === undefined) {
                _this.sunElevationCache = 0;
            }
            if (_this.sunAzimuthCache === undefined) {
                _this.sunAzimuthCache = 0;
            }
            _this.x = x;
            _this.y = y;
            _this.diameter = diameter;
            _this.visible = true;
            _this.timeZone = /* getDefault */ "UTC";
            _this.initGeographicPoint();
        }
        else if (((typeof id === 'number') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && diameter === undefined) {
            var __args = arguments;
            var x_1 = __args[0];
            var y_1 = __args[1];
            var diameter_2 = __args[2];
            {
                var __args_56 = arguments;
                var id_5 = HomeObject.createId("compass");
                _this = _super.call(this, id_5) || this;
                if (_this.x === undefined) {
                    _this.x = 0;
                }
                if (_this.y === undefined) {
                    _this.y = 0;
                }
                if (_this.diameter === undefined) {
                    _this.diameter = 0;
                }
                if (_this.visible === undefined) {
                    _this.visible = false;
                }
                if (_this.northDirection === undefined) {
                    _this.northDirection = 0;
                }
                if (_this.latitude === undefined) {
                    _this.latitude = 0;
                }
                if (_this.longitude === undefined) {
                    _this.longitude = 0;
                }
                if (_this.timeZone === undefined) {
                    _this.timeZone = null;
                }
                if (_this.pointsCache === undefined) {
                    _this.pointsCache = null;
                }
                if (_this.dateCache === undefined) {
                    _this.dateCache = null;
                }
                if (_this.sunElevationCache === undefined) {
                    _this.sunElevationCache = 0;
                }
                if (_this.sunAzimuthCache === undefined) {
                    _this.sunAzimuthCache = 0;
                }
                _this.x = x_1;
                _this.y = y_1;
                _this.diameter = diameter_2;
                _this.visible = true;
                _this.timeZone = /* getDefault */ "UTC";
                _this.initGeographicPoint();
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.diameter === undefined) {
                _this.diameter = 0;
            }
            if (_this.visible === undefined) {
                _this.visible = false;
            }
            if (_this.northDirection === undefined) {
                _this.northDirection = 0;
            }
            if (_this.latitude === undefined) {
                _this.latitude = 0;
            }
            if (_this.longitude === undefined) {
                _this.longitude = 0;
            }
            if (_this.timeZone === undefined) {
                _this.timeZone = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.dateCache === undefined) {
                _this.dateCache = null;
            }
            if (_this.sunElevationCache === undefined) {
                _this.sunElevationCache = 0;
            }
            if (_this.sunAzimuthCache === undefined) {
                _this.sunAzimuthCache = 0;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the abscissa of the center of this compass.
     * @return {number}
     */
    Compass.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the abscissa of the center of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @param {number} x
     */
    Compass.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.pointsCache = null;
            this.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the ordinate of the center of this compass.
     * @return {number}
     */
    Compass.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the ordinate of the center of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @param {number} y
     */
    Compass.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.pointsCache = null;
            this.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the diameter of this compass.
     * @return {number}
     */
    Compass.prototype.getDiameter = function () {
        return this.diameter;
    };
    /**
     * Sets the diameter of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @param {number} diameter
     */
    Compass.prototype.setDiameter = function (diameter) {
        if (diameter !== this.diameter) {
            var oldDiameter = this.diameter;
            this.diameter = diameter;
            this.pointsCache = null;
            this.firePropertyChange(/* name */ "DIAMETER", oldDiameter, diameter);
        }
    };
    /**
     * Returns <code>true</code> if this compass is visible.
     * @return {boolean}
     */
    Compass.prototype.isVisible = function () {
        return this.visible;
    };
    /**
     * Sets whether this compass is visible or not. Once this compass is updated,
     * listeners added to this piece will receive a change notification.
     * @param {boolean} visible
     */
    Compass.prototype.setVisible = function (visible) {
        if (visible !== this.visible) {
            this.visible = visible;
            this.firePropertyChange(/* name */ "VISIBLE", !visible, visible);
        }
    };
    /**
     * Returns the North direction angle of this compass in radians.
     * @return {number}
     */
    Compass.prototype.getNorthDirection = function () {
        return this.northDirection;
    };
    /**
     * Sets the North direction angle of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @param {number} northDirection
     */
    Compass.prototype.setNorthDirection = function (northDirection) {
        if (northDirection !== this.northDirection) {
            var oldNorthDirection = this.northDirection;
            this.northDirection = northDirection;
            this.pointsCache = null;
            this.firePropertyChange(/* name */ "NORTH_DIRECTION", oldNorthDirection, northDirection);
        }
    };
    /**
     * Returns the latitude of this compass in radians.
     * @return {number}
     */
    Compass.prototype.getLatitude = function () {
        return this.latitude;
    };
    /**
     * Sets the latitude of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @param {number} latitude
     */
    Compass.prototype.setLatitude = function (latitude) {
        if (latitude !== this.latitude) {
            var oldLatitude = this.latitude;
            this.latitude = latitude;
            this.dateCache = null;
            this.firePropertyChange(/* name */ "LATITUDE", oldLatitude, latitude);
        }
    };
    /**
     * Returns the longitude of this compass in radians.
     * @return {number}
     */
    Compass.prototype.getLongitude = function () {
        return this.longitude;
    };
    /**
     * Sets the longitude of the center of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @param {number} longitude
     */
    Compass.prototype.setLongitude = function (longitude) {
        if (longitude !== this.longitude) {
            var oldLongitude = this.longitude;
            this.longitude = longitude;
            this.dateCache = null;
            this.firePropertyChange(/* name */ "LONGITUDE", oldLongitude, longitude);
        }
    };
    /**
     * Returns the time zone identifier of this compass.
     * @see java.util.TimeZone
     * @return {string}
     */
    Compass.prototype.getTimeZone = function () {
        return /* getID */ this.timeZone;
    };
    /**
     * Sets the time zone identifier of this compass. Once this compass is updated,
     * listeners added to this compass will receive a change notification.
     * @throws IllegalArgumentException if <code>timeZone</code> is <code>null</code> or contains an unknown identifier.
     * @see java.util.TimeZone
     * @param {string} timeZone
     */
    Compass.prototype.setTimeZone = function (timeZone) {
        if (!( /* getID */this.timeZone === timeZone)) {
            if (timeZone == null) {
                throw new IllegalArgumentException("Time zone ID can\'t be null");
            }
            var oldTimeZone = this.timeZone;
            this.timeZone = /* getTimeZone */ timeZone;
            this.dateCache = null;
            this.firePropertyChange(/* name */ "TIME_ZONE", oldTimeZone, timeZone);
        }
    };
    /**
     * Returns the corner points of the square that contains compass disc.
     * @return {float[][]}
     */
    Compass.prototype.getPoints = function () {
        if (this.pointsCache == null) {
            var pieceRectangle = new java.awt.geom.Rectangle2D.Float(this.getX() - this.getDiameter() / 2, this.getY() - this.getDiameter() / 2, this.getDiameter(), this.getDiameter());
            var rotation = java.awt.geom.AffineTransform.getRotateInstance(this.getNorthDirection(), this.getX(), this.getY());
            this.pointsCache = (function (dims) { var allocate = function (dims) { if (dims.length === 0) {
                return 0;
            }
            else {
                var array = [];
                for (var i = 0; i < dims[0]; i++) {
                    array.push(allocate(dims.slice(1)));
                }
                return array;
            } }; return allocate(dims); })([4, 2]);
            var it = pieceRectangle.getPathIterator(rotation);
            for (var i = 0; i < this.pointsCache.length; i++) {
                {
                    it.currentSegment(this.pointsCache[i]);
                    it.next();
                }
                ;
            }
        }
        return [/* clone */ this.pointsCache[0].slice(0), /* clone */ this.pointsCache[1].slice(0), /* clone */ this.pointsCache[2].slice(0), /* clone */ this.pointsCache[3].slice(0)];
    };
    /**
     * Returns <code>true</code> if the disc of this compass intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    Compass.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return new java.awt.geom.Ellipse2D.Float(this.getX() - this.getDiameter() / 2, this.getY() - this.getDiameter() / 2, this.getDiameter(), this.getDiameter()).intersects(rectangle);
    };
    /**
     * Returns <code>true</code> if the disc of this compass contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Compass.prototype.containsPoint = function (x, y, margin) {
        var shape = new java.awt.geom.Ellipse2D.Float(this.getX() - this.getDiameter() / 2, this.getY() - this.getDiameter() / 2, this.getDiameter(), this.getDiameter());
        if (margin === 0) {
            return shape.contains(x, y);
        }
        else {
            return shape.intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Moves this compass of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    Compass.prototype.move = function (dx, dy) {
        this.setX(this.getX() + dx);
        this.setY(this.getY() + dy);
    };
    /**
     * Returns a clone of this compass.
     * @return {Compass}
     */
    Compass.prototype.clone = function () {
        var _this = this;
        return (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(this);
    };
    Compass.prototype.computeJulianDay = function (year, month, day, hour, minute, second, timeZone, savingTime) {
        var dayPart = day + hour / 24.0 + minute / 1440.0 + second / 86400.0;
        if (month === 1 || month === 2) {
            year -= 1;
            month += 12;
        }
        var a = (year / 100 | 0);
        var b = 2 - a + (a / 4 | 0);
        var julianDay = ((365.25 * (year + 4716.0)) | 0) + (((30.6001 * (month + 1))) | 0) + dayPart + b - 1524.5;
        julianDay -= (timeZone + savingTime) / 24.0;
        julianDay -= 2451545.0;
        return julianDay;
    };
    Compass.prototype.toSiderealTime = function (julianDay) {
        var centuries = julianDay / 36525.0;
        var siderealTime = (24110.54841 + (8640184.812866 * centuries) + (0.093104 * Math.pow(centuries, 2.0)) - (6.2E-6 * Math.pow(centuries, 3.0))) / 3600.0;
        return ((siderealTime / 24.0) - ((siderealTime / 24.0) | 0)) * 24.0;
    };
    /**
     * Inits the latitudeInDegrees and longitudeInDegrees where this compass is located from the id of the default time zone.
     * @private
     */
    Compass.prototype.initGeographicPoint = function () {
        var timeZoneGeographicPoints;
        if (Compass.timeZoneGeographicPointsReference != null) {
            timeZoneGeographicPoints = /* get */ Compass.timeZoneGeographicPointsReference;
        }
        else {
            timeZoneGeographicPoints = null;
        }
        if (timeZoneGeographicPoints == null) {
            timeZoneGeographicPoints = ({});
            var apia = new Compass.GeographicPoint(-13.833333, -171.73334);
            /* put */ (timeZoneGeographicPoints["Etc/GMT+11"] = apia);
            /* put */ (timeZoneGeographicPoints["Pacific/Apia"] = apia);
            /* put */ (timeZoneGeographicPoints["Pacific/Midway"] = new Compass.GeographicPoint(28.2, -177.35));
            /* put */ (timeZoneGeographicPoints["Pacific/Niue"] = new Compass.GeographicPoint(-19.055, -169.92));
            /* put */ (timeZoneGeographicPoints["Pacific/Pago_Pago"] = new Compass.GeographicPoint(-14.278055, -170.7025));
            /* put */ (timeZoneGeographicPoints["Pacific/Samoa"] = apia);
            /* put */ (timeZoneGeographicPoints["US/Samoa"] = apia);
            /* put */ (timeZoneGeographicPoints["America/Adak"] = new Compass.GeographicPoint(51.88, -176.65805));
            /* put */ (timeZoneGeographicPoints["America/Atka"] = new Compass.GeographicPoint(52.19611, -174.20056));
            var honolulu = new Compass.GeographicPoint(21.306944, -157.85834);
            /* put */ (timeZoneGeographicPoints["Etc/GMT+10"] = honolulu);
            /* put */ (timeZoneGeographicPoints["Pacific/Fakaofo"] = new Compass.GeographicPoint(-9.3653, -171.215));
            /* put */ (timeZoneGeographicPoints["Pacific/Honolulu"] = honolulu);
            /* put */ (timeZoneGeographicPoints["Pacific/Johnston"] = new Compass.GeographicPoint(16.75, -169.517));
            /* put */ (timeZoneGeographicPoints["Pacific/Rarotonga"] = new Compass.GeographicPoint(-21.233, -159.783));
            /* put */ (timeZoneGeographicPoints["Pacific/Tahiti"] = new Compass.GeographicPoint(-17.533333, -149.56667));
            /* put */ (timeZoneGeographicPoints["SystemV/HST10"] = honolulu);
            /* put */ (timeZoneGeographicPoints["US/Aleutian"] = new Compass.GeographicPoint(54.817, 164.033));
            /* put */ (timeZoneGeographicPoints["US/Hawaii"] = honolulu);
            /* put */ (timeZoneGeographicPoints["Pacific/Marquesas"] = new Compass.GeographicPoint(-9.45, -139.38));
            var anchorage = new Compass.GeographicPoint(61.218056, -149.90028);
            /* put */ (timeZoneGeographicPoints["America/Anchorage"] = anchorage);
            /* put */ (timeZoneGeographicPoints["America/Juneau"] = new Compass.GeographicPoint(58.301945, -134.41972));
            /* put */ (timeZoneGeographicPoints["America/Nome"] = new Compass.GeographicPoint(64.501114, -165.40639));
            /* put */ (timeZoneGeographicPoints["America/Yakutat"] = new Compass.GeographicPoint(59.546944, -139.72722));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+9"] = anchorage);
            /* put */ (timeZoneGeographicPoints["Pacific/Gambier"] = new Compass.GeographicPoint(-23.1178, -134.97));
            /* put */ (timeZoneGeographicPoints["SystemV/YST9"] = anchorage);
            /* put */ (timeZoneGeographicPoints["SystemV/YST9YDT"] = anchorage);
            /* put */ (timeZoneGeographicPoints["US/Alaska"] = anchorage);
            /* put */ (timeZoneGeographicPoints["America/Dawson"] = new Compass.GeographicPoint(64.066666, -139.41667));
            /* put */ (timeZoneGeographicPoints["America/Ensenada"] = new Compass.GeographicPoint(31.866667, -116.61667));
            var losAngeles = new Compass.GeographicPoint(34.052223, -118.242775);
            /* put */ (timeZoneGeographicPoints["America/Los_Angeles"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["America/Santa_Isabel"] = new Compass.GeographicPoint(28.383333, -113.35));
            /* put */ (timeZoneGeographicPoints["America/Tijuana"] = new Compass.GeographicPoint(32.533333, -117.01667));
            /* put */ (timeZoneGeographicPoints["America/Vancouver"] = new Compass.GeographicPoint(49.25, -123.13333));
            /* put */ (timeZoneGeographicPoints["America/Whitehorse"] = new Compass.GeographicPoint(60.716667, -135.05));
            /* put */ (timeZoneGeographicPoints["Canada/Pacific"] = new Compass.GeographicPoint(49.25, -123.13333));
            /* put */ (timeZoneGeographicPoints["Canada/Yukon"] = new Compass.GeographicPoint(60.716667, -135.05));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+8"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["Mexico/BajaNorte"] = new Compass.GeographicPoint(32.533333, -117.01667));
            /* put */ (timeZoneGeographicPoints["Pacific/Pitcairn"] = new Compass.GeographicPoint(-25.0667, -130.1));
            /* put */ (timeZoneGeographicPoints["SystemV/PST8"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["SystemV/PST8PDT"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["US/Pacific"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["US/Pacific-New"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["America/Boise"] = new Compass.GeographicPoint(43.61361, -116.2025));
            /* put */ (timeZoneGeographicPoints["America/Cambridge_Bay"] = new Compass.GeographicPoint(69.11667, -105.03333));
            /* put */ (timeZoneGeographicPoints["America/Chihuahua"] = new Compass.GeographicPoint(28.633333, -106.083336));
            /* put */ (timeZoneGeographicPoints["America/Dawson_Creek"] = new Compass.GeographicPoint(55.766666, -120.23333));
            var denver = new Compass.GeographicPoint(39.739166, -104.98417);
            /* put */ (timeZoneGeographicPoints["America/Denver"] = denver);
            /* put */ (timeZoneGeographicPoints["America/Edmonton"] = new Compass.GeographicPoint(53.55, -113.5));
            /* put */ (timeZoneGeographicPoints["America/Hermosillo"] = new Compass.GeographicPoint(29.066668, -110.96667));
            /* put */ (timeZoneGeographicPoints["America/Inuvik"] = new Compass.GeographicPoint(68.35, -133.7));
            /* put */ (timeZoneGeographicPoints["America/Mazatlan"] = new Compass.GeographicPoint(23.216667, -106.416664));
            /* put */ (timeZoneGeographicPoints["America/Ojinaga"] = new Compass.GeographicPoint(29.566668, -104.416664));
            /* put */ (timeZoneGeographicPoints["America/Phoenix"] = new Compass.GeographicPoint(33.448334, -112.07333));
            /* put */ (timeZoneGeographicPoints["America/Shiprock"] = new Compass.GeographicPoint(36.785557, -108.686386));
            /* put */ (timeZoneGeographicPoints["America/Yellowknife"] = new Compass.GeographicPoint(62.45, -114.35));
            /* put */ (timeZoneGeographicPoints["Canada/Mountain"] = new Compass.GeographicPoint(53.55, -113.5));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+7"] = denver);
            /* put */ (timeZoneGeographicPoints["Mexico/BajaSur"] = new Compass.GeographicPoint(32.567, -116.633));
            /* put */ (timeZoneGeographicPoints["SystemV/MST7"] = denver);
            /* put */ (timeZoneGeographicPoints["SystemV/MST7MDT"] = denver);
            /* put */ (timeZoneGeographicPoints["US/Arizona"] = new Compass.GeographicPoint(33.448334, -112.07333));
            /* put */ (timeZoneGeographicPoints["US/Mountain"] = denver);
            /* put */ (timeZoneGeographicPoints["America/Belize"] = new Compass.GeographicPoint(17.483334, -88.183334));
            /* put */ (timeZoneGeographicPoints["America/Cancun"] = new Compass.GeographicPoint(21.166668, -86.833336));
            var chicago = new Compass.GeographicPoint(41.85, -87.65);
            /* put */ (timeZoneGeographicPoints["America/Chicago"] = chicago);
            /* put */ (timeZoneGeographicPoints["America/Costa_Rica"] = new Compass.GeographicPoint(9.933333, -84.083336));
            /* put */ (timeZoneGeographicPoints["America/El_Salvador"] = new Compass.GeographicPoint(13.7086115, -89.20306));
            /* put */ (timeZoneGeographicPoints["America/Guatemala"] = new Compass.GeographicPoint(14.621111, -90.52695));
            /* put */ (timeZoneGeographicPoints["America/Knox_IN"] = new Compass.GeographicPoint(41.295834, -86.625));
            /* put */ (timeZoneGeographicPoints["America/Managua"] = new Compass.GeographicPoint(12.150833, -86.26833));
            /* put */ (timeZoneGeographicPoints["America/Matamoros"] = new Compass.GeographicPoint(25.883333, -97.5));
            /* put */ (timeZoneGeographicPoints["America/Menominee"] = new Compass.GeographicPoint(45.107777, -87.61417));
            /* put */ (timeZoneGeographicPoints["America/Merida"] = new Compass.GeographicPoint(20.966667, -89.61667));
            /* put */ (timeZoneGeographicPoints["America/Mexico_City"] = new Compass.GeographicPoint(19.434168, -99.13861));
            /* put */ (timeZoneGeographicPoints["America/Monterrey"] = new Compass.GeographicPoint(25.666668, -100.316666));
            /* put */ (timeZoneGeographicPoints["America/Rainy_River"] = new Compass.GeographicPoint(48.716667, -94.566666));
            /* put */ (timeZoneGeographicPoints["America/Rankin_Inlet"] = new Compass.GeographicPoint(62.816666, -92.083336));
            /* put */ (timeZoneGeographicPoints["America/Regina"] = new Compass.GeographicPoint(50.45, -104.61667));
            /* put */ (timeZoneGeographicPoints["America/Swift_Current"] = new Compass.GeographicPoint(50.283333, -107.76667));
            /* put */ (timeZoneGeographicPoints["America/Tegucigalpa"] = new Compass.GeographicPoint(14.1, -87.21667));
            /* put */ (timeZoneGeographicPoints["America/Winnipeg"] = new Compass.GeographicPoint(49.88333, -97.166664));
            /* put */ (timeZoneGeographicPoints["Canada/Central"] = new Compass.GeographicPoint(50.45, -104.61667));
            /* put */ (timeZoneGeographicPoints["Canada/East-Saskatchewan"] = new Compass.GeographicPoint(51.216667, -102.46667));
            /* put */ (timeZoneGeographicPoints["Canada/Saskatchewan"] = new Compass.GeographicPoint(50.45, -104.61667));
            /* put */ (timeZoneGeographicPoints["Chile/EasterIsland"] = new Compass.GeographicPoint(-27.15, -109.425));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+6"] = chicago);
            /* put */ (timeZoneGeographicPoints["Mexico/General"] = new Compass.GeographicPoint(19.434168, -99.13861));
            /* put */ (timeZoneGeographicPoints["Pacific/Easter"] = new Compass.GeographicPoint(-27.15, -109.425));
            /* put */ (timeZoneGeographicPoints["Pacific/Galapagos"] = new Compass.GeographicPoint(-0.667, -90.55));
            /* put */ (timeZoneGeographicPoints["SystemV/CST6"] = chicago);
            /* put */ (timeZoneGeographicPoints["SystemV/CST6CDT"] = chicago);
            /* put */ (timeZoneGeographicPoints["US/Central"] = chicago);
            /* put */ (timeZoneGeographicPoints["US/Indiana-Starke"] = new Compass.GeographicPoint(41.295834, -86.625));
            /* put */ (timeZoneGeographicPoints["America/Atikokan"] = new Compass.GeographicPoint(48.75, -91.61667));
            /* put */ (timeZoneGeographicPoints["America/Bogota"] = new Compass.GeographicPoint(4.6, -74.083336));
            /* put */ (timeZoneGeographicPoints["America/Cayman"] = new Compass.GeographicPoint(19.3, -81.38333));
            /* put */ (timeZoneGeographicPoints["America/Coral_Harbour"] = new Compass.GeographicPoint(64.13333, -83.166664));
            /* put */ (timeZoneGeographicPoints["America/Detroit"] = new Compass.GeographicPoint(42.33139, -83.04583));
            /* put */ (timeZoneGeographicPoints["America/Fort_Wayne"] = new Compass.GeographicPoint(41.130554, -85.12889));
            /* put */ (timeZoneGeographicPoints["America/Grand_Turk"] = new Compass.GeographicPoint(21.466667, -71.13333));
            /* put */ (timeZoneGeographicPoints["America/Guayaquil"] = new Compass.GeographicPoint(-2.1666667, -79.9));
            /* put */ (timeZoneGeographicPoints["America/Havana"] = new Compass.GeographicPoint(23.131945, -82.36417));
            /* put */ (timeZoneGeographicPoints["America/Indianapolis"] = new Compass.GeographicPoint(39.768333, -86.15806));
            /* put */ (timeZoneGeographicPoints["America/Iqaluit"] = new Compass.GeographicPoint(63.733334, -68.5));
            /* put */ (timeZoneGeographicPoints["America/Jamaica"] = new Compass.GeographicPoint(18.0, -76.8));
            /* put */ (timeZoneGeographicPoints["America/Lima"] = new Compass.GeographicPoint(-12.05, -77.05));
            /* put */ (timeZoneGeographicPoints["America/Louisville"] = new Compass.GeographicPoint(38.254166, -85.759445));
            /* put */ (timeZoneGeographicPoints["America/Montreal"] = new Compass.GeographicPoint(45.5, -73.583336));
            /* put */ (timeZoneGeographicPoints["America/Nassau"] = new Compass.GeographicPoint(25.083334, -77.35));
            var newYork = new Compass.GeographicPoint(40.71417, -74.006386);
            /* put */ (timeZoneGeographicPoints["America/New_York"] = newYork);
            /* put */ (timeZoneGeographicPoints["America/Nipigon"] = new Compass.GeographicPoint(49.016666, -88.25));
            /* put */ (timeZoneGeographicPoints["America/Panama"] = new Compass.GeographicPoint(8.966667, -79.53333));
            /* put */ (timeZoneGeographicPoints["America/Pangnirtung"] = new Compass.GeographicPoint(66.13333, -65.75));
            /* put */ (timeZoneGeographicPoints["America/Port-au-Prince"] = new Compass.GeographicPoint(18.539167, -72.335));
            /* put */ (timeZoneGeographicPoints["America/Resolute"] = new Compass.GeographicPoint(74.683334, -94.9));
            /* put */ (timeZoneGeographicPoints["America/Thunder_Bay"] = new Compass.GeographicPoint(48.4, -89.23333));
            /* put */ (timeZoneGeographicPoints["America/Toronto"] = new Compass.GeographicPoint(43.666668, -79.416664));
            /* put */ (timeZoneGeographicPoints["Canada/Eastern"] = new Compass.GeographicPoint(43.666668, -79.416664));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+5"] = newYork);
            /* put */ (timeZoneGeographicPoints["SystemV/EST5"] = newYork);
            /* put */ (timeZoneGeographicPoints["SystemV/EST5EDT"] = newYork);
            /* put */ (timeZoneGeographicPoints["US/East-Indiana"] = new Compass.GeographicPoint(36.8381, -84.85));
            /* put */ (timeZoneGeographicPoints["US/Eastern"] = newYork);
            /* put */ (timeZoneGeographicPoints["US/Michigan"] = new Compass.GeographicPoint(42.33139, -83.04583));
            /* put */ (timeZoneGeographicPoints["America/Caracas"] = new Compass.GeographicPoint(10.5, -66.916664));
            /* put */ (timeZoneGeographicPoints["America/Anguilla"] = new Compass.GeographicPoint(18.216667, -63.05));
            /* put */ (timeZoneGeographicPoints["America/Antigua"] = new Compass.GeographicPoint(17.116667, -61.85));
            /* put */ (timeZoneGeographicPoints["America/Aruba"] = new Compass.GeographicPoint(10.541111, -72.9175));
            /* put */ (timeZoneGeographicPoints["America/Asuncion"] = new Compass.GeographicPoint(-25.266666, -57.666668));
            /* put */ (timeZoneGeographicPoints["America/Barbados"] = new Compass.GeographicPoint(13.1, -59.616665));
            /* put */ (timeZoneGeographicPoints["America/Blanc-Sablon"] = new Compass.GeographicPoint(51.433334, -57.11667));
            /* put */ (timeZoneGeographicPoints["America/Boa_Vista"] = new Compass.GeographicPoint(2.8166666, -60.666668));
            /* put */ (timeZoneGeographicPoints["America/Campo_Grande"] = new Compass.GeographicPoint(-20.45, -54.616665));
            /* put */ (timeZoneGeographicPoints["America/Cuiaba"] = new Compass.GeographicPoint(-15.583333, -56.083332));
            /* put */ (timeZoneGeographicPoints["America/Curacao"] = new Compass.GeographicPoint(12.1167, -68.933));
            /* put */ (timeZoneGeographicPoints["America/Dominica"] = new Compass.GeographicPoint(15.3, -61.4));
            /* put */ (timeZoneGeographicPoints["America/Eirunepe"] = new Compass.GeographicPoint(-6.6666665, -69.86667));
            /* put */ (timeZoneGeographicPoints["America/Glace_Bay"] = new Compass.GeographicPoint(46.2, -59.966667));
            /* put */ (timeZoneGeographicPoints["America/Goose_Bay"] = new Compass.GeographicPoint(53.333332, -60.416668));
            /* put */ (timeZoneGeographicPoints["America/Grenada"] = new Compass.GeographicPoint(12.05, -61.75));
            /* put */ (timeZoneGeographicPoints["America/Guadeloupe"] = new Compass.GeographicPoint(16.233334, -61.516666));
            /* put */ (timeZoneGeographicPoints["America/Guyana"] = new Compass.GeographicPoint(6.8, -58.166668));
            /* put */ (timeZoneGeographicPoints["America/Halifax"] = new Compass.GeographicPoint(44.65, -63.6));
            /* put */ (timeZoneGeographicPoints["America/La_Paz"] = new Compass.GeographicPoint(-16.5, -68.15));
            /* put */ (timeZoneGeographicPoints["America/Manaus"] = new Compass.GeographicPoint(-3.1133332, -60.025276));
            /* put */ (timeZoneGeographicPoints["America/Marigot"] = new Compass.GeographicPoint(18.073, 63.0844));
            /* put */ (timeZoneGeographicPoints["America/Martinique"] = new Compass.GeographicPoint(14.6, -61.083332));
            /* put */ (timeZoneGeographicPoints["America/Moncton"] = new Compass.GeographicPoint(46.083332, -64.76667));
            /* put */ (timeZoneGeographicPoints["America/Montserrat"] = new Compass.GeographicPoint(16.7, -62.216667));
            /* put */ (timeZoneGeographicPoints["America/Port_of_Spain"] = new Compass.GeographicPoint(10.65, -61.516666));
            /* put */ (timeZoneGeographicPoints["America/Porto_Acre"] = new Compass.GeographicPoint(-9.587778, -67.53555));
            /* put */ (timeZoneGeographicPoints["America/Porto_Velho"] = new Compass.GeographicPoint(-8.766666, -63.9));
            /* put */ (timeZoneGeographicPoints["America/Puerto_Rico"] = new Compass.GeographicPoint(18.467, 66.117));
            /* put */ (timeZoneGeographicPoints["America/Rio_Branco"] = new Compass.GeographicPoint(-9.966667, -67.8));
            var santiago = new Compass.GeographicPoint(-33.45, -70.666664);
            /* put */ (timeZoneGeographicPoints["America/Santiago"] = santiago);
            /* put */ (timeZoneGeographicPoints["America/Santo_Domingo"] = new Compass.GeographicPoint(18.466667, -69.9));
            /* put */ (timeZoneGeographicPoints["America/St_Barthelemy"] = new Compass.GeographicPoint(17.8978, -62.851));
            /* put */ (timeZoneGeographicPoints["America/St_Kitts"] = new Compass.GeographicPoint(17.3, -62.733));
            /* put */ (timeZoneGeographicPoints["America/St_Lucia"] = new Compass.GeographicPoint(14.0167, -60.9833));
            /* put */ (timeZoneGeographicPoints["America/St_Thomas"] = new Compass.GeographicPoint(18.3333, -64.9167));
            /* put */ (timeZoneGeographicPoints["America/St_Vincent"] = new Compass.GeographicPoint(13.1667, -61.2333));
            /* put */ (timeZoneGeographicPoints["America/Thule"] = new Compass.GeographicPoint(-54.27667, -36.511665));
            /* put */ (timeZoneGeographicPoints["America/Tortola"] = new Compass.GeographicPoint(18.416666, -64.61667));
            /* put */ (timeZoneGeographicPoints["America/Virgin"] = new Compass.GeographicPoint(18.34389, -64.931114));
            /* put */ (timeZoneGeographicPoints["Antarctica/Palmer"] = new Compass.GeographicPoint(-64.25, -62.833));
            /* put */ (timeZoneGeographicPoints["Atlantic/Bermuda"] = new Compass.GeographicPoint(32.294167, -64.78389));
            /* put */ (timeZoneGeographicPoints["Atlantic/Stanley"] = new Compass.GeographicPoint(-51.7, -57.85));
            /* put */ (timeZoneGeographicPoints["Brazil/Acre"] = new Compass.GeographicPoint(-10.883333, -45.083332));
            /* put */ (timeZoneGeographicPoints["Brazil/West"] = new Compass.GeographicPoint(-10.883333, -45.083332));
            /* put */ (timeZoneGeographicPoints["Canada/Atlantic"] = new Compass.GeographicPoint(44.65, -63.6));
            /* put */ (timeZoneGeographicPoints["Chile/Continental"] = santiago);
            /* put */ (timeZoneGeographicPoints["Etc/GMT+4"] = santiago);
            /* put */ (timeZoneGeographicPoints["SystemV/AST4"] = new Compass.GeographicPoint(44.65, -63.6));
            /* put */ (timeZoneGeographicPoints["SystemV/AST4ADT"] = new Compass.GeographicPoint(44.65, -63.6));
            /* put */ (timeZoneGeographicPoints["America/St_Johns"] = new Compass.GeographicPoint(47.5675, -52.7072));
            /* put */ (timeZoneGeographicPoints["Canada/Newfoundland"] = new Compass.GeographicPoint(47.5675, -52.7072));
            /* put */ (timeZoneGeographicPoints["America/Araguaina"] = new Compass.GeographicPoint(-7.16, -48.0575));
            /* put */ (timeZoneGeographicPoints["America/Bahia"] = new Compass.GeographicPoint(-12.983334, -38.516666));
            /* put */ (timeZoneGeographicPoints["America/Belem"] = new Compass.GeographicPoint(-1.45, -48.483334));
            /* put */ (timeZoneGeographicPoints["America/Buenos_Aires"] = new Compass.GeographicPoint(-34.5875, -58.6725));
            /* put */ (timeZoneGeographicPoints["America/Catamarca"] = new Compass.GeographicPoint(-28.466667, -65.78333));
            /* put */ (timeZoneGeographicPoints["America/Cayenne"] = new Compass.GeographicPoint(4.9333334, -52.333332));
            /* put */ (timeZoneGeographicPoints["America/Cordoba"] = new Compass.GeographicPoint(-31.4, -64.183334));
            /* put */ (timeZoneGeographicPoints["America/Fortaleza"] = new Compass.GeographicPoint(-3.7166667, -38.5));
            /* put */ (timeZoneGeographicPoints["America/Godthab"] = new Compass.GeographicPoint(64.183334, -51.75));
            /* put */ (timeZoneGeographicPoints["America/Jujuy"] = new Compass.GeographicPoint(-24.183332, -65.3));
            /* put */ (timeZoneGeographicPoints["America/Maceio"] = new Compass.GeographicPoint(-9.666667, -35.716667));
            /* put */ (timeZoneGeographicPoints["America/Mendoza"] = new Compass.GeographicPoint(-32.883335, -68.816666));
            /* put */ (timeZoneGeographicPoints["America/Miquelon"] = new Compass.GeographicPoint(47.0975, -56.38139));
            /* put */ (timeZoneGeographicPoints["America/Montevideo"] = new Compass.GeographicPoint(-34.858055, -56.170834));
            /* put */ (timeZoneGeographicPoints["America/Paramaribo"] = new Compass.GeographicPoint(5.8333335, -55.166668));
            /* put */ (timeZoneGeographicPoints["America/Recife"] = new Compass.GeographicPoint(-8.05, -34.9));
            /* put */ (timeZoneGeographicPoints["America/Rosario"] = new Compass.GeographicPoint(-32.95111, -60.66639));
            /* put */ (timeZoneGeographicPoints["America/Santarem"] = new Compass.GeographicPoint(-2.4333334, -54.7));
            var saoPaulo = new Compass.GeographicPoint(-23.533333, -46.616665);
            /* put */ (timeZoneGeographicPoints["America/Sao_Paulo"] = saoPaulo);
            /* put */ (timeZoneGeographicPoints["Antarctica/Rothera"] = new Compass.GeographicPoint(67.567, 68.133));
            /* put */ (timeZoneGeographicPoints["Brazil/East"] = saoPaulo);
            /* put */ (timeZoneGeographicPoints["Etc/GMT+3"] = saoPaulo);
            /* put */ (timeZoneGeographicPoints["America/Noronha"] = new Compass.GeographicPoint(3.85, 25.417));
            var southGeorgia = new Compass.GeographicPoint(54.25, 36.75);
            /* put */ (timeZoneGeographicPoints["Atlantic/South_Georgia"] = southGeorgia);
            /* put */ (timeZoneGeographicPoints["Brazil/DeNoronha"] = new Compass.GeographicPoint(3.85, 25.417));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+2"] = southGeorgia);
            /* put */ (timeZoneGeographicPoints["America/Scoresbysund"] = new Compass.GeographicPoint(70.48333, -21.966667));
            var azores = new Compass.GeographicPoint(37.483334, -2.5666666);
            /* put */ (timeZoneGeographicPoints["Atlantic/Azores"] = azores);
            /* put */ (timeZoneGeographicPoints["Atlantic/Cape_Verde"] = new Compass.GeographicPoint(14.916667, -23.516666));
            /* put */ (timeZoneGeographicPoints["Etc/GMT+1"] = azores);
            /* put */ (timeZoneGeographicPoints["Africa/Abidjan"] = new Compass.GeographicPoint(5.341111, -4.028056));
            /* put */ (timeZoneGeographicPoints["Africa/Accra"] = new Compass.GeographicPoint(5.55, -0.2166667));
            /* put */ (timeZoneGeographicPoints["Africa/Bamako"] = new Compass.GeographicPoint(12.65, -8.0));
            /* put */ (timeZoneGeographicPoints["Africa/Banjul"] = new Compass.GeographicPoint(13.453055, -16.5775));
            /* put */ (timeZoneGeographicPoints["Africa/Bissau"] = new Compass.GeographicPoint(11.85, -15.583333));
            /* put */ (timeZoneGeographicPoints["Africa/Casablanca"] = new Compass.GeographicPoint(33.593056, -7.616389));
            /* put */ (timeZoneGeographicPoints["Africa/Conakry"] = new Compass.GeographicPoint(9.509167, -13.712222));
            /* put */ (timeZoneGeographicPoints["Africa/Dakar"] = new Compass.GeographicPoint(14.670834, -17.438055));
            /* put */ (timeZoneGeographicPoints["Africa/El_Aaiun"] = new Compass.GeographicPoint(27.15361, -13.203333));
            /* put */ (timeZoneGeographicPoints["Africa/Freetown"] = new Compass.GeographicPoint(8.49, -13.234167));
            /* put */ (timeZoneGeographicPoints["Africa/Lome"] = new Compass.GeographicPoint(6.131944, 1.2227778));
            /* put */ (timeZoneGeographicPoints["Africa/Monrovia"] = new Compass.GeographicPoint(6.3105555, -10.804722));
            /* put */ (timeZoneGeographicPoints["Africa/Nouakchott"] = new Compass.GeographicPoint(18.08639, -15.975278));
            /* put */ (timeZoneGeographicPoints["Africa/Ouagadougou"] = new Compass.GeographicPoint(12.370277, -1.5247222));
            /* put */ (timeZoneGeographicPoints["Africa/Sao_Tome"] = new Compass.GeographicPoint(0.3333333, 6.733333));
            /* put */ (timeZoneGeographicPoints["Africa/Timbuktu"] = new Compass.GeographicPoint(16.766666, -3.0166667));
            /* put */ (timeZoneGeographicPoints["America/Danmarkshavn"] = new Compass.GeographicPoint(76.767, 18.667));
            /* put */ (timeZoneGeographicPoints["Atlantic/Canary"] = new Compass.GeographicPoint(28.45, -16.233334));
            /* put */ (timeZoneGeographicPoints["Atlantic/Faeroe"] = new Compass.GeographicPoint(62.016666, -6.766667));
            /* put */ (timeZoneGeographicPoints["Atlantic/Faroe"] = new Compass.GeographicPoint(62.016666, -6.766667));
            /* put */ (timeZoneGeographicPoints["Atlantic/Madeira"] = new Compass.GeographicPoint(32.633335, -16.9));
            /* put */ (timeZoneGeographicPoints["Atlantic/Reykjavik"] = new Compass.GeographicPoint(64.15, -21.95));
            /* put */ (timeZoneGeographicPoints["Atlantic/St_Helena"] = new Compass.GeographicPoint(-15.933333, -5.7166667));
            var greenwich = new Compass.GeographicPoint(51.466667, 0.0);
            /* put */ (timeZoneGeographicPoints["Etc/GMT"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/GMT+0"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-0"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/GMT0"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/Greenwich"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/UCT"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/UTC"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/Universal"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Etc/Zulu"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Europe/Belfast"] = new Compass.GeographicPoint(54.583332, -5.933333));
            /* put */ (timeZoneGeographicPoints["Europe/Dublin"] = new Compass.GeographicPoint(53.333057, -6.248889));
            /* put */ (timeZoneGeographicPoints["Europe/Guernsey"] = new Compass.GeographicPoint(49.45, -2.533));
            /* put */ (timeZoneGeographicPoints["Europe/Isle_of_Man"] = new Compass.GeographicPoint(54.14521, -4.48172));
            /* put */ (timeZoneGeographicPoints["Europe/Jersey"] = new Compass.GeographicPoint(49.2, -2.117));
            /* put */ (timeZoneGeographicPoints["Europe/Lisbon"] = new Compass.GeographicPoint(38.716667, -9.133333));
            /* put */ (timeZoneGeographicPoints["Europe/London"] = new Compass.GeographicPoint(51.5, -0.116667));
            /* put */ (timeZoneGeographicPoints["Africa/Algiers"] = new Compass.GeographicPoint(36.763054, 3.0505557));
            /* put */ (timeZoneGeographicPoints["Africa/Bangui"] = new Compass.GeographicPoint(4.366667, 18.583334));
            /* put */ (timeZoneGeographicPoints["Africa/Brazzaville"] = new Compass.GeographicPoint(-4.2591667, 15.284722));
            /* put */ (timeZoneGeographicPoints["Africa/Ceuta"] = new Compass.GeographicPoint(35.890278, -5.3075));
            /* put */ (timeZoneGeographicPoints["Africa/Douala"] = new Compass.GeographicPoint(4.0502777, 9.7));
            /* put */ (timeZoneGeographicPoints["Africa/Kinshasa"] = new Compass.GeographicPoint(-4.3, 15.3));
            /* put */ (timeZoneGeographicPoints["Africa/Lagos"] = new Compass.GeographicPoint(6.4530554, 3.3958333));
            /* put */ (timeZoneGeographicPoints["Africa/Libreville"] = new Compass.GeographicPoint(0.3833333, 9.45));
            /* put */ (timeZoneGeographicPoints["Africa/Luanda"] = new Compass.GeographicPoint(-8.838333, 13.234445));
            /* put */ (timeZoneGeographicPoints["Africa/Malabo"] = new Compass.GeographicPoint(3.75, 8.783333));
            /* put */ (timeZoneGeographicPoints["Africa/Ndjamena"] = new Compass.GeographicPoint(12.113055, 15.049167));
            /* put */ (timeZoneGeographicPoints["Africa/Niamey"] = new Compass.GeographicPoint(13.516666, 2.1166668));
            /* put */ (timeZoneGeographicPoints["Africa/Porto-Novo"] = new Compass.GeographicPoint(6.483333, 2.6166668));
            /* put */ (timeZoneGeographicPoints["Africa/Tunis"] = new Compass.GeographicPoint(36.802776, 10.179722));
            /* put */ (timeZoneGeographicPoints["Africa/Windhoek"] = new Compass.GeographicPoint(-22.57, 17.08361));
            /* put */ (timeZoneGeographicPoints["Arctic/Longyearbyen"] = new Compass.GeographicPoint(78.21667, 15.633333));
            /* put */ (timeZoneGeographicPoints["Atlantic/Jan_Mayen"] = new Compass.GeographicPoint(71.0, -8.333));
            var paris = new Compass.GeographicPoint(48.86667, 2.333333);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-1"] = paris);
            /* put */ (timeZoneGeographicPoints["Europe/Amsterdam"] = new Compass.GeographicPoint(52.35, 4.9166665));
            /* put */ (timeZoneGeographicPoints["Europe/Andorra"] = new Compass.GeographicPoint(42.5, 1.5166667));
            /* put */ (timeZoneGeographicPoints["Europe/Belgrade"] = new Compass.GeographicPoint(44.81861, 20.468056));
            /* put */ (timeZoneGeographicPoints["Europe/Berlin"] = new Compass.GeographicPoint(52.516666, 13.4));
            /* put */ (timeZoneGeographicPoints["Europe/Bratislava"] = new Compass.GeographicPoint(48.15, 17.116667));
            /* put */ (timeZoneGeographicPoints["Europe/Brussels"] = new Compass.GeographicPoint(50.833332, 4.333333));
            /* put */ (timeZoneGeographicPoints["Europe/Budapest"] = new Compass.GeographicPoint(47.5, 19.083334));
            /* put */ (timeZoneGeographicPoints["Europe/Copenhagen"] = new Compass.GeographicPoint(55.666668, 12.583333));
            /* put */ (timeZoneGeographicPoints["Europe/Gibraltar"] = new Compass.GeographicPoint(36.133335, -5.35));
            /* put */ (timeZoneGeographicPoints["Europe/Ljubljana"] = new Compass.GeographicPoint(46.05528, 14.514444));
            /* put */ (timeZoneGeographicPoints["Europe/Luxembourg"] = new Compass.GeographicPoint(49.611668, 6.13));
            /* put */ (timeZoneGeographicPoints["Europe/Madrid"] = new Compass.GeographicPoint(40.4, -3.6833334));
            /* put */ (timeZoneGeographicPoints["Europe/Malta"] = new Compass.GeographicPoint(35.899723, 14.514722));
            /* put */ (timeZoneGeographicPoints["Europe/Monaco"] = new Compass.GeographicPoint(43.733334, 7.4166665));
            /* put */ (timeZoneGeographicPoints["Europe/Oslo"] = new Compass.GeographicPoint(59.916668, 10.75));
            /* put */ (timeZoneGeographicPoints["Europe/Paris"] = paris);
            /* put */ (timeZoneGeographicPoints["Europe/Podgorica"] = new Compass.GeographicPoint(42.441113, 19.26361));
            /* put */ (timeZoneGeographicPoints["Europe/Prague"] = new Compass.GeographicPoint(50.083332, 14.466667));
            /* put */ (timeZoneGeographicPoints["Europe/Rome"] = new Compass.GeographicPoint(41.9, 12.483334));
            /* put */ (timeZoneGeographicPoints["Europe/San_Marino"] = new Compass.GeographicPoint(43.933334, 12.45));
            /* put */ (timeZoneGeographicPoints["Europe/Sarajevo"] = new Compass.GeographicPoint(43.85, 18.383333));
            /* put */ (timeZoneGeographicPoints["Europe/Skopje"] = new Compass.GeographicPoint(42.0, 21.433332));
            /* put */ (timeZoneGeographicPoints["Europe/Stockholm"] = new Compass.GeographicPoint(59.333332, 18.05));
            /* put */ (timeZoneGeographicPoints["Europe/Tirane"] = new Compass.GeographicPoint(41.3275, 19.81889));
            /* put */ (timeZoneGeographicPoints["Europe/Vaduz"] = new Compass.GeographicPoint(47.133335, 9.516666));
            /* put */ (timeZoneGeographicPoints["Europe/Vatican"] = new Compass.GeographicPoint(41.9, 12.45));
            /* put */ (timeZoneGeographicPoints["Europe/Vienna"] = new Compass.GeographicPoint(48.2, 16.366667));
            /* put */ (timeZoneGeographicPoints["Europe/Warsaw"] = new Compass.GeographicPoint(52.25, 21.0));
            /* put */ (timeZoneGeographicPoints["Europe/Zagreb"] = new Compass.GeographicPoint(45.8, 16.0));
            /* put */ (timeZoneGeographicPoints["Europe/Zurich"] = new Compass.GeographicPoint(47.366665, 8.55));
            /* put */ (timeZoneGeographicPoints["Africa/Blantyre"] = new Compass.GeographicPoint(-15.783333, 35.0));
            /* put */ (timeZoneGeographicPoints["Africa/Bujumbura"] = new Compass.GeographicPoint(-3.376111, 29.36));
            /* put */ (timeZoneGeographicPoints["Africa/Cairo"] = new Compass.GeographicPoint(30.05, 31.25));
            /* put */ (timeZoneGeographicPoints["Africa/Gaborone"] = new Compass.GeographicPoint(-24.646389, 25.911945));
            /* put */ (timeZoneGeographicPoints["Africa/Harare"] = new Compass.GeographicPoint(-17.817778, 31.044722));
            /* put */ (timeZoneGeographicPoints["Africa/Johannesburg"] = new Compass.GeographicPoint(-26.2, 28.083334));
            /* put */ (timeZoneGeographicPoints["Africa/Kigali"] = new Compass.GeographicPoint(-1.9536111, 30.060556));
            /* put */ (timeZoneGeographicPoints["Africa/Lubumbashi"] = new Compass.GeographicPoint(-11.666667, 27.466667));
            /* put */ (timeZoneGeographicPoints["Africa/Lusaka"] = new Compass.GeographicPoint(-15.416667, 28.283333));
            /* put */ (timeZoneGeographicPoints["Africa/Maputo"] = new Compass.GeographicPoint(-25.965279, 32.58917));
            /* put */ (timeZoneGeographicPoints["Africa/Maseru"] = new Compass.GeographicPoint(-29.316668, 27.483334));
            /* put */ (timeZoneGeographicPoints["Africa/Mbabane"] = new Compass.GeographicPoint(-26.316668, 31.133333));
            /* put */ (timeZoneGeographicPoints["Africa/Tripoli"] = new Compass.GeographicPoint(32.8925, 13.18));
            /* put */ (timeZoneGeographicPoints["Asia/Amman"] = new Compass.GeographicPoint(31.95, 35.933334));
            /* put */ (timeZoneGeographicPoints["Asia/Beirut"] = new Compass.GeographicPoint(33.871944, 35.509724));
            /* put */ (timeZoneGeographicPoints["Asia/Damascus"] = new Compass.GeographicPoint(33.5, 36.3));
            /* put */ (timeZoneGeographicPoints["Asia/Gaza"] = new Compass.GeographicPoint(31.5, 34.466667));
            /* put */ (timeZoneGeographicPoints["Asia/Istanbul"] = new Compass.GeographicPoint(41.018612, 28.964722));
            /* put */ (timeZoneGeographicPoints["Asia/Jerusalem"] = new Compass.GeographicPoint(31.78, 35.23));
            /* put */ (timeZoneGeographicPoints["Asia/Nicosia"] = new Compass.GeographicPoint(35.166668, 33.366665));
            /* put */ (timeZoneGeographicPoints["Asia/Tel_Aviv"] = new Compass.GeographicPoint(32.066666, 34.766666));
            var athens = new Compass.GeographicPoint(37.983334, 23.733334);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-2"] = athens);
            /* put */ (timeZoneGeographicPoints["Europe/Athens"] = new Compass.GeographicPoint(37.983334, 23.733334));
            /* put */ (timeZoneGeographicPoints["Europe/Bucharest"] = new Compass.GeographicPoint(44.433334, 26.1));
            /* put */ (timeZoneGeographicPoints["Europe/Chisinau"] = new Compass.GeographicPoint(47.005554, 28.8575));
            /* put */ (timeZoneGeographicPoints["Europe/Helsinki"] = new Compass.GeographicPoint(60.175556, 24.934166));
            /* put */ (timeZoneGeographicPoints["Europe/Istanbul"] = new Compass.GeographicPoint(41.018612, 28.964722));
            /* put */ (timeZoneGeographicPoints["Europe/Kaliningrad"] = new Compass.GeographicPoint(54.71, 20.5));
            /* put */ (timeZoneGeographicPoints["Europe/Kiev"] = new Compass.GeographicPoint(50.433334, 30.516666));
            /* put */ (timeZoneGeographicPoints["Europe/Mariehamn"] = new Compass.GeographicPoint(60.1, 19.95));
            /* put */ (timeZoneGeographicPoints["Europe/Minsk"] = new Compass.GeographicPoint(53.9, 27.566668));
            /* put */ (timeZoneGeographicPoints["Europe/Nicosia"] = new Compass.GeographicPoint(35.166668, 33.366665));
            /* put */ (timeZoneGeographicPoints["Europe/Riga"] = new Compass.GeographicPoint(56.95, 24.1));
            /* put */ (timeZoneGeographicPoints["Europe/Simferopol"] = new Compass.GeographicPoint(44.95, 34.1));
            /* put */ (timeZoneGeographicPoints["Europe/Sofia"] = new Compass.GeographicPoint(42.683334, 23.316668));
            /* put */ (timeZoneGeographicPoints["Europe/Tallinn"] = new Compass.GeographicPoint(59.433887, 24.728056));
            /* put */ (timeZoneGeographicPoints["Europe/Tiraspol"] = new Compass.GeographicPoint(46.84028, 29.643333));
            /* put */ (timeZoneGeographicPoints["Europe/Uzhgorod"] = new Compass.GeographicPoint(48.616665, 22.3));
            /* put */ (timeZoneGeographicPoints["Europe/Vilnius"] = new Compass.GeographicPoint(54.683334, 25.316668));
            /* put */ (timeZoneGeographicPoints["Europe/Zaporozhye"] = new Compass.GeographicPoint(47.833, 35.1667));
            /* put */ (timeZoneGeographicPoints["Africa/Addis_Ababa"] = new Compass.GeographicPoint(9.033333, 38.7));
            /* put */ (timeZoneGeographicPoints["Africa/Asmara"] = new Compass.GeographicPoint(15.333333, 38.933334));
            /* put */ (timeZoneGeographicPoints["Africa/Asmera"] = new Compass.GeographicPoint(15.333333, 38.933334));
            /* put */ (timeZoneGeographicPoints["Africa/Dar_es_Salaam"] = new Compass.GeographicPoint(-6.8, 39.283333));
            /* put */ (timeZoneGeographicPoints["Africa/Djibouti"] = new Compass.GeographicPoint(11.595, 43.148056));
            /* put */ (timeZoneGeographicPoints["Africa/Kampala"] = new Compass.GeographicPoint(0.3155556, 32.565556));
            /* put */ (timeZoneGeographicPoints["Africa/Khartoum"] = new Compass.GeographicPoint(15.588056, 32.53417));
            /* put */ (timeZoneGeographicPoints["Africa/Mogadishu"] = new Compass.GeographicPoint(2.0666666, 45.366665));
            /* put */ (timeZoneGeographicPoints["Africa/Nairobi"] = new Compass.GeographicPoint(-1.2833333, 36.816666));
            /* put */ (timeZoneGeographicPoints["Antarctica/Syowa"] = new Compass.GeographicPoint(-69.0, 39.5833));
            /* put */ (timeZoneGeographicPoints["Asia/Aden"] = new Compass.GeographicPoint(12.779445, 45.036667));
            /* put */ (timeZoneGeographicPoints["Asia/Baghdad"] = new Compass.GeographicPoint(33.33861, 44.39389));
            /* put */ (timeZoneGeographicPoints["Asia/Bahrain"] = new Compass.GeographicPoint(26.23611, 50.583057));
            /* put */ (timeZoneGeographicPoints["Asia/Kuwait"] = new Compass.GeographicPoint(29.369722, 47.978333));
            /* put */ (timeZoneGeographicPoints["Asia/Qatar"] = new Compass.GeographicPoint(25.286667, 51.533333));
            /* put */ (timeZoneGeographicPoints["Asia/Riyadh"] = new Compass.GeographicPoint(24.640833, 46.772778));
            var moscow = new Compass.GeographicPoint(55.752224, 37.615555);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-3"] = moscow);
            /* put */ (timeZoneGeographicPoints["Europe/Moscow"] = moscow);
            /* put */ (timeZoneGeographicPoints["Europe/Volgograd"] = new Compass.GeographicPoint(48.80472, 44.585835));
            /* put */ (timeZoneGeographicPoints["Indian/Antananarivo"] = new Compass.GeographicPoint(-18.916666, 47.516666));
            /* put */ (timeZoneGeographicPoints["Indian/Comoro"] = new Compass.GeographicPoint(-11.704166, 43.240276));
            /* put */ (timeZoneGeographicPoints["Indian/Mayotte"] = new Compass.GeographicPoint(-12.779445, 45.227222));
            /* put */ (timeZoneGeographicPoints["Asia/Riyadh87"] = new Compass.GeographicPoint(24.640833, 46.772778));
            /* put */ (timeZoneGeographicPoints["Asia/Riyadh88"] = new Compass.GeographicPoint(24.640833, 46.772778));
            /* put */ (timeZoneGeographicPoints["Asia/Riyadh89"] = new Compass.GeographicPoint(24.640833, 46.772778));
            /* put */ (timeZoneGeographicPoints["Mideast/Riyadh87"] = new Compass.GeographicPoint(24.640833, 46.772778));
            /* put */ (timeZoneGeographicPoints["Mideast/Riyadh88"] = new Compass.GeographicPoint(24.640833, 46.772778));
            /* put */ (timeZoneGeographicPoints["Mideast/Riyadh89"] = new Compass.GeographicPoint(24.640833, 46.772778));
            /* put */ (timeZoneGeographicPoints["Asia/Tehran"] = new Compass.GeographicPoint(35.671944, 51.424446));
            /* put */ (timeZoneGeographicPoints["Asia/Baku"] = new Compass.GeographicPoint(40.39528, 49.88222));
            var dubai = new Compass.GeographicPoint(25.252222, 55.28);
            /* put */ (timeZoneGeographicPoints["Asia/Dubai"] = dubai);
            /* put */ (timeZoneGeographicPoints["Asia/Muscat"] = new Compass.GeographicPoint(23.613333, 58.593334));
            /* put */ (timeZoneGeographicPoints["Asia/Tbilisi"] = new Compass.GeographicPoint(41.725, 44.790833));
            /* put */ (timeZoneGeographicPoints["Asia/Yerevan"] = new Compass.GeographicPoint(40.18111, 44.51361));
            /* put */ (timeZoneGeographicPoints["Etc/GMT-4"] = dubai);
            /* put */ (timeZoneGeographicPoints["Europe/Samara"] = new Compass.GeographicPoint(53.2, 50.15));
            /* put */ (timeZoneGeographicPoints["Indian/Mahe"] = new Compass.GeographicPoint(-4.616667, 55.45));
            /* put */ (timeZoneGeographicPoints["Indian/Mauritius"] = new Compass.GeographicPoint(-20.161945, 57.49889));
            /* put */ (timeZoneGeographicPoints["Indian/Reunion"] = new Compass.GeographicPoint(-20.866667, 55.466667));
            /* put */ (timeZoneGeographicPoints["Asia/Kabul"] = new Compass.GeographicPoint(34.516666, 69.183334));
            /* put */ (timeZoneGeographicPoints["Antarctica/Davis"] = new Compass.GeographicPoint(-68.5764, 77.9689));
            /* put */ (timeZoneGeographicPoints["Antarctica/Mawson"] = new Compass.GeographicPoint(-53.104, 73.514));
            /* put */ (timeZoneGeographicPoints["Asia/Aqtau"] = new Compass.GeographicPoint(43.65, 51.2));
            /* put */ (timeZoneGeographicPoints["Asia/Aqtobe"] = new Compass.GeographicPoint(50.298054, 57.18139));
            /* put */ (timeZoneGeographicPoints["Asia/Ashgabat"] = new Compass.GeographicPoint(37.95, 58.383335));
            /* put */ (timeZoneGeographicPoints["Asia/Ashkhabad"] = new Compass.GeographicPoint(37.95, 58.383335));
            /* put */ (timeZoneGeographicPoints["Asia/Dushanbe"] = new Compass.GeographicPoint(38.56, 68.77389));
            /* put */ (timeZoneGeographicPoints["Asia/Karachi"] = new Compass.GeographicPoint(24.866667, 67.05));
            /* put */ (timeZoneGeographicPoints["Asia/Oral"] = new Compass.GeographicPoint(51.233334, 51.366665));
            /* put */ (timeZoneGeographicPoints["Asia/Samarkand"] = new Compass.GeographicPoint(39.654167, 66.959724));
            /* put */ (timeZoneGeographicPoints["Asia/Tashkent"] = new Compass.GeographicPoint(41.316666, 69.25));
            /* put */ (timeZoneGeographicPoints["Asia/Yekaterinburg"] = new Compass.GeographicPoint(56.85, 60.6));
            var calcutta = new Compass.GeographicPoint(22.569721, 88.36972);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-5"] = calcutta);
            /* put */ (timeZoneGeographicPoints["Indian/Kerguelen"] = new Compass.GeographicPoint(-49.25, 69.583));
            /* put */ (timeZoneGeographicPoints["Indian/Maldives"] = new Compass.GeographicPoint(4.1666665, 73.5));
            /* put */ (timeZoneGeographicPoints["Asia/Calcutta"] = calcutta);
            /* put */ (timeZoneGeographicPoints["Asia/Colombo"] = new Compass.GeographicPoint(6.9319444, 79.84778));
            /* put */ (timeZoneGeographicPoints["Asia/Kolkata"] = calcutta);
            /* put */ (timeZoneGeographicPoints["Asia/Kathmandu"] = new Compass.GeographicPoint(27.716667, 85.316666));
            /* put */ (timeZoneGeographicPoints["Asia/Katmandu"] = new Compass.GeographicPoint(27.716667, 85.316666));
            /* put */ (timeZoneGeographicPoints["Antarctica/Vostok"] = new Compass.GeographicPoint(-78.4644, 106.8372));
            /* put */ (timeZoneGeographicPoints["Asia/Almaty"] = new Compass.GeographicPoint(43.25, 76.95));
            /* put */ (timeZoneGeographicPoints["Asia/Bishkek"] = new Compass.GeographicPoint(42.873055, 74.60028));
            var dacca = new Compass.GeographicPoint(23.723055, 90.40861);
            /* put */ (timeZoneGeographicPoints["Asia/Dacca"] = dacca);
            /* put */ (timeZoneGeographicPoints["Asia/Dhaka"] = dacca);
            /* put */ (timeZoneGeographicPoints["Asia/Novokuznetsk"] = new Compass.GeographicPoint(53.75, 87.1));
            /* put */ (timeZoneGeographicPoints["Asia/Novosibirsk"] = new Compass.GeographicPoint(55.04111, 82.93444));
            /* put */ (timeZoneGeographicPoints["Asia/Omsk"] = new Compass.GeographicPoint(55.0, 73.4));
            /* put */ (timeZoneGeographicPoints["Asia/Qyzylorda"] = new Compass.GeographicPoint(44.85278, 65.50916));
            /* put */ (timeZoneGeographicPoints["Asia/Thimbu"] = new Compass.GeographicPoint(27.483334, 89.6));
            /* put */ (timeZoneGeographicPoints["Asia/Thimphu"] = new Compass.GeographicPoint(27.483334, 89.6));
            /* put */ (timeZoneGeographicPoints["Etc/GMT-6"] = dacca);
            /* put */ (timeZoneGeographicPoints["Indian/Chagos"] = new Compass.GeographicPoint(-6.0, 71.5));
            /* put */ (timeZoneGeographicPoints["Asia/Rangoon"] = new Compass.GeographicPoint(16.783333, 96.166664));
            /* put */ (timeZoneGeographicPoints["Indian/Cocos"] = new Compass.GeographicPoint(-12.1167, 96.9));
            var bangkok = new Compass.GeographicPoint(13.75, 100.51667);
            /* put */ (timeZoneGeographicPoints["Asia/Bangkok"] = bangkok);
            /* put */ (timeZoneGeographicPoints["Asia/Ho_Chi_Minh"] = new Compass.GeographicPoint(10.75, 106.666664));
            /* put */ (timeZoneGeographicPoints["Asia/Hovd"] = new Compass.GeographicPoint(48.016666, 91.63333));
            /* put */ (timeZoneGeographicPoints["Asia/Jakarta"] = new Compass.GeographicPoint(-6.174444, 106.829445));
            /* put */ (timeZoneGeographicPoints["Asia/Krasnoyarsk"] = new Compass.GeographicPoint(56.009724, 92.791664));
            /* put */ (timeZoneGeographicPoints["Asia/Phnom_Penh"] = new Compass.GeographicPoint(11.55, 104.916664));
            /* put */ (timeZoneGeographicPoints["Asia/Pontianak"] = new Compass.GeographicPoint(-0.0333333, 109.333336));
            /* put */ (timeZoneGeographicPoints["Asia/Saigon"] = new Compass.GeographicPoint(10.75, 106.666664));
            /* put */ (timeZoneGeographicPoints["Asia/Vientiane"] = new Compass.GeographicPoint(17.966667, 102.6));
            /* put */ (timeZoneGeographicPoints["Etc/GMT-7"] = bangkok);
            /* put */ (timeZoneGeographicPoints["Indian/Christmas"] = new Compass.GeographicPoint(-10.416667, 105.71667));
            /* put */ (timeZoneGeographicPoints["Asia/Brunei"] = new Compass.GeographicPoint(4.883333, 114.933334));
            /* put */ (timeZoneGeographicPoints["Asia/Choibalsan"] = new Compass.GeographicPoint(48.066666, 114.5));
            /* put */ (timeZoneGeographicPoints["Asia/Chongqing"] = new Compass.GeographicPoint(29.562778, 106.55278));
            /* put */ (timeZoneGeographicPoints["Asia/Chungking"] = new Compass.GeographicPoint(29.562778, 106.55278));
            /* put */ (timeZoneGeographicPoints["Asia/Harbin"] = new Compass.GeographicPoint(45.75, 126.65));
            /* put */ (timeZoneGeographicPoints["Asia/Hong_Kong"] = new Compass.GeographicPoint(22.283333, 114.15));
            /* put */ (timeZoneGeographicPoints["Asia/Irkutsk"] = new Compass.GeographicPoint(52.266666, 104.333336));
            /* put */ (timeZoneGeographicPoints["Asia/Kashgar"] = new Compass.GeographicPoint(39.391388, 76.04));
            /* put */ (timeZoneGeographicPoints["Asia/Kuala_Lumpur"] = new Compass.GeographicPoint(3.1666667, 101.7));
            /* put */ (timeZoneGeographicPoints["Asia/Kuching"] = new Compass.GeographicPoint(1.55, 110.333336));
            /* put */ (timeZoneGeographicPoints["Asia/Macao"] = new Compass.GeographicPoint(22.2, 113.55));
            /* put */ (timeZoneGeographicPoints["Asia/Macau"] = new Compass.GeographicPoint(22.2, 113.55));
            /* put */ (timeZoneGeographicPoints["Asia/Makassar"] = new Compass.GeographicPoint(2.45, 99.78333));
            /* put */ (timeZoneGeographicPoints["Asia/Manila"] = new Compass.GeographicPoint(14.604167, 120.98222));
            var shanghai = new Compass.GeographicPoint(31.005, 121.40861);
            /* put */ (timeZoneGeographicPoints["Asia/Shanghai"] = shanghai);
            /* put */ (timeZoneGeographicPoints["Asia/Singapore"] = new Compass.GeographicPoint(1.2930557, 103.855835));
            /* put */ (timeZoneGeographicPoints["Asia/Taipei"] = new Compass.GeographicPoint(25.039167, 121.525));
            /* put */ (timeZoneGeographicPoints["Asia/Ujung_Pandang"] = new Compass.GeographicPoint(-5.1305556, 119.406944));
            /* put */ (timeZoneGeographicPoints["Asia/Ulaanbaatar"] = new Compass.GeographicPoint(47.916668, 106.916664));
            /* put */ (timeZoneGeographicPoints["Asia/Ulan_Bator"] = new Compass.GeographicPoint(47.916668, 106.916664));
            /* put */ (timeZoneGeographicPoints["Asia/Urumqi"] = new Compass.GeographicPoint(43.8, 87.583336));
            /* put */ (timeZoneGeographicPoints["Australia/Perth"] = new Compass.GeographicPoint(-31.933332, 115.833336));
            /* put */ (timeZoneGeographicPoints["Australia/West"] = new Compass.GeographicPoint(-31.933332, 115.833336));
            /* put */ (timeZoneGeographicPoints["Etc/GMT-8"] = shanghai);
            /* put */ (timeZoneGeographicPoints["Australia/Eucla"] = new Compass.GeographicPoint(-31.716667, 128.86667));
            /* put */ (timeZoneGeographicPoints["Asia/Dili"] = new Compass.GeographicPoint(-8.55, 125.5833));
            /* put */ (timeZoneGeographicPoints["Asia/Jayapura"] = new Compass.GeographicPoint(-2.5333333, 140.7));
            /* put */ (timeZoneGeographicPoints["Asia/Pyongyang"] = new Compass.GeographicPoint(39.019444, 125.75472));
            /* put */ (timeZoneGeographicPoints["Asia/Seoul"] = new Compass.GeographicPoint(37.566387, 126.999725));
            var tokyo = new Compass.GeographicPoint(35.685, 139.75139);
            /* put */ (timeZoneGeographicPoints["Asia/Tokyo"] = tokyo);
            /* put */ (timeZoneGeographicPoints["Asia/Yakutsk"] = new Compass.GeographicPoint(62.03389, 129.73306));
            /* put */ (timeZoneGeographicPoints["Etc/GMT-9"] = tokyo);
            /* put */ (timeZoneGeographicPoints["Pacific/Palau"] = new Compass.GeographicPoint(7.5, 134.6241));
            /* put */ (timeZoneGeographicPoints["Australia/Adelaide"] = new Compass.GeographicPoint(-34.933334, 138.6));
            /* put */ (timeZoneGeographicPoints["Australia/Broken_Hill"] = new Compass.GeographicPoint(-31.95, 141.43333));
            /* put */ (timeZoneGeographicPoints["Australia/Darwin"] = new Compass.GeographicPoint(-12.466667, 130.83333));
            /* put */ (timeZoneGeographicPoints["Australia/North"] = new Compass.GeographicPoint(-12.466667, 130.83333));
            /* put */ (timeZoneGeographicPoints["Australia/South"] = new Compass.GeographicPoint(-34.933334, 138.6));
            /* put */ (timeZoneGeographicPoints["Australia/Yancowinna"] = new Compass.GeographicPoint(-31.7581, 141.7178));
            /* put */ (timeZoneGeographicPoints["Antarctica/DumontDUrville"] = new Compass.GeographicPoint(-66.66277, 140.0014));
            /* put */ (timeZoneGeographicPoints["Asia/Sakhalin"] = new Compass.GeographicPoint(51.0, 143.0));
            /* put */ (timeZoneGeographicPoints["Asia/Vladivostok"] = new Compass.GeographicPoint(43.133335, 131.9));
            /* put */ (timeZoneGeographicPoints["Australia/ACT"] = new Compass.GeographicPoint(-35.283333, 149.21666));
            /* put */ (timeZoneGeographicPoints["Australia/Brisbane"] = new Compass.GeographicPoint(-27.5, 153.01666));
            /* put */ (timeZoneGeographicPoints["Australia/Canberra"] = new Compass.GeographicPoint(-35.283333, 149.21666));
            /* put */ (timeZoneGeographicPoints["Australia/Currie"] = new Compass.GeographicPoint(-39.933334, 143.86667));
            /* put */ (timeZoneGeographicPoints["Australia/Hobart"] = new Compass.GeographicPoint(-42.916668, 147.33333));
            /* put */ (timeZoneGeographicPoints["Australia/Lindeman"] = new Compass.GeographicPoint(-20.45, 149.0333));
            /* put */ (timeZoneGeographicPoints["Australia/Melbourne"] = new Compass.GeographicPoint(-37.816666, 144.96666));
            var sydney = new Compass.GeographicPoint(-33.88333, 151.21666);
            /* put */ (timeZoneGeographicPoints["Australia/NSW"] = sydney);
            /* put */ (timeZoneGeographicPoints["Australia/Queensland"] = new Compass.GeographicPoint(-27.5, 153.01666));
            /* put */ (timeZoneGeographicPoints["Australia/Sydney"] = sydney);
            /* put */ (timeZoneGeographicPoints["Australia/Tasmania"] = new Compass.GeographicPoint(-42.916668, 147.33333));
            /* put */ (timeZoneGeographicPoints["Australia/Victoria"] = new Compass.GeographicPoint(-37.816666, 144.96666));
            /* put */ (timeZoneGeographicPoints["Etc/GMT-10"] = sydney);
            /* put */ (timeZoneGeographicPoints["Pacific/Guam"] = new Compass.GeographicPoint(13.467, 144.75));
            /* put */ (timeZoneGeographicPoints["Pacific/Port_Moresby"] = new Compass.GeographicPoint(-9.464723, 147.1925));
            /* put */ (timeZoneGeographicPoints["Pacific/Saipan"] = new Compass.GeographicPoint(15.1833, 145.75));
            /* put */ (timeZoneGeographicPoints["Pacific/Truk"] = new Compass.GeographicPoint(7.4167, 151.7833));
            /* put */ (timeZoneGeographicPoints["Pacific/Yap"] = new Compass.GeographicPoint(9.514444, 138.12917));
            /* put */ (timeZoneGeographicPoints["Australia/LHI"] = new Compass.GeographicPoint(-31.55, 159.083));
            /* put */ (timeZoneGeographicPoints["Australia/Lord_Howe"] = new Compass.GeographicPoint(-31.55, 159.083));
            /* put */ (timeZoneGeographicPoints["Antarctica/Casey"] = new Compass.GeographicPoint(-66.2833, 110.5333));
            /* put */ (timeZoneGeographicPoints["Asia/Magadan"] = new Compass.GeographicPoint(59.566666, 150.8));
            var noumea = new Compass.GeographicPoint(-22.266666, 166.45);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-11"] = noumea);
            /* put */ (timeZoneGeographicPoints["Pacific/Efate"] = new Compass.GeographicPoint(-17.667, 168.417));
            /* put */ (timeZoneGeographicPoints["Pacific/Guadalcanal"] = new Compass.GeographicPoint(-9.617, 160.183));
            /* put */ (timeZoneGeographicPoints["Pacific/Kosrae"] = new Compass.GeographicPoint(5.317, 162.983));
            /* put */ (timeZoneGeographicPoints["Pacific/Noumea"] = noumea);
            /* put */ (timeZoneGeographicPoints["Pacific/Ponape"] = new Compass.GeographicPoint(6.963889, 158.20833));
            /* put */ (timeZoneGeographicPoints["Pacific/Norfolk"] = new Compass.GeographicPoint(-29.05, 167.95));
            /* put */ (timeZoneGeographicPoints["Antarctica/McMurdo"] = new Compass.GeographicPoint(-77.85, 166.667));
            /* put */ (timeZoneGeographicPoints["Antarctica/South_Pole"] = new Compass.GeographicPoint(-90.0, 0.0));
            /* put */ (timeZoneGeographicPoints["Asia/Anadyr"] = new Compass.GeographicPoint(64.75, 177.48334));
            /* put */ (timeZoneGeographicPoints["Asia/Kamchatka"] = new Compass.GeographicPoint(57.0, 160.0));
            var auckland = new Compass.GeographicPoint(-36.86667, 174.76666);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-12"] = auckland);
            /* put */ (timeZoneGeographicPoints["Pacific/Auckland"] = auckland);
            /* put */ (timeZoneGeographicPoints["Pacific/Fiji"] = new Compass.GeographicPoint(-18.133333, 178.41667));
            /* put */ (timeZoneGeographicPoints["Pacific/Funafuti"] = new Compass.GeographicPoint(-8.516666, 179.21666));
            /* put */ (timeZoneGeographicPoints["Pacific/Kwajalein"] = new Compass.GeographicPoint(9.1939, 167.4597));
            /* put */ (timeZoneGeographicPoints["Pacific/Majuro"] = new Compass.GeographicPoint(7.1, 171.38333));
            /* put */ (timeZoneGeographicPoints["Pacific/Nauru"] = new Compass.GeographicPoint(-0.5322, 166.9328));
            /* put */ (timeZoneGeographicPoints["Pacific/Tarawa"] = new Compass.GeographicPoint(1.4167, 173.0333));
            /* put */ (timeZoneGeographicPoints["Pacific/Wake"] = new Compass.GeographicPoint(19.2833, 166.6));
            /* put */ (timeZoneGeographicPoints["Pacific/Wallis"] = new Compass.GeographicPoint(-13.273, -176.205));
            /* put */ (timeZoneGeographicPoints["Pacific/Chatham"] = new Compass.GeographicPoint(-43.883, -176.517));
            var enderbury = new Compass.GeographicPoint(-3.133, -171.0833);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-13"] = enderbury);
            /* put */ (timeZoneGeographicPoints["Pacific/Enderbury"] = enderbury);
            /* put */ (timeZoneGeographicPoints["Pacific/Tongatapu"] = new Compass.GeographicPoint(-21.2114, -175.153));
            var kiritimati = new Compass.GeographicPoint(1.883, -157.4);
            /* put */ (timeZoneGeographicPoints["Etc/GMT-14"] = kiritimati);
            /* put */ (timeZoneGeographicPoints["Pacific/Kiritimati"] = kiritimati);
            /* put */ (timeZoneGeographicPoints["MIT"] = apia);
            /* put */ (timeZoneGeographicPoints["HST"] = honolulu);
            /* put */ (timeZoneGeographicPoints["PST"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["PST8PDT"] = losAngeles);
            /* put */ (timeZoneGeographicPoints["MST"] = denver);
            /* put */ (timeZoneGeographicPoints["MST7MDT"] = denver);
            /* put */ (timeZoneGeographicPoints["Navajo"] = new Compass.GeographicPoint(35.6728, -109.0622));
            /* put */ (timeZoneGeographicPoints["PNT"] = new Compass.GeographicPoint(33.448334, -112.07333));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Knox"] = new Compass.GeographicPoint(41.295834, -86.625));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Tell_City"] = new Compass.GeographicPoint(37.953, -86.7614));
            /* put */ (timeZoneGeographicPoints["America/North_Dakota/Center"] = new Compass.GeographicPoint(47.115, -101.3003));
            /* put */ (timeZoneGeographicPoints["America/North_Dakota/New_Salem"] = new Compass.GeographicPoint(46.843, 101.4119));
            /* put */ (timeZoneGeographicPoints["CST"] = chicago);
            /* put */ (timeZoneGeographicPoints["CST6CDT"] = chicago);
            /* put */ (timeZoneGeographicPoints["America/Indiana/Indianapolis"] = new Compass.GeographicPoint(39.768333, -86.15806));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Marengo"] = new Compass.GeographicPoint(36.3706, -86.3433));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Petersburg"] = new Compass.GeographicPoint(38.4917, -87.2803));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Vevay"] = new Compass.GeographicPoint(38.7458, -85.0711));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Vincennes"] = new Compass.GeographicPoint(38.6783, -87.5164));
            /* put */ (timeZoneGeographicPoints["America/Indiana/Winamac"] = new Compass.GeographicPoint(41.0525, -86.6044));
            /* put */ (timeZoneGeographicPoints["America/Kentucky/Louisville"] = new Compass.GeographicPoint(38.2542, -85.7603));
            /* put */ (timeZoneGeographicPoints["America/Kentucky/Monticello"] = new Compass.GeographicPoint(36.8381, -84.85));
            /* put */ (timeZoneGeographicPoints["Cuba"] = new Compass.GeographicPoint(23.131945, -82.36417));
            /* put */ (timeZoneGeographicPoints["EST"] = newYork);
            /* put */ (timeZoneGeographicPoints["EST5EDT"] = newYork);
            /* put */ (timeZoneGeographicPoints["IET"] = newYork);
            /* put */ (timeZoneGeographicPoints["AST"] = new Compass.GeographicPoint(44.65, -63.6));
            /* put */ (timeZoneGeographicPoints["Jamaica"] = new Compass.GeographicPoint(18.0, -76.8));
            /* put */ (timeZoneGeographicPoints["America/Argentina/San_Luis"] = new Compass.GeographicPoint(-33.3, -66.333));
            /* put */ (timeZoneGeographicPoints["PRT"] = new Compass.GeographicPoint(18.467, 66.117));
            /* put */ (timeZoneGeographicPoints["CNT"] = new Compass.GeographicPoint(47.5675, -52.7072));
            /* put */ (timeZoneGeographicPoints["AGT"] = new Compass.GeographicPoint(-34.5875, -58.6725));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Buenos_Aires"] = new Compass.GeographicPoint(-34.5875, -58.6725));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Catamarca"] = new Compass.GeographicPoint(-28.466667, -65.78333));
            /* put */ (timeZoneGeographicPoints["America/Argentina/ComodRivadavia"] = new Compass.GeographicPoint(-42.7578, -65.0297));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Cordoba"] = new Compass.GeographicPoint(-31.4, -64.183334));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Jujuy"] = new Compass.GeographicPoint(-24.183332, -65.3));
            /* put */ (timeZoneGeographicPoints["America/Argentina/La_Rioja"] = new Compass.GeographicPoint(-29.4144, -66.8552));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Mendoza"] = new Compass.GeographicPoint(-32.883335, -68.816666));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Rio_Gallegos"] = new Compass.GeographicPoint(-51.625, -69.2286));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Salta"] = new Compass.GeographicPoint(-24.783333, -65.416664));
            /* put */ (timeZoneGeographicPoints["America/Argentina/San_Juan"] = new Compass.GeographicPoint(-31.5333, -68.5167));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Tucuman"] = new Compass.GeographicPoint(-26.8167, 65.2167));
            /* put */ (timeZoneGeographicPoints["America/Argentina/Ushuaia"] = new Compass.GeographicPoint(-54.6, -68.3));
            /* put */ (timeZoneGeographicPoints["BET"] = saoPaulo);
            /* put */ (timeZoneGeographicPoints["Eire"] = new Compass.GeographicPoint(53.333057, -6.248889));
            /* put */ (timeZoneGeographicPoints["GB"] = greenwich);
            /* put */ (timeZoneGeographicPoints["GB-Eire"] = new Compass.GeographicPoint(53.333057, -6.248889));
            /* put */ (timeZoneGeographicPoints["GMT"] = greenwich);
            /* put */ (timeZoneGeographicPoints["GMT0"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Greenwich"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Iceland"] = new Compass.GeographicPoint(64.1333, -21.9333));
            /* put */ (timeZoneGeographicPoints["Portugal"] = new Compass.GeographicPoint(38.716667, -9.133333));
            /* put */ (timeZoneGeographicPoints["UCT"] = greenwich);
            /* put */ (timeZoneGeographicPoints["UTC"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Universal"] = greenwich);
            /* put */ (timeZoneGeographicPoints["WET"] = greenwich);
            /* put */ (timeZoneGeographicPoints["Zulu"] = greenwich);
            /* put */ (timeZoneGeographicPoints["CET"] = paris);
            /* put */ (timeZoneGeographicPoints["ECT"] = paris);
            /* put */ (timeZoneGeographicPoints["MET"] = new Compass.GeographicPoint(35.671944, 51.424446));
            /* put */ (timeZoneGeographicPoints["Poland"] = new Compass.GeographicPoint(52.25, 21.0));
            /* put */ (timeZoneGeographicPoints["ART"] = new Compass.GeographicPoint(-34.5875, -58.6725));
            /* put */ (timeZoneGeographicPoints["CAT"] = new Compass.GeographicPoint(-1.9536111, 30.060556));
            /* put */ (timeZoneGeographicPoints["EET"] = new Compass.GeographicPoint(37.983334, 23.733334));
            /* put */ (timeZoneGeographicPoints["Egypt"] = new Compass.GeographicPoint(30.05, 31.25));
            /* put */ (timeZoneGeographicPoints["Israel"] = new Compass.GeographicPoint(32.066666, 34.766666));
            /* put */ (timeZoneGeographicPoints["Libya"] = new Compass.GeographicPoint(32.8925, 13.18));
            /* put */ (timeZoneGeographicPoints["Turkey"] = new Compass.GeographicPoint(41.018612, 28.964722));
            /* put */ (timeZoneGeographicPoints["EAT"] = new Compass.GeographicPoint(-1.2833333, 36.816666));
            /* put */ (timeZoneGeographicPoints["W-SU"] = moscow);
            /* put */ (timeZoneGeographicPoints["Iran"] = new Compass.GeographicPoint(35.671944, 51.424446));
            /* put */ (timeZoneGeographicPoints["NET"] = new Compass.GeographicPoint(40.18111, 44.51361));
            /* put */ (timeZoneGeographicPoints["PLT"] = new Compass.GeographicPoint(24.866667, 67.05));
            /* put */ (timeZoneGeographicPoints["IST"] = calcutta);
            /* put */ (timeZoneGeographicPoints["BST"] = dacca);
            /* put */ (timeZoneGeographicPoints["VST"] = bangkok);
            /* put */ (timeZoneGeographicPoints["CTT"] = shanghai);
            /* put */ (timeZoneGeographicPoints["Hongkong"] = new Compass.GeographicPoint(22.283333, 114.15));
            /* put */ (timeZoneGeographicPoints["PRC"] = shanghai);
            /* put */ (timeZoneGeographicPoints["Singapore"] = new Compass.GeographicPoint(1.2930557, 103.855835));
            /* put */ (timeZoneGeographicPoints["JST"] = tokyo);
            /* put */ (timeZoneGeographicPoints["Japan"] = tokyo);
            /* put */ (timeZoneGeographicPoints["ROK"] = new Compass.GeographicPoint(37.566387, 126.999725));
            /* put */ (timeZoneGeographicPoints["ACT"] = new Compass.GeographicPoint(-35.283333, 149.21666));
            /* put */ (timeZoneGeographicPoints["AET"] = sydney);
            /* put */ (timeZoneGeographicPoints["SST"] = new Compass.GeographicPoint(-28.4667, 159.8167));
            /* put */ (timeZoneGeographicPoints["Kwajalein"] = new Compass.GeographicPoint(9.1939, 167.4597));
            /* put */ (timeZoneGeographicPoints["NST"] = auckland);
            /* put */ (timeZoneGeographicPoints["NZ"] = auckland);
            /* put */ (timeZoneGeographicPoints["NZ-CHAT"] = new Compass.GeographicPoint(-43.883, -176.517));
            Compass.timeZoneGeographicPointsReference = (timeZoneGeographicPoints);
        }
        var point = (function (m, k) { return m[k] === undefined ? null : m[k]; })(timeZoneGeographicPoints, /* getID */ /* getDefault */ "UTC");
        if (point == null) {
            point = /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(timeZoneGeographicPoints, "Etc/GMT");
        }
        this.latitude = (function (x) { return x * Math.PI / 180; })(point.getLatitudeInDegrees());
        this.longitude = (function (x) { return x * Math.PI / 180; })(point.getLongitudeInDegrees());
    };
    Compass.timeZoneGeographicPointsReference = null;
    return Compass;
}(HomeObject));
Compass["__class"] = "com.eteks.sweethome3d.model.Compass";
Compass["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable"];
(function (Compass) {
    /**
     * A geographic point used to store known points.
     * @param {number} latitudeInDegrees
     * @param {number} longitudeInDegrees
     * @class
     */
    var GeographicPoint = /** @class */ (function () {
        function GeographicPoint(latitudeInDegrees, longitudeInDegrees) {
            if (this.latitudeInDegrees === undefined) {
                this.latitudeInDegrees = 0;
            }
            if (this.longitudeInDegrees === undefined) {
                this.longitudeInDegrees = 0;
            }
            this.latitudeInDegrees = latitudeInDegrees;
            this.longitudeInDegrees = longitudeInDegrees;
        }
        GeographicPoint.prototype.getLatitudeInDegrees = function () {
            return this.latitudeInDegrees;
        };
        GeographicPoint.prototype.getLongitudeInDegrees = function () {
            return this.longitudeInDegrees;
        };
        return GeographicPoint;
    }());
    Compass.GeographicPoint = GeographicPoint;
    GeographicPoint["__class"] = "com.eteks.sweethome3d.model.Compass.GeographicPoint";
})(Compass || (Compass = {}));
Compass['__transients'] = ['pointsCache', 'dateCache', 'sunElevationCache', 'sunAzimuthCache', 'propertyChangeSupport'];
/**
 * Creates a camera at given location and angles.
 * @param {string} id
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} yaw
 * @param {number} pitch
 * @param {number} fieldOfView
 * @param {number} time
 * @param {Camera.Lens} lens
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Camera = /** @class */ (function (_super) {
    __extends(Camera, _super);
    function Camera(id, x, y, z, yaw, pitch, fieldOfView, time, lens) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof yaw === 'number') || yaw === null) && ((typeof pitch === 'number') || pitch === null) && ((typeof fieldOfView === 'number') || fieldOfView === null) && ((typeof time === 'number') || time === null) && ((typeof lens === 'number') || lens === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.z === undefined) {
                _this.z = 0;
            }
            if (_this.yaw === undefined) {
                _this.yaw = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = 0;
            }
            if (_this.fieldOfView === undefined) {
                _this.fieldOfView = 0;
            }
            if (_this.time === undefined) {
                _this.time = 0;
            }
            if (_this.lens === undefined) {
                _this.lens = null;
            }
            if (_this.lensName === undefined) {
                _this.lensName = null;
            }
            _this.x = x;
            _this.y = y;
            _this.z = z;
            _this.yaw = yaw;
            _this.pitch = pitch;
            _this.fieldOfView = fieldOfView;
            _this.time = time;
            _this.lens = lens;
        }
        else if (((typeof id === 'number') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof yaw === 'number') || yaw === null) && ((typeof pitch === 'number') || pitch === null) && ((typeof fieldOfView === 'number') || fieldOfView === null) && ((typeof time === 'number') || time === null) && lens === undefined) {
            var __args = arguments;
            var x_2 = __args[0];
            var y_2 = __args[1];
            var z_1 = __args[2];
            var yaw_1 = __args[3];
            var pitch_1 = __args[4];
            var fieldOfView_1 = __args[5];
            var time_1 = __args[6];
            var lens_1 = __args[7];
            {
                var __args_57 = arguments;
                var id_6 = HomeObject.createId("camera");
                _this = _super.call(this, id_6) || this;
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.x === undefined) {
                    _this.x = 0;
                }
                if (_this.y === undefined) {
                    _this.y = 0;
                }
                if (_this.z === undefined) {
                    _this.z = 0;
                }
                if (_this.yaw === undefined) {
                    _this.yaw = 0;
                }
                if (_this.pitch === undefined) {
                    _this.pitch = 0;
                }
                if (_this.fieldOfView === undefined) {
                    _this.fieldOfView = 0;
                }
                if (_this.time === undefined) {
                    _this.time = 0;
                }
                if (_this.lens === undefined) {
                    _this.lens = null;
                }
                if (_this.lensName === undefined) {
                    _this.lensName = null;
                }
                _this.x = x_2;
                _this.y = y_2;
                _this.z = z_1;
                _this.yaw = yaw_1;
                _this.pitch = pitch_1;
                _this.fieldOfView = fieldOfView_1;
                _this.time = time_1;
                _this.lens = lens_1;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.z === undefined) {
                _this.z = 0;
            }
            if (_this.yaw === undefined) {
                _this.yaw = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = 0;
            }
            if (_this.fieldOfView === undefined) {
                _this.fieldOfView = 0;
            }
            if (_this.time === undefined) {
                _this.time = 0;
            }
            if (_this.lens === undefined) {
                _this.lens = null;
            }
            if (_this.lensName === undefined) {
                _this.lensName = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof yaw === 'number') || yaw === null) && ((typeof pitch === 'number') || pitch === null) && ((typeof fieldOfView === 'number') || fieldOfView === null) && time === undefined && lens === undefined) {
            var __args = arguments;
            {
                var __args_58 = arguments;
                var time_2 = Camera.midday();
                var lens_2 = Camera.Lens.PINHOLE;
                _this = _super.call(this, id) || this;
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.x === undefined) {
                    _this.x = 0;
                }
                if (_this.y === undefined) {
                    _this.y = 0;
                }
                if (_this.z === undefined) {
                    _this.z = 0;
                }
                if (_this.yaw === undefined) {
                    _this.yaw = 0;
                }
                if (_this.pitch === undefined) {
                    _this.pitch = 0;
                }
                if (_this.fieldOfView === undefined) {
                    _this.fieldOfView = 0;
                }
                if (_this.time === undefined) {
                    _this.time = 0;
                }
                if (_this.lens === undefined) {
                    _this.lens = null;
                }
                if (_this.lensName === undefined) {
                    _this.lensName = null;
                }
                _this.x = x;
                _this.y = y;
                _this.z = z;
                _this.yaw = yaw;
                _this.pitch = pitch;
                _this.fieldOfView = fieldOfView;
                _this.time = time_2;
                _this.lens = lens_2;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.z === undefined) {
                _this.z = 0;
            }
            if (_this.yaw === undefined) {
                _this.yaw = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = 0;
            }
            if (_this.fieldOfView === undefined) {
                _this.fieldOfView = 0;
            }
            if (_this.time === undefined) {
                _this.time = 0;
            }
            if (_this.lens === undefined) {
                _this.lens = null;
            }
            if (_this.lensName === undefined) {
                _this.lensName = null;
            }
        }
        else if (((typeof id === 'number') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof yaw === 'number') || yaw === null) && ((typeof pitch === 'number') || pitch === null) && fieldOfView === undefined && time === undefined && lens === undefined) {
            var __args = arguments;
            var x_3 = __args[0];
            var y_3 = __args[1];
            var z_2 = __args[2];
            var yaw_2 = __args[3];
            var pitch_2 = __args[4];
            var fieldOfView_2 = __args[5];
            {
                var __args_59 = arguments;
                var time_3 = Camera.midday();
                var lens_3 = Camera.Lens.PINHOLE;
                {
                    var __args_60 = arguments;
                    var id_7 = HomeObject.createId("camera");
                    _this = _super.call(this, id_7) || this;
                    if (_this.name === undefined) {
                        _this.name = null;
                    }
                    if (_this.x === undefined) {
                        _this.x = 0;
                    }
                    if (_this.y === undefined) {
                        _this.y = 0;
                    }
                    if (_this.z === undefined) {
                        _this.z = 0;
                    }
                    if (_this.yaw === undefined) {
                        _this.yaw = 0;
                    }
                    if (_this.pitch === undefined) {
                        _this.pitch = 0;
                    }
                    if (_this.fieldOfView === undefined) {
                        _this.fieldOfView = 0;
                    }
                    if (_this.time === undefined) {
                        _this.time = 0;
                    }
                    if (_this.lens === undefined) {
                        _this.lens = null;
                    }
                    if (_this.lensName === undefined) {
                        _this.lensName = null;
                    }
                    _this.x = x_3;
                    _this.y = y_3;
                    _this.z = z_2;
                    _this.yaw = yaw_2;
                    _this.pitch = pitch_2;
                    _this.fieldOfView = fieldOfView_2;
                    _this.time = time_3;
                    _this.lens = lens_3;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.x === undefined) {
                    _this.x = 0;
                }
                if (_this.y === undefined) {
                    _this.y = 0;
                }
                if (_this.z === undefined) {
                    _this.z = 0;
                }
                if (_this.yaw === undefined) {
                    _this.yaw = 0;
                }
                if (_this.pitch === undefined) {
                    _this.pitch = 0;
                }
                if (_this.fieldOfView === undefined) {
                    _this.fieldOfView = 0;
                }
                if (_this.time === undefined) {
                    _this.time = 0;
                }
                if (_this.lens === undefined) {
                    _this.lens = null;
                }
                if (_this.lensName === undefined) {
                    _this.lensName = null;
                }
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.z === undefined) {
                _this.z = 0;
            }
            if (_this.yaw === undefined) {
                _this.yaw = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = 0;
            }
            if (_this.fieldOfView === undefined) {
                _this.fieldOfView = 0;
            }
            if (_this.time === undefined) {
                _this.time = 0;
            }
            if (_this.lens === undefined) {
                _this.lens = null;
            }
            if (_this.lensName === undefined) {
                _this.lensName = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the time of midday today in milliseconds since the Epoch in UTC time zone.
     * @return {number}
     * @private
     */
    Camera.midday = function () {
        var midday = new Date();
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCHours(p) : d.setHours(p); })(midday, 12);
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCMinutes(p) : d.setMinutes(p); })(midday, 0);
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCSeconds(p) : d.setSeconds(p); })(midday, 0);
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCMilliseconds(p) : d.setMilliseconds(p); })(midday, 0);
        return /* getTimeInMillis */ midday.getTime();
    };
    /**
     * Returns the name of this camera.
     * @return {string}
     */
    Camera.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of this camera and notifies listeners of this change.
     * @param {string} name
     */
    Camera.prototype.setName = function (name) {
        if (name !== this.name && (name == null || !(name === this.name))) {
            var oldName = this.name;
            this.name = name;
            this.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns the yaw angle in radians of this camera.
     * @return {number}
     */
    Camera.prototype.getYaw = function () {
        return this.yaw;
    };
    /**
     * Sets the yaw angle in radians of this camera and notifies listeners of this change.
     * Yaw axis is vertical axis.
     * @param {number} yaw
     */
    Camera.prototype.setYaw = function (yaw) {
        if (yaw !== this.yaw) {
            var oldYaw = this.yaw;
            this.yaw = yaw;
            this.firePropertyChange(/* name */ "YAW", oldYaw, yaw);
        }
    };
    /**
     * Returns the pitch angle in radians of this camera.
     * @return {number}
     */
    Camera.prototype.getPitch = function () {
        return this.pitch;
    };
    /**
     * Sets the pitch angle in radians of this camera and notifies listeners of this change.
     * Pitch axis is horizontal transverse axis.
     * @param {number} pitch
     */
    Camera.prototype.setPitch = function (pitch) {
        if (pitch !== this.pitch) {
            var oldPitch = this.pitch;
            this.pitch = pitch;
            this.firePropertyChange(/* name */ "PITCH", oldPitch, pitch);
        }
    };
    /**
     * Returns the field of view in radians of this camera.
     * @return {number}
     */
    Camera.prototype.getFieldOfView = function () {
        return this.fieldOfView;
    };
    /**
     * Sets the field of view in radians of this camera and notifies listeners of this change.
     * @param {number} fieldOfView
     */
    Camera.prototype.setFieldOfView = function (fieldOfView) {
        if (fieldOfView !== this.fieldOfView) {
            var oldFieldOfView = this.fieldOfView;
            this.fieldOfView = fieldOfView;
            this.firePropertyChange(/* name */ "FIELD_OF_VIEW", oldFieldOfView, fieldOfView);
        }
    };
    /**
     * Returns the abscissa of this camera.
     * @return {number}
     */
    Camera.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the abscissa of this camera and notifies listeners of this change.
     * @param {number} x
     */
    Camera.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the ordinate of this camera.
     * @return {number}
     */
    Camera.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the ordinate of this camera and notifies listeners of this change.
     * @param {number} y
     */
    Camera.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the elevation of this camera.
     * @return {number}
     */
    Camera.prototype.getZ = function () {
        return this.z;
    };
    /**
     * Sets the elevation of this camera and notifies listeners of this change.
     * @param {number} z
     */
    Camera.prototype.setZ = function (z) {
        if (z !== this.z) {
            var oldZ = this.z;
            this.z = z;
            this.firePropertyChange(/* name */ "Z", oldZ, z);
        }
    };
    /**
     * Returns the time in milliseconds when this camera is used.
     * @return {number} a time in milliseconds since the Epoch in UTC time zone
     */
    Camera.prototype.getTime = function () {
        return this.time;
    };
    /**
     * Sets the use time in milliseconds since the Epoch in UTC time zone,
     * and notifies listeners of this change.
     * @param {number} time
     */
    Camera.prototype.setTime = function (time) {
        if (this.time !== time) {
            var oldTime = this.time;
            this.time = time;
            this.firePropertyChange(/* name */ "TIME", oldTime, time);
        }
    };
    /**
     * Returns a time expressed in UTC time zone converted to the given time zone.
     * @param {number} utcTime
     * @param {string} timeZone
     * @return {number}
     */
    Camera.convertTimeToTimeZone = function (utcTime, timeZone) {
        var utcCalendar = new Date();
        /* setTimeInMillis */ utcCalendar.setTime(utcTime);
        var convertedCalendar = new Date();
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCFullYear(p) : d.setFullYear(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCFullYear() : d.getFullYear(); })(utcCalendar));
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCMonth(p) : d.setMonth(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCMonth() : d.getMonth(); })(utcCalendar));
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCDate(p) : d.setDate(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCDate() : d.getDate(); })(utcCalendar));
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCHours(p) : d.setHours(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCHours() : d.getHours(); })(utcCalendar));
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCMinutes(p) : d.setMinutes(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCMinutes() : d.getMinutes(); })(utcCalendar));
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCSeconds(p) : d.setSeconds(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCSeconds() : d.getSeconds(); })(utcCalendar));
        /* set */ (function (d, p) { return d["UTC"] ? d.setUTCMilliseconds(p) : d.setMilliseconds(p); })(convertedCalendar, /* get */ (function (d) { return d["UTC"] ? d.getUTCMilliseconds() : d.getMilliseconds(); })(utcCalendar));
        return /* getTimeInMillis */ convertedCalendar.getTime();
    };
    /**
     * Returns the lens of this camera.
     * @return {Camera.Lens}
     */
    Camera.prototype.getLens = function () {
        return this.lens;
    };
    /**
     * Sets the lens of this camera and notifies listeners of this change.
     * @param {Camera.Lens} lens
     */
    Camera.prototype.setLens = function (lens) {
        if (lens !== this.lens) {
            var oldLens = this.lens;
            this.lens = lens;
            this.lensName = /* Enum.name */ Camera.Lens[this.lens];
            this.firePropertyChange(/* name */ "LENS", oldLens, lens);
        }
    };
    /**
     * Sets the location and angles of this camera from the <code>camera</code> in parameter.
     * @param {Camera} camera
     */
    Camera.prototype.setCamera = function (camera) {
        this.setX(camera.getX());
        this.setY(camera.getY());
        this.setZ(camera.getZ());
        this.setYaw(camera.getYaw());
        this.setPitch(camera.getPitch());
        this.setFieldOfView(camera.getFieldOfView());
    };
    /**
     * Returns a clone of this camera.
     * @return {Camera}
     */
    Camera.prototype.clone = function () {
        var _this = this;
        return (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(this);
    };
    return Camera;
}(HomeObject));
Camera["__class"] = "com.eteks.sweethome3d.model.Camera";
(function (Camera) {
    /**
     * The kind of lens that can be used with a camera.
     * @author Emmanuel Puybaret
     * @enum
     * @property {Camera.Lens} PINHOLE
     * @property {Camera.Lens} NORMAL
     * @property {Camera.Lens} FISHEYE
     * @property {Camera.Lens} SPHERICAL
     * @class
     */
    var Lens;
    (function (Lens) {
        Lens[Lens["PINHOLE"] = 0] = "PINHOLE";
        Lens[Lens["NORMAL"] = 1] = "NORMAL";
        Lens[Lens["FISHEYE"] = 2] = "FISHEYE";
        Lens[Lens["SPHERICAL"] = 3] = "SPHERICAL";
    })(Lens = Camera.Lens || (Camera.Lens = {}));
})(Camera || (Camera = {}));
Camera['__transients'] = ['lens', 'propertyChangeSupport'];
/**
 * Creates a home level.
 * @param {string} id    the ID of the level
 * @param {string} name  the name of the level
 * @param {number} elevation the elevation of the bottom of the level
 * @param {number} floorThickness the floor thickness of the level
 * @param {number} height the height of the level
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Level = /** @class */ (function (_super) {
    __extends(Level, _super);
    function Level(id, name, elevation, floorThickness, height) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof floorThickness === 'number') || floorThickness === null) && ((typeof height === 'number') || height === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.floorThickness === undefined) {
                _this.floorThickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.backgroundImage === undefined) {
                _this.backgroundImage = null;
            }
            if (_this.visible === undefined) {
                _this.visible = false;
            }
            if (_this.viewable === undefined) {
                _this.viewable = false;
            }
            if (_this.elevationIndex === undefined) {
                _this.elevationIndex = 0;
            }
            _this.name = name;
            _this.elevation = elevation;
            _this.floorThickness = floorThickness;
            _this.height = height;
            _this.visible = true;
            _this.viewable = true;
            _this.elevationIndex = -1;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'number') || name === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof floorThickness === 'number') || floorThickness === null) && height === undefined) {
            var __args = arguments;
            var name_9 = __args[0];
            var elevation_4 = __args[1];
            var floorThickness_1 = __args[2];
            var height_7 = __args[3];
            {
                var __args_61 = arguments;
                var id_8 = HomeObject.createId("level");
                _this = _super.call(this, id_8) || this;
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.floorThickness === undefined) {
                    _this.floorThickness = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.backgroundImage === undefined) {
                    _this.backgroundImage = null;
                }
                if (_this.visible === undefined) {
                    _this.visible = false;
                }
                if (_this.viewable === undefined) {
                    _this.viewable = false;
                }
                if (_this.elevationIndex === undefined) {
                    _this.elevationIndex = 0;
                }
                _this.name = name_9;
                _this.elevation = elevation_4;
                _this.floorThickness = floorThickness_1;
                _this.height = height_7;
                _this.visible = true;
                _this.viewable = true;
                _this.elevationIndex = -1;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.floorThickness === undefined) {
                _this.floorThickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.backgroundImage === undefined) {
                _this.backgroundImage = null;
            }
            if (_this.visible === undefined) {
                _this.visible = false;
            }
            if (_this.viewable === undefined) {
                _this.viewable = false;
            }
            if (_this.elevationIndex === undefined) {
                _this.elevationIndex = 0;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the name of this level.
     * @return {string}
     */
    Level.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of this level. Once this level
     * is updated, listeners added to this level will receive a change notification.
     * @param {string} name
     */
    Level.prototype.setName = function (name) {
        if (name !== this.name && (name == null || !(name === this.name))) {
            var oldName = this.name;
            this.name = name;
            this.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns the elevation of the bottom of this level.
     * @return {number}
     */
    Level.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Sets the elevation of this level. Once this level is updated,
     * listeners added to this level will receive a change notification.
     * @param {number} elevation
     */
    Level.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns the floor thickness of this level.
     * @return {number}
     */
    Level.prototype.getFloorThickness = function () {
        return this.floorThickness;
    };
    /**
     * Sets the floor thickness of this level. Once this level is updated,
     * listeners added to this level will receive a change notification.
     * @param {number} floorThickness
     */
    Level.prototype.setFloorThickness = function (floorThickness) {
        if (floorThickness !== this.floorThickness) {
            var oldFloorThickness = this.floorThickness;
            this.floorThickness = floorThickness;
            this.firePropertyChange(/* name */ "FLOOR_THICKNESS", oldFloorThickness, floorThickness);
        }
    };
    /**
     * Returns the height of this level.
     * @return {number}
     */
    Level.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the height of this level. Once this level is updated,
     * listeners added to this level will receive a change notification.
     * @param {number} height
     */
    Level.prototype.setHeight = function (height) {
        if (height !== this.height) {
            var oldHeight = this.height;
            this.height = height;
            this.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
        }
    };
    /**
     * Returns the plan background image of this level.
     * @return {BackgroundImage}
     */
    Level.prototype.getBackgroundImage = function () {
        return this.backgroundImage;
    };
    /**
     * Sets the plan background image of this level and fires a <code>PropertyChangeEvent</code>.
     * @param {BackgroundImage} backgroundImage
     */
    Level.prototype.setBackgroundImage = function (backgroundImage) {
        if (backgroundImage !== this.backgroundImage) {
            var oldBackgroundImage = this.backgroundImage;
            this.backgroundImage = backgroundImage;
            this.firePropertyChange(/* name */ "BACKGROUND_IMAGE", oldBackgroundImage, backgroundImage);
        }
    };
    /**
     * Returns <code>true</code> if this level is visible.
     * @return {boolean}
     */
    Level.prototype.isVisible = function () {
        return this.visible;
    };
    /**
     * Sets whether this level is visible or not. Once this level is updated,
     * listeners added to this level will receive a change notification.
     * @param {boolean} visible
     */
    Level.prototype.setVisible = function (visible) {
        if (visible !== this.visible) {
            this.visible = visible;
            this.firePropertyChange(/* name */ "VISIBLE", !visible, visible);
        }
    };
    /**
     * Returns <code>true</code> if this level is viewable.
     * @return {boolean}
     */
    Level.prototype.isViewable = function () {
        return this.viewable;
    };
    /**
     * Sets whether this level is viewable or not. Once this level is updated,
     * listeners added to this level will receive a change notification.
     * @param {boolean} viewable
     */
    Level.prototype.setViewable = function (viewable) {
        if (viewable !== this.viewable) {
            this.viewable = viewable;
            this.firePropertyChange(/* name */ "VIEWABLE", !viewable, viewable);
        }
    };
    /**
     * Returns <code>true</code> if this level is viewable and visible.
     * @return {boolean}
     */
    Level.prototype.isViewableAndVisible = function () {
        return this.viewable && this.visible;
    };
    /**
     * Returns the index of this level used to order levels at the same elevation.
     * @return {number}
     */
    Level.prototype.getElevationIndex = function () {
        return this.elevationIndex;
    };
    /**
     * Sets the index of this level used to order levels at the same elevation.
     * @param {number} elevationIndex
     */
    Level.prototype.setElevationIndex = function (elevationIndex) {
        if (elevationIndex !== this.elevationIndex) {
            var oldElevationIndex = this.elevationIndex;
            this.elevationIndex = elevationIndex;
            this.firePropertyChange(/* name */ "ELEVATION_INDEX", oldElevationIndex, elevationIndex);
        }
    };
    /**
     * Returns a clone of this level.
     * @return {Level}
     */
    Level.prototype.clone = function () {
        var _this = this;
        return (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(this);
    };
    return Level;
}(HomeObject));
Level["__class"] = "com.eteks.sweethome3d.model.Level";
Level['__transients'] = ['propertyChangeSupport'];
/**
 * Creates a label with the given <code>text</code>.
 * @param {string} id
 * @param {string} text
 * @param {number} x
 * @param {number} y
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Label = /** @class */ (function (_super) {
    __extends(Label, _super);
    function Label(id, text, x, y) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof text === 'string') || text === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.text === undefined) {
                _this.text = null;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.style === undefined) {
                _this.style = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.outlineColor === undefined) {
                _this.outlineColor = null;
            }
            if (_this.angle === undefined) {
                _this.angle = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            _this.text = text;
            _this.x = x;
            _this.y = y;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof text === 'number') || text === null) && ((typeof x === 'number') || x === null) && y === undefined) {
            var __args = arguments;
            var text_1 = __args[0];
            var x_4 = __args[1];
            var y_4 = __args[2];
            {
                var __args_62 = arguments;
                var id_9 = HomeObject.createId("label");
                _this = _super.call(this, id_9) || this;
                if (_this.text === undefined) {
                    _this.text = null;
                }
                if (_this.x === undefined) {
                    _this.x = 0;
                }
                if (_this.y === undefined) {
                    _this.y = 0;
                }
                if (_this.style === undefined) {
                    _this.style = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.outlineColor === undefined) {
                    _this.outlineColor = null;
                }
                if (_this.angle === undefined) {
                    _this.angle = 0;
                }
                if (_this.pitch === undefined) {
                    _this.pitch = null;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                _this.text = text_1;
                _this.x = x_4;
                _this.y = y_4;
            }
            if (_this.text === undefined) {
                _this.text = null;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.style === undefined) {
                _this.style = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.outlineColor === undefined) {
                _this.outlineColor = null;
            }
            if (_this.angle === undefined) {
                _this.angle = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = null;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    Label.TWICE_PI_$LI$ = function () { if (Label.TWICE_PI == null) {
        Label.TWICE_PI = 2 * Math.PI;
    } return Label.TWICE_PI; };
    /**
     * Returns the text of this label.
     * @return {string}
     */
    Label.prototype.getText = function () {
        return this.text;
    };
    /**
     * Sets the text of this label. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * @param {string} text
     */
    Label.prototype.setText = function (text) {
        if (text !== this.text && (text == null || !(text === this.text))) {
            var oldText = this.text;
            this.text = text;
            this.firePropertyChange(/* name */ "TEXT", oldText, text);
        }
    };
    /**
     * Returns the abscissa of the text of this label.
     * @return {number}
     */
    Label.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the abscissa of the text of this label. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * @param {number} x
     */
    Label.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the ordinate of the text of this label.
     * @return {number}
     */
    Label.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the ordinate of the text of this label. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * @param {number} y
     */
    Label.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the elevation of this label
     * from the ground according to the elevation of its level.
     * @return {number}
     */
    Label.prototype.getGroundElevation = function () {
        if (this.level != null) {
            return this.elevation + this.level.getElevation();
        }
        else {
            return this.elevation;
        }
    };
    /**
     * Returns the elevation of this label on its level.
     * @see #getPitch()
     * @return {number}
     */
    Label.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Sets the elevation of this label on its level. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * @param {number} elevation
     */
    Label.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns the style used to display the text of this label.
     * @return {TextStyle}
     */
    Label.prototype.getStyle = function () {
        return this.style;
    };
    /**
     * Sets the style used to display the text of this label.
     * Once this label is updated, listeners added to this label will receive a change notification.
     * @param {TextStyle} style
     */
    Label.prototype.setStyle = function (style) {
        if (style !== this.style) {
            var oldStyle = this.style;
            this.style = style;
            this.firePropertyChange(/* name */ "STYLE", oldStyle, style);
        }
    };
    /**
     * Returns the color used to display the text of this label.
     * @return {number}
     */
    Label.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets the color used to display the text of this label.
     * Once this label is updated, listeners added to this label will receive a change notification.
     * @param {number} color
     */
    Label.prototype.setColor = function (color) {
        if (color !== this.color) {
            var oldColor = this.color;
            this.color = color;
            this.firePropertyChange(/* name */ "COLOR", oldColor, color);
        }
    };
    /**
     * Returns the color used to outline the text of this label.
     * @return {number}
     */
    Label.prototype.getOutlineColor = function () {
        return this.outlineColor;
    };
    /**
     * Sets the color used to outline the text of this label.
     * Once this label is updated, listeners added to this label will receive a change notification.
     * @param {number} outlineColor
     */
    Label.prototype.setOutlineColor = function (outlineColor) {
        if (outlineColor !== this.outlineColor) {
            var oldOutlineColor = this.outlineColor;
            this.outlineColor = outlineColor;
            this.firePropertyChange(/* name */ "OUTLINE_COLOR", oldOutlineColor, outlineColor);
        }
    };
    /**
     * Returns the angle in radians around vertical axis used to display this label.
     * @return {number}
     */
    Label.prototype.getAngle = function () {
        return this.angle;
    };
    /**
     * Sets the angle in radians around vertical axis used to display this label. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * @param {number} angle
     */
    Label.prototype.setAngle = function (angle) {
        angle = ((angle % Label.TWICE_PI_$LI$() + Label.TWICE_PI_$LI$()) % Label.TWICE_PI_$LI$());
        if (angle !== this.angle) {
            var oldAngle = this.angle;
            this.angle = angle;
            this.firePropertyChange(/* name */ "ANGLE", oldAngle, angle);
        }
    };
    /**
     * Returns the pitch angle in radians used to rotate this label around horizontal axis in 3D.
     * @return {number} an angle in radians or <code>null</code> if the label shouldn't be displayed in 3D.
     * A pitch angle equal to 0 should make this label fully visible when seen from top.
     */
    Label.prototype.getPitch = function () {
        return this.pitch;
    };
    /**
     * Sets the angle in radians used to rotate this label around horizontal axis in 3D. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * Pitch axis is horizontal transverse axis.
     * @param {number} pitch
     */
    Label.prototype.setPitch = function (pitch) {
        if (pitch != null) {
            pitch = ((pitch % Label.TWICE_PI_$LI$() + Label.TWICE_PI_$LI$()) % Label.TWICE_PI_$LI$());
        }
        if (pitch !== this.pitch && (pitch == null || !(pitch === this.pitch))) {
            var oldPitch = this.pitch;
            this.pitch = pitch;
            this.firePropertyChange(/* name */ "PITCH", oldPitch, pitch);
        }
    };
    /**
     * Returns the level which this label belongs to.
     * @return {Level}
     */
    Label.prototype.getLevel = function () {
        return this.level;
    };
    /**
     * Sets the level of this label. Once this label is updated,
     * listeners added to this label will receive a change notification.
     * @param {Level} level
     */
    Label.prototype.setLevel = function (level) {
        if (level !== this.level) {
            var oldLevel = this.level;
            this.level = level;
            this.firePropertyChange(/* name */ "LEVEL", oldLevel, level);
        }
    };
    /**
     * Returns <code>true</code> if this label is at the given <code>level</code>
     * or at a level with the same elevation and a smaller elevation index.
     * @param {Level} level
     * @return {boolean}
     */
    Label.prototype.isAtLevel = function (level) {
        return this.level === level || this.level != null && level != null && this.level.getElevation() === level.getElevation() && this.level.getElevationIndex() < level.getElevationIndex();
    };
    /**
     * Returns the point of this label.
     * @return {float[][]} an array of the (x,y) coordinates of this label.
     */
    Label.prototype.getPoints = function () {
        return [[this.x, this.y]];
    };
    /**
     * Returns <code>true</code> if the point of this label is contained
     * in the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    Label.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return rectangle.contains(this.x, this.y);
    };
    /**
     * Returns <code>true</code> if this text is at the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Label.prototype.containsPoint = function (x, y, margin) {
        return Math.abs(x - this.x) <= margin && Math.abs(y - this.y) <= margin;
    };
    /**
     * Moves this label of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    Label.prototype.move = function (dx, dy) {
        this.setX(this.getX() + dx);
        this.setY(this.getY() + dy);
    };
    /**
     * Returns a clone of this label.
     * @return {Label}
     */
    Label.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_1 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_1[p] = o[p];
            }
            return clone_1;
        } })(this);
        clone.level = null;
        return clone;
    };
    return Label;
}(HomeObject));
Label["__class"] = "com.eteks.sweethome3d.model.Label";
Label["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.Elevatable"];
Label['__transients'] = ['propertyChangeSupport'];
/**
 * Creates a polyline from the given coordinates.
 * @param {string} id
 * @param {float[][]} points
 * @param {number} thickness
 * @param {Polyline.CapStyle} capStyle
 * @param {Polyline.JoinStyle} joinStyle
 * @param {Polyline.DashStyle} dashStyle
 * @param {number} dashOffset
 * @param {Polyline.ArrowStyle} startArrowStyle
 * @param {Polyline.ArrowStyle} endArrowStyle
 * @param {boolean} closedPath
 * @param {number} color
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Polyline = /** @class */ (function (_super) {
    __extends(Polyline, _super);
    function Polyline(id, points, thickness, capStyle, joinStyle, dashStyle, dashOffset, startArrowStyle, endArrowStyle, closedPath, color) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((points != null && points instanceof Array && (points.length == 0 || points[0] == null || points[0] instanceof Array)) || points === null) && ((typeof thickness === 'number') || thickness === null) && ((typeof capStyle === 'number') || capStyle === null) && ((typeof joinStyle === 'number') || joinStyle === null) && ((typeof dashStyle === 'number') || dashStyle === null) && ((typeof dashOffset === 'number') || dashOffset === null) && ((typeof startArrowStyle === 'number') || startArrowStyle === null) && ((typeof endArrowStyle === 'number') || endArrowStyle === null) && ((typeof closedPath === 'boolean') || closedPath === null) && ((typeof color === 'number') || color === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.capStyle === undefined) {
                _this.capStyle = null;
            }
            if (_this.capStyleName === undefined) {
                _this.capStyleName = null;
            }
            if (_this.joinStyle === undefined) {
                _this.joinStyle = null;
            }
            if (_this.joinStyleName === undefined) {
                _this.joinStyleName = null;
            }
            if (_this.dashStyle === undefined) {
                _this.dashStyle = null;
            }
            if (_this.dashStyleName === undefined) {
                _this.dashStyleName = null;
            }
            if (_this.dashPattern === undefined) {
                _this.dashPattern = null;
            }
            if (_this.dashOffset === undefined) {
                _this.dashOffset = 0;
            }
            if (_this.startArrowStyle === undefined) {
                _this.startArrowStyle = null;
            }
            if (_this.startArrowStyleName === undefined) {
                _this.startArrowStyleName = null;
            }
            if (_this.endArrowStyle === undefined) {
                _this.endArrowStyle = null;
            }
            if (_this.endArrowStyleName === undefined) {
                _this.endArrowStyleName = null;
            }
            if (_this.closedPath === undefined) {
                _this.closedPath = false;
            }
            if (_this.color === undefined) {
                _this.color = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.polylinePathCache === undefined) {
                _this.polylinePathCache = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            _this.points = _this.deepCopy(points);
            _this.thickness = thickness;
            _this.capStyle = capStyle;
            _this.joinStyle = joinStyle;
            _this.dashStyle = dashStyle;
            _this.dashOffset = dashOffset;
            _this.startArrowStyle = startArrowStyle;
            _this.endArrowStyle = endArrowStyle;
            _this.closedPath = closedPath;
            _this.color = color;
        }
        else if (((id != null && id instanceof Array && (id.length == 0 || id[0] == null || id[0] instanceof Array)) || id === null) && ((typeof points === 'number') || points === null) && ((typeof thickness === 'number') || thickness === null) && ((typeof capStyle === 'number') || capStyle === null) && ((typeof joinStyle === 'number') || joinStyle === null) && ((typeof dashStyle === 'number') || dashStyle === null) && ((typeof dashOffset === 'number') || dashOffset === null) && ((typeof startArrowStyle === 'number') || startArrowStyle === null) && ((typeof endArrowStyle === 'boolean') || endArrowStyle === null) && ((typeof closedPath === 'number') || closedPath === null) && color === undefined) {
            var __args = arguments;
            var points_1 = __args[0];
            var thickness_2 = __args[1];
            var capStyle_1 = __args[2];
            var joinStyle_1 = __args[3];
            var dashStyle_1 = __args[4];
            var dashOffset_1 = __args[5];
            var startArrowStyle_1 = __args[6];
            var endArrowStyle_1 = __args[7];
            var closedPath_1 = __args[8];
            var color_6 = __args[9];
            {
                var __args_63 = arguments;
                var id_10 = HomeObject.createId("polyline");
                _this = _super.call(this, id_10) || this;
                if (_this.points === undefined) {
                    _this.points = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.capStyle === undefined) {
                    _this.capStyle = null;
                }
                if (_this.capStyleName === undefined) {
                    _this.capStyleName = null;
                }
                if (_this.joinStyle === undefined) {
                    _this.joinStyle = null;
                }
                if (_this.joinStyleName === undefined) {
                    _this.joinStyleName = null;
                }
                if (_this.dashStyle === undefined) {
                    _this.dashStyle = null;
                }
                if (_this.dashStyleName === undefined) {
                    _this.dashStyleName = null;
                }
                if (_this.dashPattern === undefined) {
                    _this.dashPattern = null;
                }
                if (_this.dashOffset === undefined) {
                    _this.dashOffset = 0;
                }
                if (_this.startArrowStyle === undefined) {
                    _this.startArrowStyle = null;
                }
                if (_this.startArrowStyleName === undefined) {
                    _this.startArrowStyleName = null;
                }
                if (_this.endArrowStyle === undefined) {
                    _this.endArrowStyle = null;
                }
                if (_this.endArrowStyleName === undefined) {
                    _this.endArrowStyleName = null;
                }
                if (_this.closedPath === undefined) {
                    _this.closedPath = false;
                }
                if (_this.color === undefined) {
                    _this.color = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.polylinePathCache === undefined) {
                    _this.polylinePathCache = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                _this.points = _this.deepCopy(points_1);
                _this.thickness = thickness_2;
                _this.capStyle = capStyle_1;
                _this.joinStyle = joinStyle_1;
                _this.dashStyle = dashStyle_1;
                _this.dashOffset = dashOffset_1;
                _this.startArrowStyle = startArrowStyle_1;
                _this.endArrowStyle = endArrowStyle_1;
                _this.closedPath = closedPath_1;
                _this.color = color_6;
            }
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.capStyle === undefined) {
                _this.capStyle = null;
            }
            if (_this.capStyleName === undefined) {
                _this.capStyleName = null;
            }
            if (_this.joinStyle === undefined) {
                _this.joinStyle = null;
            }
            if (_this.joinStyleName === undefined) {
                _this.joinStyleName = null;
            }
            if (_this.dashStyle === undefined) {
                _this.dashStyle = null;
            }
            if (_this.dashStyleName === undefined) {
                _this.dashStyleName = null;
            }
            if (_this.dashPattern === undefined) {
                _this.dashPattern = null;
            }
            if (_this.dashOffset === undefined) {
                _this.dashOffset = 0;
            }
            if (_this.startArrowStyle === undefined) {
                _this.startArrowStyle = null;
            }
            if (_this.startArrowStyleName === undefined) {
                _this.startArrowStyleName = null;
            }
            if (_this.endArrowStyle === undefined) {
                _this.endArrowStyle = null;
            }
            if (_this.endArrowStyleName === undefined) {
                _this.endArrowStyleName = null;
            }
            if (_this.closedPath === undefined) {
                _this.closedPath = false;
            }
            if (_this.color === undefined) {
                _this.color = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.polylinePathCache === undefined) {
                _this.polylinePathCache = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
        }
        else if (((id != null && id instanceof Array && (id.length == 0 || id[0] == null || id[0] instanceof Array)) || id === null) && ((typeof points === 'number') || points === null) && ((typeof thickness === 'number') || thickness === null) && ((typeof capStyle === 'number') || capStyle === null) && ((typeof joinStyle === 'number') || joinStyle === null) && ((typeof dashStyle === 'number') || dashStyle === null) && ((typeof dashOffset === 'number') || dashOffset === null) && ((typeof startArrowStyle === 'boolean') || startArrowStyle === null) && ((typeof endArrowStyle === 'number') || endArrowStyle === null) && closedPath === undefined && color === undefined) {
            var __args = arguments;
            var points_2 = __args[0];
            var thickness_3 = __args[1];
            var capStyle_2 = __args[2];
            var joinStyle_2 = __args[3];
            var dashStyle_2 = __args[4];
            var startArrowStyle_2 = __args[5];
            var endArrowStyle_2 = __args[6];
            var closedPath_2 = __args[7];
            var color_7 = __args[8];
            {
                var __args_64 = arguments;
                var dashOffset_2 = 0.0;
                {
                    var __args_65 = arguments;
                    var id_11 = HomeObject.createId("polyline");
                    _this = _super.call(this, id_11) || this;
                    if (_this.points === undefined) {
                        _this.points = null;
                    }
                    if (_this.thickness === undefined) {
                        _this.thickness = 0;
                    }
                    if (_this.capStyle === undefined) {
                        _this.capStyle = null;
                    }
                    if (_this.capStyleName === undefined) {
                        _this.capStyleName = null;
                    }
                    if (_this.joinStyle === undefined) {
                        _this.joinStyle = null;
                    }
                    if (_this.joinStyleName === undefined) {
                        _this.joinStyleName = null;
                    }
                    if (_this.dashStyle === undefined) {
                        _this.dashStyle = null;
                    }
                    if (_this.dashStyleName === undefined) {
                        _this.dashStyleName = null;
                    }
                    if (_this.dashPattern === undefined) {
                        _this.dashPattern = null;
                    }
                    if (_this.dashOffset === undefined) {
                        _this.dashOffset = 0;
                    }
                    if (_this.startArrowStyle === undefined) {
                        _this.startArrowStyle = null;
                    }
                    if (_this.startArrowStyleName === undefined) {
                        _this.startArrowStyleName = null;
                    }
                    if (_this.endArrowStyle === undefined) {
                        _this.endArrowStyle = null;
                    }
                    if (_this.endArrowStyleName === undefined) {
                        _this.endArrowStyleName = null;
                    }
                    if (_this.closedPath === undefined) {
                        _this.closedPath = false;
                    }
                    if (_this.color === undefined) {
                        _this.color = 0;
                    }
                    if (_this.elevation === undefined) {
                        _this.elevation = null;
                    }
                    if (_this.level === undefined) {
                        _this.level = null;
                    }
                    if (_this.polylinePathCache === undefined) {
                        _this.polylinePathCache = null;
                    }
                    if (_this.shapeCache === undefined) {
                        _this.shapeCache = null;
                    }
                    _this.points = _this.deepCopy(points_2);
                    _this.thickness = thickness_3;
                    _this.capStyle = capStyle_2;
                    _this.joinStyle = joinStyle_2;
                    _this.dashStyle = dashStyle_2;
                    _this.dashOffset = dashOffset_2;
                    _this.startArrowStyle = startArrowStyle_2;
                    _this.endArrowStyle = endArrowStyle_2;
                    _this.closedPath = closedPath_2;
                    _this.color = color_7;
                }
                if (_this.points === undefined) {
                    _this.points = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.capStyle === undefined) {
                    _this.capStyle = null;
                }
                if (_this.capStyleName === undefined) {
                    _this.capStyleName = null;
                }
                if (_this.joinStyle === undefined) {
                    _this.joinStyle = null;
                }
                if (_this.joinStyleName === undefined) {
                    _this.joinStyleName = null;
                }
                if (_this.dashStyle === undefined) {
                    _this.dashStyle = null;
                }
                if (_this.dashStyleName === undefined) {
                    _this.dashStyleName = null;
                }
                if (_this.dashPattern === undefined) {
                    _this.dashPattern = null;
                }
                if (_this.dashOffset === undefined) {
                    _this.dashOffset = 0;
                }
                if (_this.startArrowStyle === undefined) {
                    _this.startArrowStyle = null;
                }
                if (_this.startArrowStyleName === undefined) {
                    _this.startArrowStyleName = null;
                }
                if (_this.endArrowStyle === undefined) {
                    _this.endArrowStyle = null;
                }
                if (_this.endArrowStyleName === undefined) {
                    _this.endArrowStyleName = null;
                }
                if (_this.closedPath === undefined) {
                    _this.closedPath = false;
                }
                if (_this.color === undefined) {
                    _this.color = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.polylinePathCache === undefined) {
                    _this.polylinePathCache = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
            }
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.capStyle === undefined) {
                _this.capStyle = null;
            }
            if (_this.capStyleName === undefined) {
                _this.capStyleName = null;
            }
            if (_this.joinStyle === undefined) {
                _this.joinStyle = null;
            }
            if (_this.joinStyleName === undefined) {
                _this.joinStyleName = null;
            }
            if (_this.dashStyle === undefined) {
                _this.dashStyle = null;
            }
            if (_this.dashStyleName === undefined) {
                _this.dashStyleName = null;
            }
            if (_this.dashPattern === undefined) {
                _this.dashPattern = null;
            }
            if (_this.dashOffset === undefined) {
                _this.dashOffset = 0;
            }
            if (_this.startArrowStyle === undefined) {
                _this.startArrowStyle = null;
            }
            if (_this.startArrowStyleName === undefined) {
                _this.startArrowStyleName = null;
            }
            if (_this.endArrowStyle === undefined) {
                _this.endArrowStyle = null;
            }
            if (_this.endArrowStyleName === undefined) {
                _this.endArrowStyleName = null;
            }
            if (_this.closedPath === undefined) {
                _this.closedPath = false;
            }
            if (_this.color === undefined) {
                _this.color = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.polylinePathCache === undefined) {
                _this.polylinePathCache = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((points != null && points instanceof Array && (points.length == 0 || points[0] == null || points[0] instanceof Array)) || points === null) && thickness === undefined && capStyle === undefined && joinStyle === undefined && dashStyle === undefined && dashOffset === undefined && startArrowStyle === undefined && endArrowStyle === undefined && closedPath === undefined && color === undefined) {
            var __args = arguments;
            {
                var __args_66 = arguments;
                var thickness_4 = 1;
                var capStyle_3 = Polyline.CapStyle.BUTT;
                var joinStyle_3 = Polyline.JoinStyle.MITER;
                var dashStyle_3 = Polyline.DashStyle.SOLID;
                var dashOffset_3 = 0.0;
                var startArrowStyle_3 = Polyline.ArrowStyle.NONE;
                var endArrowStyle_3 = Polyline.ArrowStyle.NONE;
                var closedPath_3 = false;
                var color_8 = -16777216;
                _this = _super.call(this, id) || this;
                if (_this.points === undefined) {
                    _this.points = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.capStyle === undefined) {
                    _this.capStyle = null;
                }
                if (_this.capStyleName === undefined) {
                    _this.capStyleName = null;
                }
                if (_this.joinStyle === undefined) {
                    _this.joinStyle = null;
                }
                if (_this.joinStyleName === undefined) {
                    _this.joinStyleName = null;
                }
                if (_this.dashStyle === undefined) {
                    _this.dashStyle = null;
                }
                if (_this.dashStyleName === undefined) {
                    _this.dashStyleName = null;
                }
                if (_this.dashPattern === undefined) {
                    _this.dashPattern = null;
                }
                if (_this.dashOffset === undefined) {
                    _this.dashOffset = 0;
                }
                if (_this.startArrowStyle === undefined) {
                    _this.startArrowStyle = null;
                }
                if (_this.startArrowStyleName === undefined) {
                    _this.startArrowStyleName = null;
                }
                if (_this.endArrowStyle === undefined) {
                    _this.endArrowStyle = null;
                }
                if (_this.endArrowStyleName === undefined) {
                    _this.endArrowStyleName = null;
                }
                if (_this.closedPath === undefined) {
                    _this.closedPath = false;
                }
                if (_this.color === undefined) {
                    _this.color = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.polylinePathCache === undefined) {
                    _this.polylinePathCache = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                _this.points = _this.deepCopy(points);
                _this.thickness = thickness_4;
                _this.capStyle = capStyle_3;
                _this.joinStyle = joinStyle_3;
                _this.dashStyle = dashStyle_3;
                _this.dashOffset = dashOffset_3;
                _this.startArrowStyle = startArrowStyle_3;
                _this.endArrowStyle = endArrowStyle_3;
                _this.closedPath = closedPath_3;
                _this.color = color_8;
            }
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.capStyle === undefined) {
                _this.capStyle = null;
            }
            if (_this.capStyleName === undefined) {
                _this.capStyleName = null;
            }
            if (_this.joinStyle === undefined) {
                _this.joinStyle = null;
            }
            if (_this.joinStyleName === undefined) {
                _this.joinStyleName = null;
            }
            if (_this.dashStyle === undefined) {
                _this.dashStyle = null;
            }
            if (_this.dashStyleName === undefined) {
                _this.dashStyleName = null;
            }
            if (_this.dashPattern === undefined) {
                _this.dashPattern = null;
            }
            if (_this.dashOffset === undefined) {
                _this.dashOffset = 0;
            }
            if (_this.startArrowStyle === undefined) {
                _this.startArrowStyle = null;
            }
            if (_this.startArrowStyleName === undefined) {
                _this.startArrowStyleName = null;
            }
            if (_this.endArrowStyle === undefined) {
                _this.endArrowStyle = null;
            }
            if (_this.endArrowStyleName === undefined) {
                _this.endArrowStyleName = null;
            }
            if (_this.closedPath === undefined) {
                _this.closedPath = false;
            }
            if (_this.color === undefined) {
                _this.color = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.polylinePathCache === undefined) {
                _this.polylinePathCache = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
        }
        else if (((id != null && id instanceof Array && (id.length == 0 || id[0] == null || id[0] instanceof Array)) || id === null) && points === undefined && thickness === undefined && capStyle === undefined && joinStyle === undefined && dashStyle === undefined && dashOffset === undefined && startArrowStyle === undefined && endArrowStyle === undefined && closedPath === undefined && color === undefined) {
            var __args = arguments;
            var points_3 = __args[0];
            {
                var __args_67 = arguments;
                var thickness_5 = 1;
                var capStyle_4 = Polyline.CapStyle.BUTT;
                var joinStyle_4 = Polyline.JoinStyle.MITER;
                var dashStyle_4 = Polyline.DashStyle.SOLID;
                var startArrowStyle_4 = Polyline.ArrowStyle.NONE;
                var endArrowStyle_4 = Polyline.ArrowStyle.NONE;
                var closedPath_4 = false;
                var color_9 = -16777216;
                {
                    var __args_68 = arguments;
                    var dashOffset_4 = 0.0;
                    {
                        var __args_69 = arguments;
                        var id_12 = HomeObject.createId("polyline");
                        _this = _super.call(this, id_12) || this;
                        if (_this.points === undefined) {
                            _this.points = null;
                        }
                        if (_this.thickness === undefined) {
                            _this.thickness = 0;
                        }
                        if (_this.capStyle === undefined) {
                            _this.capStyle = null;
                        }
                        if (_this.capStyleName === undefined) {
                            _this.capStyleName = null;
                        }
                        if (_this.joinStyle === undefined) {
                            _this.joinStyle = null;
                        }
                        if (_this.joinStyleName === undefined) {
                            _this.joinStyleName = null;
                        }
                        if (_this.dashStyle === undefined) {
                            _this.dashStyle = null;
                        }
                        if (_this.dashStyleName === undefined) {
                            _this.dashStyleName = null;
                        }
                        if (_this.dashPattern === undefined) {
                            _this.dashPattern = null;
                        }
                        if (_this.dashOffset === undefined) {
                            _this.dashOffset = 0;
                        }
                        if (_this.startArrowStyle === undefined) {
                            _this.startArrowStyle = null;
                        }
                        if (_this.startArrowStyleName === undefined) {
                            _this.startArrowStyleName = null;
                        }
                        if (_this.endArrowStyle === undefined) {
                            _this.endArrowStyle = null;
                        }
                        if (_this.endArrowStyleName === undefined) {
                            _this.endArrowStyleName = null;
                        }
                        if (_this.closedPath === undefined) {
                            _this.closedPath = false;
                        }
                        if (_this.color === undefined) {
                            _this.color = 0;
                        }
                        if (_this.elevation === undefined) {
                            _this.elevation = null;
                        }
                        if (_this.level === undefined) {
                            _this.level = null;
                        }
                        if (_this.polylinePathCache === undefined) {
                            _this.polylinePathCache = null;
                        }
                        if (_this.shapeCache === undefined) {
                            _this.shapeCache = null;
                        }
                        _this.points = _this.deepCopy(points_3);
                        _this.thickness = thickness_5;
                        _this.capStyle = capStyle_4;
                        _this.joinStyle = joinStyle_4;
                        _this.dashStyle = dashStyle_4;
                        _this.dashOffset = dashOffset_4;
                        _this.startArrowStyle = startArrowStyle_4;
                        _this.endArrowStyle = endArrowStyle_4;
                        _this.closedPath = closedPath_4;
                        _this.color = color_9;
                    }
                    if (_this.points === undefined) {
                        _this.points = null;
                    }
                    if (_this.thickness === undefined) {
                        _this.thickness = 0;
                    }
                    if (_this.capStyle === undefined) {
                        _this.capStyle = null;
                    }
                    if (_this.capStyleName === undefined) {
                        _this.capStyleName = null;
                    }
                    if (_this.joinStyle === undefined) {
                        _this.joinStyle = null;
                    }
                    if (_this.joinStyleName === undefined) {
                        _this.joinStyleName = null;
                    }
                    if (_this.dashStyle === undefined) {
                        _this.dashStyle = null;
                    }
                    if (_this.dashStyleName === undefined) {
                        _this.dashStyleName = null;
                    }
                    if (_this.dashPattern === undefined) {
                        _this.dashPattern = null;
                    }
                    if (_this.dashOffset === undefined) {
                        _this.dashOffset = 0;
                    }
                    if (_this.startArrowStyle === undefined) {
                        _this.startArrowStyle = null;
                    }
                    if (_this.startArrowStyleName === undefined) {
                        _this.startArrowStyleName = null;
                    }
                    if (_this.endArrowStyle === undefined) {
                        _this.endArrowStyle = null;
                    }
                    if (_this.endArrowStyleName === undefined) {
                        _this.endArrowStyleName = null;
                    }
                    if (_this.closedPath === undefined) {
                        _this.closedPath = false;
                    }
                    if (_this.color === undefined) {
                        _this.color = 0;
                    }
                    if (_this.elevation === undefined) {
                        _this.elevation = null;
                    }
                    if (_this.level === undefined) {
                        _this.level = null;
                    }
                    if (_this.polylinePathCache === undefined) {
                        _this.polylinePathCache = null;
                    }
                    if (_this.shapeCache === undefined) {
                        _this.shapeCache = null;
                    }
                }
                if (_this.points === undefined) {
                    _this.points = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.capStyle === undefined) {
                    _this.capStyle = null;
                }
                if (_this.capStyleName === undefined) {
                    _this.capStyleName = null;
                }
                if (_this.joinStyle === undefined) {
                    _this.joinStyle = null;
                }
                if (_this.joinStyleName === undefined) {
                    _this.joinStyleName = null;
                }
                if (_this.dashStyle === undefined) {
                    _this.dashStyle = null;
                }
                if (_this.dashStyleName === undefined) {
                    _this.dashStyleName = null;
                }
                if (_this.dashPattern === undefined) {
                    _this.dashPattern = null;
                }
                if (_this.dashOffset === undefined) {
                    _this.dashOffset = 0;
                }
                if (_this.startArrowStyle === undefined) {
                    _this.startArrowStyle = null;
                }
                if (_this.startArrowStyleName === undefined) {
                    _this.startArrowStyleName = null;
                }
                if (_this.endArrowStyle === undefined) {
                    _this.endArrowStyle = null;
                }
                if (_this.endArrowStyleName === undefined) {
                    _this.endArrowStyleName = null;
                }
                if (_this.closedPath === undefined) {
                    _this.closedPath = false;
                }
                if (_this.color === undefined) {
                    _this.color = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.polylinePathCache === undefined) {
                    _this.polylinePathCache = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
            }
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.capStyle === undefined) {
                _this.capStyle = null;
            }
            if (_this.capStyleName === undefined) {
                _this.capStyleName = null;
            }
            if (_this.joinStyle === undefined) {
                _this.joinStyle = null;
            }
            if (_this.joinStyleName === undefined) {
                _this.joinStyleName = null;
            }
            if (_this.dashStyle === undefined) {
                _this.dashStyle = null;
            }
            if (_this.dashStyleName === undefined) {
                _this.dashStyleName = null;
            }
            if (_this.dashPattern === undefined) {
                _this.dashPattern = null;
            }
            if (_this.dashOffset === undefined) {
                _this.dashOffset = 0;
            }
            if (_this.startArrowStyle === undefined) {
                _this.startArrowStyle = null;
            }
            if (_this.startArrowStyleName === undefined) {
                _this.startArrowStyleName = null;
            }
            if (_this.endArrowStyle === undefined) {
                _this.endArrowStyle = null;
            }
            if (_this.endArrowStyleName === undefined) {
                _this.endArrowStyleName = null;
            }
            if (_this.closedPath === undefined) {
                _this.closedPath = false;
            }
            if (_this.color === undefined) {
                _this.color = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.polylinePathCache === undefined) {
                _this.polylinePathCache = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the points of the polygon matching this polyline.
     * @return {float[][]} an array of the (x,y) coordinates of the polyline points.
     */
    Polyline.prototype.getPoints = function () {
        return this.deepCopy(this.points);
    };
    /**
     * Returns the number of points of the polygon matching this polyline.
     * @return {number}
     */
    Polyline.prototype.getPointCount = function () {
        return this.points.length;
    };
    Polyline.prototype.deepCopy = function (points) {
        var pointsCopy = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(points.length);
        for (var i = 0; i < points.length; i++) {
            {
                pointsCopy[i] = /* clone */ points[i].slice(0);
            }
            ;
        }
        return pointsCopy;
    };
    /**
     * Sets the points of the polygon matching this polyline. Once this polyline
     * is updated, listeners added to this polyline will receive a change notification.
     * @param {float[][]} points
     */
    Polyline.prototype.setPoints = function (points) {
        if (!(JSON.stringify(this.points) === JSON.stringify(points))) {
            this.updatePoints(points);
        }
    };
    /**
     * Update the points of the polygon matching this polyline.
     * @param {float[][]} points
     * @private
     */
    Polyline.prototype.updatePoints = function (points) {
        var oldPoints = this.points;
        this.points = this.deepCopy(points);
        this.polylinePathCache = null;
        this.shapeCache = null;
        this.firePropertyChange(/* name */ "POINTS", oldPoints, points);
    };
    Polyline.prototype.addPoint$float$float = function (x, y) {
        this.addPoint$float$float$int(x, y, this.points.length);
    };
    Polyline.prototype.addPoint$float$float$int = function (x, y, index) {
        if (index < 0 || index > this.points.length) {
            throw Object.defineProperty(new Error("Invalid index " + index), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.IndexOutOfBoundsException', 'java.lang.Object', 'java.lang.RuntimeException', 'java.lang.Exception'] });
        }
        var newPoints = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(this.points.length + 1);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, 0, newPoints, 0, index);
        newPoints[index] = [x, y];
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, index, newPoints, index + 1, this.points.length - index);
        var oldPoints = this.points;
        this.points = newPoints;
        this.polylinePathCache = null;
        this.shapeCache = null;
        this.firePropertyChange(/* name */ "POINTS", oldPoints, this.deepCopy(this.points));
    };
    /**
     * Adds a point at the given <code>index</code>.
     * @throws IndexOutOfBoundsException if <code>index</code> is negative or > <code>getPointCount()</code>
     * @param {number} x
     * @param {number} y
     * @param {number} index
     */
    Polyline.prototype.addPoint = function (x, y, index) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof index === 'number') || index === null)) {
            return this.addPoint$float$float$int(x, y, index);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && index === undefined) {
            return this.addPoint$float$float(x, y);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Sets the point at the given <code>index</code>.
     * @throws IndexOutOfBoundsException if <code>index</code> is negative or >= <code>getPointCount()</code>
     * @param {number} x
     * @param {number} y
     * @param {number} index
     */
    Polyline.prototype.setPoint = function (x, y, index) {
        if (index < 0 || index >= this.points.length) {
            throw Object.defineProperty(new Error("Invalid index " + index), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.IndexOutOfBoundsException', 'java.lang.Object', 'java.lang.RuntimeException', 'java.lang.Exception'] });
        }
        if (this.points[index][0] !== x || this.points[index][1] !== y) {
            var oldPoints = this.points;
            this.points = this.deepCopy(this.points);
            this.points[index][0] = x;
            this.points[index][1] = y;
            this.polylinePathCache = null;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "POINTS", oldPoints, this.deepCopy(this.points));
        }
    };
    /**
     * Removes the point at the given <code>index</code>.
     * @throws IndexOutOfBoundsException if <code>index</code> is negative or >= <code>getPointCount()</code>
     * @param {number} index
     */
    Polyline.prototype.removePoint = function (index) {
        if (index < 0 || index >= this.points.length) {
            throw Object.defineProperty(new Error("Invalid index " + index), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.IndexOutOfBoundsException', 'java.lang.Object', 'java.lang.RuntimeException', 'java.lang.Exception'] });
        }
        var newPoints = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(this.points.length - 1);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, 0, newPoints, 0, index);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, index + 1, newPoints, index, this.points.length - index - 1);
        var oldPoints = this.points;
        this.points = newPoints;
        this.polylinePathCache = null;
        this.shapeCache = null;
        this.firePropertyChange(/* name */ "POINTS", oldPoints, this.deepCopy(this.points));
    };
    /**
     * Returns the thickness of this polyline.
     * @return {number}
     */
    Polyline.prototype.getThickness = function () {
        return this.thickness;
    };
    /**
     * Sets the thickness of this polyline.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {number} thickness
     */
    Polyline.prototype.setThickness = function (thickness) {
        if (thickness !== this.thickness) {
            var oldThickness = this.thickness;
            this.thickness = thickness;
            this.firePropertyChange(/* name */ "THICKNESS", oldThickness, thickness);
        }
    };
    /**
     * Returns the cap style of this polyline.
     * @return {Polyline.CapStyle}
     */
    Polyline.prototype.getCapStyle = function () {
        return this.capStyle;
    };
    /**
     * Sets the cap style of this polyline.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {Polyline.CapStyle} capStyle
     */
    Polyline.prototype.setCapStyle = function (capStyle) {
        if (capStyle !== this.capStyle) {
            var oldStyle = this.capStyle;
            this.capStyle = capStyle;
            this.capStyleName = /* Enum.name */ Polyline.CapStyle[this.capStyle];
            this.firePropertyChange(/* name */ "CAP_STYLE", oldStyle, capStyle);
        }
    };
    /**
     * Returns the join style of this polyline.
     * @return {Polyline.JoinStyle}
     */
    Polyline.prototype.getJoinStyle = function () {
        return this.joinStyle;
    };
    /**
     * Sets the join style of this polyline.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {Polyline.JoinStyle} joinStyle
     */
    Polyline.prototype.setJoinStyle = function (joinStyle) {
        if (joinStyle !== this.joinStyle) {
            var oldJoinStyle = this.joinStyle;
            this.joinStyle = joinStyle;
            this.joinStyleName = /* Enum.name */ Polyline.JoinStyle[this.joinStyle];
            this.polylinePathCache = null;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "JOIN_STYLE", oldJoinStyle, joinStyle);
        }
    };
    /**
     * Returns the dash style of this polyline. If <code>DashStyle.CUSTOMIZED</code> is returned,
     * the actual dash pattern will be returned by {@link #getDashPattern()}.
     * @return {Polyline.DashStyle}
     */
    Polyline.prototype.getDashStyle = function () {
        return this.dashStyle;
    };
    /**
     * Sets the dash style of this polyline.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {Polyline.DashStyle} dashStyle
     */
    Polyline.prototype.setDashStyle = function (dashStyle) {
        if (dashStyle !== this.dashStyle) {
            var oldDashPattern = this.getDashPattern();
            var oldDashStyle = this.dashStyle;
            this.dashStyle = dashStyle;
            this.dashStyleName = /* Enum.name */ Polyline.DashStyle[this.dashStyle];
            if (dashStyle !== Polyline.DashStyle.CUSTOMIZED) {
                this.dashPattern = null;
            }
            this.firePropertyChange(/* name */ "DASH_PATTERN", oldDashPattern, this.getDashPattern());
            this.firePropertyChange(/* name */ "DASH_STYLE", oldDashStyle, dashStyle);
        }
    };
    /**
     * Returns the dash pattern of this polyline in percentage of its thickness.
     * @return {float[]}
     */
    Polyline.prototype.getDashPattern = function () {
        var dashPattern = null;
        if (this.dashStyle !== Polyline.DashStyle.CUSTOMIZED) {
            return Polyline.DashStyle["_$wrappers"][this.dashStyle].getDashPattern();
        }
        else if (this.dashPattern != null) {
            dashPattern = /* clone */ this.dashPattern.slice(0);
        }
        return dashPattern;
    };
    /**
     * Sets the dash pattern of this polyline in percentage of its thickness.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {float[]} dashPattern
     */
    Polyline.prototype.setDashPattern = function (dashPattern) {
        {
            var array = /* Enum.values */ function () { var result = []; for (var val in Polyline.DashStyle) {
                if (!isNaN(val)) {
                    result.push(parseInt(val, 10));
                }
            } return result; }();
            for (var index = 0; index < array.length; index++) {
                var dashStyle = array[index];
                {
                    if (this.dashStyle !== Polyline.DashStyle.CUSTOMIZED) {
                        if ( /* equals */(function (a1, a2) { if (a1 == null && a2 == null)
                            return true; if (a1 == null || a2 == null)
                            return false; if (a1.length != a2.length)
                            return false; for (var i = 0; i < a1.length; i++) {
                            if (a1[i] != a2[i])
                                return false;
                        } return true; })(dashPattern, Polyline.DashStyle["_$wrappers"][dashStyle].getDashPattern())) {
                            this.setDashStyle(dashStyle);
                            return;
                        }
                    }
                }
            }
        }
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(dashPattern, this.dashPattern)) {
            var oldDashPattern = this.getDashPattern();
            this.dashPattern = /* clone */ dashPattern.slice(0);
            this.firePropertyChange(/* name */ "DASH_PATTERN", oldDashPattern, dashPattern);
            var oldDashStyle = this.dashStyle;
            this.dashStyle = Polyline.DashStyle.CUSTOMIZED;
            this.dashStyleName = /* Enum.name */ Polyline.DashStyle[this.dashStyle];
            this.firePropertyChange(/* name */ "DASH_STYLE", oldDashStyle, Polyline.DashStyle.CUSTOMIZED);
        }
    };
    /**
     * Returns the offset from which the dash of this polyline should start.
     * @return {number} the offset in percentage of the dash pattern
     */
    Polyline.prototype.getDashOffset = function () {
        return this.dashOffset;
    };
    /**
     * Sets the offset from which the dash of this polyline should start.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {number} dashOffset the offset in percentage of the dash pattern
     */
    Polyline.prototype.setDashOffset = function (dashOffset) {
        if (dashOffset !== this.dashOffset) {
            var oldDashOffset = this.dashOffset;
            this.dashOffset = dashOffset;
            this.firePropertyChange(/* name */ "DASH_OFFSET", oldDashOffset, dashOffset);
        }
    };
    /**
     * Returns the arrow style at the start of this polyline.
     * @return {Polyline.ArrowStyle}
     */
    Polyline.prototype.getStartArrowStyle = function () {
        return this.startArrowStyle;
    };
    /**
     * Sets the arrow style at the start of this polyline.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {Polyline.ArrowStyle} startArrowStyle
     */
    Polyline.prototype.setStartArrowStyle = function (startArrowStyle) {
        if (startArrowStyle !== this.startArrowStyle) {
            var oldStartArrowStyle = this.startArrowStyle;
            this.startArrowStyle = startArrowStyle;
            this.startArrowStyleName = /* Enum.name */ Polyline.ArrowStyle[this.startArrowStyle];
            this.firePropertyChange(/* name */ "START_ARROW_STYLE", oldStartArrowStyle, startArrowStyle);
        }
    };
    /**
     * Returns the arrow style at the end of this polyline.
     * @return {Polyline.ArrowStyle}
     */
    Polyline.prototype.getEndArrowStyle = function () {
        return this.endArrowStyle;
    };
    /**
     * Sets the arrow style at the end of this polyline.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {Polyline.ArrowStyle} endArrowStyle
     */
    Polyline.prototype.setEndArrowStyle = function (endArrowStyle) {
        if (endArrowStyle !== this.endArrowStyle) {
            var oldEndArrowStyle = this.endArrowStyle;
            this.endArrowStyle = endArrowStyle;
            this.endArrowStyleName = /* Enum.name */ Polyline.ArrowStyle[this.endArrowStyle];
            this.firePropertyChange(/* name */ "END_ARROW_STYLE", oldEndArrowStyle, endArrowStyle);
        }
    };
    /**
     * Returns <code>true</code> if the first and last points of this polyline should be joined to form a polygon.
     * @return {boolean}
     */
    Polyline.prototype.isClosedPath = function () {
        return this.closedPath;
    };
    /**
     * Sets whether the first and last points of this polyline should be joined.
     * Once this polyline is updated, listeners added to this polyline will receive a change notification.
     * @param {boolean} closedPath
     */
    Polyline.prototype.setClosedPath = function (closedPath) {
        if (closedPath !== this.closedPath) {
            this.closedPath = closedPath;
            this.firePropertyChange(/* name */ "CLOSED_PATH", !closedPath, closedPath);
        }
    };
    /**
     * Returns the color of this polyline.
     * @return {number}
     */
    Polyline.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets the color of this polyline. Once this polyline is updated,
     * listeners added to this polyline will receive a change notification.
     * @param {number} color
     */
    Polyline.prototype.setColor = function (color) {
        if (color !== this.color) {
            var oldColor = this.color;
            this.color = color;
            this.firePropertyChange(/* name */ "COLOR", oldColor, color);
        }
    };
    /**
     * Returns the elevation of this polyline
     * from the ground according to the elevation of its level.
     * @return {number}
     */
    Polyline.prototype.getGroundElevation = function () {
        var elevation = this.getElevation();
        if (this.level != null) {
            return elevation + this.level.getElevation();
        }
        else {
            return elevation;
        }
    };
    /**
     * Returns the elevation of this polyline in 3D.
     * @return {number}
     */
    Polyline.prototype.getElevation = function () {
        return this.elevation != null ? this.elevation : 0;
    };
    /**
     * Sets the elevation of this polyline in 3D. Once this polyline is updated,
     * listeners added to this polyline will receive a change notification.
     * @param {number} elevation
     */
    Polyline.prototype.setElevation = function (elevation) {
        if (this.elevation != null && elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns <code>true</code> if this polyline should be displayed in 3D.
     * @return {boolean}
     */
    Polyline.prototype.isVisibleIn3D = function () {
        return this.elevation != null;
    };
    /**
     * Sets whether this polyline should be displayed in 3D and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} visibleIn3D
     */
    Polyline.prototype.setVisibleIn3D = function (visibleIn3D) {
        if ((visibleIn3D) !== ((this.elevation != null))) {
            this.elevation = visibleIn3D ? 0 : null;
            this.firePropertyChange(/* name */ "VISIBLE_IN_3D", !visibleIn3D, visibleIn3D);
        }
    };
    /**
     * Returns the level which this polyline belongs to.
     * @return {Level}
     */
    Polyline.prototype.getLevel = function () {
        return this.level;
    };
    /**
     * Sets the level of this polyline. Once this polyline is updated,
     * listeners added to this polyline will receive a change notification.
     * @param {Level} level
     */
    Polyline.prototype.setLevel = function (level) {
        if (level !== this.level) {
            var oldLevel = this.level;
            this.level = level;
            this.firePropertyChange(/* name */ "LEVEL", oldLevel, level);
        }
    };
    /**
     * Returns <code>true</code> if this polyline is at the given <code>level</code>
     * or at a level with the same elevation and a smaller elevation index.
     * @param {Level} level
     * @return {boolean}
     */
    Polyline.prototype.isAtLevel = function (level) {
        return this.level === level || this.level != null && level != null && this.level.getElevation() === level.getElevation() && this.level.getElevationIndex() < level.getElevationIndex();
    };
    /**
     * Returns an approximate length of this polyline.
     * @return {number}
     */
    Polyline.prototype.getLength = function () {
        var firstPoint = [0, 0];
        var previousPoint = [0, 0];
        var point = [0, 0];
        var length = 0;
        for (var it = this.getPolylinePath().getPathIterator(null, 0.1); !it.isDone(); it.next()) {
            {
                switch ((it.currentSegment(point))) {
                    case java.awt.geom.PathIterator.SEG_CLOSE:
                        length += java.awt.geom.Point2D.distance(firstPoint[0], firstPoint[1], previousPoint[0], previousPoint[1]);
                        break;
                    case java.awt.geom.PathIterator.SEG_MOVETO:
                        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
                            while (--size >= 0)
                                dstPts[dstOff++] = srcPts[srcOff++];
                        }
                        else {
                            var tmp = srcPts.slice(srcOff, srcOff + size);
                            for (var i = 0; i < size; i++)
                                dstPts[dstOff++] = tmp[i];
                        } })(point, 0, firstPoint, 0, 2);
                        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
                            while (--size >= 0)
                                dstPts[dstOff++] = srcPts[srcOff++];
                        }
                        else {
                            var tmp = srcPts.slice(srcOff, srcOff + size);
                            for (var i = 0; i < size; i++)
                                dstPts[dstOff++] = tmp[i];
                        } })(point, 0, previousPoint, 0, 2);
                        break;
                    case java.awt.geom.PathIterator.SEG_LINETO:
                        length += java.awt.geom.Point2D.distance(previousPoint[0], previousPoint[1], point[0], point[1]);
                        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
                            while (--size >= 0)
                                dstPts[dstOff++] = srcPts[srcOff++];
                        }
                        else {
                            var tmp = srcPts.slice(srcOff, srcOff + size);
                            for (var i = 0; i < size; i++)
                                dstPts[dstOff++] = tmp[i];
                        } })(point, 0, previousPoint, 0, 2);
                        break;
                }
            }
            ;
        }
        return length;
    };
    /**
     * Returns <code>true</code> if this polyline intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    Polyline.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return this.getShape().intersects(rectangle);
    };
    /**
     * Returns <code>true</code> if this polyline contains
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Polyline.prototype.containsPoint = function (x, y, margin) {
        return this.containsShapeAtWithMargin(this.getShape(), x, y, margin);
    };
    /**
     * Returns the index of the point of this polyline equal to
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>.
     * @return {number} the index of the first found point or -1.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     */
    Polyline.prototype.getPointIndexAt = function (x, y, margin) {
        for (var i = 0; i < this.points.length; i++) {
            {
                if (Math.abs(x - this.points[i][0]) <= margin && Math.abs(y - this.points[i][1]) <= margin) {
                    return i;
                }
            }
            ;
        }
        return -1;
    };
    /**
     * Returns <code>true</code> if <code>shape</code> contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {Object} shape
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     * @private
     */
    Polyline.prototype.containsShapeAtWithMargin = function (shape, x, y, margin) {
        if (margin === 0) {
            return shape.contains(x, y);
        }
        else {
            return shape.intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Returns the path matching this polyline.
     * @return {Object}
     * @private
     */
    Polyline.prototype.getPolylinePath = function () {
        if (this.polylinePathCache == null) {
            var polylinePath = new java.awt.geom.GeneralPath();
            if (this.joinStyle === Polyline.JoinStyle.CURVED) {
                for (var i = 0, n = this.closedPath ? this.points.length : this.points.length - 1; i < n; i++) {
                    {
                        var curve2D = new java.awt.geom.CubicCurve2D.Float();
                        var previousPoint = this.points[i === 0 ? this.points.length - 1 : i - 1];
                        var point = this.points[i];
                        var nextPoint = this.points[i === this.points.length - 1 ? 0 : i + 1];
                        var vectorToBisectorPoint = [nextPoint[0] - previousPoint[0], nextPoint[1] - previousPoint[1]];
                        var nextNextPoint = this.points[(i + 2) % this.points.length];
                        var vectorToBisectorNextPoint = [point[0] - nextNextPoint[0], point[1] - nextNextPoint[1]];
                        curve2D.setCurve(point[0], point[1], point[0] + (i !== 0 || this.closedPath ? vectorToBisectorPoint[0] / 3.625 : 0), point[1] + (i !== 0 || this.closedPath ? vectorToBisectorPoint[1] / 3.625 : 0), nextPoint[0] + (i !== this.points.length - 2 || this.closedPath ? vectorToBisectorNextPoint[0] / 3.625 : 0), nextPoint[1] + (i !== this.points.length - 2 || this.closedPath ? vectorToBisectorNextPoint[1] / 3.625 : 0), nextPoint[0], nextPoint[1]);
                        polylinePath.append(curve2D, true);
                    }
                    ;
                }
            }
            else {
                polylinePath.moveTo(this.points[0][0], this.points[0][1]);
                for (var i = 1; i < this.points.length; i++) {
                    {
                        polylinePath.lineTo(this.points[i][0], this.points[i][1]);
                    }
                    ;
                }
                if (this.closedPath) {
                    polylinePath.closePath();
                }
            }
            this.polylinePathCache = polylinePath;
        }
        return this.polylinePathCache;
    };
    /**
     * Returns the shape matching this polyline.
     * @return {Object}
     * @private
     */
    Polyline.prototype.getShape = function () {
        if (this.shapeCache == null) {
            this.shapeCache = new java['awt']['BasicStroke'](this.thickness).createStrokedShape(this.getPolylinePath());
        }
        return this.shapeCache;
    };
    /**
     * Moves this polyline of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    Polyline.prototype.move = function (dx, dy) {
        if (dx !== 0 || dy !== 0) {
            var points = this.getPoints();
            for (var i = 0; i < points.length; i++) {
                {
                    points[i][0] += dx;
                    points[i][1] += dy;
                }
                ;
            }
            this.updatePoints(points);
        }
    };
    /**
     * Returns a clone of this polyline.
     * @return {Polyline}
     */
    Polyline.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_2 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_2[p] = o[p];
            }
            return clone_2;
        } })(this);
        clone.level = null;
        return clone;
    };
    return Polyline;
}(HomeObject));
Polyline["__class"] = "com.eteks.sweethome3d.model.Polyline";
Polyline["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.Elevatable"];
(function (Polyline) {
    var CapStyle;
    (function (CapStyle) {
        CapStyle[CapStyle["BUTT"] = 0] = "BUTT";
        CapStyle[CapStyle["SQUARE"] = 1] = "SQUARE";
        CapStyle[CapStyle["ROUND"] = 2] = "ROUND";
    })(CapStyle = Polyline.CapStyle || (Polyline.CapStyle = {}));
    var JoinStyle;
    (function (JoinStyle) {
        JoinStyle[JoinStyle["BEVEL"] = 0] = "BEVEL";
        JoinStyle[JoinStyle["MITER"] = 1] = "MITER";
        JoinStyle[JoinStyle["ROUND"] = 2] = "ROUND";
        JoinStyle[JoinStyle["CURVED"] = 3] = "CURVED";
    })(JoinStyle = Polyline.JoinStyle || (Polyline.JoinStyle = {}));
    var ArrowStyle;
    (function (ArrowStyle) {
        ArrowStyle[ArrowStyle["NONE"] = 0] = "NONE";
        ArrowStyle[ArrowStyle["DELTA"] = 1] = "DELTA";
        ArrowStyle[ArrowStyle["OPEN"] = 2] = "OPEN";
        ArrowStyle[ArrowStyle["DISC"] = 3] = "DISC";
    })(ArrowStyle = Polyline.ArrowStyle || (Polyline.ArrowStyle = {}));
    var DashStyle;
    (function (DashStyle) {
        DashStyle[DashStyle["SOLID"] = 0] = "SOLID";
        DashStyle[DashStyle["DOT"] = 1] = "DOT";
        DashStyle[DashStyle["DASH"] = 2] = "DASH";
        DashStyle[DashStyle["DASH_DOT"] = 3] = "DASH_DOT";
        DashStyle[DashStyle["DASH_DOT_DOT"] = 4] = "DASH_DOT_DOT";
        DashStyle[DashStyle["CUSTOMIZED"] = 5] = "CUSTOMIZED";
    })(DashStyle = Polyline.DashStyle || (Polyline.DashStyle = {}));
    /** @ignore */
    var DashStyle_$WRAPPER = /** @class */ (function () {
        function DashStyle_$WRAPPER(_$ordinal, _$name) {
            this._$ordinal = _$ordinal;
            this._$name = _$name;
        }
        /**
         * Returns an array describing the length of dashes and spaces between them
         * for a 1 cm thick polyline.
         * @return {float[]}
         */
        DashStyle_$WRAPPER.prototype.getDashPattern = function () {
            switch ((this._$ordinal)) {
                case Polyline.DashStyle.SOLID:
                    return [1.0, 0.0];
                case Polyline.DashStyle.DOT:
                    return [1.0, 1.0];
                case Polyline.DashStyle.DASH:
                    return [4.0, 2.0];
                case Polyline.DashStyle.DASH_DOT:
                    return [8.0, 2.0, 2.0, 2.0];
                case Polyline.DashStyle.DASH_DOT_DOT:
                    return [8.0, 2.0, 2.0, 2.0, 2.0, 2.0];
                default:
                    return null;
            }
        };
        DashStyle_$WRAPPER.prototype.name = function () { return this._$name; };
        DashStyle_$WRAPPER.prototype.ordinal = function () { return this._$ordinal; };
        DashStyle_$WRAPPER.prototype.compareTo = function (other) { return this._$ordinal - (isNaN(other) ? other._$ordinal : other); };
        return DashStyle_$WRAPPER;
    }());
    Polyline.DashStyle_$WRAPPER = DashStyle_$WRAPPER;
    DashStyle["__class"] = "com.eteks.sweethome3d.model.Polyline.DashStyle";
    DashStyle["_$wrappers"] = { 0: new DashStyle_$WRAPPER(0, "SOLID"), 1: new DashStyle_$WRAPPER(1, "DOT"), 2: new DashStyle_$WRAPPER(2, "DASH"), 3: new DashStyle_$WRAPPER(3, "DASH_DOT"), 4: new DashStyle_$WRAPPER(4, "DASH_DOT_DOT"), 5: new DashStyle_$WRAPPER(5, "CUSTOMIZED") };
})(Polyline || (Polyline = {}));
Polyline['__transients'] = ['capStyle', 'joinStyle', 'dashStyle', 'startArrowStyle', 'endArrowStyle', 'polylinePathCache', 'shapeCache', 'propertyChangeSupport'];
/**
 * Creates a wall from (<code>xStart</code>,<code>yStart</code>)
 * to (<code>xEnd</code>, <code>yEnd</code>),
 * with given thickness, height and pattern.
 * Colors are <code>null</code>.
 * @param {string} id
 * @param {number} xStart
 * @param {number} yStart
 * @param {number} xEnd
 * @param {number} yEnd
 * @param {number} thickness
 * @param {number} height
 * @param {Object} pattern
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Wall = /** @class */ (function (_super) {
    __extends(Wall, _super);
    function Wall(id, xStart, yStart, xEnd, yEnd, thickness, height, pattern) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && ((typeof thickness === 'number') || thickness === null) && ((typeof height === 'number') || height === null) && ((pattern != null && (pattern.constructor != null && pattern.constructor["__interfaces"] != null && pattern.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || pattern === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.arcExtent === undefined) {
                _this.arcExtent = null;
            }
            if (_this.wallAtStart === undefined) {
                _this.wallAtStart = null;
            }
            if (_this.wallAtEnd === undefined) {
                _this.wallAtEnd = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.heightAtEnd === undefined) {
                _this.heightAtEnd = null;
            }
            if (_this.leftSideColor === undefined) {
                _this.leftSideColor = null;
            }
            if (_this.leftSideTexture === undefined) {
                _this.leftSideTexture = null;
            }
            if (_this.leftSideShininess === undefined) {
                _this.leftSideShininess = 0;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideColor === undefined) {
                _this.rightSideColor = null;
            }
            if (_this.rightSideTexture === undefined) {
                _this.rightSideTexture = null;
            }
            if (_this.rightSideShininess === undefined) {
                _this.rightSideShininess = 0;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.pattern === undefined) {
                _this.pattern = null;
            }
            if (_this.topColor === undefined) {
                _this.topColor = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.arcCircleCenterCache === undefined) {
                _this.arcCircleCenterCache = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.pointsIncludingBaseboardsCache === undefined) {
                _this.pointsIncludingBaseboardsCache = null;
            }
            _this.symmetric = true;
            _this.xStart = xStart;
            _this.yStart = yStart;
            _this.xEnd = xEnd;
            _this.yEnd = yEnd;
            _this.thickness = thickness;
            _this.height = height;
            _this.pattern = pattern;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && ((typeof thickness === 'number') || thickness === null) && ((typeof height === 'number') || height === null) && pattern === undefined) {
            var __args = arguments;
            {
                var __args_70 = arguments;
                var pattern_1 = null;
                _this = _super.call(this, id) || this;
                if (_this.xStart === undefined) {
                    _this.xStart = 0;
                }
                if (_this.yStart === undefined) {
                    _this.yStart = 0;
                }
                if (_this.xEnd === undefined) {
                    _this.xEnd = 0;
                }
                if (_this.yEnd === undefined) {
                    _this.yEnd = 0;
                }
                if (_this.arcExtent === undefined) {
                    _this.arcExtent = null;
                }
                if (_this.wallAtStart === undefined) {
                    _this.wallAtStart = null;
                }
                if (_this.wallAtEnd === undefined) {
                    _this.wallAtEnd = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.height === undefined) {
                    _this.height = null;
                }
                if (_this.heightAtEnd === undefined) {
                    _this.heightAtEnd = null;
                }
                if (_this.leftSideColor === undefined) {
                    _this.leftSideColor = null;
                }
                if (_this.leftSideTexture === undefined) {
                    _this.leftSideTexture = null;
                }
                if (_this.leftSideShininess === undefined) {
                    _this.leftSideShininess = 0;
                }
                if (_this.leftSideBaseboard === undefined) {
                    _this.leftSideBaseboard = null;
                }
                if (_this.rightSideColor === undefined) {
                    _this.rightSideColor = null;
                }
                if (_this.rightSideTexture === undefined) {
                    _this.rightSideTexture = null;
                }
                if (_this.rightSideShininess === undefined) {
                    _this.rightSideShininess = 0;
                }
                if (_this.rightSideBaseboard === undefined) {
                    _this.rightSideBaseboard = null;
                }
                if (_this.pattern === undefined) {
                    _this.pattern = null;
                }
                if (_this.topColor === undefined) {
                    _this.topColor = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                if (_this.arcCircleCenterCache === undefined) {
                    _this.arcCircleCenterCache = null;
                }
                if (_this.pointsCache === undefined) {
                    _this.pointsCache = null;
                }
                if (_this.pointsIncludingBaseboardsCache === undefined) {
                    _this.pointsIncludingBaseboardsCache = null;
                }
                _this.symmetric = true;
                _this.xStart = xStart;
                _this.yStart = yStart;
                _this.xEnd = xEnd;
                _this.yEnd = yEnd;
                _this.thickness = thickness;
                _this.height = height;
                _this.pattern = pattern_1;
            }
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.arcExtent === undefined) {
                _this.arcExtent = null;
            }
            if (_this.wallAtStart === undefined) {
                _this.wallAtStart = null;
            }
            if (_this.wallAtEnd === undefined) {
                _this.wallAtEnd = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.heightAtEnd === undefined) {
                _this.heightAtEnd = null;
            }
            if (_this.leftSideColor === undefined) {
                _this.leftSideColor = null;
            }
            if (_this.leftSideTexture === undefined) {
                _this.leftSideTexture = null;
            }
            if (_this.leftSideShininess === undefined) {
                _this.leftSideShininess = 0;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideColor === undefined) {
                _this.rightSideColor = null;
            }
            if (_this.rightSideTexture === undefined) {
                _this.rightSideTexture = null;
            }
            if (_this.rightSideShininess === undefined) {
                _this.rightSideShininess = 0;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.pattern === undefined) {
                _this.pattern = null;
            }
            if (_this.topColor === undefined) {
                _this.topColor = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.arcCircleCenterCache === undefined) {
                _this.arcCircleCenterCache = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.pointsIncludingBaseboardsCache === undefined) {
                _this.pointsIncludingBaseboardsCache = null;
            }
            _this.symmetric = true;
        }
        else if (((typeof id === 'number') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && ((typeof thickness === 'number') || thickness === null) && ((height != null && (height.constructor != null && height.constructor["__interfaces"] != null && height.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.TextureImage") >= 0)) || height === null) && pattern === undefined) {
            var __args = arguments;
            var xStart_1 = __args[0];
            var yStart_1 = __args[1];
            var xEnd_1 = __args[2];
            var yEnd_1 = __args[3];
            var thickness_6 = __args[4];
            var height_8 = __args[5];
            var pattern_2 = __args[6];
            {
                var __args_71 = arguments;
                var id_13 = HomeObject.createId("wall");
                _this = _super.call(this, id_13) || this;
                if (_this.xStart === undefined) {
                    _this.xStart = 0;
                }
                if (_this.yStart === undefined) {
                    _this.yStart = 0;
                }
                if (_this.xEnd === undefined) {
                    _this.xEnd = 0;
                }
                if (_this.yEnd === undefined) {
                    _this.yEnd = 0;
                }
                if (_this.arcExtent === undefined) {
                    _this.arcExtent = null;
                }
                if (_this.wallAtStart === undefined) {
                    _this.wallAtStart = null;
                }
                if (_this.wallAtEnd === undefined) {
                    _this.wallAtEnd = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.height === undefined) {
                    _this.height = null;
                }
                if (_this.heightAtEnd === undefined) {
                    _this.heightAtEnd = null;
                }
                if (_this.leftSideColor === undefined) {
                    _this.leftSideColor = null;
                }
                if (_this.leftSideTexture === undefined) {
                    _this.leftSideTexture = null;
                }
                if (_this.leftSideShininess === undefined) {
                    _this.leftSideShininess = 0;
                }
                if (_this.leftSideBaseboard === undefined) {
                    _this.leftSideBaseboard = null;
                }
                if (_this.rightSideColor === undefined) {
                    _this.rightSideColor = null;
                }
                if (_this.rightSideTexture === undefined) {
                    _this.rightSideTexture = null;
                }
                if (_this.rightSideShininess === undefined) {
                    _this.rightSideShininess = 0;
                }
                if (_this.rightSideBaseboard === undefined) {
                    _this.rightSideBaseboard = null;
                }
                if (_this.pattern === undefined) {
                    _this.pattern = null;
                }
                if (_this.topColor === undefined) {
                    _this.topColor = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                if (_this.arcCircleCenterCache === undefined) {
                    _this.arcCircleCenterCache = null;
                }
                if (_this.pointsCache === undefined) {
                    _this.pointsCache = null;
                }
                if (_this.pointsIncludingBaseboardsCache === undefined) {
                    _this.pointsIncludingBaseboardsCache = null;
                }
                _this.symmetric = true;
                _this.xStart = xStart_1;
                _this.yStart = yStart_1;
                _this.xEnd = xEnd_1;
                _this.yEnd = yEnd_1;
                _this.thickness = thickness_6;
                _this.height = height_8;
                _this.pattern = pattern_2;
            }
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.arcExtent === undefined) {
                _this.arcExtent = null;
            }
            if (_this.wallAtStart === undefined) {
                _this.wallAtStart = null;
            }
            if (_this.wallAtEnd === undefined) {
                _this.wallAtEnd = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.heightAtEnd === undefined) {
                _this.heightAtEnd = null;
            }
            if (_this.leftSideColor === undefined) {
                _this.leftSideColor = null;
            }
            if (_this.leftSideTexture === undefined) {
                _this.leftSideTexture = null;
            }
            if (_this.leftSideShininess === undefined) {
                _this.leftSideShininess = 0;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideColor === undefined) {
                _this.rightSideColor = null;
            }
            if (_this.rightSideTexture === undefined) {
                _this.rightSideTexture = null;
            }
            if (_this.rightSideShininess === undefined) {
                _this.rightSideShininess = 0;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.pattern === undefined) {
                _this.pattern = null;
            }
            if (_this.topColor === undefined) {
                _this.topColor = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.arcCircleCenterCache === undefined) {
                _this.arcCircleCenterCache = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.pointsIncludingBaseboardsCache === undefined) {
                _this.pointsIncludingBaseboardsCache = null;
            }
            _this.symmetric = true;
        }
        else if (((typeof id === 'number') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && ((typeof thickness === 'number') || thickness === null) && height === undefined && pattern === undefined) {
            var __args = arguments;
            var xStart_2 = __args[0];
            var yStart_2 = __args[1];
            var xEnd_2 = __args[2];
            var yEnd_2 = __args[3];
            var thickness_7 = __args[4];
            var height_9 = __args[5];
            {
                var __args_72 = arguments;
                var pattern_3 = null;
                {
                    var __args_73 = arguments;
                    var id_14 = HomeObject.createId("wall");
                    _this = _super.call(this, id_14) || this;
                    if (_this.xStart === undefined) {
                        _this.xStart = 0;
                    }
                    if (_this.yStart === undefined) {
                        _this.yStart = 0;
                    }
                    if (_this.xEnd === undefined) {
                        _this.xEnd = 0;
                    }
                    if (_this.yEnd === undefined) {
                        _this.yEnd = 0;
                    }
                    if (_this.arcExtent === undefined) {
                        _this.arcExtent = null;
                    }
                    if (_this.wallAtStart === undefined) {
                        _this.wallAtStart = null;
                    }
                    if (_this.wallAtEnd === undefined) {
                        _this.wallAtEnd = null;
                    }
                    if (_this.thickness === undefined) {
                        _this.thickness = 0;
                    }
                    if (_this.height === undefined) {
                        _this.height = null;
                    }
                    if (_this.heightAtEnd === undefined) {
                        _this.heightAtEnd = null;
                    }
                    if (_this.leftSideColor === undefined) {
                        _this.leftSideColor = null;
                    }
                    if (_this.leftSideTexture === undefined) {
                        _this.leftSideTexture = null;
                    }
                    if (_this.leftSideShininess === undefined) {
                        _this.leftSideShininess = 0;
                    }
                    if (_this.leftSideBaseboard === undefined) {
                        _this.leftSideBaseboard = null;
                    }
                    if (_this.rightSideColor === undefined) {
                        _this.rightSideColor = null;
                    }
                    if (_this.rightSideTexture === undefined) {
                        _this.rightSideTexture = null;
                    }
                    if (_this.rightSideShininess === undefined) {
                        _this.rightSideShininess = 0;
                    }
                    if (_this.rightSideBaseboard === undefined) {
                        _this.rightSideBaseboard = null;
                    }
                    if (_this.pattern === undefined) {
                        _this.pattern = null;
                    }
                    if (_this.topColor === undefined) {
                        _this.topColor = null;
                    }
                    if (_this.level === undefined) {
                        _this.level = null;
                    }
                    if (_this.shapeCache === undefined) {
                        _this.shapeCache = null;
                    }
                    if (_this.arcCircleCenterCache === undefined) {
                        _this.arcCircleCenterCache = null;
                    }
                    if (_this.pointsCache === undefined) {
                        _this.pointsCache = null;
                    }
                    if (_this.pointsIncludingBaseboardsCache === undefined) {
                        _this.pointsIncludingBaseboardsCache = null;
                    }
                    _this.symmetric = true;
                    _this.xStart = xStart_2;
                    _this.yStart = yStart_2;
                    _this.xEnd = xEnd_2;
                    _this.yEnd = yEnd_2;
                    _this.thickness = thickness_7;
                    _this.height = height_9;
                    _this.pattern = pattern_3;
                }
                if (_this.xStart === undefined) {
                    _this.xStart = 0;
                }
                if (_this.yStart === undefined) {
                    _this.yStart = 0;
                }
                if (_this.xEnd === undefined) {
                    _this.xEnd = 0;
                }
                if (_this.yEnd === undefined) {
                    _this.yEnd = 0;
                }
                if (_this.arcExtent === undefined) {
                    _this.arcExtent = null;
                }
                if (_this.wallAtStart === undefined) {
                    _this.wallAtStart = null;
                }
                if (_this.wallAtEnd === undefined) {
                    _this.wallAtEnd = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.height === undefined) {
                    _this.height = null;
                }
                if (_this.heightAtEnd === undefined) {
                    _this.heightAtEnd = null;
                }
                if (_this.leftSideColor === undefined) {
                    _this.leftSideColor = null;
                }
                if (_this.leftSideTexture === undefined) {
                    _this.leftSideTexture = null;
                }
                if (_this.leftSideShininess === undefined) {
                    _this.leftSideShininess = 0;
                }
                if (_this.leftSideBaseboard === undefined) {
                    _this.leftSideBaseboard = null;
                }
                if (_this.rightSideColor === undefined) {
                    _this.rightSideColor = null;
                }
                if (_this.rightSideTexture === undefined) {
                    _this.rightSideTexture = null;
                }
                if (_this.rightSideShininess === undefined) {
                    _this.rightSideShininess = 0;
                }
                if (_this.rightSideBaseboard === undefined) {
                    _this.rightSideBaseboard = null;
                }
                if (_this.pattern === undefined) {
                    _this.pattern = null;
                }
                if (_this.topColor === undefined) {
                    _this.topColor = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                if (_this.arcCircleCenterCache === undefined) {
                    _this.arcCircleCenterCache = null;
                }
                if (_this.pointsCache === undefined) {
                    _this.pointsCache = null;
                }
                if (_this.pointsIncludingBaseboardsCache === undefined) {
                    _this.pointsIncludingBaseboardsCache = null;
                }
                _this.symmetric = true;
            }
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.arcExtent === undefined) {
                _this.arcExtent = null;
            }
            if (_this.wallAtStart === undefined) {
                _this.wallAtStart = null;
            }
            if (_this.wallAtEnd === undefined) {
                _this.wallAtEnd = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.heightAtEnd === undefined) {
                _this.heightAtEnd = null;
            }
            if (_this.leftSideColor === undefined) {
                _this.leftSideColor = null;
            }
            if (_this.leftSideTexture === undefined) {
                _this.leftSideTexture = null;
            }
            if (_this.leftSideShininess === undefined) {
                _this.leftSideShininess = 0;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideColor === undefined) {
                _this.rightSideColor = null;
            }
            if (_this.rightSideTexture === undefined) {
                _this.rightSideTexture = null;
            }
            if (_this.rightSideShininess === undefined) {
                _this.rightSideShininess = 0;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.pattern === undefined) {
                _this.pattern = null;
            }
            if (_this.topColor === undefined) {
                _this.topColor = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.arcCircleCenterCache === undefined) {
                _this.arcCircleCenterCache = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.pointsIncludingBaseboardsCache === undefined) {
                _this.pointsIncludingBaseboardsCache = null;
            }
            _this.symmetric = true;
        }
        else if (((typeof id === 'number') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && thickness === undefined && height === undefined && pattern === undefined) {
            var __args = arguments;
            var xStart_3 = __args[0];
            var yStart_3 = __args[1];
            var xEnd_3 = __args[2];
            var yEnd_3 = __args[3];
            var thickness_8 = __args[4];
            {
                var __args_74 = arguments;
                var height_10 = 0;
                {
                    var __args_75 = arguments;
                    var pattern_4 = null;
                    {
                        var __args_76 = arguments;
                        var id_15 = HomeObject.createId("wall");
                        _this = _super.call(this, id_15) || this;
                        if (_this.xStart === undefined) {
                            _this.xStart = 0;
                        }
                        if (_this.yStart === undefined) {
                            _this.yStart = 0;
                        }
                        if (_this.xEnd === undefined) {
                            _this.xEnd = 0;
                        }
                        if (_this.yEnd === undefined) {
                            _this.yEnd = 0;
                        }
                        if (_this.arcExtent === undefined) {
                            _this.arcExtent = null;
                        }
                        if (_this.wallAtStart === undefined) {
                            _this.wallAtStart = null;
                        }
                        if (_this.wallAtEnd === undefined) {
                            _this.wallAtEnd = null;
                        }
                        if (_this.thickness === undefined) {
                            _this.thickness = 0;
                        }
                        if (_this.height === undefined) {
                            _this.height = null;
                        }
                        if (_this.heightAtEnd === undefined) {
                            _this.heightAtEnd = null;
                        }
                        if (_this.leftSideColor === undefined) {
                            _this.leftSideColor = null;
                        }
                        if (_this.leftSideTexture === undefined) {
                            _this.leftSideTexture = null;
                        }
                        if (_this.leftSideShininess === undefined) {
                            _this.leftSideShininess = 0;
                        }
                        if (_this.leftSideBaseboard === undefined) {
                            _this.leftSideBaseboard = null;
                        }
                        if (_this.rightSideColor === undefined) {
                            _this.rightSideColor = null;
                        }
                        if (_this.rightSideTexture === undefined) {
                            _this.rightSideTexture = null;
                        }
                        if (_this.rightSideShininess === undefined) {
                            _this.rightSideShininess = 0;
                        }
                        if (_this.rightSideBaseboard === undefined) {
                            _this.rightSideBaseboard = null;
                        }
                        if (_this.pattern === undefined) {
                            _this.pattern = null;
                        }
                        if (_this.topColor === undefined) {
                            _this.topColor = null;
                        }
                        if (_this.level === undefined) {
                            _this.level = null;
                        }
                        if (_this.shapeCache === undefined) {
                            _this.shapeCache = null;
                        }
                        if (_this.arcCircleCenterCache === undefined) {
                            _this.arcCircleCenterCache = null;
                        }
                        if (_this.pointsCache === undefined) {
                            _this.pointsCache = null;
                        }
                        if (_this.pointsIncludingBaseboardsCache === undefined) {
                            _this.pointsIncludingBaseboardsCache = null;
                        }
                        _this.symmetric = true;
                        _this.xStart = xStart_3;
                        _this.yStart = yStart_3;
                        _this.xEnd = xEnd_3;
                        _this.yEnd = yEnd_3;
                        _this.thickness = thickness_8;
                        _this.height = height_10;
                        _this.pattern = pattern_4;
                    }
                    if (_this.xStart === undefined) {
                        _this.xStart = 0;
                    }
                    if (_this.yStart === undefined) {
                        _this.yStart = 0;
                    }
                    if (_this.xEnd === undefined) {
                        _this.xEnd = 0;
                    }
                    if (_this.yEnd === undefined) {
                        _this.yEnd = 0;
                    }
                    if (_this.arcExtent === undefined) {
                        _this.arcExtent = null;
                    }
                    if (_this.wallAtStart === undefined) {
                        _this.wallAtStart = null;
                    }
                    if (_this.wallAtEnd === undefined) {
                        _this.wallAtEnd = null;
                    }
                    if (_this.thickness === undefined) {
                        _this.thickness = 0;
                    }
                    if (_this.height === undefined) {
                        _this.height = null;
                    }
                    if (_this.heightAtEnd === undefined) {
                        _this.heightAtEnd = null;
                    }
                    if (_this.leftSideColor === undefined) {
                        _this.leftSideColor = null;
                    }
                    if (_this.leftSideTexture === undefined) {
                        _this.leftSideTexture = null;
                    }
                    if (_this.leftSideShininess === undefined) {
                        _this.leftSideShininess = 0;
                    }
                    if (_this.leftSideBaseboard === undefined) {
                        _this.leftSideBaseboard = null;
                    }
                    if (_this.rightSideColor === undefined) {
                        _this.rightSideColor = null;
                    }
                    if (_this.rightSideTexture === undefined) {
                        _this.rightSideTexture = null;
                    }
                    if (_this.rightSideShininess === undefined) {
                        _this.rightSideShininess = 0;
                    }
                    if (_this.rightSideBaseboard === undefined) {
                        _this.rightSideBaseboard = null;
                    }
                    if (_this.pattern === undefined) {
                        _this.pattern = null;
                    }
                    if (_this.topColor === undefined) {
                        _this.topColor = null;
                    }
                    if (_this.level === undefined) {
                        _this.level = null;
                    }
                    if (_this.shapeCache === undefined) {
                        _this.shapeCache = null;
                    }
                    if (_this.arcCircleCenterCache === undefined) {
                        _this.arcCircleCenterCache = null;
                    }
                    if (_this.pointsCache === undefined) {
                        _this.pointsCache = null;
                    }
                    if (_this.pointsIncludingBaseboardsCache === undefined) {
                        _this.pointsIncludingBaseboardsCache = null;
                    }
                    _this.symmetric = true;
                }
                if (_this.xStart === undefined) {
                    _this.xStart = 0;
                }
                if (_this.yStart === undefined) {
                    _this.yStart = 0;
                }
                if (_this.xEnd === undefined) {
                    _this.xEnd = 0;
                }
                if (_this.yEnd === undefined) {
                    _this.yEnd = 0;
                }
                if (_this.arcExtent === undefined) {
                    _this.arcExtent = null;
                }
                if (_this.wallAtStart === undefined) {
                    _this.wallAtStart = null;
                }
                if (_this.wallAtEnd === undefined) {
                    _this.wallAtEnd = null;
                }
                if (_this.thickness === undefined) {
                    _this.thickness = 0;
                }
                if (_this.height === undefined) {
                    _this.height = null;
                }
                if (_this.heightAtEnd === undefined) {
                    _this.heightAtEnd = null;
                }
                if (_this.leftSideColor === undefined) {
                    _this.leftSideColor = null;
                }
                if (_this.leftSideTexture === undefined) {
                    _this.leftSideTexture = null;
                }
                if (_this.leftSideShininess === undefined) {
                    _this.leftSideShininess = 0;
                }
                if (_this.leftSideBaseboard === undefined) {
                    _this.leftSideBaseboard = null;
                }
                if (_this.rightSideColor === undefined) {
                    _this.rightSideColor = null;
                }
                if (_this.rightSideTexture === undefined) {
                    _this.rightSideTexture = null;
                }
                if (_this.rightSideShininess === undefined) {
                    _this.rightSideShininess = 0;
                }
                if (_this.rightSideBaseboard === undefined) {
                    _this.rightSideBaseboard = null;
                }
                if (_this.pattern === undefined) {
                    _this.pattern = null;
                }
                if (_this.topColor === undefined) {
                    _this.topColor = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                if (_this.arcCircleCenterCache === undefined) {
                    _this.arcCircleCenterCache = null;
                }
                if (_this.pointsCache === undefined) {
                    _this.pointsCache = null;
                }
                if (_this.pointsIncludingBaseboardsCache === undefined) {
                    _this.pointsIncludingBaseboardsCache = null;
                }
                _this.symmetric = true;
            }
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.arcExtent === undefined) {
                _this.arcExtent = null;
            }
            if (_this.wallAtStart === undefined) {
                _this.wallAtStart = null;
            }
            if (_this.wallAtEnd === undefined) {
                _this.wallAtEnd = null;
            }
            if (_this.thickness === undefined) {
                _this.thickness = 0;
            }
            if (_this.height === undefined) {
                _this.height = null;
            }
            if (_this.heightAtEnd === undefined) {
                _this.heightAtEnd = null;
            }
            if (_this.leftSideColor === undefined) {
                _this.leftSideColor = null;
            }
            if (_this.leftSideTexture === undefined) {
                _this.leftSideTexture = null;
            }
            if (_this.leftSideShininess === undefined) {
                _this.leftSideShininess = 0;
            }
            if (_this.leftSideBaseboard === undefined) {
                _this.leftSideBaseboard = null;
            }
            if (_this.rightSideColor === undefined) {
                _this.rightSideColor = null;
            }
            if (_this.rightSideTexture === undefined) {
                _this.rightSideTexture = null;
            }
            if (_this.rightSideShininess === undefined) {
                _this.rightSideShininess = 0;
            }
            if (_this.rightSideBaseboard === undefined) {
                _this.rightSideBaseboard = null;
            }
            if (_this.pattern === undefined) {
                _this.pattern = null;
            }
            if (_this.topColor === undefined) {
                _this.topColor = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.arcCircleCenterCache === undefined) {
                _this.arcCircleCenterCache = null;
            }
            if (_this.pointsCache === undefined) {
                _this.pointsCache = null;
            }
            if (_this.pointsIncludingBaseboardsCache === undefined) {
                _this.pointsIncludingBaseboardsCache = null;
            }
            _this.symmetric = true;
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the start point abscissa of this wall.
     * @return {number}
     */
    Wall.prototype.getXStart = function () {
        return this.xStart;
    };
    /**
     * Sets the start point abscissa of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} xStart
     */
    Wall.prototype.setXStart = function (xStart) {
        if (xStart !== this.xStart) {
            var oldXStart = this.xStart;
            this.xStart = xStart;
            this.clearPointsCache();
            this.arcCircleCenterCache = null;
            this.firePropertyChange(/* name */ "X_START", oldXStart, xStart);
        }
    };
    /**
     * Returns the start point ordinate of this wall.
     * @return {number}
     */
    Wall.prototype.getYStart = function () {
        return this.yStart;
    };
    /**
     * Sets the start point ordinate of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} yStart
     */
    Wall.prototype.setYStart = function (yStart) {
        if (yStart !== this.yStart) {
            var oldYStart = this.yStart;
            this.yStart = yStart;
            this.clearPointsCache();
            this.arcCircleCenterCache = null;
            this.firePropertyChange(/* name */ "Y_START", oldYStart, yStart);
        }
    };
    /**
     * Returns the end point abscissa of this wall.
     * @return {number}
     */
    Wall.prototype.getXEnd = function () {
        return this.xEnd;
    };
    /**
     * Sets the end point abscissa of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} xEnd
     */
    Wall.prototype.setXEnd = function (xEnd) {
        if (xEnd !== this.xEnd) {
            var oldXEnd = this.xEnd;
            this.xEnd = xEnd;
            this.clearPointsCache();
            this.arcCircleCenterCache = null;
            this.firePropertyChange(/* name */ "X_END", oldXEnd, xEnd);
        }
    };
    /**
     * Returns the end point ordinate of this wall.
     * @return {number}
     */
    Wall.prototype.getYEnd = function () {
        return this.yEnd;
    };
    /**
     * Sets the end point ordinate of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} yEnd
     */
    Wall.prototype.setYEnd = function (yEnd) {
        if (yEnd !== this.yEnd) {
            var oldYEnd = this.yEnd;
            this.yEnd = yEnd;
            this.clearPointsCache();
            this.arcCircleCenterCache = null;
            this.firePropertyChange(/* name */ "Y_END", oldYEnd, yEnd);
        }
    };
    /**
     * Returns the length of this wall.
     * @return {number}
     */
    Wall.prototype.getLength = function () {
        if (this.arcExtent == null || /* floatValue */ this.arcExtent === 0) {
            return java.awt.geom.Point2D.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);
        }
        else {
            var arcCircleCenter = this.getArcCircleCenter();
            var arcCircleRadius = java.awt.geom.Point2D.distance(this.xStart, this.yStart, arcCircleCenter[0], arcCircleCenter[1]);
            return Math.abs(this.arcExtent) * arcCircleRadius;
        }
    };
    /**
     * Returns the distance from the start point of this wall to its end point.
     * @return {number}
     */
    Wall.prototype.getStartPointToEndPointDistance = function () {
        return java.awt.geom.Point2D.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);
    };
    /**
     * Sets the arc extent of a round wall.
     * @param {number} arcExtent
     */
    Wall.prototype.setArcExtent = function (arcExtent) {
        if (arcExtent !== this.arcExtent && (arcExtent == null || !(arcExtent === this.arcExtent))) {
            var oldArcExtent = this.arcExtent;
            this.arcExtent = arcExtent;
            this.clearPointsCache();
            this.arcCircleCenterCache = null;
            this.firePropertyChange(/* name */ "ARC_EXTENT", oldArcExtent, arcExtent);
        }
    };
    /**
     * Returns the arc extent of a round wall or <code>null</code> if this wall isn't round.
     * @return {number}
     */
    Wall.prototype.getArcExtent = function () {
        return this.arcExtent;
    };
    /**
     * Returns the abscissa of the arc circle center of this wall.
     * If the wall isn't round, the return abscissa is at the middle of the wall.
     * @return {number}
     */
    Wall.prototype.getXArcCircleCenter = function () {
        if (this.arcExtent == null) {
            return (this.xStart + this.xEnd) / 2;
        }
        else {
            return this.getArcCircleCenter()[0];
        }
    };
    /**
     * Returns the ordinate of the arc circle center of this wall.
     * If the wall isn't round, the return ordinate is at the middle of the wall.
     * @return {number}
     */
    Wall.prototype.getYArcCircleCenter = function () {
        if (this.arcExtent == null) {
            return (this.yStart + this.yEnd) / 2;
        }
        else {
            return this.getArcCircleCenter()[1];
        }
    };
    /**
     * Returns the coordinates of the arc circle center of this wall.
     * @return {float[]}
     * @private
     */
    Wall.prototype.getArcCircleCenter = function () {
        if (this.arcCircleCenterCache == null) {
            var startToEndPointsDistance = java.awt.geom.Point2D.distance(this.xStart, this.yStart, this.xEnd, this.yEnd);
            var wallToStartPointArcCircleCenterAngle = Math.abs(this.arcExtent) > Math.PI ? -(Math.PI + this.arcExtent) / 2 : (Math.PI - this.arcExtent) / 2;
            var arcCircleCenterToWallDistance = -(Math.tan(wallToStartPointArcCircleCenterAngle) * startToEndPointsDistance / 2);
            var xMiddlePoint = (this.xStart + this.xEnd) / 2;
            var yMiddlePoint = (this.yStart + this.yEnd) / 2;
            var angle = Math.atan2(this.xStart - this.xEnd, this.yEnd - this.yStart);
            this.arcCircleCenterCache = [(xMiddlePoint + arcCircleCenterToWallDistance * Math.cos(angle)), (yMiddlePoint + arcCircleCenterToWallDistance * Math.sin(angle))];
        }
        return this.arcCircleCenterCache;
    };
    /**
     * Returns the wall joined to this wall at start point.
     * @return {Wall}
     */
    Wall.prototype.getWallAtStart = function () {
        return this.wallAtStart;
    };
    Wall.prototype.setWallAtStart = function (wallAtStart, detachJoinedWallAtStart) {
        if (detachJoinedWallAtStart === void 0) { detachJoinedWallAtStart = true; }
        if (wallAtStart !== this.wallAtStart) {
            var oldWallAtStart = this.wallAtStart;
            this.wallAtStart = wallAtStart;
            this.clearPointsCache();
            this.firePropertyChange(/* name */ "WALL_AT_START", oldWallAtStart, wallAtStart);
            if (detachJoinedWallAtStart) {
                this.detachJoinedWall(oldWallAtStart);
            }
        }
    };
    /**
     * Returns the wall joined to this wall at end point.
     * @return {Wall}
     */
    Wall.prototype.getWallAtEnd = function () {
        return this.wallAtEnd;
    };
    Wall.prototype.setWallAtEnd = function (wallAtEnd, detachJoinedWallAtEnd) {
        if (detachJoinedWallAtEnd === void 0) { detachJoinedWallAtEnd = true; }
        if (wallAtEnd !== this.wallAtEnd) {
            var oldWallAtEnd = this.wallAtEnd;
            this.wallAtEnd = wallAtEnd;
            this.clearPointsCache();
            this.firePropertyChange(/* name */ "WALL_AT_END", oldWallAtEnd, wallAtEnd);
            if (detachJoinedWallAtEnd) {
                this.detachJoinedWall(oldWallAtEnd);
            }
        }
    };
    /**
     * Detaches <code>joinedWall</code> from this wall.
     * @param {Wall} joinedWall
     * @private
     */
    Wall.prototype.detachJoinedWall = function (joinedWall) {
        if (joinedWall != null) {
            if (joinedWall.getWallAtStart() === this) {
                joinedWall.setWallAtStart(null, false);
            }
            else if (joinedWall.getWallAtEnd() === this) {
                joinedWall.setWallAtEnd(null, false);
            }
        }
    };
    /**
     * Returns the thickness of this wall.
     * @return {number}
     */
    Wall.prototype.getThickness = function () {
        return this.thickness;
    };
    /**
     * Sets wall thickness. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} thickness
     */
    Wall.prototype.setThickness = function (thickness) {
        if (thickness !== this.thickness) {
            var oldThickness = this.thickness;
            this.thickness = thickness;
            this.clearPointsCache();
            this.firePropertyChange(/* name */ "THICKNESS", oldThickness, thickness);
        }
    };
    /**
     * Returns the height of this wall. If {@link #getHeightAtEnd() getHeightAtEnd}
     * returns a value not <code>null</code>, the returned height should be
     * considered as the height of this wall at its start point.
     * @return {number}
     */
    Wall.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the height of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} height
     */
    Wall.prototype.setHeight = function (height) {
        if (height !== this.height && (height == null || !(height === this.height))) {
            var oldHeight = this.height;
            this.height = height;
            this.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
        }
    };
    /**
     * Returns the height of this wall at its end point.
     * @return {number}
     */
    Wall.prototype.getHeightAtEnd = function () {
        return this.heightAtEnd;
    };
    /**
     * Sets the height of this wall at its end point. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} heightAtEnd
     */
    Wall.prototype.setHeightAtEnd = function (heightAtEnd) {
        if (heightAtEnd !== this.heightAtEnd && (heightAtEnd == null || !(heightAtEnd === this.heightAtEnd))) {
            var oldHeightAtEnd = this.heightAtEnd;
            this.heightAtEnd = heightAtEnd;
            this.firePropertyChange(/* name */ "HEIGHT_AT_END", oldHeightAtEnd, heightAtEnd);
        }
    };
    /**
     * Returns <code>true</code> if the height of this wall is different
     * at its start and end points.
     * @return {boolean}
     */
    Wall.prototype.isTrapezoidal = function () {
        return this.height != null && this.heightAtEnd != null && !(this.height === this.heightAtEnd);
    };
    /**
     * Returns left side color of this wall. This is the color of the left side
     * of this wall when you go through wall from start point to end point.
     * @return {number}
     */
    Wall.prototype.getLeftSideColor = function () {
        return this.leftSideColor;
    };
    /**
     * Sets left side color of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} leftSideColor
     */
    Wall.prototype.setLeftSideColor = function (leftSideColor) {
        if (leftSideColor !== this.leftSideColor && (leftSideColor == null || !(leftSideColor === this.leftSideColor))) {
            var oldLeftSideColor = this.leftSideColor;
            this.leftSideColor = leftSideColor;
            this.firePropertyChange(/* name */ "LEFT_SIDE_COLOR", oldLeftSideColor, leftSideColor);
        }
    };
    /**
     * Returns right side color of this wall. This is the color of the right side
     * of this wall when you go through wall from start point to end point.
     * @return {number}
     */
    Wall.prototype.getRightSideColor = function () {
        return this.rightSideColor;
    };
    /**
     * Sets right side color of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} rightSideColor
     */
    Wall.prototype.setRightSideColor = function (rightSideColor) {
        if (rightSideColor !== this.rightSideColor && (rightSideColor == null || !(rightSideColor === this.rightSideColor))) {
            var oldLeftSideColor = this.rightSideColor;
            this.rightSideColor = rightSideColor;
            this.firePropertyChange(/* name */ "RIGHT_SIDE_COLOR", oldLeftSideColor, rightSideColor);
        }
    };
    /**
     * Returns the left side texture of this wall.
     * @return {HomeTexture}
     */
    Wall.prototype.getLeftSideTexture = function () {
        return this.leftSideTexture;
    };
    /**
     * Sets the left side texture of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {HomeTexture} leftSideTexture
     */
    Wall.prototype.setLeftSideTexture = function (leftSideTexture) {
        if (leftSideTexture !== this.leftSideTexture && (leftSideTexture == null || !leftSideTexture.equals(this.leftSideTexture))) {
            var oldLeftSideTexture = this.leftSideTexture;
            this.leftSideTexture = leftSideTexture;
            this.firePropertyChange(/* name */ "LEFT_SIDE_TEXTURE", oldLeftSideTexture, leftSideTexture);
        }
    };
    /**
     * Returns the right side texture of this wall.
     * @return {HomeTexture}
     */
    Wall.prototype.getRightSideTexture = function () {
        return this.rightSideTexture;
    };
    /**
     * Sets the right side texture of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {HomeTexture} rightSideTexture
     */
    Wall.prototype.setRightSideTexture = function (rightSideTexture) {
        if (rightSideTexture !== this.rightSideTexture && (rightSideTexture == null || !rightSideTexture.equals(this.rightSideTexture))) {
            var oldLeftSideTexture = this.rightSideTexture;
            this.rightSideTexture = rightSideTexture;
            this.firePropertyChange(/* name */ "RIGHT_SIDE_TEXTURE", oldLeftSideTexture, rightSideTexture);
        }
    };
    /**
     * Returns the left side shininess of this wall.
     * @return {number} a value between 0 (matt) and 1 (very shiny)
     */
    Wall.prototype.getLeftSideShininess = function () {
        return this.leftSideShininess;
    };
    /**
     * Sets the left side shininess of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} leftSideShininess
     */
    Wall.prototype.setLeftSideShininess = function (leftSideShininess) {
        if (leftSideShininess !== this.leftSideShininess) {
            var oldLeftSideShininess = this.leftSideShininess;
            this.leftSideShininess = leftSideShininess;
            this.firePropertyChange(/* name */ "LEFT_SIDE_SHININESS", oldLeftSideShininess, leftSideShininess);
        }
    };
    /**
     * Returns the right side shininess of this wall.
     * @return {number} a value between 0 (matt) and 1 (very shiny)
     */
    Wall.prototype.getRightSideShininess = function () {
        return this.rightSideShininess;
    };
    /**
     * Sets the right side shininess of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {number} rightSideShininess
     */
    Wall.prototype.setRightSideShininess = function (rightSideShininess) {
        if (rightSideShininess !== this.rightSideShininess) {
            var oldRightSideShininess = this.rightSideShininess;
            this.rightSideShininess = rightSideShininess;
            this.firePropertyChange(/* name */ "RIGHT_SIDE_SHININESS", oldRightSideShininess, rightSideShininess);
        }
    };
    /**
     * Returns the left side baseboard of this wall.
     * @return {Baseboard}
     */
    Wall.prototype.getLeftSideBaseboard = function () {
        return this.leftSideBaseboard;
    };
    /**
     * Sets the left side baseboard of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {Baseboard} leftSideBaseboard
     */
    Wall.prototype.setLeftSideBaseboard = function (leftSideBaseboard) {
        if (leftSideBaseboard !== this.leftSideBaseboard && (leftSideBaseboard == null || !leftSideBaseboard.equals(this.leftSideBaseboard))) {
            var oldLeftSideBaseboard = this.leftSideBaseboard;
            this.leftSideBaseboard = leftSideBaseboard;
            this.clearPointsCache();
            this.firePropertyChange(/* name */ "LEFT_SIDE_BASEBOARD", oldLeftSideBaseboard, leftSideBaseboard);
        }
    };
    /**
     * Returns the right side baseboard of this wall.
     * @return {Baseboard}
     */
    Wall.prototype.getRightSideBaseboard = function () {
        return this.rightSideBaseboard;
    };
    /**
     * Sets the right side baseboard of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {Baseboard} rightSideBaseboard
     */
    Wall.prototype.setRightSideBaseboard = function (rightSideBaseboard) {
        if (rightSideBaseboard !== this.rightSideBaseboard && (rightSideBaseboard == null || !rightSideBaseboard.equals(this.rightSideBaseboard))) {
            var oldRightSideBaseboard = this.rightSideBaseboard;
            this.rightSideBaseboard = rightSideBaseboard;
            this.clearPointsCache();
            this.firePropertyChange(/* name */ "RIGHT_SIDE_BASEBOARD", oldRightSideBaseboard, rightSideBaseboard);
        }
    };
    /**
     * Returns the pattern of this wall in the plan.
     * @return {Object}
     */
    Wall.prototype.getPattern = function () {
        return this.pattern;
    };
    /**
     * Sets the pattern of this wall in the plan, and notifies
     * listeners of this change.
     * @param {Object} pattern
     */
    Wall.prototype.setPattern = function (pattern) {
        if (this.pattern !== pattern) {
            var oldPattern = this.pattern;
            this.pattern = pattern;
            this.firePropertyChange(/* name */ "PATTERN", oldPattern, pattern);
        }
    };
    /**
     * Returns the color of the top of this wall in the 3D view.
     * @return {number}
     */
    Wall.prototype.getTopColor = function () {
        return this.topColor;
    };
    /**
     * Sets the color of the top of this wall in the 3D view, and notifies
     * listeners of this change.
     * @param {number} topColor
     */
    Wall.prototype.setTopColor = function (topColor) {
        if (this.topColor !== topColor && (topColor == null || !(topColor === this.topColor))) {
            var oldTopColor = this.topColor;
            this.topColor = topColor;
            this.firePropertyChange(/* name */ "TOP_COLOR", oldTopColor, topColor);
        }
    };
    /**
     * Returns the level which this wall belongs to.
     * @return {Level}
     */
    Wall.prototype.getLevel = function () {
        return this.level;
    };
    /**
     * Sets the level of this wall. Once this wall is updated,
     * listeners added to this wall will receive a change notification.
     * @param {Level} level
     */
    Wall.prototype.setLevel = function (level) {
        if (level !== this.level) {
            var oldLevel = this.level;
            this.level = level;
            this.firePropertyChange(/* name */ "LEVEL", oldLevel, level);
        }
    };
    /**
     * Returns <code>true</code> if this wall is at the given <code>level</code>
     * or at a level with the same elevation and a smaller elevation index
     * or if the elevation of its highest point is higher than <code>level</code> elevation.
     * @param {Level} level
     * @return {boolean}
     */
    Wall.prototype.isAtLevel = function (level) {
        if (this.level === level) {
            return true;
        }
        else if (this.level != null && level != null) {
            var wallLevelElevation = this.level.getElevation();
            var levelElevation = level.getElevation();
            return wallLevelElevation === levelElevation && this.level.getElevationIndex() < level.getElevationIndex() || wallLevelElevation < levelElevation && wallLevelElevation + this.getWallMaximumHeight() > levelElevation;
        }
        else {
            return false;
        }
    };
    /**
     * Returns the maximum height of the given wall.
     * @return {number}
     * @private
     */
    Wall.prototype.getWallMaximumHeight = function () {
        if (this.height == null) {
            return 0;
        }
        else if (this.isTrapezoidal()) {
            return Math.max(this.height, this.heightAtEnd);
        }
        else {
            return this.height;
        }
    };
    /**
     * Clears the points cache of this wall and of the walls attached to it.
     * @private
     */
    Wall.prototype.clearPointsCache = function () {
        this.shapeCache = null;
        this.pointsCache = null;
        this.pointsIncludingBaseboardsCache = null;
        if (this.wallAtStart != null) {
            this.wallAtStart.pointsCache = null;
            this.wallAtStart.pointsIncludingBaseboardsCache = null;
        }
        if (this.wallAtEnd != null) {
            this.wallAtEnd.pointsCache = null;
            this.wallAtEnd.pointsIncludingBaseboardsCache = null;
        }
    };
    Wall.prototype.getPoints$ = function () {
        return this.getPoints$boolean(false);
    };
    Wall.prototype.getPoints$boolean = function (includeBaseboards) {
        if (includeBaseboards && (this.leftSideBaseboard != null || this.rightSideBaseboard != null)) {
            if (this.pointsIncludingBaseboardsCache == null) {
                this.pointsIncludingBaseboardsCache = this.getShapePoints(true);
            }
            return this.clonePoints(this.pointsIncludingBaseboardsCache);
        }
        else {
            if (this.pointsCache == null) {
                this.pointsCache = this.getShapePoints(false);
            }
            return this.clonePoints(this.pointsCache);
        }
    };
    /**
     * Returns the points of each corner of a wall possibly including its baseboards.
     * @param {boolean} includeBaseboards
     * @return {float[][]}
     */
    Wall.prototype.getPoints = function (includeBaseboards) {
        if (((typeof includeBaseboards === 'boolean') || includeBaseboards === null)) {
            return this.getPoints$boolean(includeBaseboards);
        }
        else if (includeBaseboards === undefined) {
            return this.getPoints$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Return a clone of the given <code>points</code> array.
     * @param {float[][]} points
     * @return {float[][]}
     * @private
     */
    Wall.prototype.clonePoints = function (points) {
        var clonedPoints = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(points.length);
        for (var i = 0; i < points.length; i++) {
            {
                clonedPoints[i] = /* clone */ points[i].slice(0);
            }
            ;
        }
        return clonedPoints;
    };
    /**
     * Returns the points of the wall possibly including baseboards thickness.
     * @param {boolean} includeBaseboards
     * @return {float[][]}
     * @private
     */
    Wall.prototype.getShapePoints = function (includeBaseboards) {
        var epsilon = 0.01;
        var wallPoints = this.getUnjoinedShapePoints(includeBaseboards);
        var leftSideStartPointIndex = 0;
        var rightSideStartPointIndex = wallPoints.length - 1;
        var leftSideEndPointIndex = (wallPoints.length / 2 | 0) - 1;
        var rightSideEndPointIndex = (wallPoints.length / 2 | 0);
        var limit = 2 * this.thickness;
        if (this.wallAtStart != null) {
            var wallAtStartPoints = this.wallAtStart.getUnjoinedShapePoints(includeBaseboards);
            var wallAtStartLeftSideStartPointIndex = 0;
            var wallAtStartRightSideStartPointIndex = wallAtStartPoints.length - 1;
            var wallAtStartLeftSideEndPointIndex = (wallAtStartPoints.length / 2 | 0) - 1;
            var wallAtStartRightSideEndPointIndex = (wallAtStartPoints.length / 2 | 0);
            var wallAtStartJoinedAtEnd = this.wallAtStart.getWallAtEnd() === this && (this.wallAtStart.getWallAtStart() !== this || (this.wallAtStart.xEnd === this.xStart && this.wallAtStart.yEnd === this.yStart));
            var wallAtStartJoinedAtStart = this.wallAtStart.getWallAtStart() === this && (this.wallAtStart.getWallAtEnd() !== this || (this.wallAtStart.xStart === this.xStart && this.wallAtStart.yStart === this.yStart));
            var wallAtStartPointsCache = includeBaseboards ? this.wallAtStart.pointsIncludingBaseboardsCache : this.wallAtStart.pointsCache;
            if (wallAtStartJoinedAtEnd) {
                this.computeIntersection(wallPoints[leftSideStartPointIndex], wallPoints[leftSideStartPointIndex + 1], wallAtStartPoints[wallAtStartLeftSideEndPointIndex], wallAtStartPoints[wallAtStartLeftSideEndPointIndex - 1], limit);
                this.computeIntersection(wallPoints[rightSideStartPointIndex], wallPoints[rightSideStartPointIndex - 1], wallAtStartPoints[wallAtStartRightSideEndPointIndex], wallAtStartPoints[wallAtStartRightSideEndPointIndex + 1], limit);
                if (wallAtStartPointsCache != null) {
                    if (Math.abs(wallPoints[leftSideStartPointIndex][0] - wallAtStartPointsCache[wallAtStartLeftSideEndPointIndex][0]) < epsilon && Math.abs(wallPoints[leftSideStartPointIndex][1] - wallAtStartPointsCache[wallAtStartLeftSideEndPointIndex][1]) < epsilon) {
                        wallPoints[leftSideStartPointIndex] = wallAtStartPointsCache[wallAtStartLeftSideEndPointIndex];
                    }
                    if (Math.abs(wallPoints[rightSideStartPointIndex][0] - wallAtStartPointsCache[wallAtStartRightSideEndPointIndex][0]) < epsilon && Math.abs(wallPoints[rightSideStartPointIndex][1] - wallAtStartPointsCache[wallAtStartRightSideEndPointIndex][1]) < epsilon) {
                        wallPoints[rightSideStartPointIndex] = wallAtStartPointsCache[wallAtStartRightSideEndPointIndex];
                    }
                }
            }
            else if (wallAtStartJoinedAtStart) {
                this.computeIntersection(wallPoints[leftSideStartPointIndex], wallPoints[leftSideStartPointIndex + 1], wallAtStartPoints[wallAtStartRightSideStartPointIndex], wallAtStartPoints[wallAtStartRightSideStartPointIndex - 1], limit);
                this.computeIntersection(wallPoints[rightSideStartPointIndex], wallPoints[rightSideStartPointIndex - 1], wallAtStartPoints[wallAtStartLeftSideStartPointIndex], wallAtStartPoints[wallAtStartLeftSideStartPointIndex + 1], limit);
                if (wallAtStartPointsCache != null) {
                    if (Math.abs(wallPoints[leftSideStartPointIndex][0] - wallAtStartPointsCache[wallAtStartRightSideStartPointIndex][0]) < epsilon && Math.abs(wallPoints[leftSideStartPointIndex][1] - wallAtStartPointsCache[wallAtStartRightSideStartPointIndex][1]) < epsilon) {
                        wallPoints[leftSideStartPointIndex] = wallAtStartPointsCache[wallAtStartRightSideStartPointIndex];
                    }
                    if (wallAtStartPointsCache != null && Math.abs(wallPoints[rightSideStartPointIndex][0] - wallAtStartPointsCache[wallAtStartLeftSideStartPointIndex][0]) < epsilon && Math.abs(wallPoints[rightSideStartPointIndex][1] - wallAtStartPointsCache[wallAtStartLeftSideStartPointIndex][1]) < epsilon) {
                        wallPoints[rightSideStartPointIndex] = wallAtStartPointsCache[wallAtStartLeftSideStartPointIndex];
                    }
                }
            }
        }
        if (this.wallAtEnd != null) {
            var wallAtEndPoints = this.wallAtEnd.getUnjoinedShapePoints(includeBaseboards);
            var wallAtEndLeftSideStartPointIndex = 0;
            var wallAtEndRightSideStartPointIndex = wallAtEndPoints.length - 1;
            var wallAtEndLeftSideEndPointIndex = (wallAtEndPoints.length / 2 | 0) - 1;
            var wallAtEndRightSideEndPointIndex = (wallAtEndPoints.length / 2 | 0);
            var wallAtEndJoinedAtStart = this.wallAtEnd.getWallAtStart() === this && (this.wallAtEnd.getWallAtEnd() !== this || (this.wallAtEnd.xStart === this.xEnd && this.wallAtEnd.yStart === this.yEnd));
            var wallAtEndJoinedAtEnd = this.wallAtEnd.getWallAtEnd() === this && (this.wallAtEnd.getWallAtStart() !== this || (this.wallAtEnd.xEnd === this.xEnd && this.wallAtEnd.yEnd === this.yEnd));
            var wallAtEndPointsCache = includeBaseboards ? this.wallAtEnd.pointsIncludingBaseboardsCache : this.wallAtEnd.pointsCache;
            if (wallAtEndJoinedAtStart) {
                this.computeIntersection(wallPoints[leftSideEndPointIndex], wallPoints[leftSideEndPointIndex - 1], wallAtEndPoints[wallAtEndLeftSideStartPointIndex], wallAtEndPoints[wallAtEndLeftSideStartPointIndex + 1], limit);
                this.computeIntersection(wallPoints[rightSideEndPointIndex], wallPoints[rightSideEndPointIndex + 1], wallAtEndPoints[wallAtEndRightSideStartPointIndex], wallAtEndPoints[wallAtEndRightSideStartPointIndex - 1], limit);
                if (wallAtEndPointsCache != null) {
                    if (Math.abs(wallPoints[leftSideEndPointIndex][0] - wallAtEndPointsCache[wallAtEndLeftSideStartPointIndex][0]) < epsilon && Math.abs(wallPoints[leftSideEndPointIndex][1] - wallAtEndPointsCache[wallAtEndLeftSideStartPointIndex][1]) < epsilon) {
                        wallPoints[leftSideEndPointIndex] = wallAtEndPointsCache[wallAtEndLeftSideStartPointIndex];
                    }
                    if (Math.abs(wallPoints[rightSideEndPointIndex][0] - wallAtEndPointsCache[wallAtEndRightSideStartPointIndex][0]) < epsilon && Math.abs(wallPoints[rightSideEndPointIndex][1] - wallAtEndPointsCache[wallAtEndRightSideStartPointIndex][1]) < epsilon) {
                        wallPoints[rightSideEndPointIndex] = wallAtEndPointsCache[wallAtEndRightSideStartPointIndex];
                    }
                }
            }
            else if (wallAtEndJoinedAtEnd) {
                this.computeIntersection(wallPoints[leftSideEndPointIndex], wallPoints[leftSideEndPointIndex - 1], wallAtEndPoints[wallAtEndRightSideEndPointIndex], wallAtEndPoints[wallAtEndRightSideEndPointIndex + 1], limit);
                this.computeIntersection(wallPoints[rightSideEndPointIndex], wallPoints[rightSideEndPointIndex + 1], wallAtEndPoints[wallAtEndLeftSideEndPointIndex], wallAtEndPoints[wallAtEndLeftSideEndPointIndex - 1], limit);
                if (wallAtEndPointsCache != null) {
                    if (Math.abs(wallPoints[leftSideEndPointIndex][0] - wallAtEndPointsCache[wallAtEndRightSideEndPointIndex][0]) < epsilon && Math.abs(wallPoints[leftSideEndPointIndex][1] - wallAtEndPointsCache[wallAtEndRightSideEndPointIndex][1]) < epsilon) {
                        wallPoints[leftSideEndPointIndex] = wallAtEndPointsCache[wallAtEndRightSideEndPointIndex];
                    }
                    if (Math.abs(wallPoints[rightSideEndPointIndex][0] - wallAtEndPointsCache[wallAtEndLeftSideEndPointIndex][0]) < epsilon && Math.abs(wallPoints[rightSideEndPointIndex][1] - wallAtEndPointsCache[wallAtEndLeftSideEndPointIndex][1]) < epsilon) {
                        wallPoints[rightSideEndPointIndex] = wallAtEndPointsCache[wallAtEndLeftSideEndPointIndex];
                    }
                }
            }
        }
        return wallPoints;
    };
    /**
     * Computes the rectangle or the circle arc of a wall according to its thickness
     * and possibly the thickness of its baseboards.
     * @param {boolean} includeBaseboards
     * @return {float[][]}
     * @private
     */
    Wall.prototype.getUnjoinedShapePoints = function (includeBaseboards) {
        if (this.arcExtent != null && /* floatValue */ this.arcExtent !== 0 && java.awt.geom.Point2D.distanceSq(this.xStart, this.yStart, this.xEnd, this.yEnd) > 1.0E-10) {
            var arcCircleCenter = this.getArcCircleCenter();
            var startAngle = Math.atan2(arcCircleCenter[1] - this.yStart, arcCircleCenter[0] - this.xStart);
            startAngle += 2 * Math.atan2(this.yStart - this.yEnd, this.xEnd - this.xStart);
            var arcCircleRadius = java.awt.geom.Point2D.distance(arcCircleCenter[0], arcCircleCenter[1], this.xStart, this.yStart);
            var exteriorArcRadius = arcCircleRadius + this.thickness / 2;
            var interiorArcRadius = Math.max(0, arcCircleRadius - this.thickness / 2);
            var exteriorArcLength = exteriorArcRadius * Math.abs(this.arcExtent);
            var angleDelta = this.arcExtent / Math.sqrt(exteriorArcLength);
            var angleStepCount = ((this.arcExtent / angleDelta) | 0);
            if (includeBaseboards) {
                if (angleDelta > 0) {
                    if (this.leftSideBaseboard != null) {
                        exteriorArcRadius += this.leftSideBaseboard.getThickness();
                    }
                    if (this.rightSideBaseboard != null) {
                        interiorArcRadius -= this.rightSideBaseboard.getThickness();
                    }
                }
                else {
                    if (this.leftSideBaseboard != null) {
                        interiorArcRadius -= this.leftSideBaseboard.getThickness();
                    }
                    if (this.rightSideBaseboard != null) {
                        exteriorArcRadius += this.rightSideBaseboard.getThickness();
                    }
                }
            }
            var wallPoints = ([]);
            if (this.symmetric) {
                if (Math.abs(this.arcExtent - angleStepCount * angleDelta) > 1.0E-6) {
                    angleDelta = this.arcExtent / ++angleStepCount;
                }
                for (var i = 0; i <= angleStepCount; i++) {
                    {
                        this.computeRoundWallShapePoint(wallPoints, startAngle + this.arcExtent - i * angleDelta, i, angleDelta, arcCircleCenter, exteriorArcRadius, interiorArcRadius);
                    }
                    ;
                }
            }
            else {
                var i = 0;
                for (var angle = this.arcExtent; angleDelta > 0 ? angle >= angleDelta * 0.1 : angle <= -angleDelta * 0.1; angle -= angleDelta, i++) {
                    {
                        this.computeRoundWallShapePoint(wallPoints, startAngle + angle, i, angleDelta, arcCircleCenter, exteriorArcRadius, interiorArcRadius);
                    }
                    ;
                }
                this.computeRoundWallShapePoint(wallPoints, startAngle, i, angleDelta, arcCircleCenter, exteriorArcRadius, interiorArcRadius);
            }
            return /* toArray */ wallPoints.slice(0);
        }
        else {
            var angle = Math.atan2(this.yEnd - this.yStart, this.xEnd - this.xStart);
            var sin = Math.sin(angle);
            var cos = Math.cos(angle);
            var leftSideTickness = this.thickness / 2;
            if (includeBaseboards && this.leftSideBaseboard != null) {
                leftSideTickness += this.leftSideBaseboard.getThickness();
            }
            var leftSideDx = sin * leftSideTickness;
            var leftSideDy = cos * leftSideTickness;
            var rightSideTickness = this.thickness / 2;
            if (includeBaseboards && this.rightSideBaseboard != null) {
                rightSideTickness += this.rightSideBaseboard.getThickness();
            }
            var rightSideDx = sin * rightSideTickness;
            var rightSideDy = cos * rightSideTickness;
            return [[this.xStart + leftSideDx, this.yStart - leftSideDy], [this.xEnd + leftSideDx, this.yEnd - leftSideDy], [this.xEnd - rightSideDx, this.yEnd + rightSideDy], [this.xStart - rightSideDx, this.yStart + rightSideDy]];
        }
    };
    /**
     * Computes the exterior and interior arc points of a round wall at the given <code>index</code>.
     * @param {float[][]} wallPoints
     * @param {number} angle
     * @param {number} index
     * @param {number} angleDelta
     * @param {float[]} arcCircleCenter
     * @param {number} exteriorArcRadius
     * @param {number} interiorArcRadius
     * @private
     */
    Wall.prototype.computeRoundWallShapePoint = function (wallPoints, angle, index, angleDelta, arcCircleCenter, exteriorArcRadius, interiorArcRadius) {
        var cos = Math.cos(angle);
        var sin = Math.sin(angle);
        var interiorArcPoint = [(arcCircleCenter[0] + interiorArcRadius * cos), (arcCircleCenter[1] - interiorArcRadius * sin)];
        var exteriorArcPoint = [(arcCircleCenter[0] + exteriorArcRadius * cos), (arcCircleCenter[1] - exteriorArcRadius * sin)];
        if (angleDelta > 0) {
            /* add */ wallPoints.splice(index, 0, interiorArcPoint);
            /* add */ wallPoints.splice(/* size */ wallPoints.length - 1 - index, 0, exteriorArcPoint);
        }
        else {
            /* add */ wallPoints.splice(index, 0, exteriorArcPoint);
            /* add */ wallPoints.splice(/* size */ wallPoints.length - 1 - index, 0, interiorArcPoint);
        }
    };
    /**
     * Compute the intersection between the line that joins <code>point1</code> to <code>point2</code>
     * and the line that joins <code>point3</code> and <code>point4</code>, and stores the result
     * in <code>point1</code>.
     * @param {float[]} point1
     * @param {float[]} point2
     * @param {float[]} point3
     * @param {float[]} point4
     * @param {number} limit
     * @private
     */
    Wall.prototype.computeIntersection = function (point1, point2, point3, point4, limit) {
        var alpha1 = (point2[1] - point1[1]) / (point2[0] - point1[0]);
        var alpha2 = (point4[1] - point3[1]) / (point4[0] - point3[0]);
        if (alpha1 !== alpha2) {
            var x = point1[0];
            var y = point1[1];
            if (Math.abs(alpha1) > 4000) {
                if (Math.abs(alpha2) < 4000) {
                    x = point1[0];
                    var beta2 = point4[1] - alpha2 * point4[0];
                    y = alpha2 * x + beta2;
                }
            }
            else if (Math.abs(alpha2) > 4000) {
                if (Math.abs(alpha1) < 4000) {
                    x = point3[0];
                    var beta1 = point2[1] - alpha1 * point2[0];
                    y = alpha1 * x + beta1;
                }
            }
            else {
                var sameSignum = (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(alpha1) === /* signum */ (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(alpha2);
                if (Math.abs(alpha1 - alpha2) > 1.0E-5 && (!sameSignum || (Math.abs(alpha1) > Math.abs(alpha2) ? alpha1 / alpha2 : alpha2 / alpha1) > 1.004)) {
                    var beta1 = point2[1] - alpha1 * point2[0];
                    var beta2 = point4[1] - alpha2 * point4[0];
                    x = (beta2 - beta1) / (alpha1 - alpha2);
                    y = alpha1 * x + beta1;
                }
            }
            if (java.awt.geom.Point2D.distanceSq(x, y, point1[0], point1[1]) < limit * limit) {
                point1[0] = x;
                point1[1] = y;
            }
        }
    };
    /**
     * Returns <code>true</code> if this wall intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    Wall.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return this.getShape(false).intersects(rectangle);
    };
    Wall.prototype.containsPoint$float$float$float = function (x, y, margin) {
        return this.containsPoint$float$float$boolean$float(x, y, false, margin);
    };
    Wall.prototype.containsPoint$float$float$boolean$float = function (x, y, includeBaseboards, margin) {
        return this.containsShapeAtWithMargin(this.getShape(includeBaseboards), x, y, margin);
    };
    /**
     * Returns <code>true</code> if this wall contains the point at (<code>x</code>, <code>y</code>)
     * possibly including its baseboards, with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {boolean} includeBaseboards
     * @param {number} margin
     * @return {boolean}
     */
    Wall.prototype.containsPoint = function (x, y, includeBaseboards, margin) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof includeBaseboards === 'boolean') || includeBaseboards === null) && ((typeof margin === 'number') || margin === null)) {
            return this.containsPoint$float$float$boolean$float(x, y, includeBaseboards, margin);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof includeBaseboards === 'number') || includeBaseboards === null) && margin === undefined) {
            return this.containsPoint$float$float$float(x, y, includeBaseboards);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns <code>true</code> if the middle point of this wall is the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Wall.prototype.isMiddlePointAt = function (x, y, margin) {
        var wallPoints = this.getPoints$();
        var leftSideMiddlePointIndex = (wallPoints.length / 4 | 0);
        var rightSideMiddlePointIndex = wallPoints.length - 1 - leftSideMiddlePointIndex;
        var middleLine = wallPoints.length % 4 === 0 ? new java.awt.geom.Line2D.Float((wallPoints[leftSideMiddlePointIndex - 1][0] + wallPoints[leftSideMiddlePointIndex][0]) / 2, (wallPoints[leftSideMiddlePointIndex - 1][1] + wallPoints[leftSideMiddlePointIndex][1]) / 2, (wallPoints[rightSideMiddlePointIndex][0] + wallPoints[rightSideMiddlePointIndex + 1][0]) / 2, (wallPoints[rightSideMiddlePointIndex][1] + wallPoints[rightSideMiddlePointIndex + 1][1]) / 2) : new java.awt.geom.Line2D.Float(wallPoints[leftSideMiddlePointIndex][0], wallPoints[leftSideMiddlePointIndex][1], wallPoints[rightSideMiddlePointIndex][0], wallPoints[rightSideMiddlePointIndex][1]);
        return this.containsShapeAtWithMargin(middleLine, x, y, margin);
    };
    /**
     * Returns <code>true</code> if this wall start line contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code> around the wall start line.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Wall.prototype.containsWallStartAt = function (x, y, margin) {
        var wallPoints = this.getPoints$();
        var startLine = new java.awt.geom.Line2D.Float(wallPoints[0][0], wallPoints[0][1], wallPoints[wallPoints.length - 1][0], wallPoints[wallPoints.length - 1][1]);
        return this.containsShapeAtWithMargin(startLine, x, y, margin);
    };
    /**
     * Returns <code>true</code> if this wall end line contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code> around the wall end line.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Wall.prototype.containsWallEndAt = function (x, y, margin) {
        var wallPoints = this.getPoints$();
        var endLine = new java.awt.geom.Line2D.Float(wallPoints[(wallPoints.length / 2 | 0) - 1][0], wallPoints[(wallPoints.length / 2 | 0) - 1][1], wallPoints[(wallPoints.length / 2 | 0)][0], wallPoints[(wallPoints.length / 2 | 0)][1]);
        return this.containsShapeAtWithMargin(endLine, x, y, margin);
    };
    /**
     * Returns <code>true</code> if <code>shape</code> contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {Object} shape
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     * @private
     */
    Wall.prototype.containsShapeAtWithMargin = function (shape, x, y, margin) {
        if (margin === 0) {
            return shape.contains(x, y);
        }
        else {
            return shape.intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Returns the shape matching this wall.
     * @param {boolean} includeBaseboards
     * @return {Object}
     * @private
     */
    Wall.prototype.getShape = function (includeBaseboards) {
        if (this.shapeCache == null) {
            var wallPoints = this.getPoints$boolean(includeBaseboards);
            var wallPath = new java.awt.geom.GeneralPath();
            wallPath.moveTo(wallPoints[0][0], wallPoints[0][1]);
            for (var i = 1; i < wallPoints.length; i++) {
                {
                    wallPath.lineTo(wallPoints[i][0], wallPoints[i][1]);
                }
                ;
            }
            wallPath.closePath();
            this.shapeCache = wallPath;
        }
        return this.shapeCache;
    };
    /**
     * Moves this wall of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    Wall.prototype.move = function (dx, dy) {
        this.setXStart(this.getXStart() + dx);
        this.setYStart(this.getYStart() + dy);
        this.setXEnd(this.getXEnd() + dx);
        this.setYEnd(this.getYEnd() + dy);
    };
    /**
     * Returns a duplicate of the <code>walls</code> list. All existing walls
     * are copied and their wall at start and end point are set with copied
     * walls only if they belong to the returned list.
     * The id of duplicated walls are regenerated.
     * @param {Wall[]} walls
     * @return {Wall[]}
     */
    Wall.duplicate = function (walls) {
        var wallsCopy = ([]);
        for (var index = 0; index < walls.length; index++) {
            var wall = walls[index];
            {
                /* add */ (wallsCopy.push(wall.duplicate()) > 0);
            }
        }
        Wall.updateBoundWalls(wallsCopy, walls);
        return wallsCopy;
    };
    /**
     * Returns a clone of the <code>walls</code> list. All existing walls
     * are copied and their wall at start and end point are set with copied
     * walls only if they belong to the returned list.
     * @param {Wall[]} walls
     * @return {Wall[]}
     */
    Wall.clone = function (walls) {
        var wallsCopy = ([]);
        for (var index = 0; index < walls.length; index++) {
            var wall = walls[index];
            {
                /* add */ (wallsCopy.push(/* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                    return o.clone();
                }
                else {
                    var clone = Object.create(o);
                    for (var p in o) {
                        if (o.hasOwnProperty(p))
                            clone[p] = o[p];
                    }
                    return clone;
                } })(wall)) > 0);
            }
        }
        Wall.updateBoundWalls(wallsCopy, walls);
        return wallsCopy;
    };
    Wall.updateBoundWalls = function (wallsCopy, walls) {
        for (var i = 0; i < /* size */ walls.length; i++) {
            {
                var wall = walls[i];
                var wallAtStartIndex = walls.indexOf(wall.getWallAtStart());
                if (wallAtStartIndex !== -1) {
                    /* get */ wallsCopy[i].setWallAtStart(/* get */ wallsCopy[wallAtStartIndex]);
                }
                var wallAtEndIndex = walls.indexOf(wall.getWallAtEnd());
                if (wallAtEndIndex !== -1) {
                    /* get */ wallsCopy[i].setWallAtEnd(/* get */ wallsCopy[wallAtEndIndex]);
                }
            }
            ;
        }
    };
    /**
     * Returns a clone of this wall expected
     * its wall at start and wall at end aren't copied.
     * @return {Wall}
     */
    Wall.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_3 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_3[p] = o[p];
            }
            return clone_3;
        } })(this);
        clone.wallAtStart = null;
        clone.wallAtEnd = null;
        clone.level = null;
        clone.shapeCache = null;
        clone.pointsCache = null;
        clone.pointsIncludingBaseboardsCache = null;
        return clone;
    };
    return Wall;
}(HomeObject));
Wall["__class"] = "com.eteks.sweethome3d.model.Wall";
Wall["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.Elevatable"];
Wall['__transients'] = ['shapeCache', 'arcCircleCenterCache', 'pointsCache', 'pointsIncludingBaseboardsCache', 'propertyChangeSupport'];
/**
 * Creates home environment from parameters.
 * @param {string} id
 * @param {number} groundColor
 * @param {HomeTexture} groundTexture
 * @param {number} skyColor
 * @param {HomeTexture} skyTexture
 * @param {number} lightColor
 * @param {number} wallsAlpha
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var HomeEnvironment = /** @class */ (function (_super) {
    __extends(HomeEnvironment, _super);
    function HomeEnvironment(id, groundColor, groundTexture, skyColor, skyTexture, lightColor, wallsAlpha) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof groundColor === 'number') || groundColor === null) && ((groundTexture != null && groundTexture instanceof HomeTexture) || groundTexture === null) && ((typeof skyColor === 'number') || skyColor === null) && ((skyTexture != null && skyTexture instanceof HomeTexture) || skyTexture === null) && ((typeof lightColor === 'number') || lightColor === null) && ((typeof wallsAlpha === 'number') || wallsAlpha === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.observerCameraElevationAdjusted === undefined) {
                _this.observerCameraElevationAdjusted = false;
            }
            if (_this.groundColor === undefined) {
                _this.groundColor = 0;
            }
            if (_this.groundTexture === undefined) {
                _this.groundTexture = null;
            }
            if (_this.backgroundImageVisibleOnGround3D === undefined) {
                _this.backgroundImageVisibleOnGround3D = false;
            }
            if (_this.skyColor === undefined) {
                _this.skyColor = 0;
            }
            if (_this.skyTexture === undefined) {
                _this.skyTexture = null;
            }
            if (_this.lightColor === undefined) {
                _this.lightColor = 0;
            }
            if (_this.ceilingLightColor === undefined) {
                _this.ceilingLightColor = 0;
            }
            if (_this.wallsAlpha === undefined) {
                _this.wallsAlpha = 0;
            }
            if (_this.drawingMode === undefined) {
                _this.drawingMode = null;
            }
            if (_this.subpartSizeUnderLight === undefined) {
                _this.subpartSizeUnderLight = 0;
            }
            if (_this.allLevelsVisible === undefined) {
                _this.allLevelsVisible = false;
            }
            if (_this.photoWidth === undefined) {
                _this.photoWidth = 0;
            }
            if (_this.photoHeight === undefined) {
                _this.photoHeight = 0;
            }
            if (_this.photoAspectRatio === undefined) {
                _this.photoAspectRatio = null;
            }
            if (_this.photoAspectRatioName === undefined) {
                _this.photoAspectRatioName = null;
            }
            if (_this.photoQuality === undefined) {
                _this.photoQuality = 0;
            }
            if (_this.videoWidth === undefined) {
                _this.videoWidth = 0;
            }
            if (_this.videoAspectRatio === undefined) {
                _this.videoAspectRatio = null;
            }
            if (_this.videoAspectRatioName === undefined) {
                _this.videoAspectRatioName = null;
            }
            if (_this.videoQuality === undefined) {
                _this.videoQuality = 0;
            }
            if (_this.videoSpeed === undefined) {
                _this.videoSpeed = 0;
            }
            if (_this.videoFrameRate === undefined) {
                _this.videoFrameRate = 0;
            }
            if (_this.cameraPath === undefined) {
                _this.cameraPath = null;
            }
            _this.observerCameraElevationAdjusted = true;
            _this.groundColor = groundColor;
            _this.groundTexture = groundTexture;
            _this.skyColor = skyColor;
            _this.skyTexture = skyTexture;
            _this.lightColor = lightColor;
            _this.ceilingLightColor = 13684944;
            _this.wallsAlpha = wallsAlpha;
            _this.drawingMode = HomeEnvironment.DrawingMode.FILL;
            _this.photoWidth = 400;
            _this.photoHeight = 300;
            _this.photoAspectRatio = AspectRatio.VIEW_3D_RATIO;
            _this.videoWidth = 320;
            _this.videoAspectRatio = AspectRatio.RATIO_4_3;
            _this.videoSpeed = 2400.0 / 3600;
            _this.videoFrameRate = 25;
            _this.cameraPath = /* emptyList */ [];
        }
        else if (((typeof id === 'number') || id === null) && ((groundColor != null && groundColor instanceof HomeTexture) || groundColor === null) && ((typeof groundTexture === 'number') || groundTexture === null) && ((skyColor != null && skyColor instanceof HomeTexture) || skyColor === null) && ((typeof skyTexture === 'number') || skyTexture === null) && ((typeof lightColor === 'number') || lightColor === null) && wallsAlpha === undefined) {
            var __args = arguments;
            var groundColor_1 = __args[0];
            var groundTexture_1 = __args[1];
            var skyColor_1 = __args[2];
            var skyTexture_1 = __args[3];
            var lightColor_1 = __args[4];
            var wallsAlpha_1 = __args[5];
            {
                var __args_77 = arguments;
                var id_16 = HomeObject.createId("environment");
                _this = _super.call(this, id_16) || this;
                if (_this.observerCameraElevationAdjusted === undefined) {
                    _this.observerCameraElevationAdjusted = false;
                }
                if (_this.groundColor === undefined) {
                    _this.groundColor = 0;
                }
                if (_this.groundTexture === undefined) {
                    _this.groundTexture = null;
                }
                if (_this.backgroundImageVisibleOnGround3D === undefined) {
                    _this.backgroundImageVisibleOnGround3D = false;
                }
                if (_this.skyColor === undefined) {
                    _this.skyColor = 0;
                }
                if (_this.skyTexture === undefined) {
                    _this.skyTexture = null;
                }
                if (_this.lightColor === undefined) {
                    _this.lightColor = 0;
                }
                if (_this.ceilingLightColor === undefined) {
                    _this.ceilingLightColor = 0;
                }
                if (_this.wallsAlpha === undefined) {
                    _this.wallsAlpha = 0;
                }
                if (_this.drawingMode === undefined) {
                    _this.drawingMode = null;
                }
                if (_this.subpartSizeUnderLight === undefined) {
                    _this.subpartSizeUnderLight = 0;
                }
                if (_this.allLevelsVisible === undefined) {
                    _this.allLevelsVisible = false;
                }
                if (_this.photoWidth === undefined) {
                    _this.photoWidth = 0;
                }
                if (_this.photoHeight === undefined) {
                    _this.photoHeight = 0;
                }
                if (_this.photoAspectRatio === undefined) {
                    _this.photoAspectRatio = null;
                }
                if (_this.photoAspectRatioName === undefined) {
                    _this.photoAspectRatioName = null;
                }
                if (_this.photoQuality === undefined) {
                    _this.photoQuality = 0;
                }
                if (_this.videoWidth === undefined) {
                    _this.videoWidth = 0;
                }
                if (_this.videoAspectRatio === undefined) {
                    _this.videoAspectRatio = null;
                }
                if (_this.videoAspectRatioName === undefined) {
                    _this.videoAspectRatioName = null;
                }
                if (_this.videoQuality === undefined) {
                    _this.videoQuality = 0;
                }
                if (_this.videoSpeed === undefined) {
                    _this.videoSpeed = 0;
                }
                if (_this.videoFrameRate === undefined) {
                    _this.videoFrameRate = 0;
                }
                if (_this.cameraPath === undefined) {
                    _this.cameraPath = null;
                }
                _this.observerCameraElevationAdjusted = true;
                _this.groundColor = groundColor_1;
                _this.groundTexture = groundTexture_1;
                _this.skyColor = skyColor_1;
                _this.skyTexture = skyTexture_1;
                _this.lightColor = lightColor_1;
                _this.ceilingLightColor = 13684944;
                _this.wallsAlpha = wallsAlpha_1;
                _this.drawingMode = HomeEnvironment.DrawingMode.FILL;
                _this.photoWidth = 400;
                _this.photoHeight = 300;
                _this.photoAspectRatio = AspectRatio.VIEW_3D_RATIO;
                _this.videoWidth = 320;
                _this.videoAspectRatio = AspectRatio.RATIO_4_3;
                _this.videoSpeed = 2400.0 / 3600;
                _this.videoFrameRate = 25;
                _this.cameraPath = /* emptyList */ [];
            }
            if (_this.observerCameraElevationAdjusted === undefined) {
                _this.observerCameraElevationAdjusted = false;
            }
            if (_this.groundColor === undefined) {
                _this.groundColor = 0;
            }
            if (_this.groundTexture === undefined) {
                _this.groundTexture = null;
            }
            if (_this.backgroundImageVisibleOnGround3D === undefined) {
                _this.backgroundImageVisibleOnGround3D = false;
            }
            if (_this.skyColor === undefined) {
                _this.skyColor = 0;
            }
            if (_this.skyTexture === undefined) {
                _this.skyTexture = null;
            }
            if (_this.lightColor === undefined) {
                _this.lightColor = 0;
            }
            if (_this.ceilingLightColor === undefined) {
                _this.ceilingLightColor = 0;
            }
            if (_this.wallsAlpha === undefined) {
                _this.wallsAlpha = 0;
            }
            if (_this.drawingMode === undefined) {
                _this.drawingMode = null;
            }
            if (_this.subpartSizeUnderLight === undefined) {
                _this.subpartSizeUnderLight = 0;
            }
            if (_this.allLevelsVisible === undefined) {
                _this.allLevelsVisible = false;
            }
            if (_this.photoWidth === undefined) {
                _this.photoWidth = 0;
            }
            if (_this.photoHeight === undefined) {
                _this.photoHeight = 0;
            }
            if (_this.photoAspectRatio === undefined) {
                _this.photoAspectRatio = null;
            }
            if (_this.photoAspectRatioName === undefined) {
                _this.photoAspectRatioName = null;
            }
            if (_this.photoQuality === undefined) {
                _this.photoQuality = 0;
            }
            if (_this.videoWidth === undefined) {
                _this.videoWidth = 0;
            }
            if (_this.videoAspectRatio === undefined) {
                _this.videoAspectRatio = null;
            }
            if (_this.videoAspectRatioName === undefined) {
                _this.videoAspectRatioName = null;
            }
            if (_this.videoQuality === undefined) {
                _this.videoQuality = 0;
            }
            if (_this.videoSpeed === undefined) {
                _this.videoSpeed = 0;
            }
            if (_this.videoFrameRate === undefined) {
                _this.videoFrameRate = 0;
            }
            if (_this.cameraPath === undefined) {
                _this.cameraPath = null;
            }
        }
        else if (((typeof id === 'number') || id === null) && ((groundColor != null && groundColor instanceof HomeTexture) || groundColor === null) && ((typeof groundTexture === 'number') || groundTexture === null) && ((typeof skyColor === 'number') || skyColor === null) && ((typeof skyTexture === 'number') || skyTexture === null) && lightColor === undefined && wallsAlpha === undefined) {
            var __args = arguments;
            var groundColor_2 = __args[0];
            var groundTexture_2 = __args[1];
            var skyColor_2 = __args[2];
            var lightColor_2 = __args[3];
            var wallsAlpha_2 = __args[4];
            {
                var __args_78 = arguments;
                var skyTexture_2 = null;
                {
                    var __args_79 = arguments;
                    var id_17 = HomeObject.createId("environment");
                    _this = _super.call(this, id_17) || this;
                    if (_this.observerCameraElevationAdjusted === undefined) {
                        _this.observerCameraElevationAdjusted = false;
                    }
                    if (_this.groundColor === undefined) {
                        _this.groundColor = 0;
                    }
                    if (_this.groundTexture === undefined) {
                        _this.groundTexture = null;
                    }
                    if (_this.backgroundImageVisibleOnGround3D === undefined) {
                        _this.backgroundImageVisibleOnGround3D = false;
                    }
                    if (_this.skyColor === undefined) {
                        _this.skyColor = 0;
                    }
                    if (_this.skyTexture === undefined) {
                        _this.skyTexture = null;
                    }
                    if (_this.lightColor === undefined) {
                        _this.lightColor = 0;
                    }
                    if (_this.ceilingLightColor === undefined) {
                        _this.ceilingLightColor = 0;
                    }
                    if (_this.wallsAlpha === undefined) {
                        _this.wallsAlpha = 0;
                    }
                    if (_this.drawingMode === undefined) {
                        _this.drawingMode = null;
                    }
                    if (_this.subpartSizeUnderLight === undefined) {
                        _this.subpartSizeUnderLight = 0;
                    }
                    if (_this.allLevelsVisible === undefined) {
                        _this.allLevelsVisible = false;
                    }
                    if (_this.photoWidth === undefined) {
                        _this.photoWidth = 0;
                    }
                    if (_this.photoHeight === undefined) {
                        _this.photoHeight = 0;
                    }
                    if (_this.photoAspectRatio === undefined) {
                        _this.photoAspectRatio = null;
                    }
                    if (_this.photoAspectRatioName === undefined) {
                        _this.photoAspectRatioName = null;
                    }
                    if (_this.photoQuality === undefined) {
                        _this.photoQuality = 0;
                    }
                    if (_this.videoWidth === undefined) {
                        _this.videoWidth = 0;
                    }
                    if (_this.videoAspectRatio === undefined) {
                        _this.videoAspectRatio = null;
                    }
                    if (_this.videoAspectRatioName === undefined) {
                        _this.videoAspectRatioName = null;
                    }
                    if (_this.videoQuality === undefined) {
                        _this.videoQuality = 0;
                    }
                    if (_this.videoSpeed === undefined) {
                        _this.videoSpeed = 0;
                    }
                    if (_this.videoFrameRate === undefined) {
                        _this.videoFrameRate = 0;
                    }
                    if (_this.cameraPath === undefined) {
                        _this.cameraPath = null;
                    }
                    _this.observerCameraElevationAdjusted = true;
                    _this.groundColor = groundColor_2;
                    _this.groundTexture = groundTexture_2;
                    _this.skyColor = skyColor_2;
                    _this.skyTexture = skyTexture_2;
                    _this.lightColor = lightColor_2;
                    _this.ceilingLightColor = 13684944;
                    _this.wallsAlpha = wallsAlpha_2;
                    _this.drawingMode = HomeEnvironment.DrawingMode.FILL;
                    _this.photoWidth = 400;
                    _this.photoHeight = 300;
                    _this.photoAspectRatio = AspectRatio.VIEW_3D_RATIO;
                    _this.videoWidth = 320;
                    _this.videoAspectRatio = AspectRatio.RATIO_4_3;
                    _this.videoSpeed = 2400.0 / 3600;
                    _this.videoFrameRate = 25;
                    _this.cameraPath = /* emptyList */ [];
                }
                if (_this.observerCameraElevationAdjusted === undefined) {
                    _this.observerCameraElevationAdjusted = false;
                }
                if (_this.groundColor === undefined) {
                    _this.groundColor = 0;
                }
                if (_this.groundTexture === undefined) {
                    _this.groundTexture = null;
                }
                if (_this.backgroundImageVisibleOnGround3D === undefined) {
                    _this.backgroundImageVisibleOnGround3D = false;
                }
                if (_this.skyColor === undefined) {
                    _this.skyColor = 0;
                }
                if (_this.skyTexture === undefined) {
                    _this.skyTexture = null;
                }
                if (_this.lightColor === undefined) {
                    _this.lightColor = 0;
                }
                if (_this.ceilingLightColor === undefined) {
                    _this.ceilingLightColor = 0;
                }
                if (_this.wallsAlpha === undefined) {
                    _this.wallsAlpha = 0;
                }
                if (_this.drawingMode === undefined) {
                    _this.drawingMode = null;
                }
                if (_this.subpartSizeUnderLight === undefined) {
                    _this.subpartSizeUnderLight = 0;
                }
                if (_this.allLevelsVisible === undefined) {
                    _this.allLevelsVisible = false;
                }
                if (_this.photoWidth === undefined) {
                    _this.photoWidth = 0;
                }
                if (_this.photoHeight === undefined) {
                    _this.photoHeight = 0;
                }
                if (_this.photoAspectRatio === undefined) {
                    _this.photoAspectRatio = null;
                }
                if (_this.photoAspectRatioName === undefined) {
                    _this.photoAspectRatioName = null;
                }
                if (_this.photoQuality === undefined) {
                    _this.photoQuality = 0;
                }
                if (_this.videoWidth === undefined) {
                    _this.videoWidth = 0;
                }
                if (_this.videoAspectRatio === undefined) {
                    _this.videoAspectRatio = null;
                }
                if (_this.videoAspectRatioName === undefined) {
                    _this.videoAspectRatioName = null;
                }
                if (_this.videoQuality === undefined) {
                    _this.videoQuality = 0;
                }
                if (_this.videoSpeed === undefined) {
                    _this.videoSpeed = 0;
                }
                if (_this.videoFrameRate === undefined) {
                    _this.videoFrameRate = 0;
                }
                if (_this.cameraPath === undefined) {
                    _this.cameraPath = null;
                }
            }
            if (_this.observerCameraElevationAdjusted === undefined) {
                _this.observerCameraElevationAdjusted = false;
            }
            if (_this.groundColor === undefined) {
                _this.groundColor = 0;
            }
            if (_this.groundTexture === undefined) {
                _this.groundTexture = null;
            }
            if (_this.backgroundImageVisibleOnGround3D === undefined) {
                _this.backgroundImageVisibleOnGround3D = false;
            }
            if (_this.skyColor === undefined) {
                _this.skyColor = 0;
            }
            if (_this.skyTexture === undefined) {
                _this.skyTexture = null;
            }
            if (_this.lightColor === undefined) {
                _this.lightColor = 0;
            }
            if (_this.ceilingLightColor === undefined) {
                _this.ceilingLightColor = 0;
            }
            if (_this.wallsAlpha === undefined) {
                _this.wallsAlpha = 0;
            }
            if (_this.drawingMode === undefined) {
                _this.drawingMode = null;
            }
            if (_this.subpartSizeUnderLight === undefined) {
                _this.subpartSizeUnderLight = 0;
            }
            if (_this.allLevelsVisible === undefined) {
                _this.allLevelsVisible = false;
            }
            if (_this.photoWidth === undefined) {
                _this.photoWidth = 0;
            }
            if (_this.photoHeight === undefined) {
                _this.photoHeight = 0;
            }
            if (_this.photoAspectRatio === undefined) {
                _this.photoAspectRatio = null;
            }
            if (_this.photoAspectRatioName === undefined) {
                _this.photoAspectRatioName = null;
            }
            if (_this.photoQuality === undefined) {
                _this.photoQuality = 0;
            }
            if (_this.videoWidth === undefined) {
                _this.videoWidth = 0;
            }
            if (_this.videoAspectRatio === undefined) {
                _this.videoAspectRatio = null;
            }
            if (_this.videoAspectRatioName === undefined) {
                _this.videoAspectRatioName = null;
            }
            if (_this.videoQuality === undefined) {
                _this.videoQuality = 0;
            }
            if (_this.videoSpeed === undefined) {
                _this.videoSpeed = 0;
            }
            if (_this.videoFrameRate === undefined) {
                _this.videoFrameRate = 0;
            }
            if (_this.cameraPath === undefined) {
                _this.cameraPath = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && groundColor === undefined && groundTexture === undefined && skyColor === undefined && skyTexture === undefined && lightColor === undefined && wallsAlpha === undefined) {
            var __args = arguments;
            {
                var __args_80 = arguments;
                var groundColor_3 = 11053224;
                var groundTexture_3 = null;
                var skyColor_3 = 13427964;
                var skyTexture_3 = null;
                var lightColor_3 = 13684944;
                var wallsAlpha_3 = 0;
                _this = _super.call(this, id) || this;
                if (_this.observerCameraElevationAdjusted === undefined) {
                    _this.observerCameraElevationAdjusted = false;
                }
                if (_this.groundColor === undefined) {
                    _this.groundColor = 0;
                }
                if (_this.groundTexture === undefined) {
                    _this.groundTexture = null;
                }
                if (_this.backgroundImageVisibleOnGround3D === undefined) {
                    _this.backgroundImageVisibleOnGround3D = false;
                }
                if (_this.skyColor === undefined) {
                    _this.skyColor = 0;
                }
                if (_this.skyTexture === undefined) {
                    _this.skyTexture = null;
                }
                if (_this.lightColor === undefined) {
                    _this.lightColor = 0;
                }
                if (_this.ceilingLightColor === undefined) {
                    _this.ceilingLightColor = 0;
                }
                if (_this.wallsAlpha === undefined) {
                    _this.wallsAlpha = 0;
                }
                if (_this.drawingMode === undefined) {
                    _this.drawingMode = null;
                }
                if (_this.subpartSizeUnderLight === undefined) {
                    _this.subpartSizeUnderLight = 0;
                }
                if (_this.allLevelsVisible === undefined) {
                    _this.allLevelsVisible = false;
                }
                if (_this.photoWidth === undefined) {
                    _this.photoWidth = 0;
                }
                if (_this.photoHeight === undefined) {
                    _this.photoHeight = 0;
                }
                if (_this.photoAspectRatio === undefined) {
                    _this.photoAspectRatio = null;
                }
                if (_this.photoAspectRatioName === undefined) {
                    _this.photoAspectRatioName = null;
                }
                if (_this.photoQuality === undefined) {
                    _this.photoQuality = 0;
                }
                if (_this.videoWidth === undefined) {
                    _this.videoWidth = 0;
                }
                if (_this.videoAspectRatio === undefined) {
                    _this.videoAspectRatio = null;
                }
                if (_this.videoAspectRatioName === undefined) {
                    _this.videoAspectRatioName = null;
                }
                if (_this.videoQuality === undefined) {
                    _this.videoQuality = 0;
                }
                if (_this.videoSpeed === undefined) {
                    _this.videoSpeed = 0;
                }
                if (_this.videoFrameRate === undefined) {
                    _this.videoFrameRate = 0;
                }
                if (_this.cameraPath === undefined) {
                    _this.cameraPath = null;
                }
                _this.observerCameraElevationAdjusted = true;
                _this.groundColor = groundColor_3;
                _this.groundTexture = groundTexture_3;
                _this.skyColor = skyColor_3;
                _this.skyTexture = skyTexture_3;
                _this.lightColor = lightColor_3;
                _this.ceilingLightColor = 13684944;
                _this.wallsAlpha = wallsAlpha_3;
                _this.drawingMode = HomeEnvironment.DrawingMode.FILL;
                _this.photoWidth = 400;
                _this.photoHeight = 300;
                _this.photoAspectRatio = AspectRatio.VIEW_3D_RATIO;
                _this.videoWidth = 320;
                _this.videoAspectRatio = AspectRatio.RATIO_4_3;
                _this.videoSpeed = 2400.0 / 3600;
                _this.videoFrameRate = 25;
                _this.cameraPath = /* emptyList */ [];
            }
            if (_this.observerCameraElevationAdjusted === undefined) {
                _this.observerCameraElevationAdjusted = false;
            }
            if (_this.groundColor === undefined) {
                _this.groundColor = 0;
            }
            if (_this.groundTexture === undefined) {
                _this.groundTexture = null;
            }
            if (_this.backgroundImageVisibleOnGround3D === undefined) {
                _this.backgroundImageVisibleOnGround3D = false;
            }
            if (_this.skyColor === undefined) {
                _this.skyColor = 0;
            }
            if (_this.skyTexture === undefined) {
                _this.skyTexture = null;
            }
            if (_this.lightColor === undefined) {
                _this.lightColor = 0;
            }
            if (_this.ceilingLightColor === undefined) {
                _this.ceilingLightColor = 0;
            }
            if (_this.wallsAlpha === undefined) {
                _this.wallsAlpha = 0;
            }
            if (_this.drawingMode === undefined) {
                _this.drawingMode = null;
            }
            if (_this.subpartSizeUnderLight === undefined) {
                _this.subpartSizeUnderLight = 0;
            }
            if (_this.allLevelsVisible === undefined) {
                _this.allLevelsVisible = false;
            }
            if (_this.photoWidth === undefined) {
                _this.photoWidth = 0;
            }
            if (_this.photoHeight === undefined) {
                _this.photoHeight = 0;
            }
            if (_this.photoAspectRatio === undefined) {
                _this.photoAspectRatio = null;
            }
            if (_this.photoAspectRatioName === undefined) {
                _this.photoAspectRatioName = null;
            }
            if (_this.photoQuality === undefined) {
                _this.photoQuality = 0;
            }
            if (_this.videoWidth === undefined) {
                _this.videoWidth = 0;
            }
            if (_this.videoAspectRatio === undefined) {
                _this.videoAspectRatio = null;
            }
            if (_this.videoAspectRatioName === undefined) {
                _this.videoAspectRatioName = null;
            }
            if (_this.videoQuality === undefined) {
                _this.videoQuality = 0;
            }
            if (_this.videoSpeed === undefined) {
                _this.videoSpeed = 0;
            }
            if (_this.videoFrameRate === undefined) {
                _this.videoFrameRate = 0;
            }
            if (_this.cameraPath === undefined) {
                _this.cameraPath = null;
            }
        }
        else if (id === undefined && groundColor === undefined && groundTexture === undefined && skyColor === undefined && skyTexture === undefined && lightColor === undefined && wallsAlpha === undefined) {
            var __args = arguments;
            {
                var __args_81 = arguments;
                var id_18 = HomeObject.createId("environment");
                {
                    var __args_82 = arguments;
                    var groundColor_4 = 11053224;
                    var groundTexture_4 = null;
                    var skyColor_4 = 13427964;
                    var skyTexture_4 = null;
                    var lightColor_4 = 13684944;
                    var wallsAlpha_4 = 0;
                    _this = _super.call(this, id_18) || this;
                    if (_this.observerCameraElevationAdjusted === undefined) {
                        _this.observerCameraElevationAdjusted = false;
                    }
                    if (_this.groundColor === undefined) {
                        _this.groundColor = 0;
                    }
                    if (_this.groundTexture === undefined) {
                        _this.groundTexture = null;
                    }
                    if (_this.backgroundImageVisibleOnGround3D === undefined) {
                        _this.backgroundImageVisibleOnGround3D = false;
                    }
                    if (_this.skyColor === undefined) {
                        _this.skyColor = 0;
                    }
                    if (_this.skyTexture === undefined) {
                        _this.skyTexture = null;
                    }
                    if (_this.lightColor === undefined) {
                        _this.lightColor = 0;
                    }
                    if (_this.ceilingLightColor === undefined) {
                        _this.ceilingLightColor = 0;
                    }
                    if (_this.wallsAlpha === undefined) {
                        _this.wallsAlpha = 0;
                    }
                    if (_this.drawingMode === undefined) {
                        _this.drawingMode = null;
                    }
                    if (_this.subpartSizeUnderLight === undefined) {
                        _this.subpartSizeUnderLight = 0;
                    }
                    if (_this.allLevelsVisible === undefined) {
                        _this.allLevelsVisible = false;
                    }
                    if (_this.photoWidth === undefined) {
                        _this.photoWidth = 0;
                    }
                    if (_this.photoHeight === undefined) {
                        _this.photoHeight = 0;
                    }
                    if (_this.photoAspectRatio === undefined) {
                        _this.photoAspectRatio = null;
                    }
                    if (_this.photoAspectRatioName === undefined) {
                        _this.photoAspectRatioName = null;
                    }
                    if (_this.photoQuality === undefined) {
                        _this.photoQuality = 0;
                    }
                    if (_this.videoWidth === undefined) {
                        _this.videoWidth = 0;
                    }
                    if (_this.videoAspectRatio === undefined) {
                        _this.videoAspectRatio = null;
                    }
                    if (_this.videoAspectRatioName === undefined) {
                        _this.videoAspectRatioName = null;
                    }
                    if (_this.videoQuality === undefined) {
                        _this.videoQuality = 0;
                    }
                    if (_this.videoSpeed === undefined) {
                        _this.videoSpeed = 0;
                    }
                    if (_this.videoFrameRate === undefined) {
                        _this.videoFrameRate = 0;
                    }
                    if (_this.cameraPath === undefined) {
                        _this.cameraPath = null;
                    }
                    _this.observerCameraElevationAdjusted = true;
                    _this.groundColor = groundColor_4;
                    _this.groundTexture = groundTexture_4;
                    _this.skyColor = skyColor_4;
                    _this.skyTexture = skyTexture_4;
                    _this.lightColor = lightColor_4;
                    _this.ceilingLightColor = 13684944;
                    _this.wallsAlpha = wallsAlpha_4;
                    _this.drawingMode = HomeEnvironment.DrawingMode.FILL;
                    _this.photoWidth = 400;
                    _this.photoHeight = 300;
                    _this.photoAspectRatio = AspectRatio.VIEW_3D_RATIO;
                    _this.videoWidth = 320;
                    _this.videoAspectRatio = AspectRatio.RATIO_4_3;
                    _this.videoSpeed = 2400.0 / 3600;
                    _this.videoFrameRate = 25;
                    _this.cameraPath = /* emptyList */ [];
                }
                if (_this.observerCameraElevationAdjusted === undefined) {
                    _this.observerCameraElevationAdjusted = false;
                }
                if (_this.groundColor === undefined) {
                    _this.groundColor = 0;
                }
                if (_this.groundTexture === undefined) {
                    _this.groundTexture = null;
                }
                if (_this.backgroundImageVisibleOnGround3D === undefined) {
                    _this.backgroundImageVisibleOnGround3D = false;
                }
                if (_this.skyColor === undefined) {
                    _this.skyColor = 0;
                }
                if (_this.skyTexture === undefined) {
                    _this.skyTexture = null;
                }
                if (_this.lightColor === undefined) {
                    _this.lightColor = 0;
                }
                if (_this.ceilingLightColor === undefined) {
                    _this.ceilingLightColor = 0;
                }
                if (_this.wallsAlpha === undefined) {
                    _this.wallsAlpha = 0;
                }
                if (_this.drawingMode === undefined) {
                    _this.drawingMode = null;
                }
                if (_this.subpartSizeUnderLight === undefined) {
                    _this.subpartSizeUnderLight = 0;
                }
                if (_this.allLevelsVisible === undefined) {
                    _this.allLevelsVisible = false;
                }
                if (_this.photoWidth === undefined) {
                    _this.photoWidth = 0;
                }
                if (_this.photoHeight === undefined) {
                    _this.photoHeight = 0;
                }
                if (_this.photoAspectRatio === undefined) {
                    _this.photoAspectRatio = null;
                }
                if (_this.photoAspectRatioName === undefined) {
                    _this.photoAspectRatioName = null;
                }
                if (_this.photoQuality === undefined) {
                    _this.photoQuality = 0;
                }
                if (_this.videoWidth === undefined) {
                    _this.videoWidth = 0;
                }
                if (_this.videoAspectRatio === undefined) {
                    _this.videoAspectRatio = null;
                }
                if (_this.videoAspectRatioName === undefined) {
                    _this.videoAspectRatioName = null;
                }
                if (_this.videoQuality === undefined) {
                    _this.videoQuality = 0;
                }
                if (_this.videoSpeed === undefined) {
                    _this.videoSpeed = 0;
                }
                if (_this.videoFrameRate === undefined) {
                    _this.videoFrameRate = 0;
                }
                if (_this.cameraPath === undefined) {
                    _this.cameraPath = null;
                }
            }
            if (_this.observerCameraElevationAdjusted === undefined) {
                _this.observerCameraElevationAdjusted = false;
            }
            if (_this.groundColor === undefined) {
                _this.groundColor = 0;
            }
            if (_this.groundTexture === undefined) {
                _this.groundTexture = null;
            }
            if (_this.backgroundImageVisibleOnGround3D === undefined) {
                _this.backgroundImageVisibleOnGround3D = false;
            }
            if (_this.skyColor === undefined) {
                _this.skyColor = 0;
            }
            if (_this.skyTexture === undefined) {
                _this.skyTexture = null;
            }
            if (_this.lightColor === undefined) {
                _this.lightColor = 0;
            }
            if (_this.ceilingLightColor === undefined) {
                _this.ceilingLightColor = 0;
            }
            if (_this.wallsAlpha === undefined) {
                _this.wallsAlpha = 0;
            }
            if (_this.drawingMode === undefined) {
                _this.drawingMode = null;
            }
            if (_this.subpartSizeUnderLight === undefined) {
                _this.subpartSizeUnderLight = 0;
            }
            if (_this.allLevelsVisible === undefined) {
                _this.allLevelsVisible = false;
            }
            if (_this.photoWidth === undefined) {
                _this.photoWidth = 0;
            }
            if (_this.photoHeight === undefined) {
                _this.photoHeight = 0;
            }
            if (_this.photoAspectRatio === undefined) {
                _this.photoAspectRatio = null;
            }
            if (_this.photoAspectRatioName === undefined) {
                _this.photoAspectRatioName = null;
            }
            if (_this.photoQuality === undefined) {
                _this.photoQuality = 0;
            }
            if (_this.videoWidth === undefined) {
                _this.videoWidth = 0;
            }
            if (_this.videoAspectRatio === undefined) {
                _this.videoAspectRatio = null;
            }
            if (_this.videoAspectRatioName === undefined) {
                _this.videoAspectRatioName = null;
            }
            if (_this.videoQuality === undefined) {
                _this.videoQuality = 0;
            }
            if (_this.videoSpeed === undefined) {
                _this.videoSpeed = 0;
            }
            if (_this.videoFrameRate === undefined) {
                _this.videoFrameRate = 0;
            }
            if (_this.cameraPath === undefined) {
                _this.cameraPath = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns <code>true</code> if the observer elevation should be adjusted according
     * to the elevation of the selected level.
     * @return {boolean}
     */
    HomeEnvironment.prototype.isObserverCameraElevationAdjusted = function () {
        return this.observerCameraElevationAdjusted;
    };
    /**
     * Sets whether the observer elevation should be adjusted according
     * to the elevation of the selected level and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} observerCameraElevationAdjusted
     */
    HomeEnvironment.prototype.setObserverCameraElevationAdjusted = function (observerCameraElevationAdjusted) {
        if (this.observerCameraElevationAdjusted !== observerCameraElevationAdjusted) {
            this.observerCameraElevationAdjusted = observerCameraElevationAdjusted;
            this.firePropertyChange(/* name */ "OBSERVER_CAMERA_ELEVATION_ADJUSTED", !observerCameraElevationAdjusted, observerCameraElevationAdjusted);
        }
    };
    /**
     * Returns the ground color of this environment.
     * @return {number}
     */
    HomeEnvironment.prototype.getGroundColor = function () {
        return this.groundColor;
    };
    /**
     * Sets the ground color of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {number} groundColor
     */
    HomeEnvironment.prototype.setGroundColor = function (groundColor) {
        if (groundColor !== this.groundColor) {
            var oldGroundColor = this.groundColor;
            this.groundColor = groundColor;
            this.firePropertyChange(/* name */ "GROUND_COLOR", oldGroundColor, groundColor);
        }
    };
    /**
     * Returns the ground texture of this environment.
     * @return {HomeTexture}
     */
    HomeEnvironment.prototype.getGroundTexture = function () {
        return this.groundTexture;
    };
    /**
     * Sets the ground texture of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {HomeTexture} groundTexture
     */
    HomeEnvironment.prototype.setGroundTexture = function (groundTexture) {
        if (groundTexture !== this.groundTexture) {
            var oldGroundTexture = this.groundTexture;
            this.groundTexture = groundTexture;
            this.firePropertyChange(/* name */ "GROUND_TEXTURE", oldGroundTexture, groundTexture);
        }
    };
    /**
     * Returns <code>true</code> if the background image should be displayed on the ground in 3D.
     * @return {boolean}
     */
    HomeEnvironment.prototype.isBackgroundImageVisibleOnGround3D = function () {
        return this.backgroundImageVisibleOnGround3D;
    };
    /**
     * Sets whether the background image should be displayed on the ground in 3D and
     * fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} backgroundImageVisibleOnGround3D
     */
    HomeEnvironment.prototype.setBackgroundImageVisibleOnGround3D = function (backgroundImageVisibleOnGround3D) {
        if (this.backgroundImageVisibleOnGround3D !== backgroundImageVisibleOnGround3D) {
            this.backgroundImageVisibleOnGround3D = backgroundImageVisibleOnGround3D;
            this.firePropertyChange(/* name */ "BACKGROUND_IMAGE_VISIBLE_ON_GROUND_3D", !backgroundImageVisibleOnGround3D, backgroundImageVisibleOnGround3D);
        }
    };
    /**
     * Returns the sky color of this environment.
     * @return {number}
     */
    HomeEnvironment.prototype.getSkyColor = function () {
        return this.skyColor;
    };
    /**
     * Sets the sky color of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {number} skyColor
     */
    HomeEnvironment.prototype.setSkyColor = function (skyColor) {
        if (skyColor !== this.skyColor) {
            var oldSkyColor = this.skyColor;
            this.skyColor = skyColor;
            this.firePropertyChange(/* name */ "SKY_COLOR", oldSkyColor, skyColor);
        }
    };
    /**
     * Returns the sky texture of this environment.
     * @return {HomeTexture}
     */
    HomeEnvironment.prototype.getSkyTexture = function () {
        return this.skyTexture;
    };
    /**
     * Sets the sky texture of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {HomeTexture} skyTexture
     */
    HomeEnvironment.prototype.setSkyTexture = function (skyTexture) {
        if (skyTexture !== this.skyTexture) {
            var oldSkyTexture = this.skyTexture;
            this.skyTexture = skyTexture;
            this.firePropertyChange(/* name */ "SKY_TEXTURE", oldSkyTexture, skyTexture);
        }
    };
    /**
     * Returns the light color of this environment.
     * @return {number}
     */
    HomeEnvironment.prototype.getLightColor = function () {
        return this.lightColor;
    };
    /**
     * Sets the color that lights this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {number} lightColor
     */
    HomeEnvironment.prototype.setLightColor = function (lightColor) {
        if (lightColor !== this.lightColor) {
            var oldLightColor = this.lightColor;
            this.lightColor = lightColor;
            this.firePropertyChange(/* name */ "LIGHT_COLOR", oldLightColor, lightColor);
        }
    };
    /**
     * Returns the color of ceiling lights.
     * @return {number}
     */
    HomeEnvironment.prototype.getCeillingLightColor = function () {
        return this.ceilingLightColor;
    };
    /**
     * Sets the color of ceiling lights and fires a <code>PropertyChangeEvent</code>.
     * @param {number} ceilingLightColor
     */
    HomeEnvironment.prototype.setCeillingLightColor = function (ceilingLightColor) {
        if (ceilingLightColor !== this.ceilingLightColor) {
            var oldCeilingLightColor = this.ceilingLightColor;
            this.ceilingLightColor = ceilingLightColor;
            this.firePropertyChange(/* name */ "CEILING_LIGHT_COLOR", oldCeilingLightColor, ceilingLightColor);
        }
    };
    /**
     * Returns the walls transparency alpha factor of this environment.
     * @return {number}
     */
    HomeEnvironment.prototype.getWallsAlpha = function () {
        return this.wallsAlpha;
    };
    /**
     * Sets the walls transparency alpha of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {number} wallsAlpha a value between 0 and 1, 0 meaning opaque and 1 invisible.
     */
    HomeEnvironment.prototype.setWallsAlpha = function (wallsAlpha) {
        if (wallsAlpha !== this.wallsAlpha) {
            var oldWallsAlpha = this.wallsAlpha;
            this.wallsAlpha = wallsAlpha;
            this.firePropertyChange(/* name */ "WALLS_ALPHA", oldWallsAlpha, wallsAlpha);
        }
    };
    /**
     * Returns the drawing mode of this environment.
     * @return {HomeEnvironment.DrawingMode}
     */
    HomeEnvironment.prototype.getDrawingMode = function () {
        return this.drawingMode;
    };
    /**
     * Sets the drawing mode of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {HomeEnvironment.DrawingMode} drawingMode
     */
    HomeEnvironment.prototype.setDrawingMode = function (drawingMode) {
        if (drawingMode !== this.drawingMode) {
            var oldDrawingMode = this.drawingMode;
            this.drawingMode = drawingMode;
            this.firePropertyChange(/* name */ "DRAWING_MODE", oldDrawingMode, drawingMode);
        }
    };
    /**
     * Returns the size of subparts under home lights in this environment.
     * @return {number} a size in centimeters or 0 if home lights don't illuminate home.
     */
    HomeEnvironment.prototype.getSubpartSizeUnderLight = function () {
        return this.subpartSizeUnderLight;
    };
    /**
     * Sets the size of subparts under home lights of this environment and fires a <code>PropertyChangeEvent</code>.
     * @param {number} subpartSizeUnderLight
     */
    HomeEnvironment.prototype.setSubpartSizeUnderLight = function (subpartSizeUnderLight) {
        if (subpartSizeUnderLight !== this.subpartSizeUnderLight) {
            var oldSubpartWidthUnderLight = this.subpartSizeUnderLight;
            this.subpartSizeUnderLight = subpartSizeUnderLight;
            this.firePropertyChange(/* name */ "SUBPART_SIZE_UNDER_LIGHT", oldSubpartWidthUnderLight, subpartSizeUnderLight);
        }
    };
    /**
     * Returns whether all levels should be visible or not.
     * @return {boolean}
     */
    HomeEnvironment.prototype.isAllLevelsVisible = function () {
        return this.allLevelsVisible;
    };
    /**
     * Sets whether all levels should be visible or not and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} allLevelsVisible
     */
    HomeEnvironment.prototype.setAllLevelsVisible = function (allLevelsVisible) {
        if (allLevelsVisible !== this.allLevelsVisible) {
            this.allLevelsVisible = allLevelsVisible;
            this.firePropertyChange(/* name */ "ALL_LEVELS_VISIBLE", !allLevelsVisible, allLevelsVisible);
        }
    };
    /**
     * Returns the preferred photo width.
     * @return {number}
     */
    HomeEnvironment.prototype.getPhotoWidth = function () {
        return this.photoWidth;
    };
    /**
     * Sets the preferred photo width, and notifies
     * listeners of this change.
     * @param {number} photoWidth
     */
    HomeEnvironment.prototype.setPhotoWidth = function (photoWidth) {
        if (this.photoWidth !== photoWidth) {
            var oldPhotoWidth = this.photoWidth;
            this.photoWidth = photoWidth;
            this.firePropertyChange(/* name */ "PHOTO_WIDTH", oldPhotoWidth, photoWidth);
        }
    };
    /**
     * Returns the preferred photo height.
     * @return {number}
     */
    HomeEnvironment.prototype.getPhotoHeight = function () {
        return this.photoHeight;
    };
    /**
     * Sets the preferred photo height, and notifies
     * listeners of this change.
     * @param {number} photoHeight
     */
    HomeEnvironment.prototype.setPhotoHeight = function (photoHeight) {
        if (this.photoHeight !== photoHeight) {
            var oldPhotoHeight = this.photoHeight;
            this.photoHeight = photoHeight;
            this.firePropertyChange(/* name */ "PHOTO_HEIGHT", oldPhotoHeight, photoHeight);
        }
    };
    /**
     * Returns the preferred photo aspect ratio.
     * @return {AspectRatio}
     */
    HomeEnvironment.prototype.getPhotoAspectRatio = function () {
        return this.photoAspectRatio;
    };
    /**
     * Sets the preferred photo aspect ratio, and notifies
     * listeners of this change.
     * @param {AspectRatio} photoAspectRatio
     */
    HomeEnvironment.prototype.setPhotoAspectRatio = function (photoAspectRatio) {
        if (this.photoAspectRatio !== photoAspectRatio) {
            var oldPhotoAspectRatio = this.photoAspectRatio;
            this.photoAspectRatio = photoAspectRatio;
            this.photoAspectRatioName = /* Enum.name */ AspectRatio[this.photoAspectRatio];
            this.firePropertyChange(/* name */ "PHOTO_ASPECT_RATIO", oldPhotoAspectRatio, photoAspectRatio);
        }
    };
    /**
     * Returns the preferred photo quality.
     * @return {number}
     */
    HomeEnvironment.prototype.getPhotoQuality = function () {
        return this.photoQuality;
    };
    /**
     * Sets preferred photo quality, and notifies
     * listeners of this change.
     * @param {number} photoQuality
     */
    HomeEnvironment.prototype.setPhotoQuality = function (photoQuality) {
        if (this.photoQuality !== photoQuality) {
            var oldPhotoQuality = this.photoQuality;
            this.photoQuality = photoQuality;
            this.firePropertyChange(/* name */ "PHOTO_QUALITY", oldPhotoQuality, photoQuality);
        }
    };
    /**
     * Returns the preferred video width.
     * @return {number}
     */
    HomeEnvironment.prototype.getVideoWidth = function () {
        return this.videoWidth;
    };
    /**
     * Sets the preferred video width, and notifies
     * listeners of this change.
     * @param {number} videoWidth
     */
    HomeEnvironment.prototype.setVideoWidth = function (videoWidth) {
        if (this.videoWidth !== videoWidth) {
            var oldVideoWidth = this.videoWidth;
            this.videoWidth = videoWidth;
            this.firePropertyChange(/* name */ "VIDEO_WIDTH", oldVideoWidth, videoWidth);
        }
    };
    /**
     * Returns the preferred video height.
     * @return {number}
     */
    HomeEnvironment.prototype.getVideoHeight = function () {
        return Math.round(this.getVideoWidth() / { FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[this.getVideoAspectRatio()]);
    };
    /**
     * Returns the preferred video aspect ratio.
     * @return {AspectRatio}
     */
    HomeEnvironment.prototype.getVideoAspectRatio = function () {
        return this.videoAspectRatio;
    };
    /**
     * Sets the preferred video aspect ratio, and notifies
     * listeners of this change.
     * @param {AspectRatio} videoAspectRatio
     */
    HomeEnvironment.prototype.setVideoAspectRatio = function (videoAspectRatio) {
        if (this.videoAspectRatio !== videoAspectRatio) {
            if ({ FREE_RATIO: null, VIEW_3D_RATIO: null, RATIO_4_3: 4 / 3, RATIO_3_2: 1.5, RATIO_16_9: 16 / 9, RATIO_2_1: 2 / 1, SQUARE_RATIO: 1 }[videoAspectRatio] == null) {
                throw new IllegalArgumentException("Unsupported aspect ratio " + videoAspectRatio);
            }
            var oldVideoAspectRatio = this.videoAspectRatio;
            this.videoAspectRatio = videoAspectRatio;
            this.videoAspectRatioName = /* Enum.name */ AspectRatio[this.videoAspectRatio];
            this.firePropertyChange(/* name */ "VIDEO_ASPECT_RATIO", oldVideoAspectRatio, videoAspectRatio);
        }
    };
    /**
     * Returns preferred video quality.
     * @return {number}
     */
    HomeEnvironment.prototype.getVideoQuality = function () {
        return this.videoQuality;
    };
    /**
     * Sets the preferred video quality, and notifies
     * listeners of this change.
     * @param {number} videoQuality
     */
    HomeEnvironment.prototype.setVideoQuality = function (videoQuality) {
        if (this.videoQuality !== videoQuality) {
            var oldVideoQuality = this.videoQuality;
            this.videoQuality = videoQuality;
            this.firePropertyChange(/* name */ "VIDEO_QUALITY", oldVideoQuality, videoQuality);
        }
    };
    /**
     * Returns the preferred speed of movements in videos in m/s.
     * @return {number}
     */
    HomeEnvironment.prototype.getVideoSpeed = function () {
        return this.videoSpeed;
    };
    /**
     * Sets the preferred speed of movements in videos in m/s.
     * @param {number} videoSpeed
     */
    HomeEnvironment.prototype.setVideoSpeed = function (videoSpeed) {
        if (this.videoSpeed !== videoSpeed) {
            var oldVideoSpeed = this.videoSpeed;
            this.videoSpeed = videoSpeed;
            this.firePropertyChange(/* name */ "VIDEO_SPEED", oldVideoSpeed, videoSpeed);
        }
    };
    /**
     * Returns the preferred video frame rate.
     * @return {number}
     */
    HomeEnvironment.prototype.getVideoFrameRate = function () {
        return this.videoFrameRate;
    };
    /**
     * Sets the preferred video frame rate, and notifies
     * listeners of this change.
     * @param {number} videoFrameRate
     */
    HomeEnvironment.prototype.setVideoFrameRate = function (videoFrameRate) {
        if (this.videoFrameRate !== videoFrameRate) {
            var oldVideoFrameRate = this.videoFrameRate;
            this.videoFrameRate = videoFrameRate;
            this.firePropertyChange(/* name */ "VIDEO_FRAME_RATE", oldVideoFrameRate, videoFrameRate);
        }
    };
    /**
     * Returns the preferred video camera path.
     * @return {Camera[]}
     */
    HomeEnvironment.prototype.getVideoCameraPath = function () {
        return /* unmodifiableList */ this.cameraPath.slice(0);
    };
    /**
     * Sets the preferred video camera path, and notifies
     * listeners of this change.
     * @param {Camera[]} cameraPath
     */
    HomeEnvironment.prototype.setVideoCameraPath = function (cameraPath) {
        if (this.cameraPath !== cameraPath) {
            var oldCameraPath = this.cameraPath;
            if (cameraPath != null) {
                this.cameraPath = (cameraPath.slice(0));
            }
            else {
                this.cameraPath = /* emptyList */ [];
            }
            this.firePropertyChange(/* name */ "VIDEO_CAMERA_PATH", oldCameraPath, cameraPath);
        }
    };
    /**
     * Returns a clone of this environment.
     * @return {HomeEnvironment}
     */
    HomeEnvironment.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_4 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_4[p] = o[p];
            }
            return clone_4;
        } })(this);
        clone.cameraPath = ([]);
        for (var index = 0; index < this.cameraPath.length; index++) {
            var camera = this.cameraPath[index];
            {
                /* add */ (clone.cameraPath.push(/* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                    return o.clone();
                }
                else {
                    var clone_5 = Object.create(o);
                    for (var p in o) {
                        if (o.hasOwnProperty(p))
                            clone_5[p] = o[p];
                    }
                    return clone_5;
                } })(camera)) > 0);
            }
        }
        return clone;
    };
    return HomeEnvironment;
}(HomeObject));
HomeEnvironment["__class"] = "com.eteks.sweethome3d.model.HomeEnvironment";
(function (HomeEnvironment) {
    /**
     * The various modes used to draw home in 3D.
     * @enum
     * @property {HomeEnvironment.DrawingMode} FILL
     * @property {HomeEnvironment.DrawingMode} OUTLINE
     * @property {HomeEnvironment.DrawingMode} FILL_AND_OUTLINE
     * @class
     */
    var DrawingMode;
    (function (DrawingMode) {
        DrawingMode[DrawingMode["FILL"] = 0] = "FILL";
        DrawingMode[DrawingMode["OUTLINE"] = 1] = "OUTLINE";
        DrawingMode[DrawingMode["FILL_AND_OUTLINE"] = 2] = "FILL_AND_OUTLINE";
    })(DrawingMode = HomeEnvironment.DrawingMode || (HomeEnvironment.DrawingMode = {}));
})(HomeEnvironment || (HomeEnvironment = {}));
HomeEnvironment['__transients'] = ['photoAspectRatio', 'videoAspectRatio', 'propertyChangeSupport'];
/**
 * Creates a dimension line from (<code>xStart</code>,<code>yStart</code>)
 * to (<code>xEnd</code>, <code>yEnd</code>), with a given offset.
 * @param {string} id
 * @param {number} xStart
 * @param {number} yStart
 * @param {number} xEnd
 * @param {number} yEnd
 * @param {number} offset
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var DimensionLine = /** @class */ (function (_super) {
    __extends(DimensionLine, _super);
    function DimensionLine(id, xStart, yStart, xEnd, yEnd, offset) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && ((typeof offset === 'number') || offset === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.offset === undefined) {
                _this.offset = 0;
            }
            if (_this.lengthStyle === undefined) {
                _this.lengthStyle = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            _this.xStart = xStart;
            _this.yStart = yStart;
            _this.xEnd = xEnd;
            _this.yEnd = yEnd;
            _this.offset = offset;
        }
        else if (((typeof id === 'number') || id === null) && ((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof xEnd === 'number') || xEnd === null) && ((typeof yEnd === 'number') || yEnd === null) && offset === undefined) {
            var __args = arguments;
            var xStart_4 = __args[0];
            var yStart_4 = __args[1];
            var xEnd_4 = __args[2];
            var yEnd_4 = __args[3];
            var offset_1 = __args[4];
            {
                var __args_83 = arguments;
                var id_19 = HomeObject.createId("dimensionLine");
                _this = _super.call(this, id_19) || this;
                if (_this.xStart === undefined) {
                    _this.xStart = 0;
                }
                if (_this.yStart === undefined) {
                    _this.yStart = 0;
                }
                if (_this.xEnd === undefined) {
                    _this.xEnd = 0;
                }
                if (_this.yEnd === undefined) {
                    _this.yEnd = 0;
                }
                if (_this.offset === undefined) {
                    _this.offset = 0;
                }
                if (_this.lengthStyle === undefined) {
                    _this.lengthStyle = null;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                _this.xStart = xStart_4;
                _this.yStart = yStart_4;
                _this.xEnd = xEnd_4;
                _this.yEnd = yEnd_4;
                _this.offset = offset_1;
            }
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xEnd === undefined) {
                _this.xEnd = 0;
            }
            if (_this.yEnd === undefined) {
                _this.yEnd = 0;
            }
            if (_this.offset === undefined) {
                _this.offset = 0;
            }
            if (_this.lengthStyle === undefined) {
                _this.lengthStyle = null;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the start point abscissa of this dimension line.
     * @return {number}
     */
    DimensionLine.prototype.getXStart = function () {
        return this.xStart;
    };
    /**
     * Sets the start point abscissa of this dimension line. Once this dimension line
     * is updated, listeners added to this dimension line will receive a change notification.
     * @param {number} xStart
     */
    DimensionLine.prototype.setXStart = function (xStart) {
        if (xStart !== this.xStart) {
            var oldXStart = this.xStart;
            this.xStart = xStart;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "X_START", oldXStart, xStart);
        }
    };
    /**
     * Returns the start point ordinate of this dimension line.
     * @return {number}
     */
    DimensionLine.prototype.getYStart = function () {
        return this.yStart;
    };
    /**
     * Sets the start point ordinate of this dimension line. Once this dimension line
     * is updated, listeners added to this dimension line will receive a change notification.
     * @param {number} yStart
     */
    DimensionLine.prototype.setYStart = function (yStart) {
        if (yStart !== this.yStart) {
            var oldYStart = this.yStart;
            this.yStart = yStart;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "Y_START", oldYStart, yStart);
        }
    };
    /**
     * Returns the end point abscissa of this dimension line.
     * @return {number}
     */
    DimensionLine.prototype.getXEnd = function () {
        return this.xEnd;
    };
    /**
     * Sets the end point abscissa of this dimension line. Once this dimension line
     * is updated, listeners added to this dimension line will receive a change notification.
     * @param {number} xEnd
     */
    DimensionLine.prototype.setXEnd = function (xEnd) {
        if (xEnd !== this.xEnd) {
            var oldXEnd = this.xEnd;
            this.xEnd = xEnd;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "X_END", oldXEnd, xEnd);
        }
    };
    /**
     * Returns the end point ordinate of this dimension line.
     * @return {number}
     */
    DimensionLine.prototype.getYEnd = function () {
        return this.yEnd;
    };
    /**
     * Sets the end point ordinate of this dimension line. Once this dimension line
     * is updated, listeners added to this dimension line will receive a change notification.
     * @param {number} yEnd
     */
    DimensionLine.prototype.setYEnd = function (yEnd) {
        if (yEnd !== this.yEnd) {
            var oldYEnd = this.yEnd;
            this.yEnd = yEnd;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "Y_END", oldYEnd, yEnd);
        }
    };
    /**
     * Returns the offset of this dimension line.
     * @return {number}
     */
    DimensionLine.prototype.getOffset = function () {
        return this.offset;
    };
    /**
     * Sets the offset of this dimension line.  Once this dimension line
     * is updated, listeners added to this dimension line will receive a change notification.
     * @param {number} offset
     */
    DimensionLine.prototype.setOffset = function (offset) {
        if (offset !== this.offset) {
            var oldOffset = this.offset;
            this.offset = offset;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "OFFSET", oldOffset, offset);
        }
    };
    /**
     * Returns the length of this dimension line.
     * @return {number}
     */
    DimensionLine.prototype.getLength = function () {
        return java.awt.geom.Point2D.distance(this.getXStart(), this.getYStart(), this.getXEnd(), this.getYEnd());
    };
    /**
     * Returns the text style used to display dimension line length.
     * @return {TextStyle}
     */
    DimensionLine.prototype.getLengthStyle = function () {
        return this.lengthStyle;
    };
    /**
     * Sets the text style used to display dimension line length.
     * Once this dimension line is updated, listeners added to it will receive a change notification.
     * @param {TextStyle} lengthStyle
     */
    DimensionLine.prototype.setLengthStyle = function (lengthStyle) {
        if (lengthStyle !== this.lengthStyle) {
            var oldLengthStyle = this.lengthStyle;
            this.lengthStyle = lengthStyle;
            this.firePropertyChange(/* name */ "LENGTH_STYLE", oldLengthStyle, lengthStyle);
        }
    };
    /**
     * Returns the level which this dimension line belongs to.
     * @return {Level}
     */
    DimensionLine.prototype.getLevel = function () {
        return this.level;
    };
    /**
     * Sets the level of this dimension line. Once this dimension line is updated,
     * listeners added to this dimension line will receive a change notification.
     * @param {Level} level
     */
    DimensionLine.prototype.setLevel = function (level) {
        if (level !== this.level) {
            var oldLevel = this.level;
            this.level = level;
            this.firePropertyChange(/* name */ "LEVEL", oldLevel, level);
        }
    };
    /**
     * Returns <code>true</code> if this dimension line is at the given <code>level</code>
     * or at a level with the same elevation and a smaller elevation index.
     * @param {Level} level
     * @return {boolean}
     */
    DimensionLine.prototype.isAtLevel = function (level) {
        return this.level === level || this.level != null && level != null && this.level.getElevation() === level.getElevation() && this.level.getElevationIndex() < level.getElevationIndex();
    };
    /**
     * Returns the points of the rectangle surrounding
     * this dimension line and its extension lines.
     * @return {float[][]} an array of the 4 (x,y) coordinates of the rectangle.
     */
    DimensionLine.prototype.getPoints = function () {
        var angle = Math.atan2(this.yEnd - this.yStart, this.xEnd - this.xStart);
        var dx = -Math.sin(angle) * this.offset;
        var dy = Math.cos(angle) * this.offset;
        return [[this.xStart, this.yStart], [this.xStart + dx, this.yStart + dy], [this.xEnd + dx, this.yEnd + dy], [this.xEnd, this.yEnd]];
    };
    /**
     * Returns <code>true</code> if this dimension line intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    DimensionLine.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return this.getShape().intersects(rectangle);
    };
    /**
     * Returns <code>true</code> if this dimension line contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    DimensionLine.prototype.containsPoint = function (x, y, margin) {
        return this.containsShapeAtWithMargin(this.getShape(), x, y, margin);
    };
    /**
     * Returns <code>true</code> if the middle point of this dimension line
     * is the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    DimensionLine.prototype.isMiddlePointAt = function (x, y, margin) {
        var angle = Math.atan2(this.yEnd - this.yStart, this.xEnd - this.xStart);
        var dx = -Math.sin(angle) * this.offset;
        var dy = Math.cos(angle) * this.offset;
        var xMiddle = (this.xStart + this.xEnd) / 2 + dx;
        var yMiddle = (this.yStart + this.yEnd) / 2 + dy;
        return Math.abs(x - xMiddle) <= margin && Math.abs(y - yMiddle) <= margin;
    };
    /**
     * Returns <code>true</code> if the extension line at the start of this dimension line
     * contains the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code> around the extension line.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    DimensionLine.prototype.containsStartExtensionLinetAt = function (x, y, margin) {
        var angle = Math.atan2(this.yEnd - this.yStart, this.xEnd - this.xStart);
        var startExtensionLine = new java.awt.geom.Line2D.Float(this.xStart, this.yStart, this.xStart + -Math.sin(angle) * this.offset, this.yStart + Math.cos(angle) * this.offset);
        return this.containsShapeAtWithMargin(startExtensionLine, x, y, margin);
    };
    /**
     * Returns <code>true</code> if the extension line at the end of this dimension line
     * contains the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code> around the extension line.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    DimensionLine.prototype.containsEndExtensionLineAt = function (x, y, margin) {
        var angle = Math.atan2(this.yEnd - this.yStart, this.xEnd - this.xStart);
        var endExtensionLine = new java.awt.geom.Line2D.Float(this.xEnd, this.yEnd, this.xEnd + -Math.sin(angle) * this.offset, this.yEnd + Math.cos(angle) * this.offset);
        return this.containsShapeAtWithMargin(endExtensionLine, x, y, margin);
    };
    /**
     * Returns <code>true</code> if <code>shape</code> contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {Object} shape
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     * @private
     */
    DimensionLine.prototype.containsShapeAtWithMargin = function (shape, x, y, margin) {
        if (margin === 0) {
            return shape.contains(x, y);
        }
        else {
            return shape.intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Returns the shape matching this dimension line.
     * @return {Object}
     * @private
     */
    DimensionLine.prototype.getShape = function () {
        if (this.shapeCache == null) {
            var angle = Math.atan2(this.yEnd - this.yStart, this.xEnd - this.xStart);
            var dx = -Math.sin(angle) * this.offset;
            var dy = Math.cos(angle) * this.offset;
            var dimensionLineShape = new java.awt.geom.GeneralPath();
            dimensionLineShape.append(new java.awt.geom.Line2D.Float(this.xStart + dx, this.yStart + dy, this.xEnd + dx, this.yEnd + dy), false);
            dimensionLineShape.append(new java.awt.geom.Line2D.Float(this.xStart, this.yStart, this.xStart + dx, this.yStart + dy), false);
            dimensionLineShape.append(new java.awt.geom.Line2D.Float(this.xEnd, this.yEnd, this.xEnd + dx, this.yEnd + dy), false);
            this.shapeCache = dimensionLineShape;
        }
        return this.shapeCache;
    };
    /**
     * Moves this dimension line of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    DimensionLine.prototype.move = function (dx, dy) {
        this.setXStart(this.getXStart() + dx);
        this.setYStart(this.getYStart() + dy);
        this.setXEnd(this.getXEnd() + dx);
        this.setYEnd(this.getYEnd() + dy);
    };
    /**
     * Returns a clone of this dimension line.
     * @return {DimensionLine}
     */
    DimensionLine.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_6 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_6[p] = o[p];
            }
            return clone_6;
        } })(this);
        clone.level = null;
        return clone;
    };
    return DimensionLine;
}(HomeObject));
DimensionLine["__class"] = "com.eteks.sweethome3d.model.DimensionLine";
DimensionLine["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.Elevatable"];
DimensionLine['__transients'] = ['shapeCache', 'propertyChangeSupport'];
/**
 * Creates a room from its name and the given coordinates.
 * @param {string} id
 * @param {float[][]} points
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var Room = /** @class */ (function (_super) {
    __extends(Room, _super);
    function Room(id, points) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((points != null && points instanceof Array && (points.length == 0 || points[0] == null || points[0] instanceof Array)) || points === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.nameXOffset === undefined) {
                _this.nameXOffset = 0;
            }
            if (_this.nameYOffset === undefined) {
                _this.nameYOffset = 0;
            }
            if (_this.nameStyle === undefined) {
                _this.nameStyle = null;
            }
            if (_this.nameAngle === undefined) {
                _this.nameAngle = 0;
            }
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.areaVisible === undefined) {
                _this.areaVisible = false;
            }
            if (_this.areaXOffset === undefined) {
                _this.areaXOffset = 0;
            }
            if (_this.areaYOffset === undefined) {
                _this.areaYOffset = 0;
            }
            if (_this.areaStyle === undefined) {
                _this.areaStyle = null;
            }
            if (_this.areaAngle === undefined) {
                _this.areaAngle = 0;
            }
            if (_this.floorVisible === undefined) {
                _this.floorVisible = false;
            }
            if (_this.floorColor === undefined) {
                _this.floorColor = null;
            }
            if (_this.floorTexture === undefined) {
                _this.floorTexture = null;
            }
            if (_this.floorShininess === undefined) {
                _this.floorShininess = 0;
            }
            if (_this.ceilingVisible === undefined) {
                _this.ceilingVisible = false;
            }
            if (_this.ceilingColor === undefined) {
                _this.ceilingColor = null;
            }
            if (_this.ceilingTexture === undefined) {
                _this.ceilingTexture = null;
            }
            if (_this.ceilingShininess === undefined) {
                _this.ceilingShininess = 0;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.areaCache === undefined) {
                _this.areaCache = null;
            }
            if (points.length <= 1) {
                throw new IllegalStateException("Room points must containt at least two points");
            }
            _this.points = _this.deepCopy(points);
            _this.areaVisible = true;
            _this.nameYOffset = -40.0;
            _this.floorVisible = true;
            _this.ceilingVisible = true;
        }
        else if (((id != null && id instanceof Array && (id.length == 0 || id[0] == null || id[0] instanceof Array)) || id === null) && points === undefined) {
            var __args = arguments;
            var points_4 = __args[0];
            {
                var __args_84 = arguments;
                var id_20 = HomeObject.createId("room");
                _this = _super.call(this, id_20) || this;
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.nameXOffset === undefined) {
                    _this.nameXOffset = 0;
                }
                if (_this.nameYOffset === undefined) {
                    _this.nameYOffset = 0;
                }
                if (_this.nameStyle === undefined) {
                    _this.nameStyle = null;
                }
                if (_this.nameAngle === undefined) {
                    _this.nameAngle = 0;
                }
                if (_this.points === undefined) {
                    _this.points = null;
                }
                if (_this.areaVisible === undefined) {
                    _this.areaVisible = false;
                }
                if (_this.areaXOffset === undefined) {
                    _this.areaXOffset = 0;
                }
                if (_this.areaYOffset === undefined) {
                    _this.areaYOffset = 0;
                }
                if (_this.areaStyle === undefined) {
                    _this.areaStyle = null;
                }
                if (_this.areaAngle === undefined) {
                    _this.areaAngle = 0;
                }
                if (_this.floorVisible === undefined) {
                    _this.floorVisible = false;
                }
                if (_this.floorColor === undefined) {
                    _this.floorColor = null;
                }
                if (_this.floorTexture === undefined) {
                    _this.floorTexture = null;
                }
                if (_this.floorShininess === undefined) {
                    _this.floorShininess = 0;
                }
                if (_this.ceilingVisible === undefined) {
                    _this.ceilingVisible = false;
                }
                if (_this.ceilingColor === undefined) {
                    _this.ceilingColor = null;
                }
                if (_this.ceilingTexture === undefined) {
                    _this.ceilingTexture = null;
                }
                if (_this.ceilingShininess === undefined) {
                    _this.ceilingShininess = 0;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                if (_this.areaCache === undefined) {
                    _this.areaCache = null;
                }
                if (points_4.length <= 1) {
                    throw new IllegalStateException("Room points must containt at least two points");
                }
                _this.points = _this.deepCopy(points_4);
                _this.areaVisible = true;
                _this.nameYOffset = -40.0;
                _this.floorVisible = true;
                _this.ceilingVisible = true;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.nameXOffset === undefined) {
                _this.nameXOffset = 0;
            }
            if (_this.nameYOffset === undefined) {
                _this.nameYOffset = 0;
            }
            if (_this.nameStyle === undefined) {
                _this.nameStyle = null;
            }
            if (_this.nameAngle === undefined) {
                _this.nameAngle = 0;
            }
            if (_this.points === undefined) {
                _this.points = null;
            }
            if (_this.areaVisible === undefined) {
                _this.areaVisible = false;
            }
            if (_this.areaXOffset === undefined) {
                _this.areaXOffset = 0;
            }
            if (_this.areaYOffset === undefined) {
                _this.areaYOffset = 0;
            }
            if (_this.areaStyle === undefined) {
                _this.areaStyle = null;
            }
            if (_this.areaAngle === undefined) {
                _this.areaAngle = 0;
            }
            if (_this.floorVisible === undefined) {
                _this.floorVisible = false;
            }
            if (_this.floorColor === undefined) {
                _this.floorColor = null;
            }
            if (_this.floorTexture === undefined) {
                _this.floorTexture = null;
            }
            if (_this.floorShininess === undefined) {
                _this.floorShininess = 0;
            }
            if (_this.ceilingVisible === undefined) {
                _this.ceilingVisible = false;
            }
            if (_this.ceilingColor === undefined) {
                _this.ceilingColor = null;
            }
            if (_this.ceilingTexture === undefined) {
                _this.ceilingTexture = null;
            }
            if (_this.ceilingShininess === undefined) {
                _this.ceilingShininess = 0;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.areaCache === undefined) {
                _this.areaCache = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    Room.TWICE_PI_$LI$ = function () { if (Room.TWICE_PI == null) {
        Room.TWICE_PI = 2 * Math.PI;
    } return Room.TWICE_PI; };
    /**
     * Returns the name of this room.
     * @return {string}
     */
    Room.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {string} name
     */
    Room.prototype.setName = function (name) {
        if (name !== this.name && (name == null || !(name === this.name))) {
            var oldName = this.name;
            this.name = name;
            this.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns the distance along x axis applied to room center abscissa
     * to display room name.
     * @return {number}
     */
    Room.prototype.getNameXOffset = function () {
        return this.nameXOffset;
    };
    /**
     * Sets the distance along x axis applied to room center abscissa to display room name.
     * Once this room  is updated, listeners added to this room will receive a change notification.
     * @param {number} nameXOffset
     */
    Room.prototype.setNameXOffset = function (nameXOffset) {
        if (nameXOffset !== this.nameXOffset) {
            var oldNameXOffset = this.nameXOffset;
            this.nameXOffset = nameXOffset;
            this.firePropertyChange(/* name */ "NAME_X_OFFSET", oldNameXOffset, nameXOffset);
        }
    };
    /**
     * Returns the distance along y axis applied to room center ordinate
     * to display room name.
     * @return {number}
     */
    Room.prototype.getNameYOffset = function () {
        return this.nameYOffset;
    };
    /**
     * Sets the distance along y axis applied to room center ordinate to display room name.
     * Once this room is updated, listeners added to this room will receive a change notification.
     * @param {number} nameYOffset
     */
    Room.prototype.setNameYOffset = function (nameYOffset) {
        if (nameYOffset !== this.nameYOffset) {
            var oldNameYOffset = this.nameYOffset;
            this.nameYOffset = nameYOffset;
            this.firePropertyChange(/* name */ "NAME_Y_OFFSET", oldNameYOffset, nameYOffset);
        }
    };
    /**
     * Returns the text style used to display room name.
     * @return {TextStyle}
     */
    Room.prototype.getNameStyle = function () {
        return this.nameStyle;
    };
    /**
     * Sets the text style used to display room name.
     * Once this room is updated, listeners added to this room will receive a change notification.
     * @param {TextStyle} nameStyle
     */
    Room.prototype.setNameStyle = function (nameStyle) {
        if (nameStyle !== this.nameStyle) {
            var oldNameStyle = this.nameStyle;
            this.nameStyle = nameStyle;
            this.firePropertyChange(/* name */ "NAME_STYLE", oldNameStyle, nameStyle);
        }
    };
    /**
     * Returns the angle in radians used to display the room name.
     * @return {number}
     */
    Room.prototype.getNameAngle = function () {
        return this.nameAngle;
    };
    /**
     * Sets the angle in radians used to display the room name. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} nameAngle
     */
    Room.prototype.setNameAngle = function (nameAngle) {
        nameAngle = ((nameAngle % Room.TWICE_PI_$LI$() + Room.TWICE_PI_$LI$()) % Room.TWICE_PI_$LI$());
        if (nameAngle !== this.nameAngle) {
            var oldNameAngle = this.nameAngle;
            this.nameAngle = nameAngle;
            this.firePropertyChange(/* name */ "NAME_ANGLE", oldNameAngle, nameAngle);
        }
    };
    /**
     * Returns the points of the polygon matching this room.
     * @return {float[][]} an array of the (x,y) coordinates of the room points.
     */
    Room.prototype.getPoints = function () {
        return this.deepCopy(this.points);
    };
    /**
     * Returns the number of points of the polygon matching this room.
     * @return {number}
     */
    Room.prototype.getPointCount = function () {
        return this.points.length;
    };
    Room.prototype.deepCopy = function (points) {
        var pointsCopy = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(points.length);
        for (var i = 0; i < points.length; i++) {
            {
                pointsCopy[i] = /* clone */ points[i].slice(0);
            }
            ;
        }
        return pointsCopy;
    };
    /**
     * Sets the points of the polygon matching this room. Once this room
     * is updated, listeners added to this room will receive a change notification.
     * @param {float[][]} points
     */
    Room.prototype.setPoints = function (points) {
        if (!(JSON.stringify(this.points) === JSON.stringify(points))) {
            this.updatePoints(points);
        }
    };
    /**
     * Update the points of the polygon matching this room.
     * @param {float[][]} points
     * @private
     */
    Room.prototype.updatePoints = function (points) {
        var oldPoints = this.points;
        this.points = this.deepCopy(points);
        this.shapeCache = null;
        this.areaCache = null;
        this.firePropertyChange(/* name */ "POINTS", oldPoints, points);
    };
    Room.prototype.addPoint$float$float = function (x, y) {
        this.addPoint$float$float$int(x, y, this.points.length);
    };
    Room.prototype.addPoint$float$float$int = function (x, y, index) {
        if (index < 0 || index > this.points.length) {
            throw Object.defineProperty(new Error("Invalid index " + index), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.IndexOutOfBoundsException', 'java.lang.Object', 'java.lang.RuntimeException', 'java.lang.Exception'] });
        }
        var newPoints = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(this.points.length + 1);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, 0, newPoints, 0, index);
        newPoints[index] = [x, y];
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, index, newPoints, index + 1, this.points.length - index);
        var oldPoints = this.points;
        this.points = newPoints;
        this.shapeCache = null;
        this.areaCache = null;
        this.firePropertyChange(/* name */ "POINTS", oldPoints, this.deepCopy(this.points));
    };
    /**
     * Adds a point at the given <code>index</code>.
     * @throws IndexOutOfBoundsException if <code>index</code> is negative or > <code>getPointCount()</code>
     * @param {number} x
     * @param {number} y
     * @param {number} index
     */
    Room.prototype.addPoint = function (x, y, index) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof index === 'number') || index === null)) {
            return this.addPoint$float$float$int(x, y, index);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && index === undefined) {
            return this.addPoint$float$float(x, y);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Sets the point at the given <code>index</code>.
     * @throws IndexOutOfBoundsException if <code>index</code> is negative or >= <code>getPointCount()</code>
     * @param {number} x
     * @param {number} y
     * @param {number} index
     */
    Room.prototype.setPoint = function (x, y, index) {
        if (index < 0 || index >= this.points.length) {
            throw Object.defineProperty(new Error("Invalid index " + index), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.IndexOutOfBoundsException', 'java.lang.Object', 'java.lang.RuntimeException', 'java.lang.Exception'] });
        }
        if (this.points[index][0] !== x || this.points[index][1] !== y) {
            var oldPoints = this.points;
            this.points = this.deepCopy(this.points);
            this.points[index][0] = x;
            this.points[index][1] = y;
            this.shapeCache = null;
            this.areaCache = null;
            this.firePropertyChange(/* name */ "POINTS", oldPoints, this.deepCopy(this.points));
        }
    };
    /**
     * Removes the point at the given <code>index</code>.
     * @throws IndexOutOfBoundsException if <code>index</code> is negative or >= <code>getPointCount()</code>
     * @param {number} index
     */
    Room.prototype.removePoint = function (index) {
        if (index < 0 || index >= this.points.length) {
            throw Object.defineProperty(new Error("Invalid index " + index), '__classes', { configurable: true, value: ['java.lang.Throwable', 'java.lang.IndexOutOfBoundsException', 'java.lang.Object', 'java.lang.RuntimeException', 'java.lang.Exception'] });
        }
        else if (this.points.length <= 1) {
            throw new IllegalStateException("Room points must containt at least one point");
        }
        var newPoints = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(this.points.length - 1);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, 0, newPoints, 0, index);
        /* arraycopy */ (function (srcPts, srcOff, dstPts, dstOff, size) { if (srcPts !== dstPts || dstOff >= srcOff + size) {
            while (--size >= 0)
                dstPts[dstOff++] = srcPts[srcOff++];
        }
        else {
            var tmp = srcPts.slice(srcOff, srcOff + size);
            for (var i = 0; i < size; i++)
                dstPts[dstOff++] = tmp[i];
        } })(this.points, index + 1, newPoints, index, this.points.length - index - 1);
        var oldPoints = this.points;
        this.points = newPoints;
        this.shapeCache = null;
        this.areaCache = null;
        this.firePropertyChange(/* name */ "POINTS", oldPoints, this.deepCopy(this.points));
    };
    /**
     * Returns whether the area of this room is visible or not.
     * @return {boolean}
     */
    Room.prototype.isAreaVisible = function () {
        return this.areaVisible;
    };
    /**
     * Sets whether the area of this room is visible or not. Once this room
     * is updated, listeners added to this room will receive a change notification.
     * @param {boolean} areaVisible
     */
    Room.prototype.setAreaVisible = function (areaVisible) {
        if (areaVisible !== this.areaVisible) {
            this.areaVisible = areaVisible;
            this.firePropertyChange(/* name */ "AREA_VISIBLE", !areaVisible, areaVisible);
        }
    };
    /**
     * Returns the distance along x axis applied to room center abscissa
     * to display room area.
     * @return {number}
     */
    Room.prototype.getAreaXOffset = function () {
        return this.areaXOffset;
    };
    /**
     * Sets the distance along x axis applied to room center abscissa to display room area.
     * Once this room  is updated, listeners added to this room will receive a change notification.
     * @param {number} areaXOffset
     */
    Room.prototype.setAreaXOffset = function (areaXOffset) {
        if (areaXOffset !== this.areaXOffset) {
            var oldAreaXOffset = this.areaXOffset;
            this.areaXOffset = areaXOffset;
            this.firePropertyChange(/* name */ "AREA_X_OFFSET", oldAreaXOffset, areaXOffset);
        }
    };
    /**
     * Returns the distance along y axis applied to room center ordinate
     * to display room area.
     * @return {number}
     */
    Room.prototype.getAreaYOffset = function () {
        return this.areaYOffset;
    };
    /**
     * Sets the distance along y axis applied to room center ordinate to display room area.
     * Once this room is updated, listeners added to this room will receive a change notification.
     * @param {number} areaYOffset
     */
    Room.prototype.setAreaYOffset = function (areaYOffset) {
        if (areaYOffset !== this.areaYOffset) {
            var oldAreaYOffset = this.areaYOffset;
            this.areaYOffset = areaYOffset;
            this.firePropertyChange(/* name */ "AREA_Y_OFFSET", oldAreaYOffset, areaYOffset);
        }
    };
    /**
     * Returns the text style used to display room area.
     * @return {TextStyle}
     */
    Room.prototype.getAreaStyle = function () {
        return this.areaStyle;
    };
    /**
     * Sets the text style used to display room area.
     * Once this room is updated, listeners added to this room will receive a change notification.
     * @param {TextStyle} areaStyle
     */
    Room.prototype.setAreaStyle = function (areaStyle) {
        if (areaStyle !== this.areaStyle) {
            var oldAreaStyle = this.areaStyle;
            this.areaStyle = areaStyle;
            this.firePropertyChange(/* name */ "AREA_STYLE", oldAreaStyle, areaStyle);
        }
    };
    /**
     * Returns the angle in radians used to display the room area.
     * @return {number}
     */
    Room.prototype.getAreaAngle = function () {
        return this.areaAngle;
    };
    /**
     * Sets the angle in radians used to display the room area. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} areaAngle
     */
    Room.prototype.setAreaAngle = function (areaAngle) {
        areaAngle = ((areaAngle % Room.TWICE_PI_$LI$() + Room.TWICE_PI_$LI$()) % Room.TWICE_PI_$LI$());
        if (areaAngle !== this.areaAngle) {
            var oldAreaAngle = this.areaAngle;
            this.areaAngle = areaAngle;
            this.firePropertyChange(/* name */ "AREA_ANGLE", oldAreaAngle, areaAngle);
        }
    };
    /**
     * Returns the abscissa of the center point of this room.
     * @return {number}
     */
    Room.prototype.getXCenter = function () {
        var xMin = this.points[0][0];
        var xMax = this.points[0][0];
        for (var i = 1; i < this.points.length; i++) {
            {
                xMin = Math.min(xMin, this.points[i][0]);
                xMax = Math.max(xMax, this.points[i][0]);
            }
            ;
        }
        return (xMin + xMax) / 2;
    };
    /**
     * Returns the ordinate of the center point of this room.
     * @return {number}
     */
    Room.prototype.getYCenter = function () {
        var yMin = this.points[0][1];
        var yMax = this.points[0][1];
        for (var i = 1; i < this.points.length; i++) {
            {
                yMin = Math.min(yMin, this.points[i][1]);
                yMax = Math.max(yMax, this.points[i][1]);
            }
            ;
        }
        return (yMin + yMax) / 2;
    };
    /**
     * Returns the floor color of this room.
     * @return {number}
     */
    Room.prototype.getFloorColor = function () {
        return this.floorColor;
    };
    /**
     * Sets the floor color of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {number} floorColor
     */
    Room.prototype.setFloorColor = function (floorColor) {
        if (floorColor !== this.floorColor && (floorColor == null || !(floorColor === this.floorColor))) {
            var oldFloorColor = this.floorColor;
            this.floorColor = floorColor;
            this.firePropertyChange(/* name */ "FLOOR_COLOR", oldFloorColor, floorColor);
        }
    };
    /**
     * Returns the floor texture of this room.
     * @return {HomeTexture}
     */
    Room.prototype.getFloorTexture = function () {
        return this.floorTexture;
    };
    /**
     * Sets the floor texture of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {HomeTexture} floorTexture
     */
    Room.prototype.setFloorTexture = function (floorTexture) {
        if (floorTexture !== this.floorTexture && (floorTexture == null || !floorTexture.equals(this.floorTexture))) {
            var oldFloorTexture = this.floorTexture;
            this.floorTexture = floorTexture;
            this.firePropertyChange(/* name */ "FLOOR_TEXTURE", oldFloorTexture, floorTexture);
        }
    };
    /**
     * Returns whether the floor of this room is visible or not.
     * @return {boolean}
     */
    Room.prototype.isFloorVisible = function () {
        return this.floorVisible;
    };
    /**
     * Sets whether the floor of this room is visible or not. Once this room
     * is updated, listeners added to this room will receive a change notification.
     * @param {boolean} floorVisible
     */
    Room.prototype.setFloorVisible = function (floorVisible) {
        if (floorVisible !== this.floorVisible) {
            this.floorVisible = floorVisible;
            this.firePropertyChange(/* name */ "FLOOR_VISIBLE", !floorVisible, floorVisible);
        }
    };
    /**
     * Returns the floor shininess of this room.
     * @return {number} a value between 0 (matt) and 1 (very shiny)
     */
    Room.prototype.getFloorShininess = function () {
        return this.floorShininess;
    };
    /**
     * Sets the floor shininess of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {number} floorShininess
     */
    Room.prototype.setFloorShininess = function (floorShininess) {
        if (floorShininess !== this.floorShininess) {
            var oldFloorShininess = this.floorShininess;
            this.floorShininess = floorShininess;
            this.firePropertyChange(/* name */ "FLOOR_SHININESS", oldFloorShininess, floorShininess);
        }
    };
    /**
     * Returns the ceiling color color of this room.
     * @return {number}
     */
    Room.prototype.getCeilingColor = function () {
        return this.ceilingColor;
    };
    /**
     * Sets the ceiling color of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {number} ceilingColor
     */
    Room.prototype.setCeilingColor = function (ceilingColor) {
        if (ceilingColor !== this.ceilingColor && (ceilingColor == null || !(ceilingColor === this.ceilingColor))) {
            var oldCeilingColor = this.ceilingColor;
            this.ceilingColor = ceilingColor;
            this.firePropertyChange(/* name */ "CEILING_COLOR", oldCeilingColor, ceilingColor);
        }
    };
    /**
     * Returns the ceiling texture of this room.
     * @return {HomeTexture}
     */
    Room.prototype.getCeilingTexture = function () {
        return this.ceilingTexture;
    };
    /**
     * Sets the ceiling texture of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {HomeTexture} ceilingTexture
     */
    Room.prototype.setCeilingTexture = function (ceilingTexture) {
        if (ceilingTexture !== this.ceilingTexture && (ceilingTexture == null || !ceilingTexture.equals(this.ceilingTexture))) {
            var oldCeilingTexture = this.ceilingTexture;
            this.ceilingTexture = ceilingTexture;
            this.firePropertyChange(/* name */ "CEILING_TEXTURE", oldCeilingTexture, ceilingTexture);
        }
    };
    /**
     * Returns whether the ceiling of this room is visible or not.
     * @return {boolean}
     */
    Room.prototype.isCeilingVisible = function () {
        return this.ceilingVisible;
    };
    /**
     * Sets whether the ceiling of this room is visible or not. Once this room
     * is updated, listeners added to this room will receive a change notification.
     * @param {boolean} ceilingVisible
     */
    Room.prototype.setCeilingVisible = function (ceilingVisible) {
        if (ceilingVisible !== this.ceilingVisible) {
            this.ceilingVisible = ceilingVisible;
            this.firePropertyChange(/* name */ "CEILING_VISIBLE", !ceilingVisible, ceilingVisible);
        }
    };
    /**
     * Returns the ceiling shininess of this room.
     * @return {number} a value between 0 (matt) and 1 (very shiny)
     */
    Room.prototype.getCeilingShininess = function () {
        return this.ceilingShininess;
    };
    /**
     * Sets the ceiling shininess of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {number} ceilingShininess
     */
    Room.prototype.setCeilingShininess = function (ceilingShininess) {
        if (ceilingShininess !== this.ceilingShininess) {
            var oldCeilingShininess = this.ceilingShininess;
            this.ceilingShininess = ceilingShininess;
            this.firePropertyChange(/* name */ "CEILING_SHININESS", oldCeilingShininess, ceilingShininess);
        }
    };
    /**
     * Returns the level which this room belongs to.
     * @return {Level}
     */
    Room.prototype.getLevel = function () {
        return this.level;
    };
    /**
     * Sets the level of this room. Once this room is updated,
     * listeners added to this room will receive a change notification.
     * @param {Level} level
     */
    Room.prototype.setLevel = function (level) {
        if (level !== this.level) {
            var oldLevel = this.level;
            this.level = level;
            this.firePropertyChange(/* name */ "LEVEL", oldLevel, level);
        }
    };
    /**
     * Returns <code>true</code> if this room is at the given <code>level</code>
     * or at a level with the same elevation and a smaller elevation index.
     * @param {Level} level
     * @return {boolean}
     */
    Room.prototype.isAtLevel = function (level) {
        return this.level === level || this.level != null && level != null && this.level.getElevation() === level.getElevation() && this.level.getElevationIndex() < level.getElevationIndex();
    };
    /**
     * Returns the area of this room.
     * @return {number}
     */
    Room.prototype.getArea = function () {
        if (this.areaCache == null) {
            var roomArea = new java.awt.geom.Area(this.getShape());
            if (roomArea.isSingular()) {
                this.areaCache = Math.abs(this.getSignedArea(this.getPoints()));
            }
            else {
                var area = 0;
                var currentPathPoints = ([]);
                for (var it = roomArea.getPathIterator(null); !it.isDone();) {
                    {
                        var roomPoint = [0, 0];
                        switch ((it.currentSegment(roomPoint))) {
                            case java.awt.geom.PathIterator.SEG_MOVETO:
                                /* add */ (currentPathPoints.push(roomPoint) > 0);
                                break;
                            case java.awt.geom.PathIterator.SEG_LINETO:
                                /* add */ (currentPathPoints.push(roomPoint) > 0);
                                break;
                            case java.awt.geom.PathIterator.SEG_CLOSE:
                                var pathPoints = currentPathPoints.slice(0);
                                area += this.getSignedArea(pathPoints);
                                /* clear */ (currentPathPoints.length = 0);
                                break;
                        }
                        it.next();
                    }
                    ;
                }
                this.areaCache = area;
            }
        }
        return this.areaCache;
    };
    Room.prototype.getSignedArea = function (areaPoints) {
        var area = 0;
        for (var i = 1; i < areaPoints.length; i++) {
            {
                area += areaPoints[i][0] * areaPoints[i - 1][1];
                area -= areaPoints[i][1] * areaPoints[i - 1][0];
            }
            ;
        }
        area += areaPoints[0][0] * areaPoints[areaPoints.length - 1][1];
        area -= areaPoints[0][1] * areaPoints[areaPoints.length - 1][0];
        return area / 2;
    };
    /**
     * Returns <code>true</code> if the points of this room are in clockwise order.
     * @return {boolean}
     */
    Room.prototype.isClockwise = function () {
        return this.getSignedArea(this.getPoints()) < 0;
    };
    /**
     * Returns <code>true</code> if this room is comprised of only one polygon.
     * @return {boolean}
     */
    Room.prototype.isSingular = function () {
        return new java.awt.geom.Area(this.getShape()).isSingular();
    };
    /**
     * Returns <code>true</code> if this room intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    Room.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return this.getShape().intersects(rectangle);
    };
    /**
     * Returns <code>true</code> if this room contains
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Room.prototype.containsPoint = function (x, y, margin) {
        return this.containsShapeAtWithMargin(this.getShape(), x, y, margin);
    };
    /**
     * Returns the index of the point of this room equal to
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>.
     * @return {number} the index of the first found point or -1.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     */
    Room.prototype.getPointIndexAt = function (x, y, margin) {
        for (var i = 0; i < this.points.length; i++) {
            {
                if (Math.abs(x - this.points[i][0]) <= margin && Math.abs(y - this.points[i][1]) <= margin) {
                    return i;
                }
            }
            ;
        }
        return -1;
    };
    /**
     * Returns <code>true</code> if the center point at which is displayed the name
     * of this room is equal to the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Room.prototype.isNameCenterPointAt = function (x, y, margin) {
        return Math.abs(x - this.getXCenter() - this.getNameXOffset()) <= margin && Math.abs(y - this.getYCenter() - this.getNameYOffset()) <= margin;
    };
    /**
     * Returns <code>true</code> if the center point at which is displayed the area
     * of this room is equal to the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    Room.prototype.isAreaCenterPointAt = function (x, y, margin) {
        return Math.abs(x - this.getXCenter() - this.getAreaXOffset()) <= margin && Math.abs(y - this.getYCenter() - this.getAreaYOffset()) <= margin;
    };
    /**
     * Returns <code>true</code> if <code>shape</code> contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {Object} shape
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     * @private
     */
    Room.prototype.containsShapeAtWithMargin = function (shape, x, y, margin) {
        if (margin === 0) {
            return shape.contains(x, y);
        }
        else {
            return shape.intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Returns the shape matching this room.
     * @return {Object}
     * @private
     */
    Room.prototype.getShape = function () {
        if (this.shapeCache == null) {
            var roomShape = new java.awt.geom.GeneralPath();
            roomShape.moveTo(this.points[0][0], this.points[0][1]);
            for (var i = 1; i < this.points.length; i++) {
                {
                    roomShape.lineTo(this.points[i][0], this.points[i][1]);
                }
                ;
            }
            roomShape.closePath();
            this.shapeCache = roomShape;
        }
        return this.shapeCache;
    };
    /**
     * Moves this room of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    Room.prototype.move = function (dx, dy) {
        if (dx !== 0 || dy !== 0) {
            var points = this.getPoints();
            for (var i = 0; i < points.length; i++) {
                {
                    points[i][0] += dx;
                    points[i][1] += dy;
                }
                ;
            }
            this.updatePoints(points);
        }
    };
    /**
     * Returns a clone of this room.
     * @return {Room}
     */
    Room.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_7 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_7[p] = o[p];
            }
            return clone_7;
        } })(this);
        clone.level = null;
        return clone;
    };
    return Room;
}(HomeObject));
Room["__class"] = "com.eteks.sweethome3d.model.Room";
Room["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.Elevatable"];
Room['__transients'] = ['shapeCache', 'areaCache', 'propertyChangeSupport'];
/**
 * Creates a home piece of furniture from an existing piece.
 * @param {string} id    the ID of the piece
 * @param {Object} piece the piece from which data are copied
 * @class
 * @extends HomeObject
 * @author Emmanuel Puybaret
 */
var HomePieceOfFurniture = /** @class */ (function (_super) {
    __extends(HomePieceOfFurniture, _super);
    function HomePieceOfFurniture(id, piece) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((piece != null && (piece.constructor != null && piece.constructor["__interfaces"] != null && piece.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.PieceOfFurniture") >= 0)) || piece === null)) {
            var __args = arguments;
            _this = _super.call(this, id) || this;
            if (_this.catalogId === undefined) {
                _this.catalogId = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.nameVisible === undefined) {
                _this.nameVisible = false;
            }
            if (_this.nameXOffset === undefined) {
                _this.nameXOffset = 0;
            }
            if (_this.nameYOffset === undefined) {
                _this.nameYOffset = 0;
            }
            if (_this.nameStyle === undefined) {
                _this.nameStyle = null;
            }
            if (_this.nameAngle === undefined) {
                _this.nameAngle = 0;
            }
            if (_this.description === undefined) {
                _this.description = null;
            }
            if (_this.information === undefined) {
                _this.information = null;
            }
            if (_this.icon === undefined) {
                _this.icon = null;
            }
            if (_this.planIcon === undefined) {
                _this.planIcon = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.widthInPlan === undefined) {
                _this.widthInPlan = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.depthInPlan === undefined) {
                _this.depthInPlan = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.heightInPlan === undefined) {
                _this.heightInPlan = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.dropOnTopElevation === undefined) {
                _this.dropOnTopElevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.modelMaterials === undefined) {
                _this.modelMaterials = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.shininess === undefined) {
                _this.shininess = null;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.modelCenteredAtOrigin === undefined) {
                _this.modelCenteredAtOrigin = false;
            }
            if (_this.modelTransformations === undefined) {
                _this.modelTransformations = null;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.resizable === undefined) {
                _this.resizable = false;
            }
            if (_this.deformable === undefined) {
                _this.deformable = false;
            }
            if (_this.texturable === undefined) {
                _this.texturable = false;
            }
            if (_this.horizontallyRotatable === undefined) {
                _this.horizontallyRotatable = false;
            }
            if (_this.price === undefined) {
                _this.price = null;
            }
            if (_this.valueAddedTaxPercentage === undefined) {
                _this.valueAddedTaxPercentage = null;
            }
            if (_this.currency === undefined) {
                _this.currency = null;
            }
            if (_this.visible === undefined) {
                _this.visible = false;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.angle === undefined) {
                _this.angle = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = 0;
            }
            if (_this.roll === undefined) {
                _this.roll = 0;
            }
            if (_this.modelMirrored === undefined) {
                _this.modelMirrored = false;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            _this.name = piece.getName();
            _this.description = piece.getDescription();
            _this.information = piece.getInformation();
            _this.icon = piece.getIcon();
            _this.planIcon = piece.getPlanIcon();
            _this.model = piece.getModel();
            _this.modelSize = piece.getModelSize();
            _this.width = piece.getWidth();
            _this.depth = piece.getDepth();
            _this.height = piece.getHeight();
            _this.elevation = piece.getElevation();
            _this.dropOnTopElevation = piece.getDropOnTopElevation();
            _this.movable = piece.isMovable();
            _this.doorOrWindow = piece.isDoorOrWindow();
            _this.color = piece.getColor();
            _this.modelRotation = piece.getModelRotation();
            _this.staircaseCutOutShape = piece.getStaircaseCutOutShape();
            _this.creator = piece.getCreator();
            _this.backFaceShown = piece.isBackFaceShown();
            _this.resizable = piece.isResizable();
            _this.deformable = piece.isDeformable();
            _this.texturable = piece.isTexturable();
            _this.horizontallyRotatable = piece.isHorizontallyRotatable();
            _this.price = piece.getPrice();
            _this.valueAddedTaxPercentage = piece.getValueAddedTaxPercentage();
            _this.currency = piece.getCurrency();
            if (piece != null && piece instanceof HomePieceOfFurniture) {
                var homePiece = piece;
                _this.catalogId = homePiece.getCatalogId();
                _this.nameVisible = homePiece.isNameVisible();
                _this.nameXOffset = homePiece.getNameXOffset();
                _this.nameYOffset = homePiece.getNameYOffset();
                _this.nameAngle = homePiece.getNameAngle();
                _this.nameStyle = homePiece.getNameStyle();
                _this.visible = homePiece.isVisible();
                _this.widthInPlan = homePiece.getWidthInPlan();
                _this.depthInPlan = homePiece.getDepthInPlan();
                _this.heightInPlan = homePiece.getHeightInPlan();
                _this.modelCenteredAtOrigin = homePiece.isModelCenteredAtOrigin();
                _this.modelTransformations = homePiece.getModelTransformations();
                _this.angle = homePiece.getAngle();
                _this.pitch = homePiece.getPitch();
                _this.roll = homePiece.getRoll();
                _this.x = homePiece.getX();
                _this.y = homePiece.getY();
                _this.modelMirrored = homePiece.isModelMirrored();
                _this.texture = homePiece.getTexture();
                _this.shininess = homePiece.getShininess();
                _this.modelMaterials = homePiece.getModelMaterials();
            }
            else {
                if (piece != null && piece instanceof CatalogPieceOfFurniture) {
                    _this.catalogId = piece.getId();
                }
                _this.visible = true;
                _this.widthInPlan = _this.width;
                _this.depthInPlan = _this.depth;
                _this.heightInPlan = _this.height;
                _this.modelCenteredAtOrigin = true;
                _this.x = _this.width / 2;
                _this.y = _this.depth / 2;
            }
        }
        else if (((id != null && (id.constructor != null && id.constructor["__interfaces"] != null && id.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.PieceOfFurniture") >= 0)) || id === null) && piece === undefined) {
            var __args = arguments;
            var piece_7 = __args[0];
            {
                var __args_85 = arguments;
                var id_21 = HomeObject.createId("pieceOfFurniture");
                _this = _super.call(this, id_21) || this;
                if (_this.catalogId === undefined) {
                    _this.catalogId = null;
                }
                if (_this.name === undefined) {
                    _this.name = null;
                }
                if (_this.nameVisible === undefined) {
                    _this.nameVisible = false;
                }
                if (_this.nameXOffset === undefined) {
                    _this.nameXOffset = 0;
                }
                if (_this.nameYOffset === undefined) {
                    _this.nameYOffset = 0;
                }
                if (_this.nameStyle === undefined) {
                    _this.nameStyle = null;
                }
                if (_this.nameAngle === undefined) {
                    _this.nameAngle = 0;
                }
                if (_this.description === undefined) {
                    _this.description = null;
                }
                if (_this.information === undefined) {
                    _this.information = null;
                }
                if (_this.icon === undefined) {
                    _this.icon = null;
                }
                if (_this.planIcon === undefined) {
                    _this.planIcon = null;
                }
                if (_this.model === undefined) {
                    _this.model = null;
                }
                if (_this.modelSize === undefined) {
                    _this.modelSize = null;
                }
                if (_this.width === undefined) {
                    _this.width = 0;
                }
                if (_this.widthInPlan === undefined) {
                    _this.widthInPlan = 0;
                }
                if (_this.depth === undefined) {
                    _this.depth = 0;
                }
                if (_this.depthInPlan === undefined) {
                    _this.depthInPlan = 0;
                }
                if (_this.height === undefined) {
                    _this.height = 0;
                }
                if (_this.heightInPlan === undefined) {
                    _this.heightInPlan = 0;
                }
                if (_this.elevation === undefined) {
                    _this.elevation = 0;
                }
                if (_this.dropOnTopElevation === undefined) {
                    _this.dropOnTopElevation = 0;
                }
                if (_this.movable === undefined) {
                    _this.movable = false;
                }
                if (_this.doorOrWindow === undefined) {
                    _this.doorOrWindow = false;
                }
                if (_this.modelMaterials === undefined) {
                    _this.modelMaterials = null;
                }
                if (_this.color === undefined) {
                    _this.color = null;
                }
                if (_this.texture === undefined) {
                    _this.texture = null;
                }
                if (_this.shininess === undefined) {
                    _this.shininess = null;
                }
                if (_this.modelRotation === undefined) {
                    _this.modelRotation = null;
                }
                if (_this.modelCenteredAtOrigin === undefined) {
                    _this.modelCenteredAtOrigin = false;
                }
                if (_this.modelTransformations === undefined) {
                    _this.modelTransformations = null;
                }
                if (_this.staircaseCutOutShape === undefined) {
                    _this.staircaseCutOutShape = null;
                }
                if (_this.creator === undefined) {
                    _this.creator = null;
                }
                if (_this.backFaceShown === undefined) {
                    _this.backFaceShown = false;
                }
                if (_this.resizable === undefined) {
                    _this.resizable = false;
                }
                if (_this.deformable === undefined) {
                    _this.deformable = false;
                }
                if (_this.texturable === undefined) {
                    _this.texturable = false;
                }
                if (_this.horizontallyRotatable === undefined) {
                    _this.horizontallyRotatable = false;
                }
                if (_this.price === undefined) {
                    _this.price = null;
                }
                if (_this.valueAddedTaxPercentage === undefined) {
                    _this.valueAddedTaxPercentage = null;
                }
                if (_this.currency === undefined) {
                    _this.currency = null;
                }
                if (_this.visible === undefined) {
                    _this.visible = false;
                }
                if (_this.x === undefined) {
                    _this.x = 0;
                }
                if (_this.y === undefined) {
                    _this.y = 0;
                }
                if (_this.angle === undefined) {
                    _this.angle = 0;
                }
                if (_this.pitch === undefined) {
                    _this.pitch = 0;
                }
                if (_this.roll === undefined) {
                    _this.roll = 0;
                }
                if (_this.modelMirrored === undefined) {
                    _this.modelMirrored = false;
                }
                if (_this.level === undefined) {
                    _this.level = null;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                _this.name = piece_7.getName();
                _this.description = piece_7.getDescription();
                _this.information = piece_7.getInformation();
                _this.icon = piece_7.getIcon();
                _this.planIcon = piece_7.getPlanIcon();
                _this.model = piece_7.getModel();
                _this.modelSize = piece_7.getModelSize();
                _this.width = piece_7.getWidth();
                _this.depth = piece_7.getDepth();
                _this.height = piece_7.getHeight();
                _this.elevation = piece_7.getElevation();
                _this.dropOnTopElevation = piece_7.getDropOnTopElevation();
                _this.movable = piece_7.isMovable();
                _this.doorOrWindow = piece_7.isDoorOrWindow();
                _this.color = piece_7.getColor();
                _this.modelRotation = piece_7.getModelRotation();
                _this.staircaseCutOutShape = piece_7.getStaircaseCutOutShape();
                _this.creator = piece_7.getCreator();
                _this.backFaceShown = piece_7.isBackFaceShown();
                _this.resizable = piece_7.isResizable();
                _this.deformable = piece_7.isDeformable();
                _this.texturable = piece_7.isTexturable();
                _this.horizontallyRotatable = piece_7.isHorizontallyRotatable();
                _this.price = piece_7.getPrice();
                _this.valueAddedTaxPercentage = piece_7.getValueAddedTaxPercentage();
                _this.currency = piece_7.getCurrency();
                if (piece_7 != null && piece_7 instanceof HomePieceOfFurniture) {
                    var homePiece = piece_7;
                    _this.catalogId = homePiece.getCatalogId();
                    _this.nameVisible = homePiece.isNameVisible();
                    _this.nameXOffset = homePiece.getNameXOffset();
                    _this.nameYOffset = homePiece.getNameYOffset();
                    _this.nameAngle = homePiece.getNameAngle();
                    _this.nameStyle = homePiece.getNameStyle();
                    _this.visible = homePiece.isVisible();
                    _this.widthInPlan = homePiece.getWidthInPlan();
                    _this.depthInPlan = homePiece.getDepthInPlan();
                    _this.heightInPlan = homePiece.getHeightInPlan();
                    _this.modelCenteredAtOrigin = homePiece.isModelCenteredAtOrigin();
                    _this.modelTransformations = homePiece.getModelTransformations();
                    _this.angle = homePiece.getAngle();
                    _this.pitch = homePiece.getPitch();
                    _this.roll = homePiece.getRoll();
                    _this.x = homePiece.getX();
                    _this.y = homePiece.getY();
                    _this.modelMirrored = homePiece.isModelMirrored();
                    _this.texture = homePiece.getTexture();
                    _this.shininess = homePiece.getShininess();
                    _this.modelMaterials = homePiece.getModelMaterials();
                }
                else {
                    if (piece_7 != null && piece_7 instanceof CatalogPieceOfFurniture) {
                        _this.catalogId = piece_7.getId();
                    }
                    _this.visible = true;
                    _this.widthInPlan = _this.width;
                    _this.depthInPlan = _this.depth;
                    _this.heightInPlan = _this.height;
                    _this.modelCenteredAtOrigin = true;
                    _this.x = _this.width / 2;
                    _this.y = _this.depth / 2;
                }
            }
            if (_this.catalogId === undefined) {
                _this.catalogId = null;
            }
            if (_this.name === undefined) {
                _this.name = null;
            }
            if (_this.nameVisible === undefined) {
                _this.nameVisible = false;
            }
            if (_this.nameXOffset === undefined) {
                _this.nameXOffset = 0;
            }
            if (_this.nameYOffset === undefined) {
                _this.nameYOffset = 0;
            }
            if (_this.nameStyle === undefined) {
                _this.nameStyle = null;
            }
            if (_this.nameAngle === undefined) {
                _this.nameAngle = 0;
            }
            if (_this.description === undefined) {
                _this.description = null;
            }
            if (_this.information === undefined) {
                _this.information = null;
            }
            if (_this.icon === undefined) {
                _this.icon = null;
            }
            if (_this.planIcon === undefined) {
                _this.planIcon = null;
            }
            if (_this.model === undefined) {
                _this.model = null;
            }
            if (_this.modelSize === undefined) {
                _this.modelSize = null;
            }
            if (_this.width === undefined) {
                _this.width = 0;
            }
            if (_this.widthInPlan === undefined) {
                _this.widthInPlan = 0;
            }
            if (_this.depth === undefined) {
                _this.depth = 0;
            }
            if (_this.depthInPlan === undefined) {
                _this.depthInPlan = 0;
            }
            if (_this.height === undefined) {
                _this.height = 0;
            }
            if (_this.heightInPlan === undefined) {
                _this.heightInPlan = 0;
            }
            if (_this.elevation === undefined) {
                _this.elevation = 0;
            }
            if (_this.dropOnTopElevation === undefined) {
                _this.dropOnTopElevation = 0;
            }
            if (_this.movable === undefined) {
                _this.movable = false;
            }
            if (_this.doorOrWindow === undefined) {
                _this.doorOrWindow = false;
            }
            if (_this.modelMaterials === undefined) {
                _this.modelMaterials = null;
            }
            if (_this.color === undefined) {
                _this.color = null;
            }
            if (_this.texture === undefined) {
                _this.texture = null;
            }
            if (_this.shininess === undefined) {
                _this.shininess = null;
            }
            if (_this.modelRotation === undefined) {
                _this.modelRotation = null;
            }
            if (_this.modelCenteredAtOrigin === undefined) {
                _this.modelCenteredAtOrigin = false;
            }
            if (_this.modelTransformations === undefined) {
                _this.modelTransformations = null;
            }
            if (_this.staircaseCutOutShape === undefined) {
                _this.staircaseCutOutShape = null;
            }
            if (_this.creator === undefined) {
                _this.creator = null;
            }
            if (_this.backFaceShown === undefined) {
                _this.backFaceShown = false;
            }
            if (_this.resizable === undefined) {
                _this.resizable = false;
            }
            if (_this.deformable === undefined) {
                _this.deformable = false;
            }
            if (_this.texturable === undefined) {
                _this.texturable = false;
            }
            if (_this.horizontallyRotatable === undefined) {
                _this.horizontallyRotatable = false;
            }
            if (_this.price === undefined) {
                _this.price = null;
            }
            if (_this.valueAddedTaxPercentage === undefined) {
                _this.valueAddedTaxPercentage = null;
            }
            if (_this.currency === undefined) {
                _this.currency = null;
            }
            if (_this.visible === undefined) {
                _this.visible = false;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            if (_this.angle === undefined) {
                _this.angle = 0;
            }
            if (_this.pitch === undefined) {
                _this.pitch = 0;
            }
            if (_this.roll === undefined) {
                _this.roll = 0;
            }
            if (_this.modelMirrored === undefined) {
                _this.modelMirrored = false;
            }
            if (_this.level === undefined) {
                _this.level = null;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    HomePieceOfFurniture.__static_initialize = function () { if (!HomePieceOfFurniture.__static_initialized) {
        HomePieceOfFurniture.__static_initialized = true;
        HomePieceOfFurniture.__static_initializer_0();
    } };
    HomePieceOfFurniture.TWICE_PI_$LI$ = function () { HomePieceOfFurniture.__static_initialize(); if (HomePieceOfFurniture.TWICE_PI == null) {
        HomePieceOfFurniture.TWICE_PI = 2 * Math.PI;
    } return HomePieceOfFurniture.TWICE_PI; };
    HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN_$LI$ = function () { HomePieceOfFurniture.__static_initialize(); if (HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN == null) {
        HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN = /* toRadians */ (function (x) { return x * Math.PI / 180; })(1);
    } return HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN; };
    HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN_$LI$ = function () { HomePieceOfFurniture.__static_initialize(); if (HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN == null) {
        HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN = /* toRadians */ (function (x) { return x * Math.PI / 180; })(10);
    } return HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN; };
    HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$ = function () { HomePieceOfFurniture.__static_initialize(); return HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS; };
    HomePieceOfFurniture.__static_initializer_0 = function () {
        var collator = { compare: function (o1, o2) { return o1.toString().localeCompare(o2.toString()); }, equals: function (o1, o2) { return o1.toString().localeCompare(o2.toString()) === 0; } };
        HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS = ({});
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "CATALOG_ID", new HomePieceOfFurniture.HomePieceOfFurniture$0(collator));
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "NAME", new HomePieceOfFurniture.HomePieceOfFurniture$1(collator));
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "WIDTH", new HomePieceOfFurniture.HomePieceOfFurniture$2());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "HEIGHT", new HomePieceOfFurniture.HomePieceOfFurniture$3());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "DEPTH", new HomePieceOfFurniture.HomePieceOfFurniture$4());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "MOVABLE", new HomePieceOfFurniture.HomePieceOfFurniture$5());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "DOOR_OR_WINDOW", new HomePieceOfFurniture.HomePieceOfFurniture$6());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "COLOR", new HomePieceOfFurniture.HomePieceOfFurniture$7());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "TEXTURE", new HomePieceOfFurniture.HomePieceOfFurniture$8(collator));
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "VISIBLE", new HomePieceOfFurniture.HomePieceOfFurniture$9());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "X", new HomePieceOfFurniture.HomePieceOfFurniture$10());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "Y", new HomePieceOfFurniture.HomePieceOfFurniture$11());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "ELEVATION", new HomePieceOfFurniture.HomePieceOfFurniture$12());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "ANGLE", new HomePieceOfFurniture.HomePieceOfFurniture$13());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "MODEL_SIZE", new HomePieceOfFurniture.HomePieceOfFurniture$14());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "CREATOR", new HomePieceOfFurniture.HomePieceOfFurniture$15(collator));
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "LEVEL", new HomePieceOfFurniture.HomePieceOfFurniture$16());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "PRICE", new HomePieceOfFurniture.HomePieceOfFurniture$17());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "VALUE_ADDED_TAX_PERCENTAGE", new HomePieceOfFurniture.HomePieceOfFurniture$18());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "VALUE_ADDED_TAX", new HomePieceOfFurniture.HomePieceOfFurniture$19());
        /* put */ (function (m, k, v) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                m.entries[i].value = v;
                return;
            } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), "PRICE_VALUE_ADDED_TAX_INCLUDED", new HomePieceOfFurniture.HomePieceOfFurniture$20());
    };
    HomePieceOfFurniture.compare$float$float = function (value1, value2) {
        return /* compare */ (value1 - value2);
    };
    HomePieceOfFurniture.compare$boolean$boolean = function (value1, value2) {
        return value1 === value2 ? 0 : (value1 ? -1 : 1);
    };
    HomePieceOfFurniture.compare$java_math_BigDecimal$java_math_BigDecimal = function (value1, value2) {
        if (value1 === value2) {
            return 0;
        }
        else if (value1 == null) {
            return -1;
        }
        else if (value2 == null) {
            return 1;
        }
        else {
            return /* compareTo */ value1.cmp(value2);
        }
    };
    HomePieceOfFurniture.compare = function (value1, value2) {
        if (((value1 != null && value1 instanceof Big) || value1 === null) && ((value2 != null && value2 instanceof Big) || value2 === null)) {
            return HomePieceOfFurniture.compare$java_math_BigDecimal$java_math_BigDecimal(value1, value2);
        }
        else if (((value1 != null && value1 instanceof Level) || value1 === null) && ((value2 != null && value2 instanceof Level) || value2 === null)) {
            return HomePieceOfFurniture.compare$com_eteks_sweethome3d_model_Level$com_eteks_sweethome3d_model_Level(value1, value2);
        }
        else if (((typeof value1 === 'number') || value1 === null) && ((typeof value2 === 'number') || value2 === null)) {
            return HomePieceOfFurniture.compare$float$float(value1, value2);
        }
        else if (((typeof value1 === 'boolean') || value1 === null) && ((typeof value2 === 'boolean') || value2 === null)) {
            return HomePieceOfFurniture.compare$boolean$boolean(value1, value2);
        }
        else
            throw new Error('invalid overload');
    };
    HomePieceOfFurniture.compare$com_eteks_sweethome3d_model_Level$com_eteks_sweethome3d_model_Level = function (level1, level2) {
        if (level1 === level2) {
            return 0;
        }
        else if (level1 == null) {
            return -1;
        }
        else if (level2 == null) {
            return 1;
        }
        else {
            return /* compare */ (level1.getElevation() - level2.getElevation());
        }
    };
    HomePieceOfFurniture.getComparableModelSize = function (piece) {
        if (piece != null && piece instanceof HomeFurnitureGroup) {
            var biggestModelSize = null;
            {
                var array = piece.getFurniture();
                for (var index = 0; index < array.length; index++) {
                    var childPiece = array[index];
                    {
                        var modelSize = HomePieceOfFurniture.getComparableModelSize(childPiece);
                        if (modelSize != null && (biggestModelSize == null || /* longValue */ biggestModelSize < /* longValue */ modelSize)) {
                            biggestModelSize = modelSize;
                        }
                    }
                }
            }
            return biggestModelSize;
        }
        else {
            return piece.modelSize;
        }
    };
    /**
     * Returns the catalog ID of this piece of furniture or <code>null</code> if it doesn't exist.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getCatalogId = function () {
        return this.catalogId;
    };
    /**
     * Sets the catalog ID of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {string} catalogId
     */
    HomePieceOfFurniture.prototype.setCatalogId = function (catalogId) {
        if (catalogId !== this.catalogId && (catalogId == null || !(catalogId === this.catalogId))) {
            var oldCatalogId = this.catalogId;
            this.catalogId = catalogId;
            this.firePropertyChange(/* name */ "CATALOG_ID", oldCatalogId, catalogId);
        }
    };
    /**
     * Returns the name of this piece of furniture.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {string} name
     */
    HomePieceOfFurniture.prototype.setName = function (name) {
        if (name !== this.name && (name == null || !(name === this.name))) {
            var oldName = this.name;
            this.name = name;
            this.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns whether the name of this piece should be drawn or not.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isNameVisible = function () {
        return this.nameVisible;
    };
    /**
     * Sets whether the name of this piece is visible or not. Once this piece of furniture
     * is updated, listeners added to this piece will receive a change notification.
     * @param {boolean} nameVisible
     */
    HomePieceOfFurniture.prototype.setNameVisible = function (nameVisible) {
        if (nameVisible !== this.nameVisible) {
            this.nameVisible = nameVisible;
            this.firePropertyChange(/* name */ "NAME_VISIBLE", !nameVisible, nameVisible);
        }
    };
    /**
     * Returns the distance along x axis applied to piece abscissa to display piece name.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getNameXOffset = function () {
        return this.nameXOffset;
    };
    /**
     * Sets the distance along x axis applied to piece abscissa to display piece name.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} nameXOffset
     */
    HomePieceOfFurniture.prototype.setNameXOffset = function (nameXOffset) {
        if (nameXOffset !== this.nameXOffset) {
            var oldNameXOffset = this.nameXOffset;
            this.nameXOffset = nameXOffset;
            this.firePropertyChange(/* name */ "NAME_X_OFFSET", oldNameXOffset, nameXOffset);
        }
    };
    /**
     * Returns the distance along y axis applied to piece ordinate
     * to display piece name.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getNameYOffset = function () {
        return this.nameYOffset;
    };
    /**
     * Sets the distance along y axis applied to piece ordinate to display piece name.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} nameYOffset
     */
    HomePieceOfFurniture.prototype.setNameYOffset = function (nameYOffset) {
        if (nameYOffset !== this.nameYOffset) {
            var oldNameYOffset = this.nameYOffset;
            this.nameYOffset = nameYOffset;
            this.firePropertyChange(/* name */ "NAME_Y_OFFSET", oldNameYOffset, nameYOffset);
        }
    };
    /**
     * Returns the text style used to display piece name.
     * @return {TextStyle}
     */
    HomePieceOfFurniture.prototype.getNameStyle = function () {
        return this.nameStyle;
    };
    /**
     * Sets the text style used to display piece name.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {TextStyle} nameStyle
     */
    HomePieceOfFurniture.prototype.setNameStyle = function (nameStyle) {
        if (nameStyle !== this.nameStyle) {
            var oldNameStyle = this.nameStyle;
            this.nameStyle = nameStyle;
            this.firePropertyChange(/* name */ "NAME_STYLE", oldNameStyle, nameStyle);
        }
    };
    /**
     * Returns the angle in radians used to display the piece name.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getNameAngle = function () {
        return this.nameAngle;
    };
    /**
     * Sets the angle in radians used to display the piece name. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} nameAngle
     */
    HomePieceOfFurniture.prototype.setNameAngle = function (nameAngle) {
        nameAngle = ((nameAngle % HomePieceOfFurniture.TWICE_PI_$LI$() + HomePieceOfFurniture.TWICE_PI_$LI$()) % HomePieceOfFurniture.TWICE_PI_$LI$());
        if (nameAngle !== this.nameAngle) {
            var oldNameAngle = this.nameAngle;
            this.nameAngle = nameAngle;
            this.firePropertyChange(/* name */ "NAME_ANGLE", oldNameAngle, nameAngle);
        }
    };
    /**
     * Returns the description of this piece of furniture.
     * The returned value may be <code>null</code>.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getDescription = function () {
        return this.description;
    };
    /**
     * Sets the description of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {string} description
     */
    HomePieceOfFurniture.prototype.setDescription = function (description) {
        if (description !== this.description && (description == null || !(description === this.description))) {
            var oldDescription = this.description;
            this.description = description;
            this.firePropertyChange(/* name */ "DESCRIPTION", oldDescription, description);
        }
    };
    /**
     * Returns the additional information associated to this piece, or <code>null</code>.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getInformation = function () {
        return this.information;
    };
    /**
     * Sets the additional information associated to this piece . Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {string} information
     */
    HomePieceOfFurniture.prototype.setInformation = function (information) {
        if (information !== this.information && (information == null || !(information === this.information))) {
            var oldInformation = this.information;
            this.information = information;
            this.firePropertyChange(/* name */ "INFORMATION", oldInformation, information);
        }
    };
    /**
     * Returns the depth of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getDepth = function () {
        return this.depth;
    };
    /**
     * Sets the depth of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @throws IllegalStateException if this piece of furniture isn't resizable
     * @param {number} depth
     */
    HomePieceOfFurniture.prototype.setDepth = function (depth) {
        if (this.isResizable()) {
            if (depth !== this.depth) {
                var oldDepth = this.depth;
                this.depth = depth;
                this.shapeCache = null;
                this.firePropertyChange(/* name */ "DEPTH", oldDepth, depth);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t resizable");
        }
    };
    /**
     * Returns the depth of this piece of furniture in the horizontal plan (after pitch or roll is applied to it).
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getDepthInPlan = function () {
        return this.depthInPlan;
    };
    /**
     * Sets the depth of this piece of furniture in the horizontal plan (after pitch or roll is applied to it).
     * listeners added to this piece will receive a change notification.
     * @param {number} depthInPlan
     */
    HomePieceOfFurniture.prototype.setDepthInPlan = function (depthInPlan) {
        if (depthInPlan !== this.depthInPlan) {
            var oldDepth = this.depthInPlan;
            this.depthInPlan = depthInPlan;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "DEPTH_IN_PLAN", oldDepth, depthInPlan);
        }
    };
    /**
     * Returns the height of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getHeight = function () {
        return this.height;
    };
    /**
     * Sets the height of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @throws IllegalStateException if this piece of furniture isn't resizable
     * @param {number} height
     */
    HomePieceOfFurniture.prototype.setHeight = function (height) {
        if (this.isResizable()) {
            if (height !== this.height) {
                var oldHeight = this.height;
                this.height = height;
                this.firePropertyChange(/* name */ "HEIGHT", oldHeight, height);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t resizable");
        }
    };
    /**
     * Returns the height of this piece of furniture from the horizontal plan (after pitch or roll is applied to it).
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getHeightInPlan = function () {
        return this.heightInPlan;
    };
    /**
     * Sets the height of this piece of furniture from the horizontal plan (after pitch or roll is applied to it).
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} heightInPlan
     */
    HomePieceOfFurniture.prototype.setHeightInPlan = function (heightInPlan) {
        if (heightInPlan !== this.heightInPlan) {
            var oldHeight = this.heightInPlan;
            this.heightInPlan = heightInPlan;
            this.firePropertyChange(/* name */ "HEIGHT_IN_PLAN", oldHeight, heightInPlan);
        }
    };
    /**
     * Returns the width of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getWidth = function () {
        return this.width;
    };
    /**
     * Sets the width of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @throws IllegalStateException if this piece of furniture isn't resizable
     * @param {number} width
     */
    HomePieceOfFurniture.prototype.setWidth = function (width) {
        if (this.isResizable()) {
            if (width !== this.width) {
                var oldWidth = this.width;
                this.width = width;
                this.shapeCache = null;
                this.firePropertyChange(/* name */ "WIDTH", oldWidth, width);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t resizable");
        }
    };
    /**
     * Returns the width of this piece of furniture in the horizontal plan (after pitch or roll is applied to it).
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getWidthInPlan = function () {
        return this.widthInPlan;
    };
    /**
     * Sets the width of this piece of furniture in the horizontal plan (after pitch or roll is applied to it).
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} widthInPlan
     */
    HomePieceOfFurniture.prototype.setWidthInPlan = function (widthInPlan) {
        if (widthInPlan !== this.widthInPlan) {
            var oldWidth = this.widthInPlan;
            this.widthInPlan = widthInPlan;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "WIDTH_IN_PLAN", oldWidth, widthInPlan);
        }
    };
    /**
     * Scales this piece of furniture with the given <code>scale</code>.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} scale
     */
    HomePieceOfFurniture.prototype.scale = function (scale) {
        this.setWidth(this.getWidth() * scale);
        this.setDepth(this.getDepth() * scale);
        this.setHeight(this.getHeight() * scale);
    };
    /**
     * Returns the elevation of the bottom of this piece of furniture on its level.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getElevation = function () {
        return this.elevation;
    };
    /**
     * Returns the elevation at which should be placed an object dropped on this piece.
     * @return {number} a percentage of the height of this piece. A negative value means that the piece
     * should be ignored when an object is dropped on it.
     */
    HomePieceOfFurniture.prototype.getDropOnTopElevation = function () {
        return this.dropOnTopElevation;
    };
    /**
     * Returns the elevation of the bottom of this piece of furniture
     * from the ground according to the elevation of its level.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getGroundElevation = function () {
        if (this.level != null) {
            return this.elevation + this.level.getElevation();
        }
        else {
            return this.elevation;
        }
    };
    /**
     * Sets the elevation of this piece of furniture on its level. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} elevation
     */
    HomePieceOfFurniture.prototype.setElevation = function (elevation) {
        if (elevation !== this.elevation) {
            var oldElevation = this.elevation;
            this.elevation = elevation;
            this.firePropertyChange(/* name */ "ELEVATION", oldElevation, elevation);
        }
    };
    /**
     * Returns <code>true</code> if this piece of furniture is movable.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isMovable = function () {
        return this.movable;
    };
    /**
     * Sets whether this piece is movable or not.
     * @param {boolean} movable
     */
    HomePieceOfFurniture.prototype.setMovable = function (movable) {
        if (movable !== this.movable) {
            this.movable = movable;
            this.firePropertyChange(/* name */ "MOVABLE", !movable, movable);
        }
    };
    /**
     * Returns <code>true</code> if this piece of furniture is a door or a window.
     * As this method existed before {@linkplain HomeDoorOrWindow HomeDoorOrWindow} class,
     * you shouldn't rely on the value returned by this method to guess if a piece
     * is an instance of <code>DoorOrWindow</code> class.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isDoorOrWindow = function () {
        return this.doorOrWindow;
    };
    /**
     * Returns the icon of this piece of furniture.
     * @return {Object}
     */
    HomePieceOfFurniture.prototype.getIcon = function () {
        return this.icon;
    };
    /**
     * Sets the icon of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {Object} icon
     */
    HomePieceOfFurniture.prototype.setIcon = function (icon) {
        if (icon !== this.icon && (icon == null || !(function (o1, o2) { if (o1 && o1.equals) {
            return o1.equals(o2);
        }
        else {
            return o1 === o2;
        } })(icon, this.icon))) {
            var oldIcon = this.icon;
            this.icon = icon;
            this.firePropertyChange(/* name */ "ICON", oldIcon, icon);
        }
    };
    /**
     * Returns the icon of this piece of furniture displayed in plan or <code>null</code>.
     * @return {Object}
     */
    HomePieceOfFurniture.prototype.getPlanIcon = function () {
        return this.planIcon;
    };
    /**
     * Sets the plan icon of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {Object} planIcon
     */
    HomePieceOfFurniture.prototype.setPlanIcon = function (planIcon) {
        if (planIcon !== this.planIcon && (planIcon == null || !(function (o1, o2) { if (o1 && o1.equals) {
            return o1.equals(o2);
        }
        else {
            return o1 === o2;
        } })(planIcon, this.planIcon))) {
            var oldPlanIcon = this.planIcon;
            this.planIcon = planIcon;
            this.firePropertyChange(/* name */ "PLAN_ICON", oldPlanIcon, planIcon);
        }
    };
    /**
     * Returns the 3D model of this piece of furniture.
     * @return {Object}
     */
    HomePieceOfFurniture.prototype.getModel = function () {
        return this.model;
    };
    /**
     * Sets the 3D model of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {Object} model
     */
    HomePieceOfFurniture.prototype.setModel = function (model) {
        if (model !== this.model && (model == null || !(function (o1, o2) { if (o1 && o1.equals) {
            return o1.equals(o2);
        }
        else {
            return o1 === o2;
        } })(model, this.model))) {
            var oldModel = this.model;
            this.model = model;
            this.firePropertyChange(/* name */ "MODEL", oldModel, model);
        }
    };
    /**
     * Returns the size of the 3D model of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getModelSize = function () {
        return this.modelSize;
    };
    /**
     * Sets the size of the 3D model of this piece of furniture.
     * This method should be called only to update a piece created with an older version.
     * @param {number} modelSize
     */
    HomePieceOfFurniture.prototype.setModelSize = function (modelSize) {
        this.modelSize = modelSize;
    };
    /**
     * Returns the materials applied to the 3D model of this piece of furniture.
     * @return {com.eteks.sweethome3d.model.HomeMaterial[]} the materials of the 3D model or <code>null</code>
     * if the individual materials of the 3D model are not modified.
     */
    HomePieceOfFurniture.prototype.getModelMaterials = function () {
        if (this.modelMaterials != null) {
            return /* clone */ this.modelMaterials.slice(0);
        }
        else {
            return null;
        }
    };
    /**
     * Sets the materials of the 3D model of this piece of furniture.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {com.eteks.sweethome3d.model.HomeMaterial[]} modelMaterials the materials of the 3D model or <code>null</code> if they shouldn't be changed
     * @throws IllegalStateException if this piece of furniture isn't texturable
     */
    HomePieceOfFurniture.prototype.setModelMaterials = function (modelMaterials) {
        if (this.isTexturable()) {
            if (!(function (a1, a2) { if (a1 == null && a2 == null)
                return true; if (a1 == null || a2 == null)
                return false; if (a1.length != a2.length)
                return false; for (var i = 0; i < a1.length; i++) {
                if (a1[i] != a2[i])
                    return false;
            } return true; })(modelMaterials, this.modelMaterials)) {
                var oldModelMaterials = this.modelMaterials;
                this.modelMaterials = modelMaterials != null ? /* clone */ modelMaterials.slice(0) : null;
                this.firePropertyChange(/* name */ "MODEL_MATERIALS", oldModelMaterials, modelMaterials);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t texturable");
        }
    };
    /**
     * Returns the color of this piece of furniture.
     * @return {number} the color of the piece as RGB code or <code>null</code> if piece color is unchanged.
     */
    HomePieceOfFurniture.prototype.getColor = function () {
        return this.color;
    };
    /**
     * Sets the color of this piece of furniture.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} color the color of this piece of furniture or <code>null</code> if piece color is the default one
     * @throws IllegalStateException if this piece of furniture isn't texturable
     */
    HomePieceOfFurniture.prototype.setColor = function (color) {
        if (this.isTexturable()) {
            if (color !== this.color && (color == null || !(color === this.color))) {
                var oldColor = this.color;
                this.color = color;
                this.firePropertyChange(/* name */ "COLOR", oldColor, color);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t texturable");
        }
    };
    /**
     * Returns the texture of this piece of furniture.
     * @return {HomeTexture} the texture of the piece or <code>null</code> if piece texture is unchanged.
     */
    HomePieceOfFurniture.prototype.getTexture = function () {
        return this.texture;
    };
    /**
     * Sets the texture of this piece of furniture.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {HomeTexture} texture the texture of this piece of furniture or <code>null</code> if piece texture is the default one
     * @throws IllegalStateException if this piece of furniture isn't texturable
     */
    HomePieceOfFurniture.prototype.setTexture = function (texture) {
        if (this.isTexturable()) {
            if (texture !== this.texture && (texture == null || !texture.equals(this.texture))) {
                var oldTexture = this.texture;
                this.texture = texture;
                this.firePropertyChange(/* name */ "TEXTURE", oldTexture, texture);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t texturable");
        }
    };
    /**
     * Returns the shininess of this piece of furniture.
     * @return {number} a value between 0 (matt) and 1 (very shiny) or <code>null</code> if piece shininess is unchanged.
     */
    HomePieceOfFurniture.prototype.getShininess = function () {
        return this.shininess;
    };
    /**
     * Sets the shininess of this piece of furniture or <code>null</code> if piece shininess is unchanged.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @throws IllegalStateException if this piece of furniture isn't texturable
     * @param {number} shininess
     */
    HomePieceOfFurniture.prototype.setShininess = function (shininess) {
        if (this.isTexturable()) {
            if (shininess !== this.shininess && (shininess == null || !(shininess === this.shininess))) {
                var oldShininess = this.shininess;
                this.shininess = shininess;
                this.firePropertyChange(/* name */ "SHININESS", oldShininess, shininess);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t texturable");
        }
    };
    /**
     * Returns <code>true</code> if this piece is resizable.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isResizable = function () {
        return this.resizable;
    };
    /**
     * Returns <code>true</code> if this piece is deformable.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isDeformable = function () {
        return this.deformable;
    };
    /**
     * Returns <code>true</code> if this piece is deformable.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isWidthDepthDeformable = function () {
        return this.isDeformable();
    };
    /**
     * Returns <code>false</code> if this piece should always keep the same color or texture.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isTexturable = function () {
        return this.texturable;
    };
    /**
     * Returns <code>false</code> if this piece should not rotate around an horizontal axis.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isHorizontallyRotatable = function () {
        return this.horizontallyRotatable;
    };
    /**
     * Returns the price of this piece of furniture or <code>null</code>.
     * @return {Big}
     */
    HomePieceOfFurniture.prototype.getPrice = function () {
        return this.price;
    };
    /**
     * Sets the price of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {Big} price
     */
    HomePieceOfFurniture.prototype.setPrice = function (price) {
        if (price !== this.price && (price == null || !((this.price) != null ? price.eq(this.price) : (price === (this.price))))) {
            var oldPrice = this.price;
            this.price = price;
            this.firePropertyChange(/* name */ "PRICE", oldPrice, price);
        }
    };
    /**
     * Returns the Value Added Tax percentage applied to the price of this piece of furniture.
     * @return {Big}
     */
    HomePieceOfFurniture.prototype.getValueAddedTaxPercentage = function () {
        return this.valueAddedTaxPercentage;
    };
    /**
     * Sets the Value Added Tax percentage applied to prices.
     * @param {Big} valueAddedTaxPercentage
     */
    HomePieceOfFurniture.prototype.setValueAddedTaxPercentage = function (valueAddedTaxPercentage) {
        if (valueAddedTaxPercentage !== this.valueAddedTaxPercentage && (valueAddedTaxPercentage == null || !((this.valueAddedTaxPercentage) != null ? valueAddedTaxPercentage.eq(this.valueAddedTaxPercentage) : (valueAddedTaxPercentage === (this.valueAddedTaxPercentage))))) {
            var oldValueAddedTaxPercentage = this.valueAddedTaxPercentage;
            this.valueAddedTaxPercentage = valueAddedTaxPercentage;
            this.firePropertyChange(/* name */ "VALUE_ADDED_TAX_PERCENTAGE", oldValueAddedTaxPercentage, valueAddedTaxPercentage);
        }
    };
    /**
     * Returns the Value Added Tax applied to the price of this piece of furniture.
     * @return {Big}
     */
    HomePieceOfFurniture.prototype.getValueAddedTax = function () {
        if (this.price != null && this.valueAddedTaxPercentage != null) {
            return /* setScale */ /* multiply */ this.price.times(this.valueAddedTaxPercentage).round(/* scale */ 2);
        }
        else {
            return null;
        }
    };
    /**
     * Returns the price of this piece of furniture, Value Added Tax included.
     * @return {Big}
     */
    HomePieceOfFurniture.prototype.getPriceValueAddedTaxIncluded = function () {
        if (this.price != null && this.valueAddedTaxPercentage != null) {
            return /* add */ this.price.plus(this.getValueAddedTax());
        }
        else {
            return this.price;
        }
    };
    /**
     * Returns the price currency, noted with ISO 4217 code, or <code>null</code>
     * if it has no price or default currency should be used.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getCurrency = function () {
        return this.currency;
    };
    /**
     * Sets the price currency, noted with ISO 4217 code. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {string} currency
     */
    HomePieceOfFurniture.prototype.setCurrency = function (currency) {
        if (currency !== this.currency && (currency == null || !(currency === this.currency))) {
            var oldCurrency = this.currency;
            this.currency = currency;
            this.firePropertyChange(/* name */ "CURRENCY", oldCurrency, currency);
        }
    };
    /**
     * Returns <code>true</code> if this piece of furniture is visible.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isVisible = function () {
        return this.visible;
    };
    /**
     * Sets whether this piece of furniture is visible or not. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {boolean} visible
     */
    HomePieceOfFurniture.prototype.setVisible = function (visible) {
        if (visible !== this.visible) {
            this.visible = visible;
            this.firePropertyChange(/* name */ "VISIBLE", !visible, visible);
        }
    };
    /**
     * Returns the abscissa of the center of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getX = function () {
        return this.x;
    };
    /**
     * Sets the abscissa of the center of this piece. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} x
     */
    HomePieceOfFurniture.prototype.setX = function (x) {
        if (x !== this.x) {
            var oldX = this.x;
            this.x = x;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "X", oldX, x);
        }
    };
    /**
     * Returns the ordinate of the center of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getY = function () {
        return this.y;
    };
    /**
     * Sets the ordinate of the center of this piece. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} y
     */
    HomePieceOfFurniture.prototype.setY = function (y) {
        if (y !== this.y) {
            var oldY = this.y;
            this.y = y;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "Y", oldY, y);
        }
    };
    /**
     * Returns the angle in radians of this piece around vertical axis.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getAngle = function () {
        return this.angle;
    };
    /**
     * Sets the angle of this piece around vertical axis. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {number} angle
     */
    HomePieceOfFurniture.prototype.setAngle = function (angle) {
        angle = ((angle % HomePieceOfFurniture.TWICE_PI_$LI$() + HomePieceOfFurniture.TWICE_PI_$LI$()) % HomePieceOfFurniture.TWICE_PI_$LI$());
        if (angle !== this.angle) {
            var oldAngle = this.angle;
            this.angle = angle;
            this.shapeCache = null;
            this.firePropertyChange(/* name */ "ANGLE", oldAngle, angle);
        }
    };
    /**
     * Returns the pitch angle in radians of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getPitch = function () {
        return this.pitch;
    };
    /**
     * Sets the pitch angle in radians of this piece and notifies listeners of this change.
     * Pitch axis is horizontal lateral (or transverse) axis.
     * @param {number} pitch
     */
    HomePieceOfFurniture.prototype.setPitch = function (pitch) {
        if (this.isHorizontallyRotatable()) {
            pitch = ((pitch % HomePieceOfFurniture.TWICE_PI_$LI$() + HomePieceOfFurniture.TWICE_PI_$LI$()) % HomePieceOfFurniture.TWICE_PI_$LI$());
            if (pitch !== this.pitch) {
                var oldPitch = this.pitch;
                this.pitch = pitch;
                this.shapeCache = null;
                this.firePropertyChange(/* name */ "PITCH", oldPitch, pitch);
            }
        }
        else {
            throw new IllegalStateException("Piece can\'t be rotated around an horizontal axis");
        }
    };
    /**
     * Returns the roll angle in radians of this piece of furniture.
     * @return {number}
     */
    HomePieceOfFurniture.prototype.getRoll = function () {
        return this.roll;
    };
    /**
     * Sets the roll angle in radians of this piece and notifies listeners of this change.
     * Roll axis is horizontal longitudinal axis.
     * @param {number} roll
     */
    HomePieceOfFurniture.prototype.setRoll = function (roll) {
        if (this.isHorizontallyRotatable()) {
            roll = ((roll % HomePieceOfFurniture.TWICE_PI_$LI$() + HomePieceOfFurniture.TWICE_PI_$LI$()) % HomePieceOfFurniture.TWICE_PI_$LI$());
            if (roll !== this.roll) {
                var oldRoll = this.roll;
                this.roll = roll;
                this.shapeCache = null;
                this.firePropertyChange(/* name */ "ROLL", oldRoll, roll);
            }
        }
        else {
            throw new IllegalStateException("Piece can\'t be rotated around an horizontal axis");
        }
    };
    /**
     * Returns <code>true</code> if the pitch or roll angle of this piece is different from 0.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isHorizontallyRotated = function () {
        return this.roll !== 0 || this.pitch !== 0;
    };
    /**
     * Returns the rotation 3 by 3 matrix of this piece of furniture that ensures
     * its model is correctly oriented.
     * @return {float[][]}
     */
    HomePieceOfFurniture.prototype.getModelRotation = function () {
        return CatalogPieceOfFurniture.deepClone(this.modelRotation);
    };
    /**
     * Sets the rotation 3 by 3 matrix of this piece of furniture and notifies listeners of this change.
     * @param {float[][]} modelRotation
     */
    HomePieceOfFurniture.prototype.setModelRotation = function (modelRotation) {
        if (!(JSON.stringify(modelRotation) === JSON.stringify(this.modelRotation))) {
            var oldModelRotation = CatalogPieceOfFurniture.deepClone(this.modelRotation);
            this.modelRotation = CatalogPieceOfFurniture.deepClone(modelRotation);
            this.firePropertyChange(/* name */ "MODEL_ROTATION", oldModelRotation, modelRotation);
        }
    };
    /**
     * Returns <code>true</code> if the model of this piece should be mirrored.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isModelMirrored = function () {
        return this.modelMirrored;
    };
    /**
     * Sets whether the model of this piece of furniture is mirrored or not. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @throws IllegalStateException if this piece of furniture isn't resizable
     * @param {boolean} modelMirrored
     */
    HomePieceOfFurniture.prototype.setModelMirrored = function (modelMirrored) {
        if (this.isResizable()) {
            if (modelMirrored !== this.modelMirrored) {
                this.modelMirrored = modelMirrored;
                this.firePropertyChange(/* name */ "MODEL_MIRRORED", !modelMirrored, modelMirrored);
            }
        }
        else {
            throw new IllegalStateException("Piece isn\'t resizable");
        }
    };
    /**
     * Returns <code>true</code> if model center should be always centered at the origin
     * when model rotation isn't <code>null</code>.
     * @return {boolean} <code>false</code> by default if version < 5.5
     */
    HomePieceOfFurniture.prototype.isModelCenteredAtOrigin = function () {
        return this.modelCenteredAtOrigin;
    };
    /**
     * Sets whether model center should be always centered at the origin
     * when model rotation isn't <code>null</code>.
     * This method should be called only to keep unchanged the (wrong) location
     * of a rotated model created with version < 5.5.
     * @param {boolean} modelCenteredAtOrigin
     */
    HomePieceOfFurniture.prototype.setModelCenteredAtOrigin = function (modelCenteredAtOrigin) {
        this.modelCenteredAtOrigin = modelCenteredAtOrigin;
    };
    /**
     * Returns <code>true</code> if the back face of the piece of furniture
     * model should be displayed.
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isBackFaceShown = function () {
        return this.backFaceShown;
    };
    /**
     * Sets whether the back face of the piece of furniture model should be displayed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {boolean} backFaceShown
     */
    HomePieceOfFurniture.prototype.setBackFaceShown = function (backFaceShown) {
        if (backFaceShown !== this.backFaceShown) {
            this.backFaceShown = backFaceShown;
            this.firePropertyChange(/* name */ "BACK_FACE_SHOWN", !backFaceShown, backFaceShown);
        }
    };
    /**
     * Returns the transformations applied to the 3D model of this piece of furniture.
     * @return {com.eteks.sweethome3d.model.Transformation[]} the transformations of the 3D model or <code>null</code>
     * if the 3D model is not transformed.
     */
    HomePieceOfFurniture.prototype.getModelTransformations = function () {
        if (this.modelTransformations != null) {
            return /* clone */ this.modelTransformations.slice(0);
        }
        else {
            return null;
        }
    };
    /**
     * Sets the transformations applied to some parts of the 3D model of this piece of furniture.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {com.eteks.sweethome3d.model.Transformation[]} modelTransformations the transformations of the 3D model or <code>null</code> if no transformation shouldn't be applied
     */
    HomePieceOfFurniture.prototype.setModelTransformations = function (modelTransformations) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(modelTransformations, this.modelTransformations)) {
            var oldModelTransformations = this.modelTransformations;
            this.modelTransformations = modelTransformations != null && modelTransformations.length > 0 ? /* clone */ modelTransformations.slice(0) : null;
            this.firePropertyChange(/* name */ "MODEL_MATERIALS", oldModelTransformations, modelTransformations);
        }
    };
    /**
     * Returns the shape used to cut out upper levels when they intersect with the piece
     * like a staircase.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getStaircaseCutOutShape = function () {
        return this.staircaseCutOutShape;
    };
    /**
     * Sets the shape used to cut out upper levels when they intersect with the piece
     * like a staircase. Once this piece is updated, listeners added to this piece
     * will receive a change notification.
     * @param {string} staircaseCutOutShape
     */
    HomePieceOfFurniture.prototype.setStaircaseCutOutShape = function (staircaseCutOutShape) {
        if (staircaseCutOutShape !== this.staircaseCutOutShape && (staircaseCutOutShape == null || !(staircaseCutOutShape === this.staircaseCutOutShape))) {
            var oldCutOutShape = this.staircaseCutOutShape;
            this.staircaseCutOutShape = staircaseCutOutShape;
            this.firePropertyChange(/* name */ "STAIRCASE_CUT_OUT_SHAPE", oldCutOutShape, staircaseCutOutShape);
        }
    };
    /**
     * Returns the creator of this piece.
     * @return {string}
     */
    HomePieceOfFurniture.prototype.getCreator = function () {
        return this.creator;
    };
    /**
     * Sets the creator of this piece. Once this piece is updated, listeners added to this piece
     * will receive a change notification.
     * @param {string} creator
     */
    HomePieceOfFurniture.prototype.setCreator = function (creator) {
        if (creator !== this.creator && (creator == null || !(creator === this.creator))) {
            var oldCreator = this.creator;
            this.creator = creator;
            this.firePropertyChange(/* name */ "CREATOR", oldCreator, creator);
        }
    };
    /**
     * Returns the level which this piece belongs to.
     * @return {Level}
     */
    HomePieceOfFurniture.prototype.getLevel = function () {
        return this.level;
    };
    /**
     * Sets the level of this piece of furniture. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {Level} level
     */
    HomePieceOfFurniture.prototype.setLevel = function (level) {
        if (level !== this.level) {
            var oldLevel = this.level;
            this.level = level;
            this.firePropertyChange(/* name */ "LEVEL", oldLevel, level);
        }
    };
    /**
     * Returns <code>true</code> if this piece is at the given <code>level</code>
     * or at a level with the same elevation and a smaller elevation index
     * or if the elevation of its highest point is higher than <code>level</code> elevation.
     * @param {Level} level
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isAtLevel = function (level) {
        if (this.level === level) {
            return true;
        }
        else if (this.level != null && level != null) {
            var pieceLevelElevation = this.level.getElevation();
            var levelElevation = level.getElevation();
            return pieceLevelElevation === levelElevation && this.level.getElevationIndex() < level.getElevationIndex() || pieceLevelElevation < levelElevation && this.isTopAtLevel(level);
        }
        else {
            return false;
        }
    };
    /**
     * Returns <code>true</code> if the top of this piece is visible at the given level.
     * @param {Level} level
     * @return {boolean}
     * @private
     */
    HomePieceOfFurniture.prototype.isTopAtLevel = function (level) {
        var topElevation = this.level.getElevation() + this.elevation + this.heightInPlan;
        if (this.staircaseCutOutShape != null) {
            return topElevation >= level.getElevation();
        }
        else {
            return topElevation > level.getElevation();
        }
    };
    /**
     * Returns the points of each corner of a piece.
     * @return {float[][]} an array of the 4 (x,y) coordinates of the piece corners.
     */
    HomePieceOfFurniture.prototype.getPoints = function () {
        var piecePoints = (function (dims) { var allocate = function (dims) { if (dims.length === 0) {
            return 0;
        }
        else {
            var array = [];
            for (var i = 0; i < dims[0]; i++) {
                array.push(allocate(dims.slice(1)));
            }
            return array;
        } }; return allocate(dims); })([4, 2]);
        var it = this.getShape().getPathIterator(null);
        for (var i = 0; i < piecePoints.length; i++) {
            {
                it.currentSegment(piecePoints[i]);
                it.next();
            }
            ;
        }
        return piecePoints;
    };
    /**
     * Returns <code>true</code> if this piece intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return this.getShape().intersects(rectangle);
    };
    /**
     * Returns <code>true</code> if this piece contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.containsPoint = function (x, y, margin) {
        if (margin === 0) {
            return this.getShape().contains(x, y);
        }
        else {
            return this.getShape().intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Returns <code>true</code> if one of the corner of this piece is
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isPointAt = function (x, y, margin) {
        {
            var array = this.getPoints();
            for (var index = 0; index < array.length; index++) {
                var point = array[index];
                {
                    if (Math.abs(x - point[0]) <= margin && Math.abs(y - point[1]) <= margin) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    /**
     * Returns <code>true</code> if the top left point of this piece is
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>,
     * and if that point is closer to top left point than to top right and bottom left points.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isTopLeftPointAt = function (x, y, margin) {
        var points = this.getPoints();
        var distanceSquareToTopLeftPoint = java.awt.geom.Point2D.distanceSq(x, y, points[0][0], points[0][1]);
        return distanceSquareToTopLeftPoint <= margin * margin && distanceSquareToTopLeftPoint < java.awt.geom.Point2D.distanceSq(x, y, points[1][0], points[1][1]) && distanceSquareToTopLeftPoint < java.awt.geom.Point2D.distanceSq(x, y, points[3][0], points[3][1]);
    };
    /**
     * Returns <code>true</code> if the top right point of this piece is
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>,
     * and if that point is closer to top right point than to top left and bottom right points.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isTopRightPointAt = function (x, y, margin) {
        var points = this.getPoints();
        var distanceSquareToTopRightPoint = java.awt.geom.Point2D.distanceSq(x, y, points[1][0], points[1][1]);
        return distanceSquareToTopRightPoint <= margin * margin && distanceSquareToTopRightPoint < java.awt.geom.Point2D.distanceSq(x, y, points[0][0], points[0][1]) && distanceSquareToTopRightPoint < java.awt.geom.Point2D.distanceSq(x, y, points[2][0], points[2][1]);
    };
    /**
     * Returns <code>true</code> if the bottom left point of this piece is
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>,
     * and if that point is closer to bottom left point than to top left and bottom right points.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isBottomLeftPointAt = function (x, y, margin) {
        var points = this.getPoints();
        var distanceSquareToBottomLeftPoint = java.awt.geom.Point2D.distanceSq(x, y, points[3][0], points[3][1]);
        return distanceSquareToBottomLeftPoint <= margin * margin && distanceSquareToBottomLeftPoint < java.awt.geom.Point2D.distanceSq(x, y, points[0][0], points[0][1]) && distanceSquareToBottomLeftPoint < java.awt.geom.Point2D.distanceSq(x, y, points[2][0], points[2][1]);
    };
    /**
     * Returns <code>true</code> if the bottom right point of this piece is
     * the point at (<code>x</code>, <code>y</code>) with a given <code>margin</code>,
     * and if that point is closer to top left point than to top right and bottom left points.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isBottomRightPointAt = function (x, y, margin) {
        var points = this.getPoints();
        var distanceSquareToBottomRightPoint = java.awt.geom.Point2D.distanceSq(x, y, points[2][0], points[2][1]);
        return distanceSquareToBottomRightPoint <= margin * margin && distanceSquareToBottomRightPoint < java.awt.geom.Point2D.distanceSq(x, y, points[1][0], points[1][1]) && distanceSquareToBottomRightPoint < java.awt.geom.Point2D.distanceSq(x, y, points[3][0], points[3][1]);
    };
    /**
     * Returns <code>true</code> if the center point at which is displayed the name
     * of this piece is equal to the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isNameCenterPointAt = function (x, y, margin) {
        return Math.abs(x - this.getX() - this.getNameXOffset()) <= margin && Math.abs(y - this.getY() - this.getNameYOffset()) <= margin;
    };
    /**
     * Returns <code>true</code> if the front side of this piece is parallel to the given <code>wall</code>
     * with a margin.
     * @param {Wall} wall
     * @return {boolean}
     */
    HomePieceOfFurniture.prototype.isParallelToWall = function (wall) {
        if (wall.getArcExtent() == null) {
            var deltaY = wall.getYEnd() - wall.getYStart();
            var deltaX = wall.getXEnd() - wall.getXStart();
            if (deltaX === 0 && deltaY === 0) {
                return false;
            }
            else {
                var wallAngle = Math.atan2(deltaY, deltaX);
                var pieceWallAngle = Math.abs(wallAngle - this.getAngle()) % Math.PI;
                return pieceWallAngle <= HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN_$LI$() || (Math.PI - pieceWallAngle) <= HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN_$LI$();
            }
        }
        else {
            var tangentAngle = Math.PI / 2 + Math.atan2(wall.getYArcCircleCenter() - this.getY(), wall.getXArcCircleCenter() - this.getX());
            var pieceWallAngle = Math.abs(tangentAngle - this.getAngle()) % Math.PI;
            return pieceWallAngle <= HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN_$LI$() || (Math.PI - pieceWallAngle) <= HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN_$LI$();
        }
    };
    /**
     * Returns the shape matching this piece in the horizontal plan.
     * @return {Object}
     * @private
     */
    HomePieceOfFurniture.prototype.getShape = function () {
        if (this.shapeCache == null) {
            var pieceRectangle = new java.awt.geom.Rectangle2D.Float(this.getX() - this.getWidthInPlan() / 2, this.getY() - this.getDepthInPlan() / 2, this.getWidthInPlan(), this.getDepthInPlan());
            var rotation = java.awt.geom.AffineTransform.getRotateInstance(this.getAngle(), this.getX(), this.getY());
            var it = pieceRectangle.getPathIterator(rotation);
            var pieceShape = new java.awt.geom.GeneralPath();
            pieceShape.append(it, false);
            this.shapeCache = pieceShape;
        }
        return this.shapeCache;
    };
    /**
     * Moves this piece of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    HomePieceOfFurniture.prototype.move = function (dx, dy) {
        this.setX(this.getX() + dx);
        this.setY(this.getY() + dy);
    };
    /**
     * Returns a clone of this piece.
     * @return {HomePieceOfFurniture}
     */
    HomePieceOfFurniture.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_8 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_8[p] = o[p];
            }
            return clone_8;
        } })(this);
        clone.level = null;
        return clone;
    };
    /**
     * Returns a comparator that compares furniture on a given <code>property</code> in ascending order.
     * @param {string} property
     * @return {Object}
     */
    HomePieceOfFurniture.getFurnitureComparator = function (property) {
        return ((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (arg0, arg1) { return (funcInst['compare'] ? funcInst['compare'] : funcInst).call(funcInst, arg0, arg1); }; })(/* get */ (function (m, k) { if (m.entries == null)
            m.entries = []; for (var i = 0; i < m.entries.length; i++)
            if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                return m.entries[i].value;
            } return null; })(HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$(), property)));
    };
    HomePieceOfFurniture.__static_initialized = false;
    return HomePieceOfFurniture;
}(HomeObject));
HomePieceOfFurniture["__class"] = "com.eteks.sweethome3d.model.HomePieceOfFurniture";
HomePieceOfFurniture["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.PieceOfFurniture", "com.eteks.sweethome3d.model.Elevatable"];
(function (HomePieceOfFurniture) {
    var HomePieceOfFurniture$0 = /** @class */ (function () {
        function HomePieceOfFurniture$0(collator) {
            this.collator = collator;
        }
        HomePieceOfFurniture$0.prototype.compare = function (piece1, piece2) {
            if (piece1.catalogId === piece2.catalogId) {
                return 0;
            }
            else if (piece1.catalogId == null) {
                return -1;
            }
            else if (piece2.catalogId == null) {
                return 1;
            }
            else {
                return this.collator.compare(piece1.catalogId, piece2.catalogId);
            }
        };
        return HomePieceOfFurniture$0;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$0 = HomePieceOfFurniture$0;
    var HomePieceOfFurniture$1 = /** @class */ (function () {
        function HomePieceOfFurniture$1(collator) {
            this.collator = collator;
        }
        HomePieceOfFurniture$1.prototype.compare = function (piece1, piece2) {
            if (piece1.name === piece2.name) {
                return 0;
            }
            else if (piece1.name == null) {
                return -1;
            }
            else if (piece2.name == null) {
                return 1;
            }
            else {
                return this.collator.compare(piece1.name, piece2.name);
            }
        };
        return HomePieceOfFurniture$1;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$1 = HomePieceOfFurniture$1;
    var HomePieceOfFurniture$2 = /** @class */ (function () {
        function HomePieceOfFurniture$2() {
        }
        HomePieceOfFurniture$2.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.width, piece2.width);
        };
        return HomePieceOfFurniture$2;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$2 = HomePieceOfFurniture$2;
    var HomePieceOfFurniture$3 = /** @class */ (function () {
        function HomePieceOfFurniture$3() {
        }
        HomePieceOfFurniture$3.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.height, piece2.height);
        };
        return HomePieceOfFurniture$3;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$3 = HomePieceOfFurniture$3;
    var HomePieceOfFurniture$4 = /** @class */ (function () {
        function HomePieceOfFurniture$4() {
        }
        HomePieceOfFurniture$4.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.depth, piece2.depth);
        };
        return HomePieceOfFurniture$4;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$4 = HomePieceOfFurniture$4;
    var HomePieceOfFurniture$5 = /** @class */ (function () {
        function HomePieceOfFurniture$5() {
        }
        HomePieceOfFurniture$5.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$boolean$boolean(piece1.movable, piece2.movable);
        };
        return HomePieceOfFurniture$5;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$5 = HomePieceOfFurniture$5;
    var HomePieceOfFurniture$6 = /** @class */ (function () {
        function HomePieceOfFurniture$6() {
        }
        HomePieceOfFurniture$6.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$boolean$boolean(piece1.doorOrWindow, piece2.doorOrWindow);
        };
        return HomePieceOfFurniture$6;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$6 = HomePieceOfFurniture$6;
    var HomePieceOfFurniture$7 = /** @class */ (function () {
        function HomePieceOfFurniture$7() {
        }
        HomePieceOfFurniture$7.prototype.compare = function (piece1, piece2) {
            if (piece1.color === piece2.color) {
                return 0;
            }
            else if (piece1.color == null) {
                return -1;
            }
            else if (piece2.color == null) {
                return 1;
            }
            else {
                return piece1.color - piece2.color;
            }
        };
        return HomePieceOfFurniture$7;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$7 = HomePieceOfFurniture$7;
    var HomePieceOfFurniture$8 = /** @class */ (function () {
        function HomePieceOfFurniture$8(collator) {
            this.collator = collator;
        }
        HomePieceOfFurniture$8.prototype.compare = function (piece1, piece2) {
            if (piece1.texture === piece2.texture) {
                return 0;
            }
            else if (piece1.texture == null) {
                return -1;
            }
            else if (piece2.texture == null) {
                return 1;
            }
            else {
                return this.collator.compare(piece1.texture.getName(), piece2.texture.getName());
            }
        };
        return HomePieceOfFurniture$8;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$8 = HomePieceOfFurniture$8;
    var HomePieceOfFurniture$9 = /** @class */ (function () {
        function HomePieceOfFurniture$9() {
        }
        HomePieceOfFurniture$9.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$boolean$boolean(piece1.visible, piece2.visible);
        };
        return HomePieceOfFurniture$9;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$9 = HomePieceOfFurniture$9;
    var HomePieceOfFurniture$10 = /** @class */ (function () {
        function HomePieceOfFurniture$10() {
        }
        HomePieceOfFurniture$10.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.x, piece2.x);
        };
        return HomePieceOfFurniture$10;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$10 = HomePieceOfFurniture$10;
    var HomePieceOfFurniture$11 = /** @class */ (function () {
        function HomePieceOfFurniture$11() {
        }
        HomePieceOfFurniture$11.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.y, piece2.y);
        };
        return HomePieceOfFurniture$11;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$11 = HomePieceOfFurniture$11;
    var HomePieceOfFurniture$12 = /** @class */ (function () {
        function HomePieceOfFurniture$12() {
        }
        HomePieceOfFurniture$12.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.elevation, piece2.elevation);
        };
        return HomePieceOfFurniture$12;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$12 = HomePieceOfFurniture$12;
    var HomePieceOfFurniture$13 = /** @class */ (function () {
        function HomePieceOfFurniture$13() {
        }
        HomePieceOfFurniture$13.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$float$float(piece1.angle, piece2.angle);
        };
        return HomePieceOfFurniture$13;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$13 = HomePieceOfFurniture$13;
    var HomePieceOfFurniture$14 = /** @class */ (function () {
        function HomePieceOfFurniture$14() {
        }
        HomePieceOfFurniture$14.prototype.compare = function (piece1, piece2) {
            var piece1ModelSize = HomePieceOfFurniture.getComparableModelSize(piece1);
            var piece2ModelSize = HomePieceOfFurniture.getComparableModelSize(piece2);
            if (piece1ModelSize === piece2ModelSize) {
                return 0;
            }
            else if (piece1ModelSize == null) {
                return -1;
            }
            else if (piece2ModelSize == null) {
                return 1;
            }
            else {
                return piece1ModelSize < piece2ModelSize ? -1 : ( /* longValue */piece1ModelSize === /* longValue */ piece2ModelSize ? 0 : 1);
            }
        };
        return HomePieceOfFurniture$14;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$14 = HomePieceOfFurniture$14;
    var HomePieceOfFurniture$15 = /** @class */ (function () {
        function HomePieceOfFurniture$15(collator) {
            this.collator = collator;
        }
        HomePieceOfFurniture$15.prototype.compare = function (piece1, piece2) {
            if (piece1.creator === piece2.creator) {
                return 0;
            }
            else if (piece1.creator == null) {
                return -1;
            }
            else if (piece2.creator == null) {
                return 1;
            }
            else {
                return this.collator.compare(piece1.creator, piece2.creator);
            }
        };
        return HomePieceOfFurniture$15;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$15 = HomePieceOfFurniture$15;
    var HomePieceOfFurniture$16 = /** @class */ (function () {
        function HomePieceOfFurniture$16() {
        }
        HomePieceOfFurniture$16.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$com_eteks_sweethome3d_model_Level$com_eteks_sweethome3d_model_Level(piece1.getLevel(), piece2.getLevel());
        };
        return HomePieceOfFurniture$16;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$16 = HomePieceOfFurniture$16;
    var HomePieceOfFurniture$17 = /** @class */ (function () {
        function HomePieceOfFurniture$17() {
        }
        HomePieceOfFurniture$17.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$java_math_BigDecimal$java_math_BigDecimal(piece1.price, piece2.price);
        };
        return HomePieceOfFurniture$17;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$17 = HomePieceOfFurniture$17;
    var HomePieceOfFurniture$18 = /** @class */ (function () {
        function HomePieceOfFurniture$18() {
        }
        HomePieceOfFurniture$18.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$java_math_BigDecimal$java_math_BigDecimal(piece1.valueAddedTaxPercentage, piece2.valueAddedTaxPercentage);
        };
        return HomePieceOfFurniture$18;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$18 = HomePieceOfFurniture$18;
    var HomePieceOfFurniture$19 = /** @class */ (function () {
        function HomePieceOfFurniture$19() {
        }
        HomePieceOfFurniture$19.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$java_math_BigDecimal$java_math_BigDecimal(piece1.getValueAddedTax(), piece2.getValueAddedTax());
        };
        return HomePieceOfFurniture$19;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$19 = HomePieceOfFurniture$19;
    var HomePieceOfFurniture$20 = /** @class */ (function () {
        function HomePieceOfFurniture$20() {
        }
        HomePieceOfFurniture$20.prototype.compare = function (piece1, piece2) {
            return HomePieceOfFurniture.compare$java_math_BigDecimal$java_math_BigDecimal(piece1.getPriceValueAddedTaxIncluded(), piece2.getPriceValueAddedTaxIncluded());
        };
        return HomePieceOfFurniture$20;
    }());
    HomePieceOfFurniture.HomePieceOfFurniture$20 = HomePieceOfFurniture$20;
})(HomePieceOfFurniture || (HomePieceOfFurniture = {}));
HomePieceOfFurniture['__transients'] = ['shapeCache', 'propertyChangeSupport'];
/**
 * Creates a catalog door or window of the default catalog.
 * @param {string} id    the id of the new door or window, or <code>null</code>
 * @param {string} name  the name of the new door or window
 * @param {string} description the description of the new door or window
 * @param {string} information additional information associated to the new door or window
 * @param {java.lang.String[]} tags tags associated to the new door or window
 * @param {number} creationDate creation date of the new door or window in milliseconds since the epoch
 * @param {number} grade grade of the new door or window or <code>null</code>
 * @param {Object} icon content of the icon of the new door or window
 * @param {Object} planIcon content of the icon of the new piece displayed in plan
 * @param {Object} model content of the 3D model of the new door or window
 * @param {number} width  the width in centimeters of the new door or window
 * @param {number} depth  the depth in centimeters of the new door or window
 * @param {number} height  the height in centimeters of the new door or window
 * @param {number} elevation  the elevation in centimeters of the new door or window
 * @param {number} dropOnTopElevation a percentage of the height at which should be placed
 * an object dropped on the new piece
 * @param {boolean} movable if <code>true</code>, the new door or window is movable
 * @param {string} cutOutShape the shape used to cut out walls that intersect the new door or window
 * @param {number} wallThickness a value in percentage of the depth of the new door or window
 * @param {number} wallDistance a distance in percentage of the depth of the new door or window
 * @param {boolean} wallCutOutOnBothSides  if <code>true</code> the new door or window should cut out
 * the both sides of the walls it intersects
 * @param {boolean} widthDepthDeformable if <code>false</code>, the width and depth of the new door or window may
 * not be changed independently from each other
 * @param {com.eteks.sweethome3d.model.Sash[]} sashes the sashes attached to the new door or window
 * @param {float[][]} modelRotation the rotation 3 by 3 matrix applied to the door or window model
 * @param {boolean} backFaceShown <code>true</code> if back face should be shown instead of front faces
 * @param {number} modelSize size of the 3D model of the new light
 * @param {string} creator the creator of the model
 * @param {boolean} resizable if <code>true</code>, the size of the new door or window may be edited
 * @param {boolean} deformable if <code>true</code>, the width, depth and height of the new piece may
 * change independently from each other
 * @param {boolean} texturable if <code>false</code> this piece should always keep the same color or texture.
 * @param {Big} price the price of the new door or window, or <code>null</code>
 * @param {Big} valueAddedTaxPercentage the Value Added Tax percentage applied to the
 * price of the new door or window or <code>null</code>
 * @param {string} currency the price currency, noted with ISO 4217 code, or <code>null</code>
 * @param {Object} properties additional properties associating a key to a value or <code>null</code>
 * @class
 * @extends CatalogPieceOfFurniture
 * @author Emmanuel Puybaret
 */
var CatalogDoorOrWindow = /** @class */ (function (_super) {
    __extends(CatalogDoorOrWindow, _super);
    function CatalogDoorOrWindow(id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, cutOutShape, wallThickness, wallDistance, wallCutOutOnBothSides, widthDepthDeformable, sashes, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, price, valueAddedTaxPercentage, currency, properties) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((typeof cutOutShape === 'string') || cutOutShape === null) && ((typeof wallThickness === 'number') || wallThickness === null) && ((typeof wallDistance === 'number') || wallDistance === null) && ((typeof wallCutOutOnBothSides === 'boolean') || wallCutOutOnBothSides === null) && ((typeof widthDepthDeformable === 'boolean') || widthDepthDeformable === null) && ((sashes != null && sashes instanceof Array && (sashes.length == 0 || sashes[0] == null || (sashes[0] != null && sashes[0] instanceof Sash))) || sashes === null) && ((modelRotation != null && modelRotation instanceof Array && (modelRotation.length == 0 || modelRotation[0] == null || modelRotation[0] instanceof Array)) || modelRotation === null) && ((typeof backFaceShown === 'boolean') || backFaceShown === null) && ((typeof modelSize === 'number') || modelSize === null) && ((typeof creator === 'string') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((typeof texturable === 'boolean') || texturable === null) && ((price != null && price instanceof Big) || price === null) && ((valueAddedTaxPercentage != null && valueAddedTaxPercentage instanceof Big) || valueAddedTaxPercentage === null) && ((typeof currency === 'string') || currency === null) && ((properties != null && (properties instanceof Object)) || properties === null)) {
            var __args = arguments;
            _this = _super.call(this, id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, null, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, false, price, valueAddedTaxPercentage, currency, properties) || this;
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallCutOutOnBothSides === undefined) {
                _this.wallCutOutOnBothSides = false;
            }
            if (_this.widthDepthDeformable === undefined) {
                _this.widthDepthDeformable = false;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.cutOutShape === undefined) {
                _this.cutOutShape = null;
            }
            _this.cutOutShape = cutOutShape;
            _this.wallThickness = wallThickness;
            _this.wallDistance = wallDistance;
            _this.wallCutOutOnBothSides = wallCutOutOnBothSides;
            _this.widthDepthDeformable = widthDepthDeformable;
            _this.sashes = sashes;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((typeof cutOutShape === 'string') || cutOutShape === null) && ((typeof wallThickness === 'number') || wallThickness === null) && ((typeof wallDistance === 'number') || wallDistance === null) && ((typeof wallCutOutOnBothSides === 'boolean') || wallCutOutOnBothSides === null) && ((typeof widthDepthDeformable === 'boolean') || widthDepthDeformable === null) && ((sashes != null && sashes instanceof Array && (sashes.length == 0 || sashes[0] == null || (sashes[0] != null && sashes[0] instanceof Sash))) || sashes === null) && ((modelRotation != null && modelRotation instanceof Array && (modelRotation.length == 0 || modelRotation[0] == null || modelRotation[0] instanceof Array)) || modelRotation === null) && ((typeof backFaceShown === 'boolean') || backFaceShown === null) && ((typeof modelSize === 'number') || modelSize === null) && ((typeof creator === 'string') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((typeof texturable === 'boolean') || texturable === null) && ((price != null && price instanceof Big) || price === null) && ((valueAddedTaxPercentage != null && valueAddedTaxPercentage instanceof Big) || valueAddedTaxPercentage === null) && ((typeof currency === 'string') || currency === null) && properties === undefined) {
            var __args = arguments;
            {
                var __args_86 = arguments;
                var properties_5 = null;
                _this = _super.call(this, id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, null, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, false, price, valueAddedTaxPercentage, currency, properties_5) || this;
                if (_this.wallThickness === undefined) {
                    _this.wallThickness = 0;
                }
                if (_this.wallDistance === undefined) {
                    _this.wallDistance = 0;
                }
                if (_this.wallCutOutOnBothSides === undefined) {
                    _this.wallCutOutOnBothSides = false;
                }
                if (_this.widthDepthDeformable === undefined) {
                    _this.widthDepthDeformable = false;
                }
                if (_this.sashes === undefined) {
                    _this.sashes = null;
                }
                if (_this.cutOutShape === undefined) {
                    _this.cutOutShape = null;
                }
                _this.cutOutShape = cutOutShape;
                _this.wallThickness = wallThickness;
                _this.wallDistance = wallDistance;
                _this.wallCutOutOnBothSides = wallCutOutOnBothSides;
                _this.widthDepthDeformable = widthDepthDeformable;
                _this.sashes = sashes;
            }
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallCutOutOnBothSides === undefined) {
                _this.wallCutOutOnBothSides = false;
            }
            if (_this.widthDepthDeformable === undefined) {
                _this.widthDepthDeformable = false;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.cutOutShape === undefined) {
                _this.cutOutShape = null;
            }
        }
        else if (((typeof id === 'string') || id === null) && ((name != null && (name.constructor != null && name.constructor["__interfaces"] != null && name.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || name === null) && ((description != null && (description.constructor != null && description.constructor["__interfaces"] != null && description.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || description === null) && ((typeof information === 'number') || information === null) && ((typeof tags === 'number') || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((typeof icon === 'boolean') || icon === null) && ((typeof planIcon === 'number') || planIcon === null) && ((typeof model === 'number') || model === null) && ((width != null && width instanceof Array && (width.length == 0 || width[0] == null || (width[0] != null && width[0] instanceof Sash))) || width === null) && ((typeof depth === 'number') || depth === null) && ((height != null && height instanceof Array && (height.length == 0 || height[0] == null || height[0] instanceof Array)) || height === null) && ((typeof elevation === 'boolean') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'string') || movable === null) && ((typeof cutOutShape === 'number') || cutOutShape === null) && ((typeof wallThickness === 'boolean') || wallThickness === null) && wallDistance === undefined && wallCutOutOnBothSides === undefined && widthDepthDeformable === undefined && sashes === undefined && modelRotation === undefined && backFaceShown === undefined && modelSize === undefined && creator === undefined && resizable === undefined && deformable === undefined && texturable === undefined && price === undefined && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined) {
            var __args = arguments;
            var name_10 = __args[0];
            var icon_4 = __args[1];
            var model_4 = __args[2];
            var width_6 = __args[3];
            var depth_4 = __args[4];
            var height_11 = __args[5];
            var elevation_5 = __args[6];
            var movable_4 = __args[7];
            var wallThickness_1 = __args[8];
            var wallDistance_1 = __args[9];
            var sashes_1 = __args[10];
            var color = __args[11];
            var modelRotation_7 = __args[12];
            var backFaceShown_5 = __args[13];
            var modelSize_5 = __args[14];
            var creator_9 = __args[15];
            var iconYaw = __args[16];
            var proportional = __args[17];
            _this = _super.call(this, name_10, icon_4, model_4, width_6, depth_4, height_11, elevation_5, movable_4, null, color, modelRotation_7, backFaceShown_5, modelSize_5, creator_9, iconYaw, proportional) || this;
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallCutOutOnBothSides === undefined) {
                _this.wallCutOutOnBothSides = false;
            }
            if (_this.widthDepthDeformable === undefined) {
                _this.widthDepthDeformable = false;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.cutOutShape === undefined) {
                _this.cutOutShape = null;
            }
            _this.wallThickness = wallThickness_1;
            _this.wallDistance = wallDistance_1;
            _this.wallCutOutOnBothSides = true;
            _this.widthDepthDeformable = true;
            _this.sashes = sashes_1.length > 0 ? /* clone */ sashes_1.slice(0) : sashes_1;
            _this.cutOutShape = null;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((information != null && (information.constructor != null && information.constructor["__interfaces"] != null && information.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || information === null) && ((tags != null && (tags.constructor != null && tags.constructor["__interfaces"] != null && tags.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((typeof icon === 'number') || icon === null) && ((typeof planIcon === 'number') || planIcon === null) && ((typeof model === 'boolean') || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((height != null && height instanceof Array && (height.length == 0 || height[0] == null || (height[0] != null && height[0] instanceof Sash))) || height === null) && ((elevation != null && elevation instanceof Array && (elevation.length == 0 || elevation[0] == null || elevation[0] instanceof Array)) || elevation === null) && ((typeof dropOnTopElevation === 'string') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((cutOutShape != null && cutOutShape instanceof Big) || cutOutShape === null) && ((wallThickness != null && wallThickness instanceof Big) || wallThickness === null) && wallDistance === undefined && wallCutOutOnBothSides === undefined && widthDepthDeformable === undefined && sashes === undefined && modelRotation === undefined && backFaceShown === undefined && modelSize === undefined && creator === undefined && resizable === undefined && deformable === undefined && texturable === undefined && price === undefined && valueAddedTaxPercentage === undefined && currency === undefined && properties === undefined) {
            var __args = arguments;
            var icon_5 = __args[3];
            var model_5 = __args[4];
            var width_7 = __args[5];
            var depth_5 = __args[6];
            var height_12 = __args[7];
            var elevation_6 = __args[8];
            var movable_5 = __args[9];
            var wallThickness_2 = __args[10];
            var wallDistance_2 = __args[11];
            var sashes_2 = __args[12];
            var modelRotation_8 = __args[13];
            var creator_10 = __args[14];
            var resizable_7 = __args[15];
            var price_7 = __args[16];
            var valueAddedTaxPercentage_7 = __args[17];
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallCutOutOnBothSides === undefined) {
                _this.wallCutOutOnBothSides = false;
            }
            if (_this.widthDepthDeformable === undefined) {
                _this.widthDepthDeformable = false;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.cutOutShape === undefined) {
                _this.cutOutShape = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the default thickness of the wall in which this door or window should be placed.
     * @return {number} a value in percentage of the depth of the door or the window.
     */
    CatalogDoorOrWindow.prototype.getWallThickness = function () {
        return this.wallThickness;
    };
    /**
     * Returns the default distance that should lie at the back side of this door or window.
     * @return {number} a distance in percentage of the depth of the door or the window.
     */
    CatalogDoorOrWindow.prototype.getWallDistance = function () {
        return this.wallDistance;
    };
    /**
     * Returns <code>true</code> if this door or window should cut out the both sides
     * of the walls it intersects, even if its front or back side are within the wall thickness.
     * @return {boolean}
     */
    CatalogDoorOrWindow.prototype.isWallCutOutOnBothSides = function () {
        return this.wallCutOutOnBothSides;
    };
    /**
     * Returns <code>false</code> if the width and depth of the new door or window may
     * not be changed independently from each other.
     * @return {boolean}
     */
    CatalogDoorOrWindow.prototype.isWidthDepthDeformable = function () {
        return this.widthDepthDeformable;
    };
    /**
     * Returns a copy of the sashes attached to this door or window.
     * If no sash is defined an empty array is returned.
     * @return {com.eteks.sweethome3d.model.Sash[]}
     */
    CatalogDoorOrWindow.prototype.getSashes = function () {
        if (this.sashes.length === 0) {
            return this.sashes;
        }
        else {
            return /* clone */ this.sashes.slice(0);
        }
    };
    /**
     * Returns the shape used to cut out walls that intersect this new door or window.
     * @return {string}
     */
    CatalogDoorOrWindow.prototype.getCutOutShape = function () {
        return this.cutOutShape;
    };
    /**
     * Returns always <code>true</code>.
     * @return {boolean}
     */
    CatalogDoorOrWindow.prototype.isDoorOrWindow = function () {
        return true;
    };
    /**
     * Returns always <code>false</code>.
     * @return {boolean}
     */
    CatalogDoorOrWindow.prototype.isHorizontallyRotatable = function () {
        return false;
    };
    return CatalogDoorOrWindow;
}(CatalogPieceOfFurniture));
CatalogDoorOrWindow["__class"] = "com.eteks.sweethome3d.model.CatalogDoorOrWindow";
CatalogDoorOrWindow["__interfaces"] = ["com.eteks.sweethome3d.model.CatalogItem", "com.eteks.sweethome3d.model.DoorOrWindow", "com.eteks.sweethome3d.model.PieceOfFurniture"];
/**
 * Creates a catalog light of the default catalog.
 * @param {string} id    the id of the new light, or <code>null</code>
 * @param {string} name  the name of the new light
 * @param {string} description the description of the new light
 * @param {string} information additional information associated to the new light
 * @param {java.lang.String[]} tags tags associated to the new light
 * @param {number} creationDate creation date of the new light in milliseconds since the epoch
 * @param {number} grade grade of the new light or <code>null</code>
 * @param {Object} icon content of the icon of the new light
 * @param {Object} planIcon content of the icon of the new piece displayed in plan
 * @param {Object} model content of the 3D model of the new light
 * @param {number} width  the width in centimeters of the new light
 * @param {number} depth  the depth in centimeters of the new light
 * @param {number} height  the height in centimeters of the new light
 * @param {number} dropOnTopElevation a percentage of the height at which should be placed
 * an object dropped on the new piece
 * @param {number} elevation  the elevation in centimeters of the new light
 * @param {boolean} movable if <code>true</code>, the new light is movable
 * @param {com.eteks.sweethome3d.model.LightSource[]} lightSources the light sources of the new light
 * @param {string} staircaseCutOutShape the shape used to cut out upper levels when they intersect
 * with the piece like a staircase
 * @param {float[][]} modelRotation the rotation 3 by 3 matrix applied to the light model
 * @param {boolean} backFaceShown <code>true</code> if back face should be shown instead of front faces
 * @param {number} modelSize size of the 3D model of the new light
 * @param {string} creator the creator of the model
 * @param {boolean} resizable if <code>true</code>, the size of the new light may be edited
 * @param {boolean} deformable if <code>true</code>, the width, depth and height of the new piece may
 * change independently from each other
 * @param {boolean} texturable if <code>false</code> this piece should always keep the same color or texture
 * @param {boolean} horizontallyRotatable if <code>false</code> this piece
 * should not rotate around an horizontal axis
 * @param {Big} price the price of the new light, or <code>null</code>
 * @param {Big} valueAddedTaxPercentage the Value Added Tax percentage applied to the
 * price of the new light or <code>null</code>
 * @param {string} currency the price currency, noted with ISO 4217 code, or <code>null</code>
 * @param {Object} properties additional properties associating a key to a value or <code>null</code>
 * @class
 * @extends CatalogPieceOfFurniture
 * @author Emmanuel Puybaret
 */
var CatalogLight = /** @class */ (function (_super) {
    __extends(CatalogLight, _super);
    function CatalogLight(id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, lightSources, staircaseCutOutShape, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, horizontallyRotatable, price, valueAddedTaxPercentage, currency, properties) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((lightSources != null && lightSources instanceof Array && (lightSources.length == 0 || lightSources[0] == null || (lightSources[0] != null && lightSources[0] instanceof LightSource))) || lightSources === null) && ((typeof staircaseCutOutShape === 'string') || staircaseCutOutShape === null) && ((modelRotation != null && modelRotation instanceof Array && (modelRotation.length == 0 || modelRotation[0] == null || modelRotation[0] instanceof Array)) || modelRotation === null) && ((typeof backFaceShown === 'boolean') || backFaceShown === null) && ((typeof modelSize === 'number') || modelSize === null) && ((typeof creator === 'string') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((typeof texturable === 'boolean') || texturable === null) && ((typeof horizontallyRotatable === 'boolean') || horizontallyRotatable === null) && ((price != null && price instanceof Big) || price === null) && ((valueAddedTaxPercentage != null && valueAddedTaxPercentage instanceof Big) || valueAddedTaxPercentage === null) && ((typeof currency === 'string') || currency === null) && ((properties != null && (properties instanceof Object)) || properties === null)) {
            var __args = arguments;
            _this = _super.call(this, id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, staircaseCutOutShape, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, horizontallyRotatable, price, valueAddedTaxPercentage, currency, properties) || this;
            if (_this.lightSources === undefined) {
                _this.lightSources = null;
            }
            _this.lightSources = lightSources.length > 0 ? /* clone */ lightSources.slice(0) : lightSources;
        }
        else if (((typeof id === 'string') || id === null) && ((typeof name === 'string') || name === null) && ((typeof description === 'string') || description === null) && ((typeof information === 'string') || information === null) && ((tags != null && tags instanceof Array && (tags.length == 0 || tags[0] == null || (typeof tags[0] === 'string'))) || tags === null) && ((typeof creationDate === 'number') || creationDate === null) && ((typeof grade === 'number') || grade === null) && ((icon != null && (icon.constructor != null && icon.constructor["__interfaces"] != null && icon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || icon === null) && ((planIcon != null && (planIcon.constructor != null && planIcon.constructor["__interfaces"] != null && planIcon.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || planIcon === null) && ((model != null && (model.constructor != null && model.constructor["__interfaces"] != null && model.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Content") >= 0)) || model === null) && ((typeof width === 'number') || width === null) && ((typeof depth === 'number') || depth === null) && ((typeof height === 'number') || height === null) && ((typeof elevation === 'number') || elevation === null) && ((typeof dropOnTopElevation === 'number') || dropOnTopElevation === null) && ((typeof movable === 'boolean') || movable === null) && ((lightSources != null && lightSources instanceof Array && (lightSources.length == 0 || lightSources[0] == null || (lightSources[0] != null && lightSources[0] instanceof LightSource))) || lightSources === null) && ((typeof staircaseCutOutShape === 'string') || staircaseCutOutShape === null) && ((modelRotation != null && modelRotation instanceof Array && (modelRotation.length == 0 || modelRotation[0] == null || modelRotation[0] instanceof Array)) || modelRotation === null) && ((typeof backFaceShown === 'boolean') || backFaceShown === null) && ((typeof modelSize === 'number') || modelSize === null) && ((typeof creator === 'string') || creator === null) && ((typeof resizable === 'boolean') || resizable === null) && ((typeof deformable === 'boolean') || deformable === null) && ((typeof texturable === 'boolean') || texturable === null) && ((typeof horizontallyRotatable === 'boolean') || horizontallyRotatable === null) && ((price != null && price instanceof Big) || price === null) && ((valueAddedTaxPercentage != null && valueAddedTaxPercentage instanceof Big) || valueAddedTaxPercentage === null) && ((typeof currency === 'string') || currency === null) && properties === undefined) {
            var __args = arguments;
            {
                var __args_87 = arguments;
                var properties_6 = null;
                _this = _super.call(this, id, name, description, information, tags, creationDate, grade, icon, planIcon, model, width, depth, height, elevation, dropOnTopElevation, movable, staircaseCutOutShape, modelRotation, backFaceShown, modelSize, creator, resizable, deformable, texturable, horizontallyRotatable, price, valueAddedTaxPercentage, currency, properties_6) || this;
                if (_this.lightSources === undefined) {
                    _this.lightSources = null;
                }
                _this.lightSources = lightSources.length > 0 ? /* clone */ lightSources.slice(0) : lightSources;
            }
            if (_this.lightSources === undefined) {
                _this.lightSources = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the sources managed by this light. Each light source point
     * is a percentage of the width, the depth and the height of this light,
     * with the abscissa origin at the left side of the piece,
     * the ordinate origin at the front side of the piece
     * and the elevation origin at the bottom side of the piece.
     * @return {com.eteks.sweethome3d.model.LightSource[]} a copy of light sources array.
     */
    CatalogLight.prototype.getLightSources = function () {
        if (this.lightSources.length === 0) {
            return this.lightSources;
        }
        else {
            return /* clone */ this.lightSources.slice(0);
        }
    };
    return CatalogLight;
}(CatalogPieceOfFurniture));
CatalogLight["__class"] = "com.eteks.sweethome3d.model.CatalogLight";
CatalogLight["__interfaces"] = ["com.eteks.sweethome3d.model.CatalogItem", "com.eteks.sweethome3d.model.PieceOfFurniture", "com.eteks.sweethome3d.model.Light"];
/**
 * Creates a <code>InterruptedRecorderException</code> from its message.
 * @param {string} message
 * @class
 * @extends RecorderException
 * @author Emmanuel Puybaret
 * @ignore
 */
var InterruptedRecorderException = /** @class */ (function (_super) {
    __extends(InterruptedRecorderException, _super);
    function InterruptedRecorderException(message) {
        var _this = this;
        if (((typeof message === 'string') || message === null)) {
            var __args = arguments;
            _this = _super.call(this, message) || this;
        }
        else if (message === undefined) {
            var __args = arguments;
            _this = _super.call(this) || this;
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    return InterruptedRecorderException;
}(RecorderException));
InterruptedRecorderException["__class"] = "com.eteks.sweethome3d.model.InterruptedRecorderException";
/**
 * Creates an exception for the given damaged home with the invalid content it may contains.
 * @param {Home} damagedHome
 * @param {*[]} invalidContent
 * @param {string} message
 * @class
 * @extends RecorderException
 * @author Emmanuel Puybaret
 * @ignore
 */
var DamagedHomeRecorderException = /** @class */ (function (_super) {
    __extends(DamagedHomeRecorderException, _super);
    function DamagedHomeRecorderException(damagedHome, invalidContent, message) {
        var _this = this;
        if (((damagedHome != null && damagedHome instanceof Home) || damagedHome === null) && ((invalidContent != null && (invalidContent instanceof Array)) || invalidContent === null) && ((typeof message === 'string') || message === null)) {
            var __args = arguments;
            _this = _super.call(this, message) || this;
            if (_this.damagedHome === undefined) {
                _this.damagedHome = null;
            }
            if (_this.invalidContent === undefined) {
                _this.invalidContent = null;
            }
            _this.damagedHome = damagedHome;
            _this.invalidContent = invalidContent;
        }
        else if (((damagedHome != null && damagedHome instanceof Home) || damagedHome === null) && ((invalidContent != null && (invalidContent instanceof Array)) || invalidContent === null) && message === undefined) {
            var __args = arguments;
            _this = _super.call(this) || this;
            if (_this.damagedHome === undefined) {
                _this.damagedHome = null;
            }
            if (_this.invalidContent === undefined) {
                _this.invalidContent = null;
            }
            _this.damagedHome = damagedHome;
            _this.invalidContent = invalidContent;
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the damaged home containing some possible invalid content.
     * This home can be handled and saved correctly only once the invalid content will be removed.
     * @return {Home}
     */
    DamagedHomeRecorderException.prototype.getDamagedHome = function () {
        return this.damagedHome;
    };
    /**
     * Returns the invalid content in the damaged home.
     * @return {*[]}
     */
    DamagedHomeRecorderException.prototype.getInvalidContent = function () {
        return this.invalidContent;
    };
    return DamagedHomeRecorderException;
}(RecorderException));
DamagedHomeRecorderException["__class"] = "com.eteks.sweethome3d.model.DamagedHomeRecorderException";
/**
 * Exception thrown when there's not enough space to save a home.
 * @author Emmanuel Puybaret
 * @param {string} message
 * @param {number} missingSpace
 * @class
 * @extends RecorderException
 * @ignore
 */
var NotEnoughSpaceRecorderException = /** @class */ (function (_super) {
    __extends(NotEnoughSpaceRecorderException, _super);
    function NotEnoughSpaceRecorderException(message, missingSpace) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, NotEnoughSpaceRecorderException.prototype);
        if (_this.missingSpace === undefined) {
            _this.missingSpace = 0;
        }
        _this.missingSpace = missingSpace;
        return _this;
    }
    /**
     * Returns the length of the missing space to save a home.
     * @return {number}
     */
    NotEnoughSpaceRecorderException.prototype.getMissingSpace = function () {
        return this.missingSpace;
    };
    return NotEnoughSpaceRecorderException;
}(RecorderException));
NotEnoughSpaceRecorderException["__class"] = "com.eteks.sweethome3d.model.NotEnoughSpaceRecorderException";
/**
 * Creates the controller of plan view.
 * @param {Home} home        the home plan edited by this controller and its view
 * @param {UserPreferences} preferences the preferences of the application
 * @param {Object} viewFactory a factory able to create the plan view managed by this controller
 * @param {Object} contentManager a content manager used to import furniture
 * @param {javax.swing.undo.UndoableEditSupport} undoSupport undo support to post changes on plan by this controller
 * @class
 * @extends FurnitureController
 * @author Emmanuel Puybaret
 */
var PlanController = /** @class */ (function (_super) {
    __extends(PlanController, _super);
    function PlanController(home, preferences, viewFactory, contentManager, undoSupport) {
        var _this = _super.call(this, home, preferences, viewFactory, contentManager, undoSupport) || this;
        if (_this.__com_eteks_sweethome3d_viewcontroller_PlanController_home === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PlanController_home = null;
        }
        if (_this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences = null;
        }
        if (_this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory = null;
        }
        if (_this.__com_eteks_sweethome3d_viewcontroller_PlanController_contentManager === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PlanController_contentManager = null;
        }
        if (_this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport === undefined) {
            _this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport = null;
        }
        if (_this.propertyChangeSupport === undefined) {
            _this.propertyChangeSupport = null;
        }
        if (_this.planView === undefined) {
            _this.planView = null;
        }
        if (_this.selectionListener === undefined) {
            _this.selectionListener = null;
        }
        if (_this.wallChangeListener === undefined) {
            _this.wallChangeListener = null;
        }
        if (_this.furnitureSizeChangeListener === undefined) {
            _this.furnitureSizeChangeListener = null;
        }
        if (_this.selectionState === undefined) {
            _this.selectionState = null;
        }
        if (_this.rectangleSelectionState === undefined) {
            _this.rectangleSelectionState = null;
        }
        if (_this.selectionMoveState === undefined) {
            _this.selectionMoveState = null;
        }
        if (_this.panningState === undefined) {
            _this.panningState = null;
        }
        if (_this.dragAndDropState === undefined) {
            _this.dragAndDropState = null;
        }
        if (_this.wallCreationState === undefined) {
            _this.wallCreationState = null;
        }
        if (_this.wallDrawingState === undefined) {
            _this.wallDrawingState = null;
        }
        if (_this.wallResizeState === undefined) {
            _this.wallResizeState = null;
        }
        if (_this.wallArcExtentState === undefined) {
            _this.wallArcExtentState = null;
        }
        if (_this.pieceOfFurnitureRotationState === undefined) {
            _this.pieceOfFurnitureRotationState = null;
        }
        if (_this.pieceOfFurniturePitchRotationState === undefined) {
            _this.pieceOfFurniturePitchRotationState = null;
        }
        if (_this.pieceOfFurnitureRollRotationState === undefined) {
            _this.pieceOfFurnitureRollRotationState = null;
        }
        if (_this.pieceOfFurnitureElevationState === undefined) {
            _this.pieceOfFurnitureElevationState = null;
        }
        if (_this.pieceOfFurnitureHeightState === undefined) {
            _this.pieceOfFurnitureHeightState = null;
        }
        if (_this.pieceOfFurnitureResizeState === undefined) {
            _this.pieceOfFurnitureResizeState = null;
        }
        if (_this.lightPowerModificationState === undefined) {
            _this.lightPowerModificationState = null;
        }
        if (_this.pieceOfFurnitureNameOffsetState === undefined) {
            _this.pieceOfFurnitureNameOffsetState = null;
        }
        if (_this.pieceOfFurnitureNameRotationState === undefined) {
            _this.pieceOfFurnitureNameRotationState = null;
        }
        if (_this.cameraYawRotationState === undefined) {
            _this.cameraYawRotationState = null;
        }
        if (_this.cameraPitchRotationState === undefined) {
            _this.cameraPitchRotationState = null;
        }
        if (_this.cameraElevationState === undefined) {
            _this.cameraElevationState = null;
        }
        if (_this.dimensionLineCreationState === undefined) {
            _this.dimensionLineCreationState = null;
        }
        if (_this.dimensionLineDrawingState === undefined) {
            _this.dimensionLineDrawingState = null;
        }
        if (_this.dimensionLineResizeState === undefined) {
            _this.dimensionLineResizeState = null;
        }
        if (_this.dimensionLineOffsetState === undefined) {
            _this.dimensionLineOffsetState = null;
        }
        if (_this.roomCreationState === undefined) {
            _this.roomCreationState = null;
        }
        if (_this.roomDrawingState === undefined) {
            _this.roomDrawingState = null;
        }
        if (_this.roomResizeState === undefined) {
            _this.roomResizeState = null;
        }
        if (_this.roomAreaOffsetState === undefined) {
            _this.roomAreaOffsetState = null;
        }
        if (_this.roomAreaRotationState === undefined) {
            _this.roomAreaRotationState = null;
        }
        if (_this.roomNameOffsetState === undefined) {
            _this.roomNameOffsetState = null;
        }
        if (_this.roomNameRotationState === undefined) {
            _this.roomNameRotationState = null;
        }
        if (_this.polylineCreationState === undefined) {
            _this.polylineCreationState = null;
        }
        if (_this.polylineDrawingState === undefined) {
            _this.polylineDrawingState = null;
        }
        if (_this.polylineResizeState === undefined) {
            _this.polylineResizeState = null;
        }
        if (_this.labelCreationState === undefined) {
            _this.labelCreationState = null;
        }
        if (_this.labelRotationState === undefined) {
            _this.labelRotationState = null;
        }
        if (_this.labelElevationState === undefined) {
            _this.labelElevationState = null;
        }
        if (_this.compassRotationState === undefined) {
            _this.compassRotationState = null;
        }
        if (_this.compassResizeState === undefined) {
            _this.compassResizeState = null;
        }
        if (_this.state === undefined) {
            _this.state = null;
        }
        if (_this.previousState === undefined) {
            _this.previousState = null;
        }
        if (_this.xLastMousePress === undefined) {
            _this.xLastMousePress = 0;
        }
        if (_this.yLastMousePress === undefined) {
            _this.yLastMousePress = 0;
        }
        if (_this.shiftDownLastMousePress === undefined) {
            _this.shiftDownLastMousePress = false;
        }
        if (_this.alignmentActivatedLastMousePress === undefined) {
            _this.alignmentActivatedLastMousePress = false;
        }
        if (_this.duplicationActivatedLastMousePress === undefined) {
            _this.duplicationActivatedLastMousePress = false;
        }
        if (_this.magnetismToggledLastMousePress === undefined) {
            _this.magnetismToggledLastMousePress = false;
        }
        if (_this.pointerTypeLastMousePress === undefined) {
            _this.pointerTypeLastMousePress = null;
        }
        if (_this.xLastMouseMove === undefined) {
            _this.xLastMouseMove = 0;
        }
        if (_this.yLastMouseMove === undefined) {
            _this.yLastMouseMove = 0;
        }
        if (_this.wallsAreaCache === undefined) {
            _this.wallsAreaCache = null;
        }
        if (_this.wallsIncludingBaseboardsAreaCache === undefined) {
            _this.wallsIncludingBaseboardsAreaCache = null;
        }
        if (_this.insideWallsAreaCache === undefined) {
            _this.insideWallsAreaCache = null;
        }
        if (_this.roomPathsCache === undefined) {
            _this.roomPathsCache = null;
        }
        if (_this.furnitureSidesCache === undefined) {
            _this.furnitureSidesCache = null;
        }
        if (_this.draggedItems === undefined) {
            _this.draggedItems = null;
        }
        _this.__com_eteks_sweethome3d_viewcontroller_PlanController_home = home;
        _this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences = preferences;
        _this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory = viewFactory;
        _this.__com_eteks_sweethome3d_viewcontroller_PlanController_contentManager = contentManager;
        _this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport = undoSupport;
        _this.propertyChangeSupport = new PropertyChangeSupport(_this);
        _this.furnitureSidesCache = ({});
        _this.selectionState = new PlanController.SelectionState(_this);
        _this.selectionMoveState = new PlanController.SelectionMoveState(_this);
        _this.rectangleSelectionState = new PlanController.RectangleSelectionState(_this);
        _this.panningState = new PlanController.PanningState(_this);
        _this.dragAndDropState = new PlanController.DragAndDropState(_this);
        _this.wallCreationState = new PlanController.WallCreationState(_this);
        _this.wallDrawingState = new PlanController.WallDrawingState(_this);
        _this.wallResizeState = new PlanController.WallResizeState(_this);
        _this.wallArcExtentState = new PlanController.WallArcExtentState(_this);
        _this.pieceOfFurnitureRotationState = new PlanController.PieceOfFurnitureRotationState(_this);
        _this.pieceOfFurniturePitchRotationState = new PlanController.PieceOfFurniturePitchRotationState(_this);
        _this.pieceOfFurnitureRollRotationState = new PlanController.PieceOfFurnitureRollRotationState(_this);
        _this.pieceOfFurnitureElevationState = new PlanController.PieceOfFurnitureElevationState(_this);
        _this.pieceOfFurnitureHeightState = new PlanController.PieceOfFurnitureHeightState(_this);
        _this.pieceOfFurnitureResizeState = new PlanController.PieceOfFurnitureResizeState(_this);
        _this.lightPowerModificationState = new PlanController.LightPowerModificationState(_this);
        _this.pieceOfFurnitureNameOffsetState = new PlanController.PieceOfFurnitureNameOffsetState(_this);
        _this.pieceOfFurnitureNameRotationState = new PlanController.PieceOfFurnitureNameRotationState(_this);
        _this.cameraYawRotationState = new PlanController.CameraYawRotationState(_this);
        _this.cameraPitchRotationState = new PlanController.CameraPitchRotationState(_this);
        _this.cameraElevationState = new PlanController.CameraElevationState(_this);
        _this.dimensionLineCreationState = new PlanController.DimensionLineCreationState(_this);
        _this.dimensionLineDrawingState = new PlanController.DimensionLineDrawingState(_this);
        _this.dimensionLineResizeState = new PlanController.DimensionLineResizeState(_this);
        _this.dimensionLineOffsetState = new PlanController.DimensionLineOffsetState(_this);
        _this.roomCreationState = new PlanController.RoomCreationState(_this);
        _this.roomDrawingState = new PlanController.RoomDrawingState(_this);
        _this.roomResizeState = new PlanController.RoomResizeState(_this);
        _this.roomAreaOffsetState = new PlanController.RoomAreaOffsetState(_this);
        _this.roomAreaRotationState = new PlanController.RoomAreaRotationState(_this);
        _this.roomNameOffsetState = new PlanController.RoomNameOffsetState(_this);
        _this.roomNameRotationState = new PlanController.RoomNameRotationState(_this);
        _this.polylineCreationState = new PlanController.PolylineCreationState(_this);
        _this.polylineDrawingState = new PlanController.PolylineDrawingState(_this);
        _this.polylineResizeState = new PlanController.PolylineResizeState(_this);
        _this.labelCreationState = new PlanController.LabelCreationState(_this);
        _this.labelRotationState = new PlanController.LabelRotationState(_this);
        _this.labelElevationState = new PlanController.LabelElevationState(_this);
        _this.compassRotationState = new PlanController.CompassRotationState(_this);
        _this.compassResizeState = new PlanController.CompassResizeState(_this);
        _this.setState(_this.selectionState);
        _this.__com_eteks_sweethome3d_viewcontroller_PlanController_addModelListeners();
        var scale = home.getNumericProperty(PlanController.SCALE_VISUAL_PROPERTY);
        if (scale != null) {
            _this.setScale(/* floatValue */ scale);
        }
        return _this;
    }
    /**
     * Returns the view associated with this controller.
     * @return {Object}
     */
    PlanController.prototype.getView = function () {
        if (this.planView == null) {
            this.planView = this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory.createPlanView(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this);
        }
        return this.planView;
    };
    /**
     * Changes current state of controller.
     * @param {PlanController.ControllerState} state
     */
    PlanController.prototype.setState = function (state) {
        var oldMode = null;
        var oldModificationState = false;
        var oldBasePlanModificationState = false;
        if (this.state != null) {
            oldMode = this.state.getMode();
            oldModificationState = this.state.isModificationState();
            oldBasePlanModificationState = this.state.isBasePlanModificationState();
            this.state.exit();
        }
        this.previousState = this.state;
        this.state = state;
        this.state.enter();
        if (oldMode !== state.getMode()) {
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODE", oldMode, state.getMode());
        }
        if (oldModificationState !== state.isModificationState()) {
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODIFICATION_STATE", oldModificationState, !oldModificationState);
        }
        if (oldBasePlanModificationState !== state.isBasePlanModificationState()) {
            this.propertyChangeSupport.firePropertyChange(/* name */ "BASE_PLAN_MODIFICATION_STATE", oldBasePlanModificationState, !oldBasePlanModificationState);
        }
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    PlanController.prototype.addPropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this controller.
     * @param {string} property
     * @param {PropertyChangeListener} listener
     */
    PlanController.prototype.removePropertyChangeListener = function (property, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(/* name */ property, listener);
    };
    /**
     * Returns the active mode of this controller.
     * @return {PlanController.Mode}
     */
    PlanController.prototype.getMode = function () {
        return this.state.getMode();
    };
    /**
     * Sets the active mode of this controller and fires a <code>PropertyChangeEvent</code>.
     * @param {PlanController.Mode} mode
     */
    PlanController.prototype.setMode = function (mode) {
        var oldMode = this.state.getMode();
        if (mode !== oldMode) {
            this.state.setMode(mode);
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODE", oldMode, mode);
        }
    };
    /**
     * Returns <code>true</code> if the interactions in the current mode may modify
     * the state of a home.
     * @return {boolean}
     */
    PlanController.prototype.isModificationState = function () {
        return this.state.isModificationState();
    };
    /**
     * Returns <code>true</code> if the interactions in the current mode may modify
     * the base plan of a home.
     * @return {boolean}
     */
    PlanController.prototype.isBasePlanModificationState = function () {
        return this.state.isBasePlanModificationState();
    };
    /**
     * Deletes the selection in home.
     */
    PlanController.prototype.deleteSelection = function () {
        this.state.deleteSelection();
    };
    /**
     * Escapes of current action.
     */
    PlanController.prototype.escape = function () {
        this.state.escape();
    };
    /**
     * Moves the selection of (<code>dx</code>,<code>dy</code>) in home.
     * @param {number} dx
     * @param {number} dy
     */
    PlanController.prototype.moveSelection = function (dx, dy) {
        this.state.moveSelection(dx, dy);
    };
    /**
     * Toggles temporary magnetism feature of user preferences.
     * @param {boolean} magnetismToggled if <code>true</code> then magnetism feature is toggled.
     */
    PlanController.prototype.toggleMagnetism = function (magnetismToggled) {
        this.state.toggleMagnetism(magnetismToggled);
    };
    /**
     * Activates or deactivates alignment feature.
     * @param {boolean} alignmentActivated if <code>true</code> then alignment is active.
     */
    PlanController.prototype.setAlignmentActivated = function (alignmentActivated) {
        this.state.setAlignmentActivated(alignmentActivated);
    };
    /**
     * Activates or deactivates duplication feature.
     * @param {boolean} duplicationActivated if <code>true</code> then duplication is active.
     */
    PlanController.prototype.setDuplicationActivated = function (duplicationActivated) {
        this.state.setDuplicationActivated(duplicationActivated);
    };
    /**
     * Activates or deactivates edition.
     * @param {boolean} editionActivated if <code>true</code> then edition is active
     */
    PlanController.prototype.setEditionActivated = function (editionActivated) {
        this.state.setEditionActivated(editionActivated);
    };
    /**
     * Updates an editable property with the entered <code>value</code>.
     * @param {string} editableProperty
     * @param {Object} value
     */
    PlanController.prototype.updateEditableProperty = function (editableProperty, value) {
        this.state.updateEditableProperty(editableProperty, value);
    };
    PlanController.prototype.pressMouse$float$float$int$boolean$boolean = function (x, y, clickCount, shiftDown, duplicationActivated) {
        this.pressMouse$float$float$int$boolean$boolean$boolean$boolean(x, y, clickCount, shiftDown, shiftDown, duplicationActivated, shiftDown);
    };
    PlanController.prototype.pressMouse$float$float$int$boolean$boolean$boolean$boolean = function (x, y, clickCount, shiftDown, alignmentActivated, duplicationActivated, magnetismToggled) {
        this.pressMouse$float$float$int$boolean$boolean$boolean$boolean$com_eteks_sweethome3d_viewcontroller_View_PointerType(x, y, clickCount, shiftDown, alignmentActivated, duplicationActivated, magnetismToggled, null);
    };
    PlanController.prototype.pressMouse$float$float$int$boolean$boolean$boolean$boolean$com_eteks_sweethome3d_viewcontroller_View_PointerType = function (x, y, clickCount, shiftDown, alignmentActivated, duplicationActivated, magnetismToggled, pointerType) {
        this.xLastMousePress = x;
        this.yLastMousePress = y;
        this.xLastMouseMove = x;
        this.yLastMouseMove = y;
        this.shiftDownLastMousePress = shiftDown;
        this.alignmentActivatedLastMousePress = alignmentActivated;
        this.duplicationActivatedLastMousePress = duplicationActivated;
        this.pointerTypeLastMousePress = pointerType;
        this.magnetismToggledLastMousePress = magnetismToggled;
        this.state.pressMouse(x, y, clickCount, shiftDown, duplicationActivated);
    };
    /**
     * Processes a mouse button pressed event.
     * @param {number} x
     * @param {number} y
     * @param {number} clickCount
     * @param {boolean} shiftDown
     * @param {boolean} alignmentActivated
     * @param {boolean} duplicationActivated
     * @param {boolean} magnetismToggled
     * @param {View.PointerType} pointerType
     */
    PlanController.prototype.pressMouse = function (x, y, clickCount, shiftDown, alignmentActivated, duplicationActivated, magnetismToggled, pointerType) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof clickCount === 'number') || clickCount === null) && ((typeof shiftDown === 'boolean') || shiftDown === null) && ((typeof alignmentActivated === 'boolean') || alignmentActivated === null) && ((typeof duplicationActivated === 'boolean') || duplicationActivated === null) && ((typeof magnetismToggled === 'boolean') || magnetismToggled === null) && ((typeof pointerType === 'number') || pointerType === null)) {
            return this.pressMouse$float$float$int$boolean$boolean$boolean$boolean$com_eteks_sweethome3d_viewcontroller_View_PointerType(x, y, clickCount, shiftDown, alignmentActivated, duplicationActivated, magnetismToggled, pointerType);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof clickCount === 'number') || clickCount === null) && ((typeof shiftDown === 'boolean') || shiftDown === null) && ((typeof alignmentActivated === 'boolean') || alignmentActivated === null) && ((typeof duplicationActivated === 'boolean') || duplicationActivated === null) && ((typeof magnetismToggled === 'boolean') || magnetismToggled === null) && pointerType === undefined) {
            return this.pressMouse$float$float$int$boolean$boolean$boolean$boolean(x, y, clickCount, shiftDown, alignmentActivated, duplicationActivated, magnetismToggled);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof clickCount === 'number') || clickCount === null) && ((typeof shiftDown === 'boolean') || shiftDown === null) && ((typeof alignmentActivated === 'boolean') || alignmentActivated === null) && duplicationActivated === undefined && magnetismToggled === undefined && pointerType === undefined) {
            return this.pressMouse$float$float$int$boolean$boolean(x, y, clickCount, shiftDown, alignmentActivated);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Processes a mouse button released event.
     * @param {number} x
     * @param {number} y
     */
    PlanController.prototype.releaseMouse = function (x, y) {
        this.state.releaseMouse(x, y);
    };
    /**
     * Processes a mouse button moved event.
     * @param {number} x
     * @param {number} y
     */
    PlanController.prototype.moveMouse = function (x, y) {
        this.xLastMouseMove = x;
        this.yLastMouseMove = y;
        this.state.moveMouse(x, y);
    };
    /**
     * Processes a zoom event.
     * @param {number} factor
     */
    PlanController.prototype.zoom = function (factor) {
        this.state.zoom(factor);
    };
    /**
     * Returns the selection state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getSelectionState = function () {
        return this.selectionState;
    };
    /**
     * Returns the selection move state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getSelectionMoveState = function () {
        return this.selectionMoveState;
    };
    /**
     * Returns the rectangle selection state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRectangleSelectionState = function () {
        return this.rectangleSelectionState;
    };
    /**
     * Returns the panning state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPanningState = function () {
        return this.panningState;
    };
    /**
     * Returns the drag and drop state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getDragAndDropState = function () {
        return this.dragAndDropState;
    };
    /**
     * Returns the wall creation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getWallCreationState = function () {
        return this.wallCreationState;
    };
    /**
     * Returns the wall drawing state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getWallDrawingState = function () {
        return this.wallDrawingState;
    };
    /**
     * Returns the wall resize state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getWallResizeState = function () {
        return this.wallResizeState;
    };
    /**
     * Returns the wall arc extent state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getWallArcExtentState = function () {
        return this.wallArcExtentState;
    };
    /**
     * Returns the piece rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureRotationState = function () {
        return this.pieceOfFurnitureRotationState;
    };
    /**
     * Returns the piece pitch rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurniturePitchRotationState = function () {
        return this.pieceOfFurniturePitchRotationState;
    };
    /**
     * Returns the piece roll rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureRollRotationState = function () {
        return this.pieceOfFurnitureRollRotationState;
    };
    /**
     * Returns the piece elevation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureElevationState = function () {
        return this.pieceOfFurnitureElevationState;
    };
    /**
     * Returns the piece height state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureHeightState = function () {
        return this.pieceOfFurnitureHeightState;
    };
    /**
     * Returns the piece resize state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureResizeState = function () {
        return this.pieceOfFurnitureResizeState;
    };
    /**
     * Returns the light power modification state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getLightPowerModificationState = function () {
        return this.lightPowerModificationState;
    };
    /**
     * Returns the piece name offset state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureNameOffsetState = function () {
        return this.pieceOfFurnitureNameOffsetState;
    };
    /**
     * Returns the piece name rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPieceOfFurnitureNameRotationState = function () {
        return this.pieceOfFurnitureNameRotationState;
    };
    /**
     * Returns the camera yaw rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getCameraYawRotationState = function () {
        return this.cameraYawRotationState;
    };
    /**
     * Returns the camera pitch rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getCameraPitchRotationState = function () {
        return this.cameraPitchRotationState;
    };
    /**
     * Returns the camera elevation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getCameraElevationState = function () {
        return this.cameraElevationState;
    };
    /**
     * Returns the dimension line creation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getDimensionLineCreationState = function () {
        return this.dimensionLineCreationState;
    };
    /**
     * Returns the dimension line drawing state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getDimensionLineDrawingState = function () {
        return this.dimensionLineDrawingState;
    };
    /**
     * Returns the dimension line resize state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getDimensionLineResizeState = function () {
        return this.dimensionLineResizeState;
    };
    /**
     * Returns the dimension line offset state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getDimensionLineOffsetState = function () {
        return this.dimensionLineOffsetState;
    };
    /**
     * Returns the room creation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomCreationState = function () {
        return this.roomCreationState;
    };
    /**
     * Returns the room drawing state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomDrawingState = function () {
        return this.roomDrawingState;
    };
    /**
     * Returns the room resize state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomResizeState = function () {
        return this.roomResizeState;
    };
    /**
     * Returns the room area offset state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomAreaOffsetState = function () {
        return this.roomAreaOffsetState;
    };
    /**
     * Returns the room area rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomAreaRotationState = function () {
        return this.roomAreaRotationState;
    };
    /**
     * Returns the room name offset state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomNameOffsetState = function () {
        return this.roomNameOffsetState;
    };
    /**
     * Returns the room name rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getRoomNameRotationState = function () {
        return this.roomNameRotationState;
    };
    /**
     * Returns the polyline creation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPolylineCreationState = function () {
        return this.polylineCreationState;
    };
    /**
     * Returns the polyline drawing state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPolylineDrawingState = function () {
        return this.polylineDrawingState;
    };
    /**
     * Returns the polyline resize state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getPolylineResizeState = function () {
        return this.polylineResizeState;
    };
    /**
     * Returns the label creation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getLabelCreationState = function () {
        return this.labelCreationState;
    };
    /**
     * Returns the label rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getLabelRotationState = function () {
        return this.labelRotationState;
    };
    /**
     * Returns the label elevation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getLabelElevationState = function () {
        return this.labelElevationState;
    };
    /**
     * Returns the compass rotation state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getCompassRotationState = function () {
        return this.compassRotationState;
    };
    /**
     * Returns the compass resize state.
     * @return {PlanController.ControllerState}
     */
    PlanController.prototype.getCompassResizeState = function () {
        return this.compassResizeState;
    };
    /**
     * Returns the abscissa of mouse position at last mouse press.
     * @return {number}
     */
    PlanController.prototype.getXLastMousePress = function () {
        return this.xLastMousePress;
    };
    /**
     * Returns the ordinate of mouse position at last mouse press.
     * @return {number}
     */
    PlanController.prototype.getYLastMousePress = function () {
        return this.yLastMousePress;
    };
    /**
     * Returns <code>true</code> if shift key was down at last mouse press.
     * @return {boolean}
     */
    PlanController.prototype.wasShiftDownLastMousePress = function () {
        return this.shiftDownLastMousePress;
    };
    /**
     * Returns <code>true</code> if magnetism was toggled at last mouse press.
     * @return {boolean}
     */
    PlanController.prototype.wasMagnetismToggledLastMousePress = function () {
        return this.magnetismToggledLastMousePress;
    };
    /**
     * Returns <code>true</code> if alignment was activated at last mouse press.
     * @return {boolean}
     */
    PlanController.prototype.wasAlignmentActivatedLastMousePress = function () {
        return this.alignmentActivatedLastMousePress;
    };
    /**
     * Returns <code>true</code> if duplication was activated at last mouse press.
     * @return {boolean}
     */
    PlanController.prototype.wasDuplicationActivatedLastMousePress = function () {
        return this.duplicationActivatedLastMousePress;
    };
    /**
     * Returns the pointer type used at the last mouse press.
     * @return {View.PointerType}
     */
    PlanController.prototype.getPointerTypeLastMousePress = function () {
        return this.pointerTypeLastMousePress;
    };
    /**
     * Returns the abscissa of mouse position at last mouse move.
     * @return {number}
     */
    PlanController.prototype.getXLastMouseMove = function () {
        return this.xLastMouseMove;
    };
    /**
     * Returns the ordinate of mouse position at last mouse move.
     * @return {number}
     */
    PlanController.prototype.getYLastMouseMove = function () {
        return this.yLastMouseMove;
    };
    /**
     * Controls the modification of selected walls.
     */
    PlanController.prototype.modifySelectedWalls = function () {
        if (!(Home.getWallsSubList(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()).length == 0)) {
            new WallController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_contentManager, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
        }
    };
    /**
     * Locks home base plan.
     */
    PlanController.prototype.lockBasePlan = function () {
        if (!this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked()) {
            var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            var selection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            var oldSelection = selection.slice(0);
            var newSelection = this.getItemsNotPartOfBasePlan(selection);
            var newSelectedItems = newSelection.slice(0);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(true);
            this.selectItems$java_util_List$boolean(newSelection, allLevelsSelection);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LockingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, allLevelsSelection, newSelectedItems));
        }
    };
    /**
     * Returns <code>true</code> it the given <code>item</code> belongs
     * to the base plan.
     * @param {Object} item
     * @return {boolean}
     */
    PlanController.prototype.isItemPartOfBasePlan = function (item) {
        if (item != null && item instanceof HomePieceOfFurniture) {
            return this.isPieceOfFurniturePartOfBasePlan(item);
        }
        else {
            return !(item != null && item instanceof ObserverCamera);
        }
    };
    /**
     * Returns the items among the given list that are not part of the base plan.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @return {*[]}
     * @private
     */
    PlanController.prototype.getItemsNotPartOfBasePlan = function (items) {
        var itemsNotPartOfBasePlan = ([]);
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (!this.isItemPartOfBasePlan(item)) {
                    /* add */ (itemsNotPartOfBasePlan.push(item) > 0);
                }
            }
        }
        return itemsNotPartOfBasePlan;
    };
    /**
     * Unlocks home base plan.
     */
    PlanController.prototype.unlockBasePlan = function () {
        if (this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked()) {
            var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            var selection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            var selectedItems = selection.slice(0);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(false);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setAllLevelsSelection(false);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.UnlockingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, selectedItems, allLevelsSelection));
        }
    };
    /**
     * Returns <code>true</code> if the given <code>item</code> may be moved
     * in the plan. Default implementation returns <code>true</code>.
     * @param {Object} item
     * @return {boolean}
     */
    PlanController.prototype.isItemMovable = function (item) {
        if (item != null && item instanceof HomePieceOfFurniture) {
            return this.isPieceOfFurnitureMovable(item);
        }
        else {
            return true;
        }
    };
    /**
     * Returns <code>true</code> if the given <code>item</code> may be resized.
     * Default implementation returns <code>false</code> if the given <code>item</code>
     * is a non resizable piece of furniture.
     * @param {Object} item
     * @return {boolean}
     */
    PlanController.prototype.isItemResizable = function (item) {
        if (item != null && item instanceof HomePieceOfFurniture) {
            return item.isResizable();
        }
        else {
            return true;
        }
    };
    /**
     * Returns <code>true</code> if the given <code>item</code> may be deleted.
     * Default implementation returns <code>true</code> except if the given <code>item</code>
     * is a camera or a compass or if the given <code>item</code> isn't a
     * {@linkplain #isPieceOfFurnitureDeletable(HomePieceOfFurniture) deletable piece of furniture}.
     * @param {Object} item
     * @return {boolean}
     */
    PlanController.prototype.isItemDeletable = function (item) {
        if (item != null && item instanceof HomePieceOfFurniture) {
            return this.isPieceOfFurnitureDeletable(item);
        }
        else {
            return !((item != null && item instanceof Compass) || (item != null && item instanceof Camera));
        }
    };
    /**
     * Flips horizontally selected objects.
     */
    PlanController.prototype.flipHorizontally = function () {
        this.flipSelectedItems(true);
    };
    /**
     * Flips vertically selected objects.
     */
    PlanController.prototype.flipVertically = function () {
        this.flipSelectedItems(false);
    };
    PlanController.prototype.flipSelectedItems = function (horizontally) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if (!(selectedItems.length == 0)) {
            var flippedItems = selectedItems.slice(0);
            var itemTextBaseOffsets = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(flippedItems.length);
            for (var i = 0; i < itemTextBaseOffsets.length; i++) {
                {
                    if (flippedItems[i] != null && flippedItems[i] instanceof HomeFurnitureGroup) {
                        var group = flippedItems[i];
                        var furniture = group.getAllFurniture();
                        itemTextBaseOffsets[i] = (function (s) { var a = []; while (s-- > 0)
                            a.push(0); return a; })(/* size */ furniture.length + 1);
                        itemTextBaseOffsets[i][0] = this.getTextBaseOffset(group.getName(), group.getNameStyle(), group.constructor);
                        for (var j = 0; j < /* size */ furniture.length; j++) {
                            {
                                var piece = furniture[j];
                                itemTextBaseOffsets[i][j + 1] = this.getTextBaseOffset(piece.getName(), piece.getNameStyle(), piece.constructor);
                            }
                            ;
                        }
                    }
                    else if (flippedItems[i] != null && flippedItems[i] instanceof HomePieceOfFurniture) {
                        var piece = flippedItems[i];
                        itemTextBaseOffsets[i] = [this.getTextBaseOffset(piece.getName(), piece.getNameStyle(), piece.constructor)];
                    }
                    else if (flippedItems[i] != null && flippedItems[i] instanceof Room) {
                        var room = flippedItems[i];
                        itemTextBaseOffsets[i] = [this.getTextBaseOffset(room.getName(), room.getNameStyle(), room.constructor), this.getTextBaseOffset(this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea()), room.getAreaStyle(), room.constructor)];
                    }
                }
                ;
            }
            this.doFlipItems(flippedItems, itemTextBaseOffsets, horizontally);
            this.selectAndShowItems$java_util_List$boolean(selectedItems, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.FlippingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection(), /* toArray */ selectedItems.slice(0), itemTextBaseOffsets, horizontally));
        }
    };
    /**
     * Flips the <code>items</code>.
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @param {float[][]} itemTextBaseOffsets
     * @param {boolean} horizontalFlip
     * @private
     */
    PlanController.prototype.doFlipItems = function (items, itemTextBaseOffsets, horizontalFlip) {
        var minX = 3.4028235E38;
        var minY = 3.4028235E38;
        var maxX = -3.4028235E38;
        var maxY = -3.4028235E38;
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (!(item != null && item instanceof ObserverCamera)) {
                    {
                        var array = item.getPoints();
                        for (var index1 = 0; index1 < array.length; index1++) {
                            var point = array[index1];
                            {
                                minX = Math.min(minX, point[0]);
                                minY = Math.min(minY, point[1]);
                                maxX = Math.max(maxX, point[0]);
                                maxY = Math.max(maxY, point[1]);
                            }
                        }
                    }
                }
            }
        }
        var symmetryX = (minX + maxX) / 2;
        var symmetryY = (minY + maxY) / 2;
        var flippedItems = items.slice(0);
        for (var i = 0; i < items.length; i++) {
            {
                this.flipItem(items[i], itemTextBaseOffsets[i], 0, horizontalFlip ? symmetryX : symmetryY, horizontalFlip, flippedItems);
            }
            ;
        }
    };
    /**
     * Flips the given <code>item</code> with the given axis coordinate.
     * @param {Object} item the item to flip
     * @param {float[]} itemTextBaseOffsets base offset for the texts of the item
     * @param {number} offsetIndex  index to get the first text base offset of item
     * @param {number} axisCoordinate the coordinate of the symmetry axis
     * @param {boolean} horizontalFlip if <code>true</code> the item should be flipped horizontally otherwise vertically
     * @param {*[]} flippedItems list of all the items that must be flipped
     */
    PlanController.prototype.flipItem = function (item, itemTextBaseOffsets, offsetIndex, axisCoordinate, horizontalFlip, flippedItems) {
        if (item != null && item instanceof HomePieceOfFurniture) {
            var piece = item;
            if (horizontalFlip) {
                piece.setX(axisCoordinate * 2 - piece.getX());
                piece.setAngle(-piece.getAngle());
                PlanController.flipPieceOfFurnitureName(piece, itemTextBaseOffsets[0], horizontalFlip);
            }
            else {
                piece.setY(axisCoordinate * 2 - piece.getY());
                piece.setAngle(Math.PI - piece.getAngle());
                PlanController.flipPieceOfFurnitureName(piece, itemTextBaseOffsets[0], horizontalFlip);
            }
            if (piece.isHorizontallyRotatable()) {
                piece.setRoll(-piece.getRoll());
            }
            if (piece.isResizable()) {
                piece.setModelMirrored(!piece.isModelMirrored());
            }
            if (item != null && item instanceof HomeFurnitureGroup) {
                var furniture = item.getAllFurniture();
                for (var i = 0; i < /* size */ furniture.length; i++) {
                    {
                        PlanController.flipPieceOfFurnitureName(/* get */ furniture[i], itemTextBaseOffsets[i + 1], horizontalFlip);
                    }
                    ;
                }
            }
        }
        else if (item != null && item instanceof Wall) {
            var wall = item;
            if (horizontalFlip) {
                wall.setXStart(axisCoordinate * 2 - wall.getXStart());
                var wallAtStart = wall.getWallAtStart();
                if (wallAtStart != null && !(flippedItems.indexOf((wallAtStart)) >= 0)) {
                    if (wallAtStart.getWallAtStart() === wall) {
                        wallAtStart.setXStart(axisCoordinate * 2 - wallAtStart.getXStart());
                    }
                    else {
                        wallAtStart.setXEnd(axisCoordinate * 2 - wallAtStart.getXEnd());
                    }
                }
                wall.setXEnd(axisCoordinate * 2 - wall.getXEnd());
                var wallAtEnd = wall.getWallAtEnd();
                if (wallAtEnd != null && !(flippedItems.indexOf((wallAtEnd)) >= 0)) {
                    if (wallAtEnd.getWallAtStart() === wall) {
                        wallAtEnd.setXStart(axisCoordinate * 2 - wallAtEnd.getXStart());
                    }
                    else {
                        wallAtEnd.setXEnd(axisCoordinate * 2 - wallAtEnd.getXEnd());
                    }
                }
            }
            else {
                wall.setYStart(axisCoordinate * 2 - wall.getYStart());
                var wallAtStart = wall.getWallAtStart();
                if (wallAtStart != null && !(flippedItems.indexOf((wallAtStart)) >= 0)) {
                    if (wallAtStart.getWallAtStart() === wall) {
                        wallAtStart.setYStart(axisCoordinate * 2 - wallAtStart.getYStart());
                    }
                    else {
                        wallAtStart.setYEnd(axisCoordinate * 2 - wallAtStart.getYEnd());
                    }
                }
                wall.setYEnd(axisCoordinate * 2 - wall.getYEnd());
                var wallAtEnd = wall.getWallAtEnd();
                if (wallAtEnd != null && !(flippedItems.indexOf((wallAtEnd)) >= 0)) {
                    if (wallAtEnd.getWallAtStart() === wall) {
                        wallAtEnd.setYStart(axisCoordinate * 2 - wallAtEnd.getYStart());
                    }
                    else {
                        wallAtEnd.setYEnd(axisCoordinate * 2 - wallAtEnd.getYEnd());
                    }
                }
            }
            var arcExtent = wall.getArcExtent();
            if (arcExtent != null) {
                wall.setArcExtent(-arcExtent);
            }
            PlanController.reverseWallSidesStyle(wall);
        }
        else if (item != null && item instanceof Room) {
            var room = item;
            var points = room.getPoints();
            for (var index = 0; index < points.length; index++) {
                var point = points[index];
                {
                    if (horizontalFlip) {
                        point[0] = axisCoordinate * 2 - point[0];
                    }
                    else {
                        point[1] = axisCoordinate * 2 - point[1];
                    }
                }
            }
            room.setPoints(points);
            var nameStyle = room.getNameStyle();
            var areaStyle = room.getAreaStyle();
            if (horizontalFlip) {
                room.setNameXOffset(-room.getNameXOffset());
                room.setAreaXOffset(-room.getAreaXOffset());
                if (nameStyle != null) {
                    if (nameStyle.getAlignment() === TextStyle.Alignment.LEFT) {
                        room.setNameStyle(nameStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.RIGHT));
                    }
                    else if (nameStyle.getAlignment() === TextStyle.Alignment.RIGHT) {
                        room.setNameStyle(nameStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.LEFT));
                    }
                }
                if (areaStyle != null) {
                    if (areaStyle.getAlignment() === TextStyle.Alignment.LEFT) {
                        room.setAreaStyle(areaStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.RIGHT));
                    }
                    else if (areaStyle.getAlignment() === TextStyle.Alignment.RIGHT) {
                        room.setAreaStyle(areaStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.LEFT));
                    }
                }
            }
            else {
                room.setNameYOffset(-room.getNameYOffset());
                var baseOffset = itemTextBaseOffsets[0];
                room.setNameXOffset(room.getNameXOffset() - baseOffset * Math.sin(room.getNameAngle()));
                room.setNameYOffset(room.getNameYOffset() - baseOffset * Math.cos(room.getNameAngle()));
                room.setAreaYOffset(-room.getAreaYOffset());
                baseOffset = itemTextBaseOffsets[1];
                room.setAreaXOffset(room.getAreaXOffset() - baseOffset * Math.sin(room.getAreaAngle()));
                room.setAreaYOffset(room.getAreaYOffset() - baseOffset * Math.cos(room.getAreaAngle()));
            }
            room.setNameAngle(-room.getNameAngle());
            room.setAreaAngle(-room.getAreaAngle());
        }
        else if (item != null && item instanceof Polyline) {
            var polyline = item;
            var points = polyline.getPoints();
            for (var index = 0; index < points.length; index++) {
                var point = points[index];
                {
                    if (horizontalFlip) {
                        point[0] = axisCoordinate * 2 - point[0];
                    }
                    else {
                        point[1] = axisCoordinate * 2 - point[1];
                    }
                }
            }
            polyline.setPoints(points);
        }
        else if (item != null && item instanceof DimensionLine) {
            var dimensionLine = item;
            if (horizontalFlip) {
                var xStart = dimensionLine.getXStart();
                dimensionLine.setXStart(axisCoordinate * 2 - dimensionLine.getXEnd());
                dimensionLine.setXEnd(axisCoordinate * 2 - xStart);
                var yStart = dimensionLine.getYStart();
                dimensionLine.setYStart(dimensionLine.getYEnd());
                dimensionLine.setYEnd(yStart);
            }
            else {
                dimensionLine.setYStart(axisCoordinate * 2 - dimensionLine.getYStart());
                dimensionLine.setYEnd(axisCoordinate * 2 - dimensionLine.getYEnd());
                dimensionLine.setOffset(-dimensionLine.getOffset());
            }
        }
        else if (item != null && item instanceof Label) {
            var label = item;
            if (horizontalFlip) {
                label.setX(axisCoordinate * 2 - label.getX());
                label.setAngle(-label.getAngle());
            }
            else {
                label.setY(axisCoordinate * 2 - label.getY());
                if (label.getPitch() != null) {
                    label.setAngle(Math.PI - label.getAngle());
                }
                else {
                    label.setAngle(-label.getAngle());
                }
            }
            var style = label.getStyle();
            if (style != null) {
                if (style.getAlignment() === TextStyle.Alignment.LEFT) {
                    label.setStyle(style.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.RIGHT));
                }
                else if (style.getAlignment() === TextStyle.Alignment.RIGHT) {
                    label.setStyle(style.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.LEFT));
                }
            }
        }
        else if (item != null && item instanceof Compass) {
            var compass = item;
            if (horizontalFlip) {
                compass.setX(axisCoordinate * 2 - compass.getX());
                compass.setNorthDirection(-compass.getNorthDirection());
            }
            else {
                compass.setY(axisCoordinate * 2 - compass.getY());
                compass.setNorthDirection(Math.PI - compass.getNorthDirection());
            }
        }
    };
    /**
     * Flips the name of the given <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} nameBaseOffset
     * @param {boolean} horizontalFlip
     * @private
     */
    PlanController.flipPieceOfFurnitureName = function (piece, nameBaseOffset, horizontalFlip) {
        if (horizontalFlip) {
            piece.setNameXOffset(-piece.getNameXOffset());
            var nameStyle = piece.getNameStyle();
            if (nameStyle != null) {
                if (nameStyle.getAlignment() === TextStyle.Alignment.LEFT) {
                    piece.setNameStyle(nameStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.RIGHT));
                }
                else if (nameStyle.getAlignment() === TextStyle.Alignment.RIGHT) {
                    piece.setNameStyle(nameStyle.deriveStyle$com_eteks_sweethome3d_model_TextStyle_Alignment(TextStyle.Alignment.LEFT));
                }
            }
        }
        else {
            piece.setNameYOffset(-piece.getNameYOffset());
            if (piece.getNameXOffset() !== 0 || piece.getNameYOffset() !== 0) {
                piece.setNameXOffset(piece.getNameXOffset() - nameBaseOffset * Math.sin(piece.getNameAngle()));
                piece.setNameYOffset(piece.getNameYOffset() - nameBaseOffset * Math.cos(piece.getNameAngle()));
            }
            piece.setNameAngle(-piece.getNameAngle());
        }
    };
    /**
     * Returns the offset between the vertical middle of the text and its base.
     * @param {string} text
     * @param {TextStyle} textStyle
     * @param {Object} itemClass
     * @return {number}
     * @private
     */
    PlanController.prototype.getTextBaseOffset = function (text, textStyle, itemClass) {
        if (textStyle == null) {
            textStyle = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getDefaultTextStyle(itemClass);
        }
        var textBounds = this.getView().getTextBounds(text != null ? text : "Ag", textStyle, 0, 0, 0);
        return (textBounds[textBounds.length - 1][1] + textBounds[0][1]) / 2;
    };
    /**
     * Controls how selected walls are joined.
     */
    PlanController.prototype.joinSelectedWalls = function () {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        var selectedWalls = Home.getWallsSubList(selectedItems);
        var walls = [null, null];
        for (var index = 0; index < selectedWalls.length; index++) {
            var wall = selectedWalls[index];
            {
                if ((wall.getArcExtent() == null || wall.getArcExtent() === 0.0) && (wall.getWallAtStart() == null || wall.getWallAtEnd() == null)) {
                    if (walls[0] == null) {
                        walls[0] = wall;
                    }
                    else {
                        walls[1] = wall;
                        break;
                    }
                }
            }
        }
        if (walls[1] == null) {
            /* sort */ (function (l, c) { if (c.compare)
                l.sort(function (e1, e2) { return c.compare(e1, e2); });
            else
                l.sort(c); })(selectedWalls, new PlanController.PlanController$0(this, walls));
            if (walls[0] !== /* get */ selectedWalls[1]) {
                walls[1] = /* get */ selectedWalls[1];
            }
        }
        if (walls[1] != null) {
            var firstWallAngle = Math.atan2(walls[0].getYEnd() - walls[0].getYStart(), walls[0].getXEnd() - walls[0].getXStart());
            var secondWallAngle = Math.atan2(walls[1].getYEnd() - walls[1].getYStart(), walls[1].getXEnd() - walls[1].getXStart());
            var wallsAngle = Math.abs(firstWallAngle - secondWallAngle) % Math.PI;
            var parallel = wallsAngle <= Math.PI / 360 || (Math.PI - wallsAngle) <= Math.PI / 360;
            var joinPoint = null;
            if (!parallel) {
                joinPoint = PlanController.computeIntersection$float$float$float$float$float$float$float$float(walls[0].getXStart(), walls[0].getYStart(), walls[0].getXEnd(), walls[0].getYEnd(), walls[1].getXStart(), walls[1].getYStart(), walls[1].getXEnd(), walls[1].getYEnd());
            }
            else if (java.awt.geom.Line2D.ptLineDistSq(walls[1].getXStart(), walls[1].getYStart(), walls[1].getXEnd(), walls[1].getYEnd(), walls[0].getXStart(), walls[0].getYStart()) < 0.01 && java.awt.geom.Line2D.ptLineDistSq(walls[1].getXStart(), walls[1].getYStart(), walls[1].getXEnd(), walls[1].getYEnd(), walls[0].getXEnd(), walls[0].getYEnd()) < 0.01) {
                if ((walls[1].getWallAtStart() == null) !== (walls[1].getWallAtEnd() == null)) {
                    if (walls[1].getWallAtStart() == null) {
                        joinPoint = [walls[1].getXStart(), walls[1].getYStart()];
                    }
                    else {
                        joinPoint = [walls[1].getXEnd(), walls[1].getYEnd()];
                    }
                }
                else if (walls[1].getWallAtStart() == null && walls[1].getWallAtEnd() == null) {
                    var wallStartDistanceToSegment = java.awt.geom.Line2D.ptSegDistSq(walls[1].getXStart(), walls[1].getYStart(), walls[1].getXEnd(), walls[1].getYEnd(), walls[0].getXStart(), walls[0].getYStart());
                    var wallEndDistanceToSegment = java.awt.geom.Line2D.ptSegDistSq(walls[1].getXStart(), walls[1].getYStart(), walls[1].getXEnd(), walls[1].getYEnd(), walls[0].getXEnd(), walls[0].getYEnd());
                    if (wallStartDistanceToSegment > 0.01 && wallEndDistanceToSegment > 0.01) {
                        if (walls[0].getWallAtEnd() != null || walls[0].getWallAtStart() == null && wallStartDistanceToSegment <= wallEndDistanceToSegment) {
                            if (java.awt.geom.Point2D.distanceSq(walls[1].getXStart(), walls[1].getYStart(), walls[0].getXStart(), walls[0].getYStart()) < java.awt.geom.Point2D.distanceSq(walls[1].getXEnd(), walls[1].getYEnd(), walls[0].getXStart(), walls[0].getYStart())) {
                                joinPoint = [walls[1].getXStart(), walls[1].getYStart()];
                            }
                            else {
                                joinPoint = [walls[1].getXEnd(), walls[1].getYEnd()];
                            }
                        }
                        else {
                            if (java.awt.geom.Point2D.distanceSq(walls[1].getXStart(), walls[1].getYStart(), walls[0].getXEnd(), walls[0].getYEnd()) < java.awt.geom.Point2D.distanceSq(walls[1].getXEnd(), walls[1].getYEnd(), walls[0].getXEnd(), walls[0].getYEnd())) {
                                joinPoint = [walls[1].getXStart(), walls[1].getYStart()];
                            }
                            else {
                                joinPoint = [walls[1].getXEnd(), walls[1].getYEnd()];
                            }
                        }
                    }
                }
            }
            if (joinPoint != null) {
                var joinedWalls = PlanController.JoinedWall.getJoinedWalls(/* asList */ [walls[0], walls[1]]);
                this.doJoinWalls(joinedWalls, joinPoint);
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.WallsJoiningUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ selectedItems.slice(0), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection(), joinedWalls, joinPoint));
            }
        }
    };
    /**
     * Joins two walls at the given point.
     * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedWalls
     * @param {float[]} joinPoint
     * @private
     */
    PlanController.prototype.doJoinWalls = function (joinedWalls, joinPoint) {
        var walls = [joinedWalls[0].getWall(), joinedWalls[1].getWall()];
        var connected = false;
        for (var i = 0; i < 2; i++) {
            {
                var joinAtEnd = walls[i].getWallAtEnd() == null;
                var joinAtStart = walls[i].getWallAtStart() == null;
                if (joinAtStart && joinAtEnd) {
                    if (java.awt.geom.Point2D.distanceSq(walls[i].getXStart(), walls[i].getYStart(), joinPoint[0], joinPoint[1]) < java.awt.geom.Point2D.distanceSq(walls[i].getXEnd(), walls[i].getYEnd(), joinPoint[0], joinPoint[1])) {
                        joinAtEnd = false;
                    }
                    else {
                        joinAtStart = false;
                    }
                }
                if (joinAtEnd) {
                    walls[i].setXEnd(joinPoint[0]);
                    walls[i].setYEnd(joinPoint[1]);
                }
                else if (joinAtStart) {
                    walls[i].setXStart(joinPoint[0]);
                    walls[i].setYStart(joinPoint[1]);
                }
                if (connected || walls[(i + 1) % 2].getWallAtStart() == null || walls[(i + 1) % 2].getWallAtEnd() == null) {
                    if (joinAtEnd) {
                        walls[i].setWallAtEnd(walls[(i + 1) % 2]);
                        connected = true;
                    }
                    else if (joinAtStart) {
                        walls[i].setWallAtStart(walls[(i + 1) % 2]);
                        connected = true;
                    }
                }
            }
            ;
        }
        if (connected) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(/* asList */ [walls[0], walls[1]]);
        }
        else {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(/* asList */ [walls[0]]);
        }
    };
    /**
     * Controls the direction reverse of selected walls.
     */
    PlanController.prototype.reverseSelectedWallsDirection = function () {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        var selectedWalls = Home.getWallsSubList(selectedItems);
        if (!(selectedWalls.length == 0)) {
            var reversedWalls = selectedWalls.slice(0);
            this.doReverseWallsDirection(reversedWalls);
            this.selectAndShowItems$java_util_List$boolean(/* asList */ reversedWalls.slice(0), false);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.WallsDirectionReversingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ selectedItems.slice(0), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection(), reversedWalls));
        }
    };
    /**
     * Reverses the <code>walls</code> direction.
     * @param {com.eteks.sweethome3d.model.Wall[]} walls
     * @private
     */
    PlanController.prototype.doReverseWallsDirection = function (walls) {
        for (var index = 0; index < walls.length; index++) {
            var wall = walls[index];
            {
                var xStart = wall.getXStart();
                var yStart = wall.getYStart();
                var xEnd = wall.getXEnd();
                var yEnd = wall.getYEnd();
                wall.setXStart(xEnd);
                wall.setYStart(yEnd);
                wall.setXEnd(xStart);
                wall.setYEnd(yStart);
                if (wall.getArcExtent() != null) {
                    wall.setArcExtent(-wall.getArcExtent());
                }
                var wallAtStart = wall.getWallAtStart();
                var joinedAtEndOfWallAtStart = wallAtStart != null && wallAtStart.getWallAtEnd() === wall;
                var joinedAtStartOfWallAtStart = wallAtStart != null && wallAtStart.getWallAtStart() === wall;
                var wallAtEnd = wall.getWallAtEnd();
                var joinedAtEndOfWallAtEnd = wallAtEnd != null && wallAtEnd.getWallAtEnd() === wall;
                var joinedAtStartOfWallAtEnd = wallAtEnd != null && wallAtEnd.getWallAtStart() === wall;
                wall.setWallAtStart(wallAtEnd);
                wall.setWallAtEnd(wallAtStart);
                if (joinedAtEndOfWallAtStart) {
                    wallAtStart.setWallAtEnd(wall);
                }
                else if (joinedAtStartOfWallAtStart) {
                    wallAtStart.setWallAtStart(wall);
                }
                if (joinedAtEndOfWallAtEnd) {
                    wallAtEnd.setWallAtEnd(wall);
                }
                else if (joinedAtStartOfWallAtEnd) {
                    wallAtEnd.setWallAtStart(wall);
                }
                var heightAtEnd = wall.getHeightAtEnd();
                if (heightAtEnd != null) {
                    var height = wall.getHeight();
                    wall.setHeight(heightAtEnd);
                    wall.setHeightAtEnd(height);
                }
                PlanController.reverseWallSidesStyle(wall);
            }
        }
    };
    /**
     * Exchanges the style of wall sides.
     * @param {Wall} wall
     * @private
     */
    PlanController.reverseWallSidesStyle = function (wall) {
        var rightSideColor = wall.getRightSideColor();
        var rightSideTexture = wall.getRightSideTexture();
        var leftSideShininess = wall.getLeftSideShininess();
        var leftSideBaseboard = wall.getLeftSideBaseboard();
        var leftSideColor = wall.getLeftSideColor();
        var leftSideTexture = wall.getLeftSideTexture();
        var rightSideShininess = wall.getRightSideShininess();
        var rightSideBaseboard = wall.getRightSideBaseboard();
        wall.setLeftSideColor(rightSideColor);
        wall.setLeftSideTexture(rightSideTexture);
        wall.setLeftSideShininess(rightSideShininess);
        wall.setLeftSideBaseboard(rightSideBaseboard);
        wall.setRightSideColor(leftSideColor);
        wall.setRightSideTexture(leftSideTexture);
        wall.setRightSideShininess(leftSideShininess);
        wall.setRightSideBaseboard(leftSideBaseboard);
    };
    /**
     * Controls the split of the selected wall in two joined walls of equal length.
     */
    PlanController.prototype.splitSelectedWall = function () {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        var selectedWalls = Home.getWallsSubList(selectedItems);
        if ( /* size */selectedWalls.length === 1) {
            var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            var splitWall = selectedWalls[0];
            var splitJoinedWall = new PlanController.JoinedWall(splitWall);
            var xStart = splitWall.getXStart();
            var yStart = splitWall.getYStart();
            var xEnd = splitWall.getXEnd();
            var yEnd = splitWall.getYEnd();
            var xMiddle = (xStart + xEnd) / 2;
            var yMiddle = (yStart + yEnd) / 2;
            var wallAtStart = splitWall.getWallAtStart();
            var joinedAtEndOfWallAtStart = wallAtStart != null && wallAtStart.getWallAtEnd() === splitWall;
            var joinedAtStartOfWallAtStart = wallAtStart != null && wallAtStart.getWallAtStart() === splitWall;
            var wallAtEnd = splitWall.getWallAtEnd();
            var joinedAtEndOfWallAtEnd = wallAtEnd != null && wallAtEnd.getWallAtEnd() === splitWall;
            var joinedAtStartOfWallAtEnd = wallAtEnd != null && wallAtEnd.getWallAtStart() === splitWall;
            var firstWall = splitWall.duplicate();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWall(firstWall);
            firstWall.setLevel(splitWall.getLevel());
            var secondWall = splitWall.duplicate();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWall(secondWall);
            secondWall.setLevel(splitWall.getLevel());
            firstWall.setXEnd(xMiddle);
            firstWall.setYEnd(yMiddle);
            secondWall.setXStart(xMiddle);
            secondWall.setYStart(yMiddle);
            if (splitWall.getHeightAtEnd() != null) {
                var heightAtMiddle = (splitWall.getHeight() + splitWall.getHeightAtEnd()) / 2;
                firstWall.setHeightAtEnd(heightAtMiddle);
                secondWall.setHeight(heightAtMiddle);
            }
            firstWall.setWallAtEnd(secondWall);
            secondWall.setWallAtStart(firstWall);
            firstWall.setWallAtStart(wallAtStart);
            if (joinedAtEndOfWallAtStart) {
                wallAtStart.setWallAtEnd(firstWall);
            }
            else if (joinedAtStartOfWallAtStart) {
                wallAtStart.setWallAtStart(firstWall);
            }
            secondWall.setWallAtEnd(wallAtEnd);
            if (joinedAtEndOfWallAtEnd) {
                wallAtEnd.setWallAtEnd(secondWall);
            }
            else if (joinedAtStartOfWallAtEnd) {
                wallAtEnd.setWallAtStart(secondWall);
            }
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteWall(splitWall);
            this.selectAndShowItems$java_util_List$boolean(/* asList */ [firstWall].slice(0), false);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.WallSplittingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ selectedItems.slice(0), basePlanLocked, allLevelsSelection, splitJoinedWall, new PlanController.JoinedWall(firstWall), new PlanController.JoinedWall(secondWall), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked()));
        }
    };
    /**
     * Controls the modification of the selected rooms.
     */
    PlanController.prototype.modifySelectedRooms = function () {
        if (!(Home.getRoomsSubList(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()).length == 0)) {
            new RoomController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_contentManager, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
        }
    };
    /**
     * Returns a new label. The new label isn't added to home.
     * @param {number} x
     * @param {number} y
     * @private
     */
    PlanController.prototype.createLabel = function (x, y) {
        new LabelController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, x, y, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
    };
    /**
     * Controls the modification of the selected labels.
     */
    PlanController.prototype.modifySelectedLabels = function () {
        if (!(Home.getLabelsSubList(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()).length == 0)) {
            new LabelController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
        }
    };
    /**
     * Controls the modification of the selected polylines.
     */
    PlanController.prototype.modifySelectedPolylines = function () {
        if (!(Home.getPolylinesSubList(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()).length == 0)) {
            new PolylineController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_contentManager, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
        }
    };
    /**
     * Controls the modification of the compass.
     */
    PlanController.prototype.modifyCompass = function () {
        new CompassController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
    };
    /**
     * Controls the modification of the observer camera.
     */
    PlanController.prototype.modifyObserverCamera = function () {
        new ObserverCameraController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory).displayView(this.getView());
    };
    /**
     * Toggles bold style of texts in selected items.
     */
    PlanController.prototype.toggleBoldStyle = function () {
        var selectionBoldStyle = null;
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    var bold = void 0;
                    if (item != null && item instanceof Label) {
                        bold = this.getItemTextStyle(item, item.getStyle()).isBold();
                    }
                    else if ((item != null && item instanceof HomePieceOfFurniture) && item.isVisible()) {
                        bold = this.getItemTextStyle(item, item.getNameStyle()).isBold();
                    }
                    else if (item != null && item instanceof Room) {
                        var room = item;
                        bold = this.getItemTextStyle(room, room.getNameStyle()).isBold();
                        if (bold !== this.getItemTextStyle(room, room.getAreaStyle()).isBold()) {
                            bold = null;
                        }
                    }
                    else if (item != null && item instanceof DimensionLine) {
                        bold = this.getItemTextStyle(item, item.getLengthStyle()).isBold();
                    }
                    else {
                        continue;
                    }
                    if (selectionBoldStyle == null) {
                        selectionBoldStyle = bold;
                    }
                    else if (bold == null || !(selectionBoldStyle === bold)) {
                        selectionBoldStyle = null;
                        break;
                    }
                }
            }
        }
        if (selectionBoldStyle == null) {
            selectionBoldStyle = true;
        }
        else {
            selectionBoldStyle = !selectionBoldStyle;
        }
        var itemsWithText = ([]);
        var oldTextStyles = ([]);
        var textStyles = ([]);
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item != null && item instanceof Label) {
                        var label = item;
                        /* add */ (itemsWithText.push(label) > 0);
                        var oldTextStyle = this.getItemTextStyle(label, label.getStyle());
                        /* add */ (oldTextStyles.push(oldTextStyle) > 0);
                        /* add */ (textStyles.push(oldTextStyle.deriveBoldStyle(selectionBoldStyle)) > 0);
                    }
                    else if (item != null && item instanceof HomePieceOfFurniture) {
                        var piece = item;
                        if (piece.isVisible()) {
                            /* add */ (itemsWithText.push(piece) > 0);
                            var oldNameStyle = this.getItemTextStyle(piece, piece.getNameStyle());
                            /* add */ (oldTextStyles.push(oldNameStyle) > 0);
                            /* add */ (textStyles.push(oldNameStyle.deriveBoldStyle(selectionBoldStyle)) > 0);
                        }
                    }
                    else if (item != null && item instanceof Room) {
                        var room = item;
                        /* add */ (itemsWithText.push(room) > 0);
                        var oldNameStyle = this.getItemTextStyle(room, room.getNameStyle());
                        /* add */ (oldTextStyles.push(oldNameStyle) > 0);
                        /* add */ (textStyles.push(oldNameStyle.deriveBoldStyle(selectionBoldStyle)) > 0);
                        var oldAreaStyle = this.getItemTextStyle(room, room.getAreaStyle());
                        /* add */ (oldTextStyles.push(oldAreaStyle) > 0);
                        /* add */ (textStyles.push(oldAreaStyle.deriveBoldStyle(selectionBoldStyle)) > 0);
                    }
                    else if (item != null && item instanceof DimensionLine) {
                        var dimensionLine = item;
                        /* add */ (itemsWithText.push(dimensionLine) > 0);
                        var oldLengthStyle = this.getItemTextStyle(dimensionLine, dimensionLine.getLengthStyle());
                        /* add */ (oldTextStyles.push(oldLengthStyle) > 0);
                        /* add */ (textStyles.push(oldLengthStyle.deriveBoldStyle(selectionBoldStyle)) > 0);
                    }
                }
            }
        }
        this.modifyTextStyle(/* toArray */ itemsWithText.slice(0), /* toArray */ oldTextStyles.slice(0), /* toArray */ textStyles.slice(0));
    };
    /**
     * Returns <code>textStyle</code> if not null or the default text style.
     * @param {Object} item
     * @param {TextStyle} textStyle
     * @return {TextStyle}
     * @private
     */
    PlanController.prototype.getItemTextStyle = function (item, textStyle) {
        if (textStyle == null) {
            textStyle = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getDefaultTextStyle(item.constructor);
        }
        return textStyle;
    };
    /**
     * Toggles italic style of texts in selected items.
     */
    PlanController.prototype.toggleItalicStyle = function () {
        var selectionItalicStyle = null;
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    var italic = void 0;
                    if (item != null && item instanceof Label) {
                        italic = this.getItemTextStyle(item, item.getStyle()).isItalic();
                    }
                    else if ((item != null && item instanceof HomePieceOfFurniture) && item.isVisible()) {
                        italic = this.getItemTextStyle(item, item.getNameStyle()).isItalic();
                    }
                    else if (item != null && item instanceof Room) {
                        var room = item;
                        italic = this.getItemTextStyle(room, room.getNameStyle()).isItalic();
                        if (italic !== this.getItemTextStyle(room, room.getAreaStyle()).isItalic()) {
                            italic = null;
                        }
                    }
                    else if (item != null && item instanceof DimensionLine) {
                        italic = this.getItemTextStyle(item, item.getLengthStyle()).isItalic();
                    }
                    else {
                        continue;
                    }
                    if (selectionItalicStyle == null) {
                        selectionItalicStyle = italic;
                    }
                    else if (italic == null || !(selectionItalicStyle === italic)) {
                        selectionItalicStyle = null;
                        break;
                    }
                }
            }
        }
        if (selectionItalicStyle == null) {
            selectionItalicStyle = true;
        }
        else {
            selectionItalicStyle = !selectionItalicStyle;
        }
        var itemsWithText = ([]);
        var oldTextStyles = ([]);
        var textStyles = ([]);
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item != null && item instanceof Label) {
                        var label = item;
                        /* add */ (itemsWithText.push(label) > 0);
                        var oldTextStyle = this.getItemTextStyle(label, label.getStyle());
                        /* add */ (oldTextStyles.push(oldTextStyle) > 0);
                        /* add */ (textStyles.push(oldTextStyle.deriveItalicStyle(selectionItalicStyle)) > 0);
                    }
                    else if (item != null && item instanceof HomePieceOfFurniture) {
                        var piece = item;
                        if (piece.isVisible()) {
                            /* add */ (itemsWithText.push(piece) > 0);
                            var oldNameStyle = this.getItemTextStyle(piece, piece.getNameStyle());
                            /* add */ (oldTextStyles.push(oldNameStyle) > 0);
                            /* add */ (textStyles.push(oldNameStyle.deriveItalicStyle(selectionItalicStyle)) > 0);
                        }
                    }
                    else if (item != null && item instanceof Room) {
                        var room = item;
                        /* add */ (itemsWithText.push(room) > 0);
                        var oldNameStyle = this.getItemTextStyle(room, room.getNameStyle());
                        /* add */ (oldTextStyles.push(oldNameStyle) > 0);
                        /* add */ (textStyles.push(oldNameStyle.deriveItalicStyle(selectionItalicStyle)) > 0);
                        var oldAreaStyle = this.getItemTextStyle(room, room.getAreaStyle());
                        /* add */ (oldTextStyles.push(oldAreaStyle) > 0);
                        /* add */ (textStyles.push(oldAreaStyle.deriveItalicStyle(selectionItalicStyle)) > 0);
                    }
                    else if (item != null && item instanceof DimensionLine) {
                        var dimensionLine = item;
                        /* add */ (itemsWithText.push(dimensionLine) > 0);
                        var oldLengthStyle = this.getItemTextStyle(dimensionLine, dimensionLine.getLengthStyle());
                        /* add */ (oldTextStyles.push(oldLengthStyle) > 0);
                        /* add */ (textStyles.push(oldLengthStyle.deriveItalicStyle(selectionItalicStyle)) > 0);
                    }
                }
            }
        }
        this.modifyTextStyle(/* toArray */ itemsWithText.slice(0), /* toArray */ oldTextStyles.slice(0), /* toArray */ textStyles.slice(0));
    };
    /**
     * Increase the size of texts in selected items.
     */
    PlanController.prototype.increaseTextSize = function () {
        this.applyFactorToTextSize(1.1);
    };
    /**
     * Decrease the size of texts in selected items.
     */
    PlanController.prototype.decreaseTextSize = function () {
        this.applyFactorToTextSize(1 / 1.1);
    };
    /**
     * Applies a factor to the font size of the texts of the selected items in home.
     * @param {number} factor
     * @private
     */
    PlanController.prototype.applyFactorToTextSize = function (factor) {
        var itemsWithText = ([]);
        var oldTextStyles = ([]);
        var textStyles = ([]);
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item != null && item instanceof Label) {
                        var label = item;
                        /* add */ (itemsWithText.push(label) > 0);
                        var oldLabelStyle = this.getItemTextStyle(item, label.getStyle());
                        /* add */ (oldTextStyles.push(oldLabelStyle) > 0);
                        /* add */ (textStyles.push(oldLabelStyle.deriveStyle$float(Math.round(oldLabelStyle.getFontSize() * factor))) > 0);
                    }
                    else if (item != null && item instanceof HomePieceOfFurniture) {
                        var piece = item;
                        if (piece.isVisible()) {
                            /* add */ (itemsWithText.push(piece) > 0);
                            var oldNameStyle = this.getItemTextStyle(piece, piece.getNameStyle());
                            /* add */ (oldTextStyles.push(oldNameStyle) > 0);
                            /* add */ (textStyles.push(oldNameStyle.deriveStyle$float(Math.round(oldNameStyle.getFontSize() * factor))) > 0);
                        }
                    }
                    else if (item != null && item instanceof Room) {
                        var room = item;
                        /* add */ (itemsWithText.push(room) > 0);
                        var oldNameStyle = this.getItemTextStyle(room, room.getNameStyle());
                        /* add */ (oldTextStyles.push(oldNameStyle) > 0);
                        /* add */ (textStyles.push(oldNameStyle.deriveStyle$float(Math.round(oldNameStyle.getFontSize() * factor))) > 0);
                        var oldAreaStyle = this.getItemTextStyle(room, room.getAreaStyle());
                        /* add */ (oldTextStyles.push(oldAreaStyle) > 0);
                        /* add */ (textStyles.push(oldAreaStyle.deriveStyle$float(Math.round(oldAreaStyle.getFontSize() * factor))) > 0);
                    }
                    else if (item != null && item instanceof DimensionLine) {
                        var dimensionLine = item;
                        /* add */ (itemsWithText.push(dimensionLine) > 0);
                        var oldLengthStyle = this.getItemTextStyle(dimensionLine, dimensionLine.getLengthStyle());
                        /* add */ (oldTextStyles.push(oldLengthStyle) > 0);
                        /* add */ (textStyles.push(oldLengthStyle.deriveStyle$float(Math.round(oldLengthStyle.getFontSize() * factor))) > 0);
                    }
                }
            }
        }
        this.modifyTextStyle(/* toArray */ itemsWithText.slice(0), /* toArray */ oldTextStyles.slice(0), /* toArray */ textStyles.slice(0));
    };
    /**
     * Changes the style of items and posts an undoable change style operation.
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @param {com.eteks.sweethome3d.model.TextStyle[]} oldStyles
     * @param {com.eteks.sweethome3d.model.TextStyle[]} styles
     * @private
     */
    PlanController.prototype.modifyTextStyle = function (items, oldStyles, styles) {
        var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
        var oldSelectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        var oldSelection = oldSelectedItems.slice(0);
        PlanController.doModifyTextStyle(items, styles);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.TextStyleModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, allLevelsSelection, oldStyles, items, styles));
    };
    /**
     * Changes the style of items.
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @param {com.eteks.sweethome3d.model.TextStyle[]} styles
     * @private
     */
    PlanController.doModifyTextStyle = function (items, styles) {
        var styleIndex = 0;
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (item != null && item instanceof Label) {
                    item.setStyle(styles[styleIndex++]);
                }
                else if (item != null && item instanceof HomePieceOfFurniture) {
                    var piece = item;
                    if (piece.isVisible()) {
                        piece.setNameStyle(styles[styleIndex++]);
                    }
                }
                else if (item != null && item instanceof Room) {
                    var room = item;
                    room.setNameStyle(styles[styleIndex++]);
                    room.setAreaStyle(styles[styleIndex++]);
                }
                else if (item != null && item instanceof DimensionLine) {
                    item.setLengthStyle(styles[styleIndex++]);
                }
            }
        }
    };
    /**
     * Returns the minimum scale of the plan view.
     * @return {number}
     */
    PlanController.prototype.getMinimumScale = function () {
        return 0.01;
    };
    /**
     * Returns the maximum scale of the plan view.
     * @return {number}
     */
    PlanController.prototype.getMaximumScale = function () {
        return 10.0;
    };
    /**
     * Returns the scale in plan view.
     * @return {number}
     */
    PlanController.prototype.getScale = function () {
        return this.getView().getScale();
    };
    /**
     * Controls the scale in plan view and and fires a <code>PropertyChangeEvent</code>.
     * @param {number} scale
     */
    PlanController.prototype.setScale = function (scale) {
        scale = Math.max(this.getMinimumScale(), Math.min(scale, this.getMaximumScale()));
        if (scale !== this.getView().getScale()) {
            var oldScale = this.getView().getScale();
            /* clear */ this.furnitureSidesCache.entries = [];
            if (this.getView() != null) {
                var x = this.getView().convertXModelToScreen(this.getXLastMouseMove());
                var y = this.getView().convertXModelToScreen(this.getYLastMouseMove());
                this.getView().setScale(scale);
                this.moveMouse(this.getView().convertXPixelToModel(x), this.getView().convertYPixelToModel(y));
            }
            this.propertyChangeSupport.firePropertyChange(/* name */ "SCALE", oldScale, scale);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setProperty(PlanController.SCALE_VISUAL_PROPERTY, /* valueOf */ String(scale).toString());
        }
    };
    /**
     * Sets the selected level in home.
     * @param {Level} level
     */
    PlanController.prototype.setSelectedLevel = function (level) {
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedLevel(level);
    };
    /**
     * Selects all visible items in the selected level of home.
     */
    PlanController.prototype.selectAll = function () {
        var all = this.getVisibleItemsAtSelectedLevel();
        if (this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked()) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(this.getItemsNotPartOfBasePlan(all));
        }
        else {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(all);
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setAllLevelsSelection(false);
    };
    /**
     * Returns the viewable and selectable home items at the selected level, except camera.
     * @return {*[]}
     * @private
     */
    PlanController.prototype.getVisibleItemsAtSelectedLevel = function () {
        var selectableItems = ([]);
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectableViewableItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item != null && item instanceof HomePieceOfFurniture) {
                        if (this.isPieceOfFurnitureVisibleAtSelectedLevel(item)) {
                            /* add */ (selectableItems.push(item) > 0);
                        }
                    }
                    else if (!(item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) || item.isAtLevel(selectedLevel)) {
                        /* add */ (selectableItems.push(item) > 0);
                    }
                }
            }
        }
        return selectableItems;
    };
    /**
     * Selects all visible items in all levels of home.
     */
    PlanController.prototype.selectAllAtAllLevels = function () {
        var allItems = (this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectableViewableItems().slice(0));
        if (this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked()) {
            allItems = this.getItemsNotPartOfBasePlan(allItems);
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(allItems);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setAllLevelsSelection(true);
    };
    /**
     * Returns the visible (fully or partially) rooms at the selected level in home.
     * @return {Room[]}
     * @private
     */
    PlanController.prototype.getDetectableRoomsAtSelectedLevel = function () {
        var rooms = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms();
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        var levels = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
        if (selectedLevel == null || /* size */ levels.length <= 1) {
            return rooms;
        }
        else {
            var visibleRooms = ([]);
            var selectedLevelIndex = levels.indexOf(selectedLevel);
            var level0 = levels[0] === selectedLevel || /* get */ levels[selectedLevelIndex - 1].getElevation() === selectedLevel.getElevation();
            var otherLevel = levels[level0 && selectedLevelIndex < /* size */ levels.length - 1 ? selectedLevelIndex + 1 : selectedLevelIndex - 1];
            for (var index = 0; index < rooms.length; index++) {
                var room = rooms[index];
                {
                    if (room.isAtLevel(selectedLevel) || otherLevel != null && room.isAtLevel(otherLevel) && (level0 && room.isFloorVisible() || !level0 && room.isCeilingVisible())) {
                        /* add */ (visibleRooms.push(room) > 0);
                    }
                }
            }
            return visibleRooms;
        }
    };
    /**
     * Returns the visible (fully or partially) walls at the selected level in home.
     * @return {Wall[]}
     * @private
     */
    PlanController.prototype.getDetectableWallsAtSelectedLevel = function () {
        var walls = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        var levels = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
        if (selectedLevel == null || /* size */ levels.length <= 1) {
            return walls;
        }
        else {
            var visibleWalls = ([]);
            var selectedLevelIndex = levels.indexOf(selectedLevel);
            var level0 = levels[0] === selectedLevel || /* get */ levels[selectedLevelIndex - 1].getElevation() === selectedLevel.getElevation();
            var otherLevel = levels[level0 && selectedLevelIndex < /* size */ levels.length - 1 ? selectedLevelIndex + 1 : selectedLevelIndex - 1];
            for (var index = 0; index < walls.length; index++) {
                var wall = walls[index];
                {
                    if (wall.isAtLevel(selectedLevel) || otherLevel != null && wall.isAtLevel(otherLevel)) {
                        /* add */ (visibleWalls.push(wall) > 0);
                    }
                }
            }
            return visibleWalls;
        }
    };
    /**
     * Returns the horizontal ruler of the plan view.
     * @return {Object}
     */
    PlanController.prototype.getHorizontalRulerView = function () {
        return this.getView().getHorizontalRuler();
    };
    /**
     * Returns the vertical ruler of the plan view.
     * @return {Object}
     */
    PlanController.prototype.getVerticalRulerView = function () {
        return this.getView().getVerticalRuler();
    };
    PlanController.prototype.__com_eteks_sweethome3d_viewcontroller_PlanController_addModelListeners = function () {
        var _this = this;
        this.selectionListener = new PlanController.PlanController$1(this);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addSelectionListener(this.selectionListener);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getObserverCamera().addPropertyChangeListener(new PlanController.PlanController$2(this));
        this.wallChangeListener = new PlanController.PlanController$3(this);
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
            for (var index = 0; index < array.length; index++) {
                var wall = array[index];
                {
                    wall.addPropertyChangeListener(this.wallChangeListener);
                }
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWallsListener(function (ev) {
            if (ev.getType() === CollectionEvent.Type.ADD) {
                ev.getItem().addPropertyChangeListener(_this.wallChangeListener);
            }
            else if (ev.getType() === CollectionEvent.Type.DELETE) {
                ev.getItem().removePropertyChangeListener(_this.wallChangeListener);
            }
            _this.resetAreaCache();
        });
        var furnitureChangeListener = new PlanController.PlanController$4(this);
        this.furnitureSizeChangeListener = new PlanController.PlanController$5(this);
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    piece.addPropertyChangeListener(furnitureChangeListener);
                    piece.addPropertyChangeListener(this.furnitureSizeChangeListener);
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        {
                            var array1 = piece.getAllFurniture();
                            for (var index1 = 0; index1 < array1.length; index1++) {
                                var childPiece = array1[index1];
                                {
                                    childPiece.addPropertyChangeListener(this.furnitureSizeChangeListener);
                                }
                            }
                        }
                    }
                }
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addFurnitureListener(function (ev) {
            var piece = ev.getItem();
            if (ev.getType() === CollectionEvent.Type.ADD) {
                piece.addPropertyChangeListener(furnitureChangeListener);
                piece.addPropertyChangeListener(_this.furnitureSizeChangeListener);
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    {
                        var array = piece.getAllFurniture();
                        for (var index = 0; index < array.length; index++) {
                            var childPiece = array[index];
                            {
                                childPiece.addPropertyChangeListener(_this.furnitureSizeChangeListener);
                            }
                        }
                    }
                }
            }
            else if (ev.getType() === CollectionEvent.Type.DELETE) {
                piece.removePropertyChangeListener(furnitureChangeListener);
                /* remove */ (function (m, k) { if (m.entries == null)
                    m.entries = []; for (var i = 0; i < m.entries.length; i++)
                    if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                        return m.entries.splice(i, 1)[0];
                    } })(_this.furnitureSidesCache, piece);
                piece.removePropertyChangeListener(_this.furnitureSizeChangeListener);
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    {
                        var array = piece.getAllFurniture();
                        for (var index = 0; index < array.length; index++) {
                            var childPiece = array[index];
                            {
                                childPiece.removePropertyChangeListener(_this.furnitureSizeChangeListener);
                            }
                        }
                    }
                }
            }
        });
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addPropertyChangeListener("SELECTED_LEVEL", new PlanController.PlanController$6(this));
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getObserverCamera().setFixedSize(/* size */ this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels().length >= 2);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addLevelsListener(function (ev) {
            _this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getObserverCamera().setFixedSize(/* size */ _this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels().length >= 2);
        });
    };
    /**
     * Returns the selection listener add to the controlled home.
     * @return {Object}
     * @private
     */
    PlanController.prototype.getSelectionListener = function () {
        return this.selectionListener;
    };
    PlanController.prototype.resetAreaCache = function () {
        this.wallsAreaCache = null;
        this.wallsIncludingBaseboardsAreaCache = null;
        this.insideWallsAreaCache = null;
        this.roomPathsCache = null;
    };
    /**
     * Displays in plan view the feedback of <code>draggedItems</code>,
     * during a drag and drop operation initiated from outside of plan view.
     * @param {*[]} draggedItems
     * @param {number} x
     * @param {number} y
     */
    PlanController.prototype.startDraggedItems = function (draggedItems, x, y) {
        this.draggedItems = draggedItems;
        if (this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) {
            {
                var array = Home.getFurnitureSubList(draggedItems);
                for (var index = 0; index < array.length; index++) {
                    var piece = array[index];
                    {
                        if (piece.isResizable()) {
                            piece.setWidth(this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(piece.getWidth(), 0.1));
                            piece.setWidthInPlan(piece.getWidth());
                            piece.setDepth(this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(piece.getDepth(), 0.1));
                            piece.setDepthInPlan(piece.getDepth());
                            piece.setHeight(this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(piece.getHeight(), 0.1));
                            piece.setHeightInPlan(piece.getHeight());
                        }
                        piece.setElevation(this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(piece.getElevation(), 0.1));
                    }
                }
            }
        }
        if (this.isModificationState()) {
            this.escape();
        }
        this.setState(this.getDragAndDropState());
        this.moveMouse(x, y);
    };
    /**
     * Deletes in plan view the feedback of the dragged items.
     */
    PlanController.prototype.stopDraggedItems = function () {
        if (this.state !== this.getDragAndDropState()) {
            throw new IllegalStateException("Controller isn\'t in a drag and drop state");
        }
        this.draggedItems = null;
        this.setState(this.previousState);
    };
    /**
     * Attempts to modify <code>piece</code> location depending of its context.
     * If the <code>piece</code> is a door or a window and the point (<code>x</code>, <code>y</code>)
     * belongs to a wall, the piece will be resized, rotated and moved so
     * its opening depth is equal to wall thickness and its angle matches wall direction.
     * If the <code>piece</code> isn't a door or a window and the point (<code>x</code>, <code>y</code>)
     * belongs to a wall, the piece will be rotated and moved so
     * its back face lies along the closest wall side and its angle matches wall direction.
     * If the <code>piece</code> isn't a door or a window, its bounding box is included in
     * the one of an other object and its elevation is equal to zero, it will be elevated
     * to appear on the top of the latter.
     * @param {HomePieceOfFurniture} piece
     * @param {number} x
     * @param {number} y
     */
    PlanController.prototype.adjustMagnetizedPieceOfFurniture = function (piece, x, y) {
        var pieceElevationAdjusted = this.adjustPieceOfFurnitureElevation(piece) != null;
        var magnetWall = this.adjustPieceOfFurnitureOnWallAt(piece, x, y, true);
        if (!pieceElevationAdjusted) {
            this.adjustPieceOfFurnitureSideBySideAt(piece, magnetWall == null, magnetWall);
        }
    };
    /**
     * Attempts to move and resize <code>piece</code> depending on the wall under the
     * point (<code>x</code>, <code>y</code>) and returns that wall it it exists.
     * @see #adjustMagnetizedPieceOfFurniture(HomePieceOfFurniture, float, float)
     * @param {HomePieceOfFurniture} piece
     * @param {number} x
     * @param {number} y
     * @param {boolean} forceOrientation
     * @return {Wall}
     * @private
     */
    PlanController.prototype.adjustPieceOfFurnitureOnWallAt = function (piece, x, y, forceOrientation) {
        var margin = PlanController.PIXEL_MARGIN / this.getScale();
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        var piecePoints = piece.getPoints();
        var includeBaseboards = !piece.isDoorOrWindow() && piece.getElevation() === 0;
        var wallsArea = this.getWallsArea(includeBaseboards);
        var walls = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
        var referenceWall = null;
        var referenceWallArcExtent = null;
        if (forceOrientation || !piece.isDoorOrWindow()) {
            for (var index = 0; index < walls.length; index++) {
                var wall = walls[index];
                {
                    if (wall.isAtLevel(selectedLevel) && this.isLevelNullOrViewable(wall.getLevel()) && wall.containsPoint$float$float$boolean$float(x, y, includeBaseboards, 0) && wall.getStartPointToEndPointDistance() > 0) {
                        referenceWall = this.getReferenceWall(wall, x, y);
                        referenceWallArcExtent = wall.getArcExtent();
                        break;
                    }
                }
            }
            if (referenceWall == null) {
                for (var index = 0; index < walls.length; index++) {
                    var wall = walls[index];
                    {
                        if (wall.isAtLevel(selectedLevel) && this.isLevelNullOrViewable(wall.getLevel()) && wall.containsPoint$float$float$boolean$float(x, y, includeBaseboards, 0) && wall.getStartPointToEndPointDistance() > 0) {
                            referenceWall = this.getReferenceWall(wall, x, y);
                            referenceWallArcExtent = wall.getArcExtent();
                            break;
                        }
                    }
                }
            }
        }
        if (referenceWall == null) {
            var pieceAreaWithMargin = new java.awt.geom.Area(this.getRotatedRectangle(piece.getX() - piece.getWidthInPlan() / 2 - margin, piece.getY() - piece.getDepthInPlan() / 2 - margin, piece.getWidthInPlan() + 2 * margin, piece.getDepthInPlan() + 2 * margin, piece.getAngle()));
            var intersectionWithReferenceWallSurface = 0;
            for (var index = 0; index < walls.length; index++) {
                var wall = walls[index];
                {
                    if (wall.isAtLevel(selectedLevel) && this.isLevelNullOrViewable(wall.getLevel()) && wall.getStartPointToEndPointDistance() > 0) {
                        var wallPoints = wall.getPoints$boolean(includeBaseboards);
                        var wallAreaIntersection = new java.awt.geom.Area(this.getPath$float_A_A(wallPoints));
                        wallAreaIntersection.intersect(pieceAreaWithMargin);
                        if (!wallAreaIntersection.isEmpty()) {
                            var surface = this.getArea(wallAreaIntersection);
                            if (surface > intersectionWithReferenceWallSurface) {
                                intersectionWithReferenceWallSurface = surface;
                                if (forceOrientation) {
                                    referenceWall = this.getReferenceWall(wall, x, y);
                                    referenceWallArcExtent = wall.getArcExtent();
                                }
                                else {
                                    var intersectionBounds = wallAreaIntersection.getBounds2D();
                                    referenceWall = this.getReferenceWall(wall, intersectionBounds.getCenterX(), intersectionBounds.getCenterY());
                                    referenceWallArcExtent = wall.getArcExtent();
                                }
                            }
                        }
                    }
                }
            }
        }
        if (referenceWall != null) {
            var xPiece = x;
            var yPiece = y;
            var pieceAngle = piece.getAngle();
            var halfWidth = piece.getWidthInPlan() / 2;
            var halfDepth = piece.getDepthInPlan() / 2;
            var wallAngle = Math.atan2(referenceWall.getYEnd() - referenceWall.getYStart(), referenceWall.getXEnd() - referenceWall.getXStart());
            var wallPoints = referenceWall.getPoints$boolean(includeBaseboards);
            var magnetizedAtRight = wallAngle > -Math.PI / 2 && wallAngle <= Math.PI / 2;
            var cosWallAngle = Math.cos(wallAngle);
            var sinWallAngle = Math.sin(wallAngle);
            var distanceToLeftSide = wallPoints[0][0] !== wallPoints[0][1] || wallPoints[1][0] !== wallPoints[1][1] ? java.awt.geom.Line2D.ptLineDist(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], x, y) : java.awt.geom.Point2D.distance(wallPoints[0][0], wallPoints[0][1], x, y);
            var distanceToRightSide = wallPoints[2][0] !== wallPoints[2][1] || wallPoints[3][0] !== wallPoints[3][1] ? java.awt.geom.Line2D.ptLineDist(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], x, y) : java.awt.geom.Point2D.distance(wallPoints[2][0], wallPoints[2][1], x, y);
            var adjustOrientation = forceOrientation || piece.isDoorOrWindow() || referenceWall.containsPoint$float$float$boolean$float(x, y, includeBaseboards, margin);
            if (adjustOrientation) {
                var distanceToPieceLeftSide = java.awt.geom.Line2D.ptLineDist(piecePoints[0][0], piecePoints[0][1], piecePoints[3][0], piecePoints[3][1], x, y);
                var distanceToPieceRightSide = java.awt.geom.Line2D.ptLineDist(piecePoints[1][0], piecePoints[1][1], piecePoints[2][0], piecePoints[2][1], x, y);
                var distanceToPieceSide = pieceAngle > (3 * Math.PI / 2 + 1.0E-6) || pieceAngle < (Math.PI / 2 + 1.0E-6) ? distanceToPieceLeftSide : distanceToPieceRightSide;
                pieceAngle = (distanceToRightSide < distanceToLeftSide ? wallAngle : wallAngle + Math.PI);
                if (piece.isDoorOrWindow()) {
                    var thicknessEpsilon = 7.5E-4;
                    var wallDistance = void 0;
                    if (referenceWallArcExtent == null || /* floatValue */ referenceWallArcExtent === 0) {
                        wallDistance = thicknessEpsilon / 2;
                        if (piece != null && piece instanceof HomeDoorOrWindow) {
                            var doorOrWindow = piece;
                            if (piece.isResizable() && this.isItemResizable(piece) && doorOrWindow.isWidthDepthDeformable() && doorOrWindow.getModelTransformations() == null) {
                                piece.setDepth(thicknessEpsilon + referenceWall.getThickness() / doorOrWindow.getWallThickness());
                                piece.setDepthInPlan(piece.getDepth());
                                halfDepth = piece.getDepth() / 2;
                                wallDistance += piece.getDepth() * doorOrWindow.getWallDistance();
                            }
                            else {
                                wallDistance += piece.getDepth() * (doorOrWindow.getWallDistance() + doorOrWindow.getWallThickness()) - referenceWall.getThickness();
                            }
                        }
                    }
                    else {
                        wallDistance = -referenceWall.getThickness() / 2;
                        if (piece != null && piece instanceof HomeDoorOrWindow) {
                            var doorOrWindow = piece;
                            wallDistance += piece.getDepth() * (doorOrWindow.getWallDistance() + doorOrWindow.getWallThickness() / 2);
                        }
                    }
                    if (distanceToRightSide < distanceToLeftSide) {
                        xPiece += sinWallAngle * ((distanceToLeftSide + wallDistance) - halfDepth);
                        yPiece += cosWallAngle * (-(distanceToLeftSide + wallDistance) + halfDepth);
                    }
                    else {
                        xPiece += sinWallAngle * (-(distanceToRightSide + wallDistance) + halfDepth);
                        yPiece += cosWallAngle * ((distanceToRightSide + wallDistance) - halfDepth);
                    }
                    if (magnetizedAtRight) {
                        xPiece += cosWallAngle * (halfWidth - distanceToPieceSide);
                        yPiece += sinWallAngle * (halfWidth - distanceToPieceSide);
                    }
                    else {
                        xPiece += -cosWallAngle * (halfWidth - distanceToPieceSide);
                        yPiece += -sinWallAngle * (halfWidth - distanceToPieceSide);
                    }
                }
                else {
                    if (distanceToRightSide < distanceToLeftSide) {
                        var pointIndicator = java.awt.geom.Line2D.relativeCCW(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], x, y);
                        xPiece += pointIndicator * sinWallAngle * distanceToRightSide - sinWallAngle * halfDepth;
                        yPiece += -pointIndicator * cosWallAngle * distanceToRightSide + cosWallAngle * halfDepth;
                    }
                    else {
                        var pointIndicator = java.awt.geom.Line2D.relativeCCW(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], x, y);
                        xPiece += -pointIndicator * sinWallAngle * distanceToLeftSide + sinWallAngle * halfDepth;
                        yPiece += pointIndicator * cosWallAngle * distanceToLeftSide - cosWallAngle * halfDepth;
                    }
                    if (magnetizedAtRight) {
                        xPiece += cosWallAngle * (halfWidth - distanceToPieceSide);
                        yPiece += sinWallAngle * (halfWidth - distanceToPieceSide);
                    }
                    else {
                        xPiece += -cosWallAngle * (halfWidth - distanceToPieceSide);
                        yPiece += -sinWallAngle * (halfWidth - distanceToPieceSide);
                    }
                }
            }
            else {
                var centerLine = new java.awt.geom.Line2D.Float(referenceWall.getXStart(), referenceWall.getYStart(), referenceWall.getXEnd(), referenceWall.getYEnd());
                var pieceBoundingBox = this.getRotatedRectangle(0, 0, piece.getWidthInPlan(), piece.getDepthInPlan(), (pieceAngle - wallAngle));
                var rotatedBoundingBoxDepth = pieceBoundingBox.getBounds2D().getHeight();
                var relativeCCWToPieceCenterSignum = (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(centerLine.relativeCCW(piece.getX(), piece.getY()));
                var relativeCCWToPointSignum = (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(centerLine.relativeCCW(x, y));
                var distance = relativeCCWToPieceCenterSignum * (-referenceWall.getThickness() / 2 + centerLine.ptLineDist(piece.getX(), piece.getY()) - rotatedBoundingBoxDepth / 2);
                if (includeBaseboards) {
                    if (relativeCCWToPieceCenterSignum > 0 && referenceWall.getLeftSideBaseboard() != null) {
                        distance -= relativeCCWToPieceCenterSignum * referenceWall.getLeftSideBaseboard().getThickness();
                    }
                    else if (relativeCCWToPieceCenterSignum < 0 && referenceWall.getRightSideBaseboard() != null) {
                        distance -= relativeCCWToPieceCenterSignum * referenceWall.getRightSideBaseboard().getThickness();
                    }
                }
                if (relativeCCWToPointSignum !== relativeCCWToPieceCenterSignum) {
                    distance -= relativeCCWToPointSignum * (rotatedBoundingBoxDepth + referenceWall.getThickness());
                    if (referenceWall.getLeftSideBaseboard() != null) {
                        distance -= relativeCCWToPointSignum * referenceWall.getLeftSideBaseboard().getThickness();
                    }
                    if (referenceWall.getRightSideBaseboard() != null) {
                        distance -= relativeCCWToPointSignum * referenceWall.getRightSideBaseboard().getThickness();
                    }
                }
                xPiece = piece.getX() + (-distance * sinWallAngle);
                yPiece = piece.getY() + (distance * cosWallAngle);
            }
            if (!piece.isDoorOrWindow() && (referenceWall.getArcExtent() == null || !adjustOrientation || java.awt.geom.Line2D.relativeCCW(referenceWall.getXStart(), referenceWall.getYStart(), referenceWall.getXEnd(), referenceWall.getYEnd(), x, y) > 0)) {
                var wallsAreaIntersection = new java.awt.geom.Area(wallsArea);
                var adjustedPieceArea = new java.awt.geom.Area(this.getRotatedRectangle(xPiece - halfWidth, yPiece - halfDepth, piece.getWidthInPlan(), piece.getDepthInPlan(), pieceAngle));
                wallsAreaIntersection.subtract(new java.awt.geom.Area(this.getPath$float_A_A(wallPoints)));
                wallsAreaIntersection.intersect(adjustedPieceArea);
                if (!wallsAreaIntersection.isEmpty()) {
                    var closestWallIntersectionPath = this.getClosestPath(this.getAreaPaths(wallsAreaIntersection), x, y);
                    if (closestWallIntersectionPath != null) {
                        adjustedPieceArea.subtract(wallsArea);
                        if (adjustedPieceArea.isEmpty()) {
                            return null;
                        }
                        else {
                            var adjustedPieceAreaPaths = this.getAreaPaths(adjustedPieceArea);
                            var angleDifference = (wallAngle - pieceAngle + 2 * Math.PI) % Math.PI;
                            if (angleDifference < 1.0E-5 || Math.PI - angleDifference < 1.0E-5 || /* size */ adjustedPieceAreaPaths.length < 2) {
                                var adjustedPiecePathInArea = this.getClosestPath(adjustedPieceAreaPaths, x, y);
                                var adjustingArea = new java.awt.geom.Area(closestWallIntersectionPath);
                                for (var index = 0; index < adjustedPieceAreaPaths.length; index++) {
                                    var path = adjustedPieceAreaPaths[index];
                                    {
                                        if (path !== adjustedPiecePathInArea) {
                                            adjustingArea.add(new java.awt.geom.Area(path));
                                        }
                                    }
                                }
                                var rotation = java.awt.geom.AffineTransform.getRotateInstance(-wallAngle);
                                var adjustingAreaBounds = adjustingArea.createTransformedArea(rotation).getBounds2D();
                                var adjustedPiecePathInAreaBounds = adjustedPiecePathInArea.createTransformedShape(rotation).getBounds2D();
                                if (!adjustingAreaBounds.contains(adjustedPiecePathInAreaBounds)) {
                                    var adjustLeftBorder = (function (f) { if (f > 0) {
                                        return 1;
                                    }
                                    else if (f < 0) {
                                        return -1;
                                    }
                                    else {
                                        return 0;
                                    } })(adjustedPiecePathInAreaBounds.getCenterX() - adjustingAreaBounds.getCenterX());
                                    xPiece += adjustingAreaBounds.getWidth() * cosWallAngle * adjustLeftBorder;
                                    yPiece += adjustingAreaBounds.getWidth() * sinWallAngle * adjustLeftBorder;
                                }
                            }
                        }
                    }
                }
            }
            piece.setAngle(pieceAngle);
            piece.setX(xPiece);
            piece.setY(yPiece);
            if (piece != null && piece instanceof HomeDoorOrWindow) {
                piece.setBoundToWall(referenceWallArcExtent == null || /* floatValue */ referenceWallArcExtent === 0);
            }
            return referenceWall;
        }
        return null;
    };
    /**
     * Returns <code>true</code> is the given <code>level</code> is viewable.
     * @param {Level} level
     * @return {boolean}
     * @private
     */
    PlanController.prototype.isLevelNullOrViewable = function (level) {
        return level == null || level.isViewable();
    };
    /**
     * Returns <code>wall</code> or a small wall part at the angle formed by the line joining wall center to
     * (<code>x</code>, <code>y</code>) point if the given <code>wall</code> is round.
     * @param {Wall} wall
     * @param {number} x
     * @param {number} y
     * @return {Wall}
     * @private
     */
    PlanController.prototype.getReferenceWall = function (wall, x, y) {
        var arcExtent = wall.getArcExtent();
        if (arcExtent == null || /* floatValue */ arcExtent === 0) {
            return wall;
        }
        else {
            var angle = Math.atan2(wall.getYArcCircleCenter() - y, x - wall.getXArcCircleCenter());
            var radius = java.awt.geom.Point2D.distance(wall.getXArcCircleCenter(), wall.getYArcCircleCenter(), wall.getXStart(), wall.getYStart());
            var epsilonAngle = 0.001;
            var wallPart = new Wall((wall.getXArcCircleCenter() + Math.cos(angle + epsilonAngle) * radius), (wall.getYArcCircleCenter() - Math.sin(angle + epsilonAngle) * radius), (wall.getXArcCircleCenter() + Math.cos(angle - epsilonAngle) * radius), (wall.getYArcCircleCenter() - Math.sin(angle - epsilonAngle) * radius), wall.getThickness(), 0);
            wallPart.setLeftSideBaseboard(wall.getLeftSideBaseboard());
            wallPart.setRightSideBaseboard(wall.getRightSideBaseboard());
            return wallPart;
        }
    };
    /**
     * Returns the closest path among <code>paths</code> ones to the given point.
     * @param {java.awt.geom.GeneralPath[]} paths
     * @param {number} x
     * @param {number} y
     * @return {java.awt.geom.GeneralPath}
     * @private
     */
    PlanController.prototype.getClosestPath = function (paths, x, y) {
        var closestPath = null;
        var closestPathDistance = 1.7976931348623157E308;
        for (var index = 0; index < paths.length; index++) {
            var path = paths[index];
            {
                var pathPoints = this.getPathPoints(path, true);
                for (var i = 0; i < pathPoints.length; i++) {
                    {
                        var distanceToPath = java.awt.geom.Line2D.ptSegDistSq(pathPoints[i][0], pathPoints[i][1], pathPoints[(i + 1) % pathPoints.length][0], pathPoints[(i + 1) % pathPoints.length][1], x, y);
                        if (distanceToPath < closestPathDistance) {
                            closestPathDistance = distanceToPath;
                            closestPath = path;
                        }
                    }
                    ;
                }
            }
        }
        return closestPath;
    };
    /**
     * Returns the dimension lines that indicates how is placed a given <code>piece</code>
     * along a <code>wall</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {Wall} wall
     * @return {DimensionLine[]}
     * @private
     */
    PlanController.prototype.getDimensionLinesAlongWall = function (piece, wall) {
        var piecePoints = piece.getPoints();
        var angle = piece.getAngle();
        var wallPoints = wall.getPoints$();
        var pieceLeftPoint;
        var pieceRightPoint;
        var piecePoint = piece.isDoorOrWindow() ? piecePoints[3] : piecePoints[0];
        if (java.awt.geom.Line2D.ptLineDistSq(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], piecePoint[0], piecePoint[1]) <= java.awt.geom.Line2D.ptLineDistSq(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], piecePoint[0], piecePoint[1])) {
            pieceLeftPoint = PlanController.computeIntersection$float_A$float_A$float_A$float_A(wallPoints[0], wallPoints[1], piecePoints[0], piecePoints[3]);
            pieceRightPoint = PlanController.computeIntersection$float_A$float_A$float_A$float_A(wallPoints[0], wallPoints[1], piecePoints[1], piecePoints[2]);
        }
        else {
            pieceLeftPoint = PlanController.computeIntersection$float_A$float_A$float_A$float_A(wallPoints[2], wallPoints[3], piecePoints[0], piecePoints[3]);
            pieceRightPoint = PlanController.computeIntersection$float_A$float_A$float_A$float_A(wallPoints[2], wallPoints[3], piecePoints[1], piecePoints[2]);
        }
        var dimensionLines = ([]);
        var wallEndPointJoinedToPieceLeftPoint = null;
        var wallEndPointJoinedToPieceRightPoint = null;
        var roomPaths = this.getRoomPathsFromWalls();
        for (var i = 0; i < /* size */ roomPaths.length && wallEndPointJoinedToPieceLeftPoint == null && wallEndPointJoinedToPieceRightPoint == null; i++) {
            {
                var roomPoints = this.getPathPoints(/* get */ roomPaths[i], true);
                for (var j = 0; j < roomPoints.length; j++) {
                    {
                        var startPoint = roomPoints[j];
                        var endPoint = roomPoints[(j + 1) % roomPoints.length];
                        var deltaX = endPoint[0] - startPoint[0];
                        var deltaY = endPoint[1] - startPoint[1];
                        var segmentAngle = Math.abs(deltaX) < 1.0E-5 ? Math.PI / 2 : (Math.abs(deltaY) < 1.0E-5 ? 0 : Math.atan2(deltaY, deltaX));
                        var angleDifference = (segmentAngle - angle + 2 * Math.PI) % Math.PI;
                        if (angleDifference < 1.0E-5 || Math.PI - angleDifference < 1.0E-5) {
                            var segmentContainsLeftPoint = java.awt.geom.Line2D.ptSegDistSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1], pieceLeftPoint[0], pieceLeftPoint[1]) < 1.0E-4;
                            var segmentContainsRightPoint = java.awt.geom.Line2D.ptSegDistSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1], pieceRightPoint[0], pieceRightPoint[1]) < 1.0E-4;
                            if (segmentContainsLeftPoint || segmentContainsRightPoint) {
                                if (segmentContainsLeftPoint) {
                                    var startPointToLeftPointDistance = java.awt.geom.Point2D.distanceSq(startPoint[0], startPoint[1], pieceLeftPoint[0], pieceLeftPoint[1]);
                                    var startPointToRightPointDistance = java.awt.geom.Point2D.distanceSq(startPoint[0], startPoint[1], pieceRightPoint[0], pieceRightPoint[1]);
                                    if (startPointToLeftPointDistance < startPointToRightPointDistance || !segmentContainsRightPoint) {
                                        wallEndPointJoinedToPieceLeftPoint = /* clone */ startPoint.slice(0);
                                    }
                                    else {
                                        wallEndPointJoinedToPieceLeftPoint = /* clone */ endPoint.slice(0);
                                    }
                                }
                                if (segmentContainsRightPoint) {
                                    var endPointToLeftPointDistance = java.awt.geom.Point2D.distanceSq(endPoint[0], endPoint[1], pieceLeftPoint[0], pieceLeftPoint[1]);
                                    var endPointToRightPointDistance = java.awt.geom.Point2D.distanceSq(endPoint[0], endPoint[1], pieceRightPoint[0], pieceRightPoint[1]);
                                    if (endPointToLeftPointDistance < endPointToRightPointDistance && segmentContainsLeftPoint) {
                                        wallEndPointJoinedToPieceRightPoint = /* clone */ startPoint.slice(0);
                                    }
                                    else {
                                        wallEndPointJoinedToPieceRightPoint = /* clone */ endPoint.slice(0);
                                    }
                                }
                                break;
                            }
                        }
                    }
                    ;
                }
            }
            ;
        }
        var pieceFrontSideAlongWallSide = !piece.isDoorOrWindow() && java.awt.geom.Line2D.ptLineDistSq(wall.getXStart(), wall.getYStart(), wall.getXEnd(), wall.getYEnd(), piecePoint[0], piecePoint[1]) > java.awt.geom.Line2D.ptLineDistSq(wall.getXStart(), wall.getYStart(), wall.getXEnd(), wall.getYEnd(), piecePoints[3][0], piecePoints[3][1]);
        if (wallEndPointJoinedToPieceLeftPoint != null) {
            var offset = void 0;
            if (pieceFrontSideAlongWallSide) {
                offset = -java.awt.geom.Point2D.distance(pieceLeftPoint[0], pieceLeftPoint[1], piecePoints[0][0], piecePoints[0][1]) - 10 / this.getView().getScale();
            }
            else {
                offset = java.awt.geom.Point2D.distance(pieceLeftPoint[0], pieceLeftPoint[1], piecePoints[3][0], piecePoints[3][1]) + 10 / this.getView().getScale();
            }
            /* add */ (dimensionLines.push(this.getDimensionLineBetweenPoints$float_A$float_A$float$double$boolean(wallEndPointJoinedToPieceLeftPoint, pieceLeftPoint, offset, 0, false)) > 0);
        }
        if (wallEndPointJoinedToPieceRightPoint != null) {
            var offset = void 0;
            if (pieceFrontSideAlongWallSide) {
                offset = -java.awt.geom.Point2D.distance(pieceRightPoint[0], pieceRightPoint[1], piecePoints[1][0], piecePoints[1][1]) - 10 / this.getView().getScale();
            }
            else {
                offset = java.awt.geom.Point2D.distance(pieceRightPoint[0], pieceRightPoint[1], piecePoints[2][0], piecePoints[2][1]) + 10 / this.getView().getScale();
            }
            /* add */ (dimensionLines.push(this.getDimensionLineBetweenPoints$float_A$float_A$float$double$boolean(pieceRightPoint, wallEndPointJoinedToPieceRightPoint, offset, 0, false)) > 0);
        }
        for (var i = dimensionLines.length - 1; i >= 0; i--) {
            {
                if ( /* get */dimensionLines[i].getLength() < 0.01) {
                    /* remove */ dimensionLines.splice(i, 1)[0];
                }
            }
            ;
        }
        return dimensionLines;
    };
    PlanController.computeIntersection$float_A$float_A$float_A$float_A = function (point1, point2, point3, point4) {
        return PlanController.computeIntersection$float$float$float$float$float$float$float$float(point1[0], point1[1], point2[0], point2[1], point3[0], point3[1], point4[0], point4[1]);
    };
    PlanController.computeIntersection$float$float$float$float$float$float$float$float = function (xPoint1, yPoint1, xPoint2, yPoint2, xPoint3, yPoint3, xPoint4, yPoint4) {
        var x = xPoint2;
        var y = yPoint2;
        var alpha1 = (yPoint2 - yPoint1) / (xPoint2 - xPoint1);
        var alpha2 = (yPoint4 - yPoint3) / (xPoint4 - xPoint3);
        if (alpha1 !== alpha2) {
            if (Math.abs(alpha1) > 4000) {
                if (Math.abs(alpha2) < 4000) {
                    x = xPoint1;
                    var beta2 = yPoint4 - alpha2 * xPoint4;
                    y = alpha2 * x + beta2;
                }
            }
            else if (Math.abs(alpha2) > 4000) {
                if (Math.abs(alpha1) < 4000) {
                    x = xPoint3;
                    var beta1 = yPoint2 - alpha1 * xPoint2;
                    y = alpha1 * x + beta1;
                }
            }
            else {
                var sameSignum = (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(alpha1) === /* signum */ (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })(alpha2);
                if (Math.abs(alpha1 - alpha2) > 1.0E-5 && (!sameSignum || (Math.abs(alpha1) > Math.abs(alpha2) ? alpha1 / alpha2 : alpha2 / alpha1) > 1.004)) {
                    var beta1 = yPoint2 - alpha1 * xPoint2;
                    var beta2 = yPoint4 - alpha2 * xPoint4;
                    x = (beta2 - beta1) / (alpha1 - alpha2);
                    y = alpha1 * x + beta1;
                }
            }
        }
        return [x, y];
    };
    /**
     * Returns the intersection point between the line joining the first two points and
     * the line joining the two last points.
     * @param {number} xPoint1
     * @param {number} yPoint1
     * @param {number} xPoint2
     * @param {number} yPoint2
     * @param {number} xPoint3
     * @param {number} yPoint3
     * @param {number} xPoint4
     * @param {number} yPoint4
     * @return {float[]}
     * @private
     */
    PlanController.computeIntersection = function (xPoint1, yPoint1, xPoint2, yPoint2, xPoint3, yPoint3, xPoint4, yPoint4) {
        if (((typeof xPoint1 === 'number') || xPoint1 === null) && ((typeof yPoint1 === 'number') || yPoint1 === null) && ((typeof xPoint2 === 'number') || xPoint2 === null) && ((typeof yPoint2 === 'number') || yPoint2 === null) && ((typeof xPoint3 === 'number') || xPoint3 === null) && ((typeof yPoint3 === 'number') || yPoint3 === null) && ((typeof xPoint4 === 'number') || xPoint4 === null) && ((typeof yPoint4 === 'number') || yPoint4 === null)) {
            return PlanController.computeIntersection$float$float$float$float$float$float$float$float(xPoint1, yPoint1, xPoint2, yPoint2, xPoint3, yPoint3, xPoint4, yPoint4);
        }
        else if (((xPoint1 != null && xPoint1 instanceof Array && (xPoint1.length == 0 || xPoint1[0] == null || (typeof xPoint1[0] === 'number'))) || xPoint1 === null) && ((yPoint1 != null && yPoint1 instanceof Array && (yPoint1.length == 0 || yPoint1[0] == null || (typeof yPoint1[0] === 'number'))) || yPoint1 === null) && ((xPoint2 != null && xPoint2 instanceof Array && (xPoint2.length == 0 || xPoint2[0] == null || (typeof xPoint2[0] === 'number'))) || xPoint2 === null) && ((yPoint2 != null && yPoint2 instanceof Array && (yPoint2.length == 0 || yPoint2[0] == null || (typeof yPoint2[0] === 'number'))) || yPoint2 === null) && xPoint3 === undefined && yPoint3 === undefined && xPoint4 === undefined && yPoint4 === undefined) {
            return PlanController.computeIntersection$float_A$float_A$float_A$float_A(xPoint1, yPoint1, xPoint2, yPoint2);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Attempts to elevate <code>piece</code> depending on the highest piece that includes
     * its bounding box and returns that piece.
     * @see #adjustMagnetizedPieceOfFurniture(HomePieceOfFurniture, float, float)
     * @param {HomePieceOfFurniture} piece
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.adjustPieceOfFurnitureElevation = function (piece) {
        if (!piece.isDoorOrWindow() && piece.getElevation() === 0) {
            var highestSurroundingPiece = this.getHighestSurroundingPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture(piece);
            if (highestSurroundingPiece != null) {
                var elevation = highestSurroundingPiece.getElevation();
                if (highestSurroundingPiece.isHorizontallyRotated()) {
                    elevation += highestSurroundingPiece.getHeightInPlan();
                }
                else {
                    elevation += highestSurroundingPiece.getHeight() * highestSurroundingPiece.getDropOnTopElevation();
                }
                if (highestSurroundingPiece.getLevel() != null) {
                    elevation += highestSurroundingPiece.getLevel().getElevation() - (piece.getLevel() != null ? piece.getLevel().getElevation() : this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel().getElevation());
                }
                piece.setElevation(Math.max(0, elevation));
                return highestSurroundingPiece;
            }
        }
        return null;
    };
    /**
     * Attempts to align <code>piece</code> on the borders of home furniture at the the same elevation
     * that intersect with it and returns that piece.
     * @see #adjustMagnetizedPieceOfFurniture(HomePieceOfFurniture, float, float)
     * @param {HomePieceOfFurniture} piece
     * @param {boolean} forceOrientation
     * @param {Wall} magnetWall
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.adjustPieceOfFurnitureSideBySideAt = function (piece, forceOrientation, magnetWall) {
        var piecePoints = piece.getPoints();
        var pieceArea = new java.awt.geom.Area(this.getPath$float_A_A(piecePoints));
        var doorOrWindowBoundToWall = (piece != null && piece instanceof HomeDoorOrWindow) && piece.isBoundToWall();
        var pieceElevation = piece.getGroundElevation();
        var margin = 2 * PlanController.PIXEL_MARGIN / this.getScale();
        var referencePiece = null;
        var intersectionWithReferencePieceArea = null;
        var intersectionWithReferencePieceSurface = 0;
        var referencePiecePoints = null;
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var homePiece = array[index];
                {
                    var homePieceElevation = homePiece.getGroundElevation();
                    if (homePiece !== piece && this.isPieceOfFurnitureVisibleAtSelectedLevel(homePiece) && pieceElevation < homePieceElevation + homePiece.getHeightInPlan() && pieceElevation + piece.getHeightInPlan() > homePieceElevation && (!doorOrWindowBoundToWall || homePiece.isDoorOrWindow())) {
                        var points = homePiece.getPoints();
                        var marginArea = void 0;
                        if (doorOrWindowBoundToWall && homePiece.isDoorOrWindow()) {
                            marginArea = new java.awt.geom.Area(this.getPath$float_A_A(new Wall(points[1][0], points[1][1], points[2][0], points[2][1], margin, 0).getPoints$()));
                            marginArea.add(new java.awt.geom.Area(this.getPath$float_A_A(new Wall(points[3][0], points[3][1], points[0][0], points[0][1], margin, 0).getPoints$())));
                        }
                        else {
                            marginArea = /* get */ (function (m, k) { if (m.entries == null)
                                m.entries = []; for (var i = 0; i < m.entries.length; i++)
                                if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                    return m.entries[i].value;
                                } return null; })(this.furnitureSidesCache, homePiece);
                            if (marginArea == null) {
                                var pieceSideWalls = (function (s) { var a = []; while (s-- > 0)
                                    a.push(null); return a; })(points.length);
                                for (var i = 0; i < pieceSideWalls.length; i++) {
                                    {
                                        pieceSideWalls[i] = new Wall(points[i][0], points[i][1], points[(i + 1) % pieceSideWalls.length][0], points[(i + 1) % pieceSideWalls.length][1], margin, 0);
                                    }
                                    ;
                                }
                                for (var i = 0; i < pieceSideWalls.length; i++) {
                                    {
                                        pieceSideWalls[(i + 1) % pieceSideWalls.length].setWallAtStart(pieceSideWalls[i]);
                                        pieceSideWalls[i].setWallAtEnd(pieceSideWalls[(i + 1) % pieceSideWalls.length]);
                                    }
                                    ;
                                }
                                var pieceSidePoints = (function (s) { var a = []; while (s-- > 0)
                                    a.push(null); return a; })(pieceSideWalls.length * 2 + 2);
                                var pieceSideWallPoints = null;
                                for (var i = 0; i < pieceSideWalls.length; i++) {
                                    {
                                        pieceSideWallPoints = pieceSideWalls[i].getPoints$();
                                        pieceSidePoints[i] = pieceSideWallPoints[0];
                                        pieceSidePoints[pieceSidePoints.length - i - 1] = pieceSideWallPoints[3];
                                    }
                                    ;
                                }
                                pieceSidePoints[(pieceSidePoints.length / 2 | 0) - 1] = pieceSideWallPoints[1];
                                pieceSidePoints[(pieceSidePoints.length / 2 | 0)] = pieceSideWallPoints[2];
                                marginArea = new java.awt.geom.Area(this.getPath$float_A_A(pieceSidePoints));
                                /* put */ (function (m, k, v) { if (m.entries == null)
                                    m.entries = []; for (var i = 0; i < m.entries.length; i++)
                                    if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                                        m.entries[i].value = v;
                                        return;
                                    } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); })(this.furnitureSidesCache, homePiece, marginArea);
                            }
                        }
                        var intersection = new java.awt.geom.Area(marginArea);
                        intersection.intersect(pieceArea);
                        if (!intersection.isEmpty()) {
                            var exclusiveOr = new java.awt.geom.Area(pieceArea);
                            exclusiveOr.exclusiveOr(intersection);
                            if (exclusiveOr.isSingular()) {
                                var insideArea = new java.awt.geom.Area(this.getPath$float_A_A(points));
                                insideArea.subtract(marginArea);
                                insideArea.intersect(pieceArea);
                                if (insideArea.isEmpty()) {
                                    var surface = this.getArea(intersection);
                                    if (surface > intersectionWithReferencePieceSurface) {
                                        intersectionWithReferencePieceSurface = surface;
                                        referencePiece = homePiece;
                                        referencePiecePoints = points;
                                        intersectionWithReferencePieceArea = intersection;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        if (referencePiece != null) {
            var alignedOnReferencePieceFrontOrBackSide = void 0;
            if (doorOrWindowBoundToWall && referencePiece.isDoorOrWindow()) {
                alignedOnReferencePieceFrontOrBackSide = false;
            }
            else {
                var referencePieceLargerBoundingBox = this.getRotatedRectangle(referencePiece.getX() - referencePiece.getWidthInPlan(), referencePiece.getY() - referencePiece.getDepthInPlan(), referencePiece.getWidthInPlan() * 2, referencePiece.getDepthInPlan() * 2, referencePiece.getAngle());
                var pathPoints = this.getPathPoints(referencePieceLargerBoundingBox, false);
                alignedOnReferencePieceFrontOrBackSide = this.isAreaLargerOnFrontOrBackSide(intersectionWithReferencePieceArea, pathPoints);
            }
            if (forceOrientation) {
                piece.setAngle(referencePiece.getAngle());
            }
            var pieceBoundingBox = this.getRotatedRectangle(0, 0, piece.getWidthInPlan(), piece.getDepthInPlan(), piece.getAngle() - referencePiece.getAngle());
            var deltaX = 0;
            var deltaY = 0;
            if (!alignedOnReferencePieceFrontOrBackSide) {
                var centerLine = new java.awt.geom.Line2D.Float(referencePiece.getX(), referencePiece.getY(), (referencePiecePoints[0][0] + referencePiecePoints[1][0]) / 2, (referencePiecePoints[0][1] + referencePiecePoints[1][1]) / 2);
                var rotatedBoundingBoxWidth = pieceBoundingBox.getBounds2D().getWidth();
                var distance = centerLine.relativeCCW(piece.getX(), piece.getY()) * (-referencePiece.getWidthInPlan() / 2 + centerLine.ptLineDist(piece.getX(), piece.getY()) - rotatedBoundingBoxWidth / 2);
                deltaX = (distance * Math.cos(referencePiece.getAngle()));
                deltaY = (distance * Math.sin(referencePiece.getAngle()));
            }
            else {
                var centerLine = new java.awt.geom.Line2D.Float(referencePiece.getX(), referencePiece.getY(), (referencePiecePoints[2][0] + referencePiecePoints[1][0]) / 2, (referencePiecePoints[2][1] + referencePiecePoints[1][1]) / 2);
                var rotatedBoundingBoxDepth = pieceBoundingBox.getBounds2D().getHeight();
                var distance = centerLine.relativeCCW(piece.getX(), piece.getY()) * (-referencePiece.getDepthInPlan() / 2 + centerLine.ptLineDist(piece.getX(), piece.getY()) - rotatedBoundingBoxDepth / 2);
                deltaX = (-distance * Math.sin(referencePiece.getAngle()));
                deltaY = (distance * Math.cos(referencePiece.getAngle()));
                if (!this.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_Wall$float$float(piece, magnetWall, deltaX, deltaY)) {
                    deltaX = deltaY = 0;
                }
            }
            if (!this.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$float$float(piece, referencePiece, deltaX, deltaY)) {
                piece.move(deltaX, deltaY);
                return referencePiece;
            }
            else {
                if (forceOrientation) {
                    piecePoints = piece.getPoints();
                }
                var alignedOnPieceFrontOrBackSide = this.isAreaLargerOnFrontOrBackSide(intersectionWithReferencePieceArea, piecePoints);
                var referencePieceBoundingBox = this.getRotatedRectangle(0, 0, referencePiece.getWidthInPlan(), referencePiece.getDepthInPlan(), referencePiece.getAngle() - piece.getAngle());
                if (!alignedOnPieceFrontOrBackSide) {
                    var centerLine = new java.awt.geom.Line2D.Float(piece.getX(), piece.getY(), (piecePoints[0][0] + piecePoints[1][0]) / 2, (piecePoints[0][1] + piecePoints[1][1]) / 2);
                    var rotatedBoundingBoxWidth = referencePieceBoundingBox.getBounds2D().getWidth();
                    var distance = centerLine.relativeCCW(referencePiece.getX(), referencePiece.getY()) * (-piece.getWidthInPlan() / 2 + centerLine.ptLineDist(referencePiece.getX(), referencePiece.getY()) - rotatedBoundingBoxWidth / 2);
                    deltaX = -(distance * Math.cos(piece.getAngle()));
                    deltaY = -(distance * Math.sin(piece.getAngle()));
                }
                else {
                    var centerLine = new java.awt.geom.Line2D.Float(piece.getX(), piece.getY(), (piecePoints[2][0] + piecePoints[1][0]) / 2, (piecePoints[2][1] + piecePoints[1][1]) / 2);
                    var rotatedBoundingBoxDepth = referencePieceBoundingBox.getBounds2D().getHeight();
                    var distance = centerLine.relativeCCW(referencePiece.getX(), referencePiece.getY()) * (-piece.getDepthInPlan() / 2 + centerLine.ptLineDist(referencePiece.getX(), referencePiece.getY()) - rotatedBoundingBoxDepth / 2);
                    deltaX = -(-distance * Math.sin(piece.getAngle()));
                    deltaY = -(distance * Math.cos(piece.getAngle()));
                    if (!this.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_Wall$float$float(piece, magnetWall, deltaX, deltaY)) {
                        deltaX = deltaY = 0;
                    }
                }
                if (!this.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$float$float(piece, referencePiece, deltaX, deltaY)) {
                    piece.move(deltaX, deltaY);
                    return referencePiece;
                }
            }
            return referencePiece;
        }
        return null;
    };
    /**
     * Returns <code>true</code> if the intersection between the given <code>area</code> and
     * the front or back sides of the rectangle defined by <code>piecePoints</code> is larger
     * than with the left and right sides of this rectangle.
     * @param {java.awt.geom.Area} area
     * @param {float[][]} piecePoints
     * @return {boolean}
     * @private
     */
    PlanController.prototype.isAreaLargerOnFrontOrBackSide = function (area, piecePoints) {
        var pieceFrontAndBackQuarters = new java.awt.geom.GeneralPath();
        pieceFrontAndBackQuarters.moveTo(piecePoints[0][0], piecePoints[0][1]);
        pieceFrontAndBackQuarters.lineTo(piecePoints[2][0], piecePoints[2][1]);
        pieceFrontAndBackQuarters.lineTo(piecePoints[3][0], piecePoints[3][1]);
        pieceFrontAndBackQuarters.lineTo(piecePoints[1][0], piecePoints[1][1]);
        pieceFrontAndBackQuarters.closePath();
        var intersectionWithFrontOrBack = new java.awt.geom.Area(area);
        intersectionWithFrontOrBack.intersect(new java.awt.geom.Area(pieceFrontAndBackQuarters));
        if (intersectionWithFrontOrBack.isEmpty()) {
            return false;
        }
        else {
            var pieceLeftAndRightQuarters = new java.awt.geom.GeneralPath();
            pieceLeftAndRightQuarters.moveTo(piecePoints[0][0], piecePoints[0][1]);
            pieceLeftAndRightQuarters.lineTo(piecePoints[2][0], piecePoints[2][1]);
            pieceLeftAndRightQuarters.lineTo(piecePoints[1][0], piecePoints[1][1]);
            pieceLeftAndRightQuarters.lineTo(piecePoints[3][0], piecePoints[3][1]);
            pieceLeftAndRightQuarters.closePath();
            var intersectionWithLeftAndRight = new java.awt.geom.Area(area);
            intersectionWithLeftAndRight.intersect(new java.awt.geom.Area(pieceLeftAndRightQuarters));
            return this.getArea(intersectionWithFrontOrBack) > this.getArea(intersectionWithLeftAndRight);
        }
    };
    /**
     * Returns the area of the given shape.
     * @param {java.awt.geom.Area} area
     * @return {number}
     * @private
     */
    PlanController.prototype.getArea = function (area) {
        var pathPoints = this.getPathPoints(this.getPath$java_awt_geom_Area(area), false);
        if (pathPoints.length > 1) {
            return new Room(pathPoints).getArea();
        }
        else {
            return 0;
        }
    };
    PlanController.prototype.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$float$float = function (piece1, piece2, deltaX, deltaY) {
        var intersection = new java.awt.geom.Area(this.getRotatedRectangle(piece1.getX() - piece1.getWidthInPlan() / 2 + deltaX, piece1.getY() - piece1.getDepthInPlan() / 2 + deltaY, piece1.getWidthInPlan(), piece1.getDepth(), piece1.getAngle()));
        var epsilon = 0.01;
        intersection.intersect(new java.awt.geom.Area(this.getRotatedRectangle(piece2.getX() - piece2.getWidthInPlan() / 2 - epsilon, piece2.getY() - piece2.getDepthInPlan() / 2 - epsilon, piece2.getWidthInPlan() + 2 * epsilon, piece2.getDepthInPlan() + 2 * epsilon, piece2.getAngle())));
        return intersection.isEmpty();
    };
    /**
     * Returns <code>true</code> if the given pieces don't intersect once the first is moved from
     * (<code>deltaX</code>, <code>deltaY</code>) vector.
     * @param {HomePieceOfFurniture} piece1
     * @param {HomePieceOfFurniture} piece2
     * @param {number} deltaX
     * @param {number} deltaY
     * @return {boolean}
     * @private
     */
    PlanController.prototype.isIntersectionEmpty = function (piece1, piece2, deltaX, deltaY) {
        if (((piece1 != null && piece1 instanceof HomePieceOfFurniture) || piece1 === null) && ((piece2 != null && piece2 instanceof HomePieceOfFurniture) || piece2 === null) && ((typeof deltaX === 'number') || deltaX === null) && ((typeof deltaY === 'number') || deltaY === null)) {
            return this.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$float$float(piece1, piece2, deltaX, deltaY);
        }
        else if (((piece1 != null && piece1 instanceof HomePieceOfFurniture) || piece1 === null) && ((piece2 != null && piece2 instanceof Wall) || piece2 === null) && ((typeof deltaX === 'number') || deltaX === null) && ((typeof deltaY === 'number') || deltaY === null)) {
            return this.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_Wall$float$float(piece1, piece2, deltaX, deltaY);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.isIntersectionEmpty$com_eteks_sweethome3d_model_HomePieceOfFurniture$com_eteks_sweethome3d_model_Wall$float$float = function (piece, wall, deltaX, deltaY) {
        if (wall != null) {
            var wallAreaIntersection = new java.awt.geom.Area(this.getPath$float_A_A(wall.getPoints$()));
            wallAreaIntersection.intersect(new java.awt.geom.Area(this.getRotatedRectangle(piece.getX() - piece.getWidthInPlan() / 2 + deltaX, piece.getY() - piece.getDepthInPlan() / 2 + deltaY, piece.getWidthInPlan(), piece.getDepthInPlan(), piece.getAngle())));
            return this.getArea(wallAreaIntersection) < 1.0E-4;
        }
        return true;
    };
    /**
     * Returns the shape of the given rectangle rotated of a given <code>angle</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} width
     * @param {number} height
     * @param {number} angle
     * @return {java.awt.geom.GeneralPath}
     * @private
     */
    PlanController.prototype.getRotatedRectangle = function (x, y, width, height, angle) {
        var referencePieceLargerBoundingBox = new java.awt.geom.Rectangle2D.Float(x, y, width, height);
        var rotation = java.awt.geom.AffineTransform.getRotateInstance(angle, x + width / 2, y + height / 2);
        var rotatedBoundingBox = new java.awt.geom.GeneralPath();
        rotatedBoundingBox.append(referencePieceLargerBoundingBox.getPathIterator(rotation), false);
        return rotatedBoundingBox;
    };
    /**
     * Returns the dimension line that measures the side of a piece, the length of a room side
     * or the length of a wall side at (<code>x</code>, <code>y</code>) point,
     * or <code>null</code> if it doesn't exist.
     * @param {number} x
     * @param {number} y
     * @param {boolean} magnetismEnabled
     * @return {DimensionLine}
     * @private
     */
    PlanController.prototype.getMeasuringDimensionLineAt = function (x, y, magnetismEnabled) {
        var margin = this.getSelectionMargin();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    if (this.isPieceOfFurnitureVisibleAtSelectedLevel(piece)) {
                        var dimensionLine = this.getDimensionLineBetweenPointsAt(piece.getPoints(), x, y, margin, magnetismEnabled);
                        if (dimensionLine != null) {
                            return dimensionLine;
                        }
                    }
                }
            }
        }
        {
            var array = this.getRoomPathsFromWalls();
            for (var index = 0; index < array.length; index++) {
                var roomPath = array[index];
                {
                    if (roomPath.intersects(x - margin, y - margin, 2 * margin, 2 * margin)) {
                        var dimensionLine = this.getDimensionLineBetweenPointsAt(this.getPathPoints(roomPath, true), x, y, margin, magnetismEnabled);
                        if (dimensionLine != null) {
                            return dimensionLine;
                        }
                    }
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms();
            for (var index = 0; index < array.length; index++) {
                var room = array[index];
                {
                    if (this.isLevelNullOrViewable(room.getLevel()) && room.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel())) {
                        var dimensionLine = this.getDimensionLineBetweenPointsAt(room.getPoints(), x, y, margin, magnetismEnabled);
                        if (dimensionLine != null) {
                            return dimensionLine;
                        }
                    }
                }
            }
        }
        return null;
    };
    /**
     * Returns the dimension line that measures the side of the given polygon at (<code>x</code>, <code>y</code>) point,
     * or <code>null</code> if it doesn't exist.
     * @param {float[][]} points
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @param {boolean} magnetismEnabled
     * @return {DimensionLine}
     * @private
     */
    PlanController.prototype.getDimensionLineBetweenPointsAt = function (points, x, y, margin, magnetismEnabled) {
        for (var i = 0; i < points.length; i++) {
            {
                var nextPointIndex = (i + 1) % points.length;
                var distanceBetweenPointsSq = java.awt.geom.Point2D.distanceSq(points[i][0], points[i][1], points[nextPointIndex][0], points[nextPointIndex][1]);
                if (distanceBetweenPointsSq > 0.01 && java.awt.geom.Line2D.ptSegDistSq(points[i][0], points[i][1], points[nextPointIndex][0], points[nextPointIndex][1], x, y) <= margin * margin) {
                    return this.getDimensionLineBetweenPoints$float_A$float_A$float$double$boolean(points[i], points[nextPointIndex], 0, distanceBetweenPointsSq, magnetismEnabled);
                }
            }
            ;
        }
        return null;
    };
    PlanController.prototype.getDimensionLineBetweenPoints$float_A$float_A$float$boolean = function (point1, point2, offset, magnetismEnabled) {
        return this.getDimensionLineBetweenPoints$float_A$float_A$float$double$boolean(point1, point2, offset, java.awt.geom.Point2D.distanceSq(point1[0], point1[1], point2[0], point2[1]), magnetismEnabled);
    };
    PlanController.prototype.getDimensionLineBetweenPoints$float_A$float_A$float$double$boolean = function (point1, point2, offset, distanceBetweenPointsSq, magnetismEnabled) {
        var angle = Math.atan2(point1[1] - point2[1], point2[0] - point1[0]);
        var reverse = angle <= -Math.PI / 2 || angle > Math.PI / 2;
        var xStart;
        var yStart;
        var xEnd;
        var yEnd;
        if (reverse) {
            xStart = point2[0];
            yStart = point2[1];
            xEnd = point1[0];
            yEnd = point1[1];
            offset = -offset;
        }
        else {
            xStart = point1[0];
            yStart = point1[1];
            xEnd = point2[0];
            yEnd = point2[1];
        }
        if (magnetismEnabled) {
            var magnetizedLength = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(Math.sqrt(distanceBetweenPointsSq), this.getView().getPixelLength());
            if (reverse) {
                xEnd = point2[0] - (magnetizedLength * Math.cos(angle));
                yEnd = point2[1] + (magnetizedLength * Math.sin(angle));
            }
            else {
                xEnd = point1[0] + (magnetizedLength * Math.cos(angle));
                yEnd = point1[1] - (magnetizedLength * Math.sin(angle));
            }
        }
        return new DimensionLine(xStart, yStart, xEnd, yEnd, offset);
    };
    /**
     * Returns the dimension line between the given points.
     * @param {float[]} point1
     * @param {float[]} point2
     * @param {number} offset
     * @param {number} distanceBetweenPointsSq
     * @param {boolean} magnetismEnabled
     * @return {DimensionLine}
     * @private
     */
    PlanController.prototype.getDimensionLineBetweenPoints = function (point1, point2, offset, distanceBetweenPointsSq, magnetismEnabled) {
        if (((point1 != null && point1 instanceof Array && (point1.length == 0 || point1[0] == null || (typeof point1[0] === 'number'))) || point1 === null) && ((point2 != null && point2 instanceof Array && (point2.length == 0 || point2[0] == null || (typeof point2[0] === 'number'))) || point2 === null) && ((typeof offset === 'number') || offset === null) && ((typeof distanceBetweenPointsSq === 'number') || distanceBetweenPointsSq === null) && ((typeof magnetismEnabled === 'boolean') || magnetismEnabled === null)) {
            return this.getDimensionLineBetweenPoints$float_A$float_A$float$double$boolean(point1, point2, offset, distanceBetweenPointsSq, magnetismEnabled);
        }
        else if (((point1 != null && point1 instanceof Array && (point1.length == 0 || point1[0] == null || (typeof point1[0] === 'number'))) || point1 === null) && ((point2 != null && point2 instanceof Array && (point2.length == 0 || point2[0] == null || (typeof point2[0] === 'number'))) || point2 === null) && ((typeof offset === 'number') || offset === null) && ((typeof distanceBetweenPointsSq === 'boolean') || distanceBetweenPointsSq === null) && magnetismEnabled === undefined) {
            return this.getDimensionLineBetweenPoints$float_A$float_A$float$boolean(point1, point2, offset, distanceBetweenPointsSq);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.addLevel$ = function () {
        this.addLevel$boolean(false);
    };
    /**
     * Controls the creation of a new level at same elevation.
     */
    PlanController.prototype.addLevelAtSameElevation = function () {
        this.addLevel$boolean(true);
    };
    PlanController.prototype.addLevel$boolean = function (sameElevation) {
        var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
        var oldSelectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        var oldSelection = oldSelectedItems.slice(0);
        var oldSelectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        var homeBackgroundImage = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getBackgroundImage();
        var levels = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
        var newWallHeight = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewWallHeight();
        var newFloorThickness = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewFloorThickness();
        var level0;
        if ( /* isEmpty */(levels.length == 0)) {
            var level0Name = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "levelName", 0);
            level0 = this.createLevel(level0Name, 0, newFloorThickness, newWallHeight);
            this.moveHomeItemsToLevel(level0);
            level0.setBackgroundImage(homeBackgroundImage);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBackgroundImage(null);
            levels = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
        }
        else {
            level0 = null;
        }
        var newLevelName = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "levelName", /* size */ levels.length);
        var newLevel;
        if (sameElevation) {
            var referencedLevel = level0 != null ? level0 : this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            newLevel = this.createLevel(newLevelName, referencedLevel.getElevation(), referencedLevel.getFloorThickness(), referencedLevel.getHeight());
        }
        else {
            var newLevelElevation = levels[ /* size */levels.length - 1].getElevation() + newWallHeight + newFloorThickness;
            newLevel = this.createLevel(newLevelName, newLevelElevation, newFloorThickness, newWallHeight);
        }
        this.setSelectedLevel(newLevel);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LevelAdditionUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, allLevelsSelection, oldSelectedLevel, level0, homeBackgroundImage, newLevel));
    };
    /**
     * Controls the creation of a level.
     * @param {boolean} sameElevation
     * @private
     */
    PlanController.prototype.addLevel = function (sameElevation) {
        if (((typeof sameElevation === 'boolean') || sameElevation === null)) {
            return this.addLevel$boolean(sameElevation);
        }
        else if (sameElevation === undefined) {
            return this.addLevel$();
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns a new level added to home.
     * @param {string} name
     * @param {number} elevation
     * @param {number} floorThickness
     * @param {number} height
     * @return {Level}
     */
    PlanController.prototype.createLevel = function (name, elevation, floorThickness, height) {
        var newLevel = new Level(name, elevation, floorThickness, height);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addLevel(newLevel);
        return newLevel;
    };
    /**
     * Moves to the given <code>level</code> all existing furniture, walls, rooms, dimension lines
     * and labels.
     * @param {Level} level
     * @private
     */
    PlanController.prototype.moveHomeItemsToLevel = function (level) {
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    piece.setLevel(level);
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
            for (var index = 0; index < array.length; index++) {
                var wall = array[index];
                {
                    wall.setLevel(level);
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms();
            for (var index = 0; index < array.length; index++) {
                var room = array[index];
                {
                    room.setLevel(level);
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getPolylines();
            for (var index = 0; index < array.length; index++) {
                var polyline = array[index];
                {
                    polyline.setLevel(level);
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getDimensionLines();
            for (var index = 0; index < array.length; index++) {
                var dimensionLine = array[index];
                {
                    dimensionLine.setLevel(level);
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLabels();
            for (var index = 0; index < array.length; index++) {
                var label = array[index];
                {
                    label.setLevel(level);
                }
            }
        }
    };
    /**
     * Toggles the viewability of the selected level.
     */
    PlanController.prototype.toggleSelectedLevelViewability = function () {
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        selectedLevel.setViewable(!selectedLevel.isViewable());
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LevelViewabilityModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, selectedLevel));
    };
    /**
     * Makes the selected level the only viewable one.
     */
    PlanController.prototype.setSelectedLevelOnlyViewable = function () {
        var viewableLevels = this.getLevels(true);
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        var selectedLevelViewable = selectedLevel.isViewable();
        if (viewableLevels.length !== 1 || !selectedLevelViewable) {
            PlanController.setLevelsViewability(viewableLevels, false);
            selectedLevel.setViewable(true);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LevelsViewabilityModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, selectedLevel, selectedLevelViewable, viewableLevels));
        }
    };
    /**
     * Makes all levels viewable.
     */
    PlanController.prototype.setAllLevelsViewable = function () {
        var unviewableLevels = this.getLevels(false);
        if (unviewableLevels.length > 0) {
            var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            PlanController.setLevelsViewability(unviewableLevels, true);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.AllLevelsViewabilityModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, selectedLevel, unviewableLevels));
        }
    };
    /**
     * Returns levels which are viewable or not according to parameter.
     * @param {boolean} viewable
     * @return {com.eteks.sweethome3d.model.Level[]}
     * @private
     */
    PlanController.prototype.getLevels = function (viewable) {
        var levels = ([]);
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
            for (var index = 0; index < array.length; index++) {
                var level = array[index];
                {
                    if (level.isViewable() === viewable) {
                        /* add */ (levels.push(level) > 0);
                    }
                }
            }
        }
        return /* toArray */ levels.slice(0);
    };
    PlanController.setLevelsViewability = function (levels, viewable) {
        for (var index = 0; index < levels.length; index++) {
            var level = levels[index];
            {
                level.setViewable(viewable);
            }
        }
    };
    PlanController.prototype.modifySelectedLevel = function () {
        if (this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel() != null) {
            new LevelController(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, this.__com_eteks_sweethome3d_viewcontroller_PlanController_viewFactory, this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport).displayView(this.getView());
        }
    };
    /**
     * Deletes the selected level and the items that belongs to it.
     */
    PlanController.prototype.deleteSelectedLevel = function () {
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.beginUpdate();
        var levelFurniture = ([]);
        var oldSelectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    if (piece.getLevel() === oldSelectedLevel) {
                        /* add */ (levelFurniture.push(piece) > 0);
                    }
                }
            }
        }
        this.deleteFurniture(levelFurniture);
        var levelOtherItems = ([]);
        this.addLevelItemsAtSelectedLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls(), levelOtherItems);
        this.addLevelItemsAtSelectedLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms(), levelOtherItems);
        this.addLevelItemsAtSelectedLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getDimensionLines(), levelOtherItems);
        this.addLevelItemsAtSelectedLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLabels(), levelOtherItems);
        this.postDeleteItems(levelOtherItems, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
        this.doDeleteItems(levelOtherItems);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteLevel(oldSelectedLevel);
        var levels = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
        var remainingLevel;
        var remainingLevelElevation;
        var remainingLevelViewable;
        if ( /* size */levels.length === 1) {
            remainingLevel = /* get */ levels[0];
            remainingLevelElevation = remainingLevel.getElevation();
            remainingLevelViewable = remainingLevel.isViewable();
            remainingLevel.setElevation(0);
            remainingLevel.setViewable(true);
        }
        else {
            remainingLevel = null;
            remainingLevelElevation = null;
            remainingLevelViewable = false;
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LevelDeletionUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelectedLevel, remainingLevel, remainingLevelElevation, remainingLevelViewable));
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.endUpdate();
    };
    PlanController.prototype.addLevelItemsAtSelectedLevel = function (items, levelItems) {
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if ((item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) && item.getLevel() === selectedLevel) {
                    /* add */ (levelItems.push(item) > 0);
                }
            }
        }
    };
    /**
     * Returns a new wall instance between (<code>xStart</code>,
     * <code>yStart</code>) and (<code>xEnd</code>, <code>yEnd</code>)
     * end points. The new wall is added to home and its start point is joined
     * to the start of <code>wallStartAtStart</code> or
     * the end of <code>wallEndAtStart</code>.
     * @param {number} xStart
     * @param {number} yStart
     * @param {number} xEnd
     * @param {number} yEnd
     * @param {Wall} wallStartAtStart
     * @param {Wall} wallEndAtStart
     * @return {Wall}
     */
    PlanController.prototype.createWall = function (xStart, yStart, xEnd, yEnd, wallStartAtStart, wallEndAtStart) {
        var newWall = new Wall(xStart, yStart, xEnd, yEnd, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewWallThickness(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewWallHeight(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewWallPattern());
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWall(newWall);
        if (wallStartAtStart != null) {
            newWall.setWallAtStart(wallStartAtStart);
            wallStartAtStart.setWallAtStart(newWall);
        }
        else if (wallEndAtStart != null) {
            newWall.setWallAtStart(wallEndAtStart);
            wallEndAtStart.setWallAtEnd(newWall);
        }
        return newWall;
    };
    /**
     * Joins the end point of <code>wall</code> to the start of
     * <code>wallStartAtEnd</code> or the end of <code>wallEndAtEnd</code>.
     * @param {Wall} wall
     * @param {Wall} wallStartAtEnd
     * @param {Wall} wallEndAtEnd
     * @private
     */
    PlanController.prototype.joinNewWallEndToWall = function (wall, wallStartAtEnd, wallEndAtEnd) {
        if (wallStartAtEnd != null) {
            wall.setWallAtEnd(wallStartAtEnd);
            wallStartAtEnd.setWallAtStart(wall);
            wall.setXEnd(wallStartAtEnd.getXStart());
            wall.setYEnd(wallStartAtEnd.getYStart());
        }
        else if (wallEndAtEnd != null) {
            wall.setWallAtEnd(wallEndAtEnd);
            wallEndAtEnd.setWallAtEnd(wall);
            wall.setXEnd(wallEndAtEnd.getXEnd());
            wall.setYEnd(wallEndAtEnd.getYEnd());
        }
    };
    /**
     * Returns the wall at (<code>x</code>, <code>y</code>) point,
     * which has a start point not joined to any wall.
     * @param {number} x
     * @param {number} y
     * @param {Wall} ignoredWall
     * @return {Wall}
     * @private
     */
    PlanController.prototype.getWallStartAt = function (x, y, ignoredWall) {
        var margin = PlanController.WALL_ENDS_PIXEL_MARGIN / this.getScale();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
            for (var index = 0; index < array.length; index++) {
                var wall = array[index];
                {
                    if (wall !== ignoredWall && this.isLevelNullOrViewable(wall.getLevel()) && wall.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && wall.getWallAtStart() == null && wall.containsWallStartAt(x, y, margin)) {
                        return wall;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Returns the wall at (<code>x</code>, <code>y</code>) point,
     * which has a end point not joined to any wall.
     * @param {number} x
     * @param {number} y
     * @param {Wall} ignoredWall
     * @return {Wall}
     * @private
     */
    PlanController.prototype.getWallEndAt = function (x, y, ignoredWall) {
        var margin = PlanController.WALL_ENDS_PIXEL_MARGIN / this.getScale();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
            for (var index = 0; index < array.length; index++) {
                var wall = array[index];
                {
                    if (wall !== ignoredWall && this.isLevelNullOrViewable(wall.getLevel()) && wall.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && wall.getWallAtEnd() == null && wall.containsWallEndAt(x, y, margin)) {
                        return wall;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Returns the tolerance margin to handle an indicator.
     * @return {number}
     * @private
     */
    PlanController.prototype.getIndicatorMargin = function () {
        var indicatorPixelMagin = PlanController.INDICATOR_PIXEL_MARGIN;
        if (this.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
            indicatorPixelMagin *= 3;
        }
        return indicatorPixelMagin / this.getScale();
    };
    /**
     * Returns the selected wall with a start point
     * at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Wall}
     * @private
     */
    PlanController.prototype.getResizedWallStartAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Wall) && this.isItemResizable(/* get */ selectedItems[0])) {
            var wall = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (wall.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && wall.containsWallStartAt(x, y, margin)) {
                return wall;
            }
        }
        return null;
    };
    /**
     * Returns the selected wall with an end point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Wall}
     * @private
     */
    PlanController.prototype.getResizedWallEndAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Wall) && this.isItemResizable(/* get */ selectedItems[0])) {
            var wall = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (wall.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && wall.containsWallEndAt(x, y, margin)) {
                return wall;
            }
        }
        return null;
    };
    /**
     * Returns the selected wall with a middle point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Wall}
     * @private
     */
    PlanController.prototype.getArcExtentWallAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Wall) && this.isItemResizable(/* get */ selectedItems[0])) {
            var wall = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (wall.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && wall.isMiddlePointAt(x, y, margin)) {
                return wall;
            }
        }
        return null;
    };
    /**
     * Returns a new room instance with the given points.
     * The new room is added to home.
     * @param {float[][]} roomPoints
     * @return {Room}
     */
    PlanController.prototype.createRoom = function (roomPoints) {
        var newRoom = new Room(roomPoints);
        newRoom.setFloorColor(this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewRoomFloorColor());
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addRoom$com_eteks_sweethome3d_model_Room(newRoom);
        return newRoom;
    };
    /**
     * Returns the selected room with a point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Room}
     * @private
     */
    PlanController.prototype.getResizedRoomAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemResizable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (room.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && room.getPointIndexAt(x, y, margin) !== -1) {
                return room;
            }
        }
        return null;
    };
    /**
     * Returns the selected room with its name center point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Room}
     * @private
     */
    PlanController.prototype.getRoomNameAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemMovable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (room.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && room.getName() != null && room.getName().trim().length > 0 && room.isNameCenterPointAt(x, y, margin)) {
                return room;
            }
        }
        return null;
    };
    /**
     * Returns the selected room with its
     * name angle point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Room}
     * @private
     */
    PlanController.prototype.getRoomRotatedNameAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemMovable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (room.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && room.getName() != null && room.getName().trim().length > 0 && this.isTextAnglePointAt(room, room.getName(), room.getNameStyle(), room.getXCenter() + room.getNameXOffset(), room.getYCenter() + room.getNameYOffset(), room.getNameAngle(), x, y, margin)) {
                return room;
            }
        }
        return null;
    };
    /**
     * Returns the selected room with its area center point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Room}
     * @private
     */
    PlanController.prototype.getRoomAreaAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemMovable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (room.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && room.isAreaVisible() && room.isAreaCenterPointAt(x, y, margin)) {
                return room;
            }
        }
        return null;
    };
    /**
     * Returns the selected room with its
     * area angle point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Room}
     * @private
     */
    PlanController.prototype.getRoomRotatedAreaAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemMovable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (room.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && room.isAreaVisible()) {
                var area = room.getArea();
                if (area > 0.01) {
                    var areaText = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getAreaFormatWithUnit().format(area);
                    if (this.isTextAnglePointAt(room, areaText, room.getAreaStyle(), room.getXCenter() + room.getAreaXOffset(), room.getYCenter() + room.getAreaYOffset(), room.getAreaAngle(), x, y, margin)) {
                        return room;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Adds a point to the selected room at the given coordinates and posts an undoable operation.
     * @param {number} x
     * @param {number} y
     */
    PlanController.prototype.addPointToSelectedRoom = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemResizable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var points = room.getPoints();
            var closestSegmentIndex = -1;
            var smallestDistance = 1.7976931348623157E308;
            for (var i = 0; i < points.length; i++) {
                {
                    var point = points[i];
                    var nextPoint = points[(i + 1) % points.length];
                    var distanceToSegment = java.awt.geom.Line2D.ptSegDistSq(point[0], point[1], nextPoint[0], nextPoint[1], x, y);
                    if (smallestDistance > distanceToSegment) {
                        smallestDistance = distanceToSegment;
                        closestSegmentIndex = i;
                    }
                }
                ;
            }
            var index = closestSegmentIndex + 1;
            room.addPoint$float$float$int(x, y, index);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(/* asList */ [room].slice(0));
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomPointAdditionUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ selectedItems.slice(0), room, index, x, y));
        }
    };
    /**
     * Returns <code>true</code> if the given point can be removed from the <code>room</code>.
     * @param {Room} room
     * @param {number} x
     * @param {number} y
     * @return {boolean}
     */
    PlanController.prototype.isRoomPointDeletableAt = function (room, x, y) {
        return this.isItemResizable(room) && room.getPointIndexAt(x, y, this.getIndicatorMargin()) >= 0;
    };
    /**
     * Deletes the point of the selected room at the given coordinates and posts an undoable operation.
     * @param {number} x
     * @param {number} y
     */
    PlanController.prototype.deletePointFromSelectedRoom = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Room) && this.isItemResizable(/* get */ selectedItems[0])) {
            var room = selectedItems[0];
            var index = room.getPointIndexAt(x, y, this.getIndicatorMargin());
            if (index >= 0) {
                var points = room.getPoints();
                var point = points[index];
                var xPoint = point[0];
                var yPoint = point[1];
                room.removePoint(index);
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(/* asList */ [room].slice(0));
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomPointDeletionUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ selectedItems.slice(0), room, index, xPoint, yPoint));
            }
        }
    };
    /**
     * Returns a new dimension instance joining (<code>xStart</code>,
     * <code>yStart</code>) and (<code>xEnd</code>, <code>yEnd</code>) points.
     * The new dimension line is added to home.
     * @param {number} xStart
     * @param {number} yStart
     * @param {number} xEnd
     * @param {number} yEnd
     * @param {number} offset
     * @return {DimensionLine}
     */
    PlanController.prototype.createDimensionLine = function (xStart, yStart, xEnd, yEnd, offset) {
        var newDimensionLine = new DimensionLine(xStart, yStart, xEnd, yEnd, offset);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addDimensionLine(newDimensionLine);
        return newDimensionLine;
    };
    /**
     * Returns the selected dimension line with an end extension line
     * at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {DimensionLine}
     * @private
     */
    PlanController.prototype.getResizedDimensionLineStartAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof DimensionLine) && this.isItemResizable(/* get */ selectedItems[0])) {
            var dimensionLine = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (dimensionLine.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && dimensionLine.containsStartExtensionLinetAt(x, y, margin)) {
                return dimensionLine;
            }
        }
        return null;
    };
    /**
     * Returns the selected dimension line with an end extension line
     * at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {DimensionLine}
     * @private
     */
    PlanController.prototype.getResizedDimensionLineEndAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof DimensionLine) && this.isItemResizable(/* get */ selectedItems[0])) {
            var dimensionLine = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (dimensionLine.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && dimensionLine.containsEndExtensionLineAt(x, y, margin)) {
                return dimensionLine;
            }
        }
        return null;
    };
    /**
     * Returns the selected dimension line with a point
     * at (<code>x</code>, <code>y</code>) at its middle.
     * @param {number} x
     * @param {number} y
     * @return {DimensionLine}
     * @private
     */
    PlanController.prototype.getOffsetDimensionLineAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof DimensionLine) && this.isItemResizable(/* get */ selectedItems[0])) {
            var dimensionLine = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (dimensionLine.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && dimensionLine.isMiddlePointAt(x, y, margin)) {
                return dimensionLine;
            }
        }
        return null;
    };
    /**
     * Returns a new polyline instance with the given points.
     * The new polyline is added to home.
     * @param {float[][]} polylinePoints
     * @return {Polyline}
     * @private
     */
    PlanController.prototype.createPolyline = function (polylinePoints) {
        var newPolyline = new Polyline(polylinePoints);
        var lengthUnit = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit();
        newPolyline.setThickness(lengthUnit === LengthUnit.INCH || lengthUnit === LengthUnit.INCH_DECIMALS ? LengthUnit.inchToCentimeter(1) : 2);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addPolyline$com_eteks_sweethome3d_model_Polyline(newPolyline);
        return newPolyline;
    };
    /**
     * Returns the selected polyline with a point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Polyline}
     * @private
     */
    PlanController.prototype.getResizedPolylineAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Polyline) && this.isItemResizable(/* get */ selectedItems[0])) {
            var polyline = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (polyline.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && polyline.getPointIndexAt(x, y, margin) !== -1) {
                return polyline;
            }
        }
        return null;
    };
    /**
     * Returns the tolerance margin to select an item.
     * @return {number}
     * @private
     */
    PlanController.prototype.getSelectionMargin = function () {
        var indicatorPixelMagin = PlanController.PIXEL_MARGIN;
        if (this.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
            indicatorPixelMagin *= 2;
        }
        return indicatorPixelMagin / this.getScale();
    };
    /**
     * Returns the selected item at (<code>x</code>, <code>y</code>) point.
     * @param {number} x
     * @param {number} y
     * @return {boolean}
     * @private
     */
    PlanController.prototype.isItemSelectedAt = function (x, y) {
        var margin = this.getSelectionMargin();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if (item.containsPoint(x, y, margin)) {
                        return true;
                    }
                }
            }
        }
        return false;
    };
    PlanController.prototype.getSelectableItemAt$float$float = function (x, y) {
        return this.getSelectableItemAt$float$float$boolean(x, y, true);
    };
    PlanController.prototype.getSelectableItemAt$float$float$boolean = function (x, y, ignoreGroupsFurniture) {
        var selectableItems = this.getSelectableItemsAt$float$float$boolean$boolean(x, y, true, ignoreGroupsFurniture);
        if ( /* size */selectableItems.length !== 0) {
            return /* get */ selectableItems[0];
        }
        else {
            return null;
        }
    };
    /**
     * Returns the selectable item at (<code>x</code>, <code>y</code>) point.
     * @param {number} x
     * @param {number} y
     * @param {boolean} ignoreGroupsFurniture
     * @return {Object}
     * @private
     */
    PlanController.prototype.getSelectableItemAt = function (x, y, ignoreGroupsFurniture) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof ignoreGroupsFurniture === 'boolean') || ignoreGroupsFurniture === null)) {
            return this.getSelectableItemAt$float$float$boolean(x, y, ignoreGroupsFurniture);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ignoreGroupsFurniture === undefined) {
            return this.getSelectableItemAt$float$float(x, y);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.getSelectableItemsAt$float$float = function (x, y) {
        return this.getSelectableItemsAt$float$float$boolean$boolean(x, y, false, true);
    };
    PlanController.prototype.getSelectableItemsAt$float$float$boolean$boolean = function (x, y, stopAtFirstItem, ignoreGroupsFurniture) {
        var items = ([]);
        var margin = this.getSelectionMargin();
        var textMargin = margin / 2;
        var camera = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getObserverCamera();
        if (camera != null && camera === this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getCamera() && camera.containsPoint(x, y, margin)) {
            /* add */ (items.push(camera) > 0);
            if (stopAtFirstItem) {
                return items;
            }
        }
        var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLabels();
            for (var index = 0; index < array.length; index++) {
                var label = array[index];
                {
                    if ((!basePlanLocked || !this.isItemPartOfBasePlan(label)) && this.isLevelNullOrViewable(label.getLevel()) && label.isAtLevel(selectedLevel) && (label.containsPoint(x, y, margin) || this.isItemTextAt(label, label.getText(), label.getStyle(), label.getX(), label.getY(), label.getAngle(), x, y, textMargin))) {
                        /* add */ (items.push(label) > 0);
                        if (stopAtFirstItem) {
                            return items;
                        }
                    }
                }
            }
        }
        {
            var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getDimensionLines();
            for (var index = 0; index < array.length; index++) {
                var dimensionLine = array[index];
                {
                    if ((!basePlanLocked || !this.isItemPartOfBasePlan(dimensionLine)) && this.isLevelNullOrViewable(dimensionLine.getLevel()) && dimensionLine.isAtLevel(selectedLevel) && dimensionLine.containsPoint(x, y, margin)) {
                        /* add */ (items.push(dimensionLine) > 0);
                        if (stopAtFirstItem) {
                            return items;
                        }
                    }
                }
            }
        }
        var polylines = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getPolylines();
        for (var i = polylines.length - 1; i >= 0; i--) {
            {
                var polyline = polylines[i];
                if ((!basePlanLocked || !this.isItemPartOfBasePlan(polyline)) && this.isLevelNullOrViewable(polyline.getLevel()) && polyline.isAtLevel(selectedLevel) && polyline.containsPoint(x, y, margin)) {
                    /* add */ (items.push(polyline) > 0);
                    if (stopAtFirstItem) {
                        return items;
                    }
                }
            }
            ;
        }
        var furniture = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
        var foundFurniture = ([]);
        var foundPiece = null;
        for (var i = furniture.length - 1; i >= 0; i--) {
            {
                var piece = furniture[i];
                if ((!basePlanLocked || !this.isItemPartOfBasePlan(piece)) && this.isPieceOfFurnitureVisibleAtSelectedLevel(piece)) {
                    if (piece.containsPoint(x, y, margin)) {
                        /* add */ (foundFurniture.push(piece) > 0);
                        if (foundPiece == null || piece.getGroundElevation() > foundPiece.getGroundElevation()) {
                            foundPiece = piece;
                        }
                    }
                    else if (foundPiece == null) {
                        var pieceName = piece.getName();
                        if (pieceName != null && piece.isNameVisible() && this.isItemTextAt(piece, pieceName, piece.getNameStyle(), piece.getX() + piece.getNameXOffset(), piece.getY() + piece.getNameYOffset(), piece.getNameAngle(), x, y, textMargin)) {
                            /* add */ (foundFurniture.push(piece) > 0);
                            foundPiece = piece;
                        }
                    }
                }
            }
            ;
        }
        if (foundPiece == null && basePlanLocked) {
            {
                var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
                for (var index = 0; index < array.length; index++) {
                    var item = array[index];
                    {
                        if (item != null && item instanceof HomePieceOfFurniture) {
                            var piece = item;
                            if (!this.isItemPartOfBasePlan(piece) && this.isPieceOfFurnitureVisibleAtSelectedLevel(piece) && (piece.containsPoint(x, y, margin) || piece.getName() != null && piece.isNameVisible() && this.isItemTextAt(piece, piece.getName(), piece.getNameStyle(), piece.getX() + piece.getNameXOffset(), piece.getY() + piece.getNameYOffset(), piece.getNameAngle(), x, y, textMargin))) {
                                /* add */ (foundFurniture.push(piece) > 0);
                                foundPiece = piece;
                                if (stopAtFirstItem) {
                                    break;
                                }
                            }
                        }
                    }
                }
            }
        }
        if (foundPiece != null && stopAtFirstItem) {
            if (!ignoreGroupsFurniture && (foundPiece != null && foundPiece instanceof HomeFurnitureGroup)) {
                var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
                if ( /* size */selectedItems.length >= 1) {
                    if (( /* size */selectedItems.length === 1 && /* get */ selectedItems[0] === foundPiece) || /* containsAll */ (function (a, r) { for (var i = 0; i < r.length; i++) {
                        if (a.indexOf(r[i]) < 0)
                            return false;
                    } return true; })(foundPiece.getAllFurniture(), selectedItems)) {
                        for (var index = 0; index < selectedItems.length; index++) {
                            var selectedItem = selectedItems[index];
                            {
                                if (selectedItem != null && selectedItem instanceof HomeFurnitureGroup) {
                                    var groupFurniture = selectedItem.getFurniture();
                                    for (var i = groupFurniture.length - 1; i >= 0; i--) {
                                        {
                                            var piece = groupFurniture[i];
                                            if ((!basePlanLocked || !this.isItemPartOfBasePlan(piece)) && !(selectedItems.indexOf((piece)) >= 0) && piece.containsPoint(x, y, margin)) {
                                                return /* asList */ [piece].slice(0);
                                            }
                                        }
                                        ;
                                    }
                                }
                            }
                        }
                        for (var index = 0; index < selectedItems.length; index++) {
                            var selectedItem = selectedItems[index];
                            {
                                if (selectedItem != null && selectedItem instanceof HomePieceOfFurniture) {
                                    var groupFurniture = this.getFurnitureInSameGroup(selectedItem);
                                    for (var i = groupFurniture.length - 1; i >= 0; i--) {
                                        {
                                            var piece = groupFurniture[i];
                                            if ((!basePlanLocked || !this.isItemPartOfBasePlan(piece)) && piece.containsPoint(x, y, margin)) {
                                                return /* asList */ [piece].slice(0);
                                            }
                                        }
                                        ;
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return /* asList */ [foundPiece].slice(0);
        }
        else {
            /* sort */ (function (l, c) { if (c.compare)
                l.sort(function (e1, e2) { return c.compare(e1, e2); });
            else
                l.sort(c); })(foundFurniture, new PlanController.PlanController$7(this));
            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(items, foundFurniture);
            {
                var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        if ((!basePlanLocked || !this.isItemPartOfBasePlan(wall)) && this.isLevelNullOrViewable(wall.getLevel()) && wall.isAtLevel(selectedLevel) && wall.containsPoint$float$float$float(x, y, margin)) {
                            /* add */ (items.push(wall) > 0);
                            if (stopAtFirstItem) {
                                return items;
                            }
                        }
                    }
                }
            }
            var rooms = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms();
            var foundRoom = null;
            for (var i = rooms.length - 1; i >= 0; i--) {
                {
                    var room = rooms[i];
                    if ((!basePlanLocked || !this.isItemPartOfBasePlan(room)) && this.isLevelNullOrViewable(room.getLevel()) && room.isAtLevel(selectedLevel)) {
                        if (room.containsPoint(x, y, margin)) {
                            /* add */ (items.push(room) > 0);
                            if (foundRoom == null || room.isCeilingVisible() && !foundRoom.isCeilingVisible()) {
                                foundRoom = room;
                            }
                        }
                        else {
                            var roomName = room.getName();
                            if (roomName != null && this.isItemTextAt(room, roomName, room.getNameStyle(), room.getXCenter() + room.getNameXOffset(), room.getYCenter() + room.getNameYOffset(), room.getNameAngle(), x, y, textMargin)) {
                                /* add */ (items.push(room) > 0);
                                foundRoom = room;
                            }
                            if (room.isAreaVisible()) {
                                var areaText = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getAreaFormatWithUnit().format(room.getArea());
                                if (this.isItemTextAt(room, areaText, room.getAreaStyle(), room.getXCenter() + room.getAreaXOffset(), room.getYCenter() + room.getAreaYOffset(), room.getAreaAngle(), x, y, textMargin)) {
                                    /* add */ (items.push(room) > 0);
                                    foundRoom = room;
                                }
                            }
                        }
                    }
                }
                ;
            }
            if (foundRoom != null && stopAtFirstItem) {
                return /* asList */ [foundRoom].slice(0);
            }
            else {
                var compass = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getCompass();
                if ((!basePlanLocked || !this.isItemPartOfBasePlan(compass)) && compass.containsPoint(x, y, textMargin)) {
                    /* add */ (items.push(compass) > 0);
                }
                return items;
            }
        }
    };
    /**
     * Returns the selectable items at (<code>x</code>, <code>y</code>) point.
     * @param {number} x
     * @param {number} y
     * @param {boolean} stopAtFirstItem
     * @param {boolean} ignoreGroupsFurniture
     * @return {*[]}
     * @private
     */
    PlanController.prototype.getSelectableItemsAt = function (x, y, stopAtFirstItem, ignoreGroupsFurniture) {
        if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof stopAtFirstItem === 'boolean') || stopAtFirstItem === null) && ((typeof ignoreGroupsFurniture === 'boolean') || ignoreGroupsFurniture === null)) {
            return this.getSelectableItemsAt$float$float$boolean$boolean(x, y, stopAtFirstItem, ignoreGroupsFurniture);
        }
        else if (((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && stopAtFirstItem === undefined && ignoreGroupsFurniture === undefined) {
            return this.getSelectableItemsAt$float$float(x, y);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Returns <code>true</code> if the <code>text</code> of an <code>item</code> displayed
     * at the point (<code>xText</code>, <code>yText</code>) contains the point (<code>x</code>, <code>y</code>).
     * @param {Object} item
     * @param {string} text
     * @param {TextStyle} textStyle
     * @param {number} xText
     * @param {number} yText
     * @param {number} textAngle
     * @param {number} x
     * @param {number} y
     * @param {number} textMargin
     * @return {boolean}
     * @private
     */
    PlanController.prototype.isItemTextAt = function (item, text, textStyle, xText, yText, textAngle, x, y, textMargin) {
        if (textStyle == null) {
            textStyle = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getDefaultTextStyle(item.constructor);
        }
        var textBounds = this.getView().getTextBounds(text, textStyle, xText, yText, textAngle);
        return this.getPath$float_A_A(textBounds).intersects(x - textMargin, y - textMargin, 2 * textMargin, 2 * textMargin);
    };
    /**
     * Returns the items that intersects with the rectangle of (<code>x0</code>,
     * <code>y0</code>), (<code>x1</code>, <code>y1</code>) opposite corners.
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {*[]}
     */
    PlanController.prototype.getSelectableItemsIntersectingRectangle = function (x0, y0, x1, y1) {
        var items = ([]);
        var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
        {
            var array = this.getVisibleItemsAtSelectedLevel();
            for (var index = 0; index < array.length; index++) {
                var item = array[index];
                {
                    if ((!basePlanLocked || !this.isItemPartOfBasePlan(item)) && item.intersectsRectangle(x0, y0, x1, y1)) {
                        /* add */ (items.push(item) > 0);
                    }
                }
            }
        }
        var camera = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getObserverCamera();
        if (camera != null && camera.intersectsRectangle(x0, y0, x1, y1)) {
            /* add */ (items.push(camera) > 0);
        }
        return items;
    };
    /**
     * Returns the selected piece of furniture with a point
     * at (<code>x</code>, <code>y</code>) that can be used to rotate the piece.
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getRotatedPieceOfFurnitureAt = function (x, y) {
        var selectedPiece = this.getSelectedMovablePieceOfFurniture();
        if (selectedPiece != null) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.isTopLeftPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with a point
     * at (<code>x</code>, <code>y</code>) that can be used to elevate the piece.
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getElevatedPieceOfFurnitureAt = function (x, y) {
        var selectedPiece = this.getSelectedMovablePieceOfFurniture();
        if (selectedPiece != null) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.isTopRightPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with a point
     * at (<code>x</code>, <code>y</code>) that can be used to resize the height
     * of the piece.
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getHeightResizedPieceOfFurnitureAt = function (x, y) {
        var selectedPiece = this.getSelectedResizablePieceOfFurniture();
        if (selectedPiece != null) {
            var margin = this.getIndicatorMargin();
            if (!selectedPiece.isHorizontallyRotated() && selectedPiece.isBottomLeftPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with a point
     * at (<code>x</code>, <code>y</code>) that can be used to rotate the piece
     * around the pitch axis.
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getPitchRotatedPieceOfFurnitureAt = function (x, y) {
        var selectedPiece = this.getSelectedMovablePieceOfFurniture();
        if (selectedPiece != null && this.getView().isFurnitureSizeInPlanSupported()) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.getPitch() !== 0 && selectedPiece.isBottomLeftPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with a point
     * at (<code>x</code>, <code>y</code>) that can be used to rotate the piece
     * around the roll axis.
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getRollRotatedPieceOfFurnitureAt = function (x, y) {
        var selectedPiece = this.getSelectedMovablePieceOfFurniture();
        if (selectedPiece != null && this.getView().isFurnitureSizeInPlanSupported()) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.getRoll() !== 0 && selectedPiece.isBottomLeftPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with a point
     * at (<code>x</code>, <code>y</code>) that can be used to resize
     * the width and the depth of the piece.
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getWidthAndDepthResizedPieceOfFurnitureAt = function (x, y) {
        var selectedPiece = this.getSelectedResizablePieceOfFurniture();
        if (selectedPiece != null) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.isBottomRightPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected item if selection contains one selected movable piece of furniture.
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getSelectedMovablePieceOfFurniture = function () {
        var selectedPiece = this.getSelectedPieceOfFurniture();
        if (selectedPiece != null && this.isItemMovable(selectedPiece)) {
            return selectedPiece;
        }
        return null;
    };
    /**
     * Returns the selected item if selection contains one selected resizable piece of furniture.
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getSelectedResizablePieceOfFurniture = function () {
        var selectedPiece = this.getSelectedPieceOfFurniture();
        if (selectedPiece != null && selectedPiece.isResizable() && this.isItemResizable(selectedPiece)) {
            return selectedPiece;
        }
        return null;
    };
    /**
     * Returns the selected item if selection contains one selected piece of furniture.
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getSelectedPieceOfFurniture = function () {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof HomePieceOfFurniture)) {
            var piece = selectedItems[0];
            if (this.isPieceOfFurnitureVisibleAtSelectedLevel(piece)) {
                return piece;
            }
        }
        return null;
    };
    /**
     * Returns the selected light with a point at (<code>x</code>, <code>y</code>)
     * that can be used to resize the power of the light.
     * @param {number} x
     * @param {number} y
     * @return {HomeLight}
     * @private
     */
    PlanController.prototype.getModifiedLightPowerAt = function (x, y) {
        var selectedPiece = this.getSelectedPieceOfFurniture();
        if (selectedPiece != null && selectedPiece instanceof HomeLight) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.isBottomLeftPointAt(x, y, margin) && !selectedPiece.containsPoint(x, y, 0)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with its
     * name center point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getPieceOfFurnitureNameAt = function (x, y) {
        var selectedPiece = this.getSelectedMovablePieceOfFurniture();
        if (selectedPiece != null) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.isNameVisible() && selectedPiece.getName().trim().length > 0 && selectedPiece.isNameCenterPointAt(x, y, margin)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns the selected piece of furniture with its
     * name angle point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {HomePieceOfFurniture}
     * @private
     */
    PlanController.prototype.getPieceOfFurnitureRotatedNameAt = function (x, y) {
        var selectedPiece = this.getSelectedMovablePieceOfFurniture();
        if (selectedPiece != null) {
            var margin = this.getIndicatorMargin();
            if (selectedPiece.isNameVisible() && selectedPiece.getName().trim().length > 0 && this.isTextAnglePointAt(selectedPiece, selectedPiece.getName(), selectedPiece.getNameStyle(), selectedPiece.getX() + selectedPiece.getNameXOffset(), selectedPiece.getY() + selectedPiece.getNameYOffset(), selectedPiece.getNameAngle(), x, y, margin)) {
                return selectedPiece;
            }
        }
        return null;
    };
    /**
     * Returns <code>true</code> if the angle indicator of the <code>text</code> of an <code>item</code> displayed
     * at the point (<code>xText</code>, <code>yText</code>) is equal to the point (<code>x</code>, <code>y</code>).
     * @param {Object} item
     * @param {string} text
     * @param {TextStyle} textStyle
     * @param {number} xText
     * @param {number} yText
     * @param {number} textAngle
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     * @private
     */
    PlanController.prototype.isTextAnglePointAt = function (item, text, textStyle, xText, yText, textAngle, x, y, margin) {
        if (textStyle == null) {
            textStyle = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getDefaultTextStyle(item.constructor);
        }
        var textBounds = this.getView().getTextBounds(text, textStyle, xText, yText, textAngle);
        var anglePointX;
        var anglePointY;
        if (textStyle.getAlignment() === TextStyle.Alignment.LEFT) {
            anglePointX = textBounds[0][0];
            anglePointY = textBounds[0][1];
        }
        else if (textStyle.getAlignment() === TextStyle.Alignment.RIGHT) {
            anglePointX = textBounds[1][0];
            anglePointY = textBounds[1][1];
        }
        else {
            anglePointX = (textBounds[0][0] + textBounds[1][0]) / 2;
            anglePointY = (textBounds[0][1] + textBounds[1][1]) / 2;
        }
        return Math.abs(x - anglePointX) <= margin && Math.abs(y - anglePointY) <= margin;
    };
    /**
     * Returns the selected label with its angle point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Label}
     * @private
     */
    PlanController.prototype.getRotatedLabelAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Label) && this.isItemMovable(/* get */ selectedItems[0])) {
            var label = selectedItems[0];
            var margin = this.getIndicatorMargin();
            if (label.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && this.isTextAnglePointAt(label, label.getText(), label.getStyle(), label.getX(), label.getY(), label.getAngle(), x, y, margin)) {
                return label;
            }
        }
        return null;
    };
    /**
     * Returns the selected label with its elevation point at (<code>x</code>, <code>y</code>).
     * @param {number} x
     * @param {number} y
     * @return {Label}
     * @private
     */
    PlanController.prototype.getElevatedLabelAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Label)) {
            var label = selectedItems[0];
            if (label.getPitch() != null && this.isItemMovable(label)) {
                var margin = this.getIndicatorMargin();
                if (label.isAtLevel(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel())) {
                    var style = label.getStyle();
                    if (style == null) {
                        style = this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getDefaultTextStyle(label.constructor);
                    }
                    var textBounds = this.getView().getTextBounds(label.getText(), this.getItemTextStyle(label, label.getStyle()), label.getX(), label.getY(), label.getAngle());
                    var pointX = void 0;
                    var pointY = void 0;
                    if (style.getAlignment() === TextStyle.Alignment.LEFT) {
                        pointX = textBounds[3][0];
                        pointY = textBounds[3][1];
                    }
                    else if (style.getAlignment() === TextStyle.Alignment.RIGHT) {
                        pointX = textBounds[2][0];
                        pointY = textBounds[2][1];
                    }
                    else {
                        pointX = (textBounds[2][0] + textBounds[3][0]) / 2;
                        pointY = (textBounds[2][1] + textBounds[3][1]) / 2;
                    }
                    if (Math.abs(x - pointX) <= margin && Math.abs(y - pointY) <= margin) {
                        return label;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Returns the selected camera with a point at (<code>x</code>, <code>y</code>)
     * that can be used to change the camera yaw angle.
     * @param {number} x
     * @param {number} y
     * @return {Camera}
     * @private
     */
    PlanController.prototype.getYawRotatedCameraAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Camera) && this.isItemResizable(/* get */ selectedItems[0])) {
            var camera = selectedItems[0];
            var margin = this.getIndicatorMargin();
            var cameraPoints = camera.getPoints();
            var xMiddleFirstAndLastPoint = (cameraPoints[0][0] + cameraPoints[3][0]) / 2;
            var yMiddleFirstAndLastPoint = (cameraPoints[0][1] + cameraPoints[3][1]) / 2;
            if (Math.abs(x - xMiddleFirstAndLastPoint) <= margin && Math.abs(y - yMiddleFirstAndLastPoint) <= margin && !camera.containsPoint(x, y, 0)) {
                return camera;
            }
        }
        return null;
    };
    /**
     * Returns the selected camera with a point at (<code>x</code>, <code>y</code>)
     * that can be used to change the camera pitch angle.
     * @param {number} x
     * @param {number} y
     * @return {Camera}
     * @private
     */
    PlanController.prototype.getPitchRotatedCameraAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Camera) && this.isItemResizable(/* get */ selectedItems[0])) {
            var camera = selectedItems[0];
            var margin = this.getIndicatorMargin();
            var cameraPoints = camera.getPoints();
            var xMiddleFirstAndLastPoint = (cameraPoints[1][0] + cameraPoints[2][0]) / 2;
            var yMiddleFirstAndLastPoint = (cameraPoints[1][1] + cameraPoints[2][1]) / 2;
            if (Math.abs(x - xMiddleFirstAndLastPoint) <= margin && Math.abs(y - yMiddleFirstAndLastPoint) <= margin && !camera.containsPoint(x, y, 0)) {
                return camera;
            }
        }
        return null;
    };
    /**
     * Returns the selected camera with a point at (<code>x</code>, <code>y</code>)
     * that can be used to change the camera elevation.
     * @param {number} x
     * @param {number} y
     * @return {Camera}
     * @private
     */
    PlanController.prototype.getElevatedCameraAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Camera) && this.isItemResizable(/* get */ selectedItems[0])) {
            var camera = selectedItems[0];
            var margin = this.getIndicatorMargin();
            var cameraPoints = camera.getPoints();
            var xMiddleFirstAndSecondPoint = (cameraPoints[0][0] + cameraPoints[1][0]) / 2;
            var yMiddleFirstAndSecondPoint = (cameraPoints[0][1] + cameraPoints[1][1]) / 2;
            if (Math.abs(x - xMiddleFirstAndSecondPoint) <= margin && Math.abs(y - yMiddleFirstAndSecondPoint) <= margin && !camera.containsPoint(x, y, 0)) {
                return camera;
            }
        }
        return null;
    };
    /**
     * Returns the selected compass with a point
     * at (<code>x</code>, <code>y</code>) that can be used to rotate it.
     * @param {number} x
     * @param {number} y
     * @return {Compass}
     * @private
     */
    PlanController.prototype.getRotatedCompassAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Compass) && this.isItemMovable(/* get */ selectedItems[0])) {
            var compass = selectedItems[0];
            var margin = this.getIndicatorMargin();
            var compassPoints = compass.getPoints();
            var xMiddleThirdAndFourthPoint = (compassPoints[2][0] + compassPoints[3][0]) / 2;
            var yMiddleThirdAndFourthPoint = (compassPoints[2][1] + compassPoints[3][1]) / 2;
            if (Math.abs(x - xMiddleThirdAndFourthPoint) <= margin && Math.abs(y - yMiddleThirdAndFourthPoint) <= margin && !compass.containsPoint(x, y, 0)) {
                return compass;
            }
        }
        return null;
    };
    /**
     * Returns the selected compass with a point
     * at (<code>x</code>, <code>y</code>) that can be used to resize it.
     * @param {number} x
     * @param {number} y
     * @return {Compass}
     * @private
     */
    PlanController.prototype.getResizedCompassAt = function (x, y) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        if ( /* size */selectedItems.length === 1 && ( /* get */selectedItems[0] != null && /* get */ selectedItems[0] instanceof Compass) && this.isItemMovable(/* get */ selectedItems[0])) {
            var compass = selectedItems[0];
            var margin = this.getIndicatorMargin();
            var compassPoints = compass.getPoints();
            var xMiddleSecondAndThirdPoint = (compassPoints[1][0] + compassPoints[2][0]) / 2;
            var yMiddleSecondAndThirdPoint = (compassPoints[1][1] + compassPoints[2][1]) / 2;
            if (Math.abs(x - xMiddleSecondAndThirdPoint) <= margin && Math.abs(y - yMiddleSecondAndThirdPoint) <= margin && !compass.containsPoint(x, y, 0)) {
                return compass;
            }
        }
        return null;
    };
    /**
     * Deletes <code>items</code> in plan and record it as an undoable operation.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     */
    PlanController.prototype.deleteItems = function (items) {
        var deletedItems = ([]);
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (this.isItemDeletable(item)) {
                    /* add */ (deletedItems.push(item) > 0);
                }
            }
        }
        if (!(deletedItems.length == 0)) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.beginUpdate();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.removeSelectionListener(this.selectionListener);
            var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            var selectedItems = (items.slice(0));
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.ItemsDeletionStartUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, allLevelsSelection, /* toArray */ selectedItems.slice(0)));
            this.deleteFurniture(Home.getFurnitureSubList(deletedItems));
            var deletedOtherItems = (Home.getWallsSubList(deletedItems).slice(0));
            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(deletedOtherItems, Home.getRoomsSubList(deletedItems));
            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(deletedOtherItems, Home.getDimensionLinesSubList(deletedItems));
            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(deletedOtherItems, Home.getPolylinesSubList(deletedItems));
            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(deletedOtherItems, Home.getLabelsSubList(deletedItems));
            this.postDeleteItems(deletedOtherItems, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
            this.doDeleteItems(deletedOtherItems);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addSelectionListener(this.selectionListener);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.ItemsDeletionEndUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home));
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.endUpdate();
        }
    };
    /**
     * Posts an undoable delete items operation about <code>deletedItems</code>.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} deletedItems
     * @param {boolean} basePlanLocked
     * @param {boolean} allLevelsSelection
     * @private
     */
    PlanController.prototype.postDeleteItems = function (deletedItems, basePlanLocked, allLevelsSelection) {
        var deletedWalls = Home.getWallsSubList(deletedItems);
        var joinedDeletedWalls = PlanController.JoinedWall.getJoinedWalls(deletedWalls);
        var deletedRooms = Home.getRoomsSubList(deletedItems);
        var homeRooms = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms();
        var sortedMap = ({});
        for (var index = 0; index < deletedRooms.length; index++) {
            var room = deletedRooms[index];
            {
                /* put */ (function (m, k, v) { if (m.entries == null)
                    m.entries = []; for (var i = 0; i < m.entries.length; i++)
                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                        var pv = m.entries[i].value;
                        m.entries[i].value = v;
                        return pv;
                    } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedMap, homeRooms.indexOf(room), room);
            }
        }
        var rooms = (function (a1, a2) { if (a1.length >= a2.length) {
            a1.length = 0;
            a1.push.apply(a1, a2);
            return a1;
        }
        else {
            return a2.slice(0);
        } })((function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(/* size */ (function (m) { if (m.entries == null)
            m.entries = []; return m.entries.length; })(sortedMap)), /* values */ (function (m) { var r = []; if (m.entries == null)
            m.entries = []; for (var i_15 = 0; i_15 < m.entries.length; i_15++)
            r.push(m.entries[i_15].value); return r; })(sortedMap));
        var roomsIndices = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(rooms.length);
        var roomsLevels = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(rooms.length);
        var i = 0;
        {
            var array = /* keySet */ (function (m) { var r = []; if (m.entries == null)
                m.entries = []; for (var i_16 = 0; i_16 < m.entries.length; i_16++)
                r.push(m.entries[i_16].key); return r; })(sortedMap);
            for (var loopIndex = 0; loopIndex < array.length; loopIndex++) {
                var index = array[loopIndex];
                {
                    roomsIndices[i] = index;
                    roomsLevels[i] = rooms[i].getLevel();
                    i++;
                }
            }
        }
        var deletedDimensionLines = Home.getDimensionLinesSubList(deletedItems);
        var dimensionLines = deletedDimensionLines.slice(0);
        var dimensionLinesLevels = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(dimensionLines.length);
        for (i = 0; i < dimensionLines.length; i++) {
            {
                dimensionLinesLevels[i] = dimensionLines[i].getLevel();
            }
            ;
        }
        var deletedPolylines = Home.getPolylinesSubList(deletedItems);
        var homePolylines = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getPolylines();
        var sortedPolylinesMap = ({});
        for (var index = 0; index < deletedPolylines.length; index++) {
            var polyline = deletedPolylines[index];
            {
                /* put */ (function (m, k, v) { if (m.entries == null)
                    m.entries = []; for (var i = 0; i < m.entries.length; i++)
                    if (m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                        var pv = m.entries[i].value;
                        m.entries[i].value = v;
                        return pv;
                    } m.entries.push({ key: k, value: v, getKey: function () { return this.key; }, getValue: function () { return this.value; } }); m.entries.sort(function (e1, e2) { return (e1.key.compareTo != null) ? e1.key.compareTo(e2) : (e1.key - e2.key); }); return null; })(sortedPolylinesMap, homePolylines.indexOf(polyline), polyline);
            }
        }
        var polylines = (function (a1, a2) { if (a1.length >= a2.length) {
            a1.length = 0;
            a1.push.apply(a1, a2);
            return a1;
        }
        else {
            return a2.slice(0);
        } })((function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(/* size */ (function (m) { if (m.entries == null)
            m.entries = []; return m.entries.length; })(sortedPolylinesMap)), /* values */ (function (m) { var r = []; if (m.entries == null)
            m.entries = []; for (var i_17 = 0; i_17 < m.entries.length; i_17++)
            r.push(m.entries[i_17].value); return r; })(sortedPolylinesMap));
        var polylinesIndices = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(polylines.length);
        var polylinesLevels = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(polylines.length);
        i = 0;
        {
            var array = /* keySet */ (function (m) { var r = []; if (m.entries == null)
                m.entries = []; for (var i_18 = 0; i_18 < m.entries.length; i_18++)
                r.push(m.entries[i_18].key); return r; })(sortedPolylinesMap);
            for (var loopIndex = 0; loopIndex < array.length; loopIndex++) {
                var index = array[loopIndex];
                {
                    polylinesIndices[i] = index;
                    polylinesLevels[i] = polylines[i].getLevel();
                    i++;
                }
            }
        }
        var deletedLabels = Home.getLabelsSubList(deletedItems);
        var labels = deletedLabels.slice(0);
        var labelsLevels = (function (s) { var a = []; while (s-- > 0)
            a.push(null); return a; })(labels.length);
        for (i = 0; i < labels.length; i++) {
            {
                labelsLevels[i] = labels[i].getLevel();
            }
            ;
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.ItemsDeletionUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, basePlanLocked, allLevelsSelection, /* toArray */ deletedItems.slice(0), joinedDeletedWalls, rooms, roomsIndices, roomsLevels, dimensionLines, dimensionLinesLevels, polylines, polylinesIndices, polylinesLevels, labels, labelsLevels));
    };
    /**
     * Deletes <code>items</code> from home.
     * @param {*[]} items
     * @private
     */
    PlanController.prototype.doDeleteItems = function (items) {
        var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (item != null && item instanceof Wall) {
                    this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteWall(item);
                }
                else if (item != null && item instanceof DimensionLine) {
                    this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteDimensionLine(item);
                }
                else if (item != null && item instanceof Room) {
                    this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteRoom(item);
                }
                else if (item != null && item instanceof Polyline) {
                    this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deletePolyline(item);
                }
                else if (item != null && item instanceof Label) {
                    this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteLabel(item);
                }
                else if (item != null && item instanceof HomePieceOfFurniture) {
                    this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deletePieceOfFurniture(item);
                }
                basePlanLocked = !this.isItemPartOfBasePlan(item) && basePlanLocked;
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setAllLevelsSelection(false);
    };
    /**
     * Moves and shows selected items in plan component of (<code>dx</code>,
     * <code>dy</code>) units and record it as undoable operation.
     * @param {number} dx
     * @param {number} dy
     * @private
     */
    PlanController.prototype.moveAndShowSelectedItems = function (dx, dy) {
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        var movedItems = ([]);
        for (var index = 0; index < selectedItems.length; index++) {
            var item = selectedItems[index];
            {
                if (this.isItemMovable(item)) {
                    /* add */ (movedItems.push(item) > 0);
                }
            }
        }
        if (!(movedItems.length == 0)) {
            this.moveItems(movedItems, dx, dy);
            this.selectAndShowItems$java_util_List$boolean(movedItems, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
            if ( /* size */movedItems.length !== 1 || !( /* get */movedItems[0] != null && /* get */ movedItems[0] instanceof Camera)) {
                this.postItemsMove(movedItems, selectedItems, dx, dy);
            }
        }
    };
    /**
     * Moves <code>items</code> of (<code>dx</code>, <code>dy</code>) units.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @param {number} dx
     * @param {number} dy
     */
    PlanController.prototype.moveItems = function (items, dx, dy) {
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (item != null && item instanceof Wall) {
                    var wall = item;
                    wall.removePropertyChangeListener(this.wallChangeListener);
                    PlanController.moveWallStartPoint(wall, wall.getXStart() + dx, wall.getYStart() + dy, !(items.indexOf((wall.getWallAtStart())) >= 0));
                    PlanController.moveWallEndPoint(wall, wall.getXEnd() + dx, wall.getYEnd() + dy, !(items.indexOf((wall.getWallAtEnd())) >= 0));
                    this.resetAreaCache();
                    wall.addPropertyChangeListener(this.wallChangeListener);
                }
                else {
                    var boundToWall = false;
                    if (item != null && item instanceof HomeDoorOrWindow) {
                        boundToWall = item.isBoundToWall();
                    }
                    item.move(dx, dy);
                    if (boundToWall) {
                        var itemArea = new java.awt.geom.Area(this.getPath$float_A_A(item.getPoints()));
                        itemArea.intersect(this.getWallsArea(true));
                        item.setBoundToWall(!itemArea.isEmpty());
                    }
                }
            }
        }
    };
    /**
     * Moves <code>wall</code> start point to (<code>xStart</code>, <code>yStart</code>)
     * and the wall point joined to its start point if <code>moveWallAtStart</code> is true.
     * @param {Wall} wall
     * @param {number} xStart
     * @param {number} yStart
     * @param {boolean} moveWallAtStart
     * @private
     */
    PlanController.moveWallStartPoint = function (wall, xStart, yStart, moveWallAtStart) {
        var oldXStart = wall.getXStart();
        var oldYStart = wall.getYStart();
        wall.setXStart(xStart);
        wall.setYStart(yStart);
        var wallAtStart = wall.getWallAtStart();
        if (wallAtStart != null && moveWallAtStart) {
            if (wallAtStart.getWallAtStart() === wall && (wallAtStart.getWallAtEnd() !== wall || (wallAtStart.getXStart() === oldXStart && wallAtStart.getYStart() === oldYStart))) {
                wallAtStart.setXStart(xStart);
                wallAtStart.setYStart(yStart);
            }
            else if (wallAtStart.getWallAtEnd() === wall && (wallAtStart.getWallAtStart() !== wall || (wallAtStart.getXEnd() === oldXStart && wallAtStart.getYEnd() === oldYStart))) {
                wallAtStart.setXEnd(xStart);
                wallAtStart.setYEnd(yStart);
            }
        }
    };
    /**
     * Moves <code>wall</code> end point to (<code>xEnd</code>, <code>yEnd</code>)
     * and the wall point joined to its end if <code>moveWallAtEnd</code> is true.
     * @param {Wall} wall
     * @param {number} xEnd
     * @param {number} yEnd
     * @param {boolean} moveWallAtEnd
     * @private
     */
    PlanController.moveWallEndPoint = function (wall, xEnd, yEnd, moveWallAtEnd) {
        var oldXEnd = wall.getXEnd();
        var oldYEnd = wall.getYEnd();
        wall.setXEnd(xEnd);
        wall.setYEnd(yEnd);
        var wallAtEnd = wall.getWallAtEnd();
        if (wallAtEnd != null && moveWallAtEnd) {
            if (wallAtEnd.getWallAtStart() === wall && (wallAtEnd.getWallAtEnd() !== wall || (wallAtEnd.getXStart() === oldXEnd && wallAtEnd.getYStart() === oldYEnd))) {
                wallAtEnd.setXStart(xEnd);
                wallAtEnd.setYStart(yEnd);
            }
            else if (wallAtEnd.getWallAtEnd() === wall && (wallAtEnd.getWallAtStart() !== wall || (wallAtEnd.getXEnd() === oldXEnd && wallAtEnd.getYEnd() === oldYEnd))) {
                wallAtEnd.setXEnd(xEnd);
                wallAtEnd.setYEnd(yEnd);
            }
        }
    };
    /**
     * Moves <code>wall</code> start point to (<code>x</code>, <code>y</code>)
     * if <code>editingStartPoint</code> is true or <code>wall</code> end point
     * to (<code>x</code>, <code>y</code>) if <code>editingStartPoint</code> is false.
     * @param {Wall} wall
     * @param {number} x
     * @param {number} y
     * @param {boolean} startPoint
     * @private
     */
    PlanController.moveWallPoint = function (wall, x, y, startPoint) {
        if (startPoint) {
            PlanController.moveWallStartPoint(wall, x, y, true);
        }
        else {
            PlanController.moveWallEndPoint(wall, x, y, true);
        }
    };
    /**
     * Moves <code>room</code> point at the given index to (<code>x</code>, <code>y</code>).
     * @param {Room} room
     * @param {number} x
     * @param {number} y
     * @param {number} pointIndex
     * @private
     */
    PlanController.moveRoomPoint = function (room, x, y, pointIndex) {
        room.setPoint(x, y, pointIndex);
    };
    /**
     * Moves <code>dimensionLine</code> start point to (<code>x</code>, <code>y</code>)
     * if <code>editingStartPoint</code> is true or <code>dimensionLine</code> end point
     * to (<code>x</code>, <code>y</code>) if <code>editingStartPoint</code> is false.
     * @param {DimensionLine} dimensionLine
     * @param {number} x
     * @param {number} y
     * @param {boolean} startPoint
     * @private
     */
    PlanController.moveDimensionLinePoint = function (dimensionLine, x, y, startPoint) {
        if (startPoint) {
            dimensionLine.setXStart(x);
            dimensionLine.setYStart(y);
        }
        else {
            dimensionLine.setXEnd(x);
            dimensionLine.setYEnd(y);
        }
    };
    /**
     * Swaps start and end points of the given dimension line.
     * @param {DimensionLine} dimensionLine
     * @private
     */
    PlanController.reverseDimensionLine = function (dimensionLine) {
        var swappedX = dimensionLine.getXStart();
        var swappedY = dimensionLine.getYStart();
        dimensionLine.setXStart(dimensionLine.getXEnd());
        dimensionLine.setYStart(dimensionLine.getYEnd());
        dimensionLine.setXEnd(swappedX);
        dimensionLine.setYEnd(swappedY);
        dimensionLine.setOffset(-dimensionLine.getOffset());
    };
    PlanController.prototype.selectAndShowItems$java_util_List = function (items) {
        this.selectAndShowItems$java_util_List$boolean(items, false);
    };
    PlanController.prototype.selectAndShowItems$java_util_List$boolean = function (items, allLevelsSelection) {
        this.selectItems$java_util_List$boolean(items, allLevelsSelection);
        this.selectLevelFromSelectedItems();
        this.getView().makeSelectionVisible();
    };
    /**
     * Selects <code>items</code> and make them visible at screen.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @param {boolean} allLevelsSelection
     * @private
     */
    PlanController.prototype.selectAndShowItems = function (items, allLevelsSelection) {
        if (((items != null && (items instanceof Array)) || items === null) && ((typeof allLevelsSelection === 'boolean') || allLevelsSelection === null)) {
            return this.selectAndShowItems$java_util_List$boolean(items, allLevelsSelection);
        }
        else if (((items != null && (items instanceof Array)) || items === null) && allLevelsSelection === undefined) {
            return this.selectAndShowItems$java_util_List(items);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.selectItems$java_util_List = function (items) {
        this.selectItems$java_util_List$boolean(items, false);
    };
    PlanController.prototype.selectItems$java_util_List$boolean = function (items, allLevelsSelection) {
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.removeSelectionListener(this.selectionListener);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(items);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addSelectionListener(this.selectionListener);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setAllLevelsSelection(allLevelsSelection);
    };
    /**
     * Selects <code>items</code>.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     * @param {boolean} allLevelsSelection
     * @private
     */
    PlanController.prototype.selectItems = function (items, allLevelsSelection) {
        if (((items != null && (items instanceof Array)) || items === null) && ((typeof allLevelsSelection === 'boolean') || allLevelsSelection === null)) {
            return this.selectItems$java_util_List$boolean(items, allLevelsSelection);
        }
        else if (((items != null && (items instanceof Array)) || items === null) && allLevelsSelection === undefined) {
            return this.selectItems$java_util_List(items);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Selects the given <code>item</code>.
     * @param {Object} item
     */
    PlanController.prototype.selectItem = function (item) {
        this.selectItems$java_util_List(/* asList */ [item].slice(0));
    };
    /**
     * Toggles the selection of the given <code>item</code>.
     * @param {Object} item
     */
    PlanController.prototype.toggleItemSelection = function (item) {
        var selectedItems = (this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems().slice(0));
        if ( /* contains */(selectedItems.indexOf((item)) >= 0)) {
            /* remove */ (function (a) { var index = a.indexOf(item); if (index >= 0) {
                a.splice(index, 1);
                return true;
            }
            else {
                return false;
            } })(selectedItems);
        }
        else {
            /* add */ (selectedItems.push(item) > 0);
        }
        this.selectItems$java_util_List$boolean(selectedItems, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
    };
    /**
     * Deselects all walls in plan.
     * @private
     */
    PlanController.prototype.deselectAll = function () {
        var emptyList = [];
        this.selectItems$java_util_List(emptyList);
    };
    /**
     * Adds <code>items</code> to home and post an undoable operation.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items
     */
    PlanController.prototype.addItems = function (items) {
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.beginUpdate();
        this.addFurniture$java_util_List(Home.getFurnitureSubList(items));
        this.addWalls(Home.getWallsSubList(items));
        this.addRooms(Home.getRoomsSubList(items));
        this.addPolylines(Home.getPolylinesSubList(items));
        this.addDimensionLines(Home.getDimensionLinesSubList(items));
        this.addLabels(Home.getLabelsSubList(items));
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setSelectedItems(items);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.ItemsAdditionEndUndoableEdit(this.__com_eteks_sweethome3d_viewcontroller_PlanController_home, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ items.slice(0)));
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.endUpdate();
    };
    PlanController.prototype.addFurniture = function (furniture, furnitureLevels, group, beforePiece) {
        if (((furniture != null && (furniture instanceof Array)) || furniture === null) && ((furnitureLevels != null && furnitureLevels instanceof Array && (furnitureLevels.length == 0 || furnitureLevels[0] == null || (furnitureLevels[0] != null && furnitureLevels[0] instanceof Level))) || furnitureLevels === null) && ((group != null && group instanceof HomeFurnitureGroup) || group === null) && ((beforePiece != null && beforePiece instanceof HomePieceOfFurniture) || beforePiece === null)) {
            _super.prototype.addFurniture.call(this, furniture, furnitureLevels, group, beforePiece);
        }
        else if (((furniture != null && (furniture instanceof Array)) || furniture === null) && ((furnitureLevels != null && furnitureLevels instanceof HomePieceOfFurniture) || furnitureLevels === null) && group === undefined && beforePiece === undefined) {
            return this.addFurniture$java_util_List$com_eteks_sweethome3d_model_HomePieceOfFurniture(furniture, furnitureLevels);
        }
        else if (((furniture != null && (furniture instanceof Array)) || furniture === null) && furnitureLevels === undefined && group === undefined && beforePiece === undefined) {
            return this.addFurniture$java_util_List(furniture);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.addFurniture$java_util_List = function (furniture) {
        _super.prototype.addFurniture$java_util_List.call(this, furniture);
        if (this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) {
            var wallsArea = this.getWallsArea(false);
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    if (piece != null && piece instanceof HomeDoorOrWindow) {
                        var piecePoints = piece.getPoints();
                        var pieceAreaIntersection = new java.awt.geom.Area(this.getPath$float_A_A(piecePoints));
                        pieceAreaIntersection.intersect(wallsArea);
                        if (!pieceAreaIntersection.isEmpty() && new Room(piecePoints).getArea() / this.getArea(pieceAreaIntersection) > 0.999) {
                            piece.setBoundToWall(true);
                        }
                    }
                }
            }
        }
    };
    /**
     * Adds <code>walls</code> to home and post an undoable new wall operation.
     * @param {Wall[]} walls
     */
    PlanController.prototype.addWalls = function (walls) {
        for (var index = 0; index < walls.length; index++) {
            var wall = walls[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWall(wall);
            }
        }
        this.postCreateWalls(walls, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
    };
    /**
     * Posts an undoable new wall operation, about <code>newWalls</code>.
     * @param {Wall[]} newWalls
     * @param {*[]} oldSelectedItems
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @private
     */
    PlanController.prototype.postCreateWalls = function (newWalls, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if ( /* size */newWalls.length > 0) {
            var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            if (basePlanLocked) {
                for (var index = 0; index < newWalls.length; index++) {
                    var wall = newWalls[index];
                    {
                        basePlanLocked = !this.isItemPartOfBasePlan(wall) && basePlanLocked;
                    }
                }
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
            }
            var newBasePlanLocked = basePlanLocked;
            var joinedNewWalls = PlanController.JoinedWall.getJoinedWalls(newWalls);
            var oldSelection = oldSelectedItems.slice(0);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.WallsCreationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, joinedNewWalls, newBasePlanLocked));
        }
    };
    /**
     * Adds the walls in <code>joinedWalls</code> to plan component, joins
     * them to other walls if necessary.
     * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedWalls
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doAddWalls = function (joinedWalls, basePlanLocked) {
        for (var index = 0; index < joinedWalls.length; index++) {
            var joinedNewWall = joinedWalls[index];
            {
                var wall = joinedNewWall.getWall();
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWall(wall);
                wall.setLevel(joinedNewWall.getLevel());
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
        for (var index = 0; index < joinedWalls.length; index++) {
            var joinedNewWall = joinedWalls[index];
            {
                var wall = joinedNewWall.getWall();
                var wallAtStart = joinedNewWall.getWallAtStart();
                if (wallAtStart != null) {
                    wall.setWallAtStart(wallAtStart);
                    if (joinedNewWall.isJoinedAtEndOfWallAtStart()) {
                        wallAtStart.setWallAtEnd(wall);
                    }
                    else {
                        wallAtStart.setWallAtStart(wall);
                    }
                }
                var wallAtEnd = joinedNewWall.getWallAtEnd();
                if (wallAtEnd != null) {
                    wall.setWallAtEnd(wallAtEnd);
                    if (joinedNewWall.isJoinedAtStartOfWallAtEnd()) {
                        wallAtEnd.setWallAtStart(wall);
                    }
                    else {
                        wallAtEnd.setWallAtEnd(wall);
                    }
                }
            }
        }
    };
    /**
     * Deletes walls referenced in <code>joinedDeletedWalls</code>.
     * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedDeletedWalls
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doDeleteWalls = function (joinedDeletedWalls, basePlanLocked) {
        for (var index = 0; index < joinedDeletedWalls.length; index++) {
            var joinedWall = joinedDeletedWalls[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteWall(joinedWall.getWall());
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Add <code>newRooms</code> to home and post an undoable new room line operation.
     * @param {Room[]} rooms
     */
    PlanController.prototype.addRooms = function (rooms) {
        var newRooms = rooms.slice(0);
        var roomsIndex = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(/* size */ rooms.length);
        var endIndex = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms().length;
        for (var i = 0; i < roomsIndex.length; i++) {
            {
                roomsIndex[i] = endIndex++;
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addRoom$com_eteks_sweethome3d_model_Room$int(newRooms[i], roomsIndex[i]);
            }
            ;
        }
        this.postCreateRooms$com_eteks_sweethome3d_model_Room_A$int_A$java_util_List$boolean$boolean(newRooms, roomsIndex, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
    };
    PlanController.prototype.postCreateRooms$com_eteks_sweethome3d_model_Room_A$int_A$java_util_List$boolean$boolean = function (newRooms, roomsIndex, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if (newRooms.length > 0) {
            var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            if (basePlanLocked) {
                for (var index = 0; index < newRooms.length; index++) {
                    var room = newRooms[index];
                    {
                        basePlanLocked = !this.isItemPartOfBasePlan(room) && basePlanLocked;
                    }
                }
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
            }
            var newBasePlanLocked = basePlanLocked;
            var oldSelection = oldSelectedItems.slice(0);
            var roomsLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomsCreationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, newRooms, roomsIndex, roomsLevel, newBasePlanLocked));
        }
    };
    /**
     * Posts an undoable new room operation, about <code>newRooms</code>.
     * @param {com.eteks.sweethome3d.model.Room[]} newRooms
     * @param {int[]} roomsIndex
     * @param {*[]} oldSelectedItems
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @private
     */
    PlanController.prototype.postCreateRooms = function (newRooms, roomsIndex, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if (((newRooms != null && newRooms instanceof Array && (newRooms.length == 0 || newRooms[0] == null || (newRooms[0] != null && newRooms[0] instanceof Room))) || newRooms === null) && ((roomsIndex != null && roomsIndex instanceof Array && (roomsIndex.length == 0 || roomsIndex[0] == null || (typeof roomsIndex[0] === 'number'))) || roomsIndex === null) && ((oldSelectedItems != null && (oldSelectedItems instanceof Array)) || oldSelectedItems === null) && ((typeof oldBasePlanLocked === 'boolean') || oldBasePlanLocked === null) && ((typeof oldAllLevelsSelection === 'boolean') || oldAllLevelsSelection === null)) {
            return this.postCreateRooms$com_eteks_sweethome3d_model_Room_A$int_A$java_util_List$boolean$boolean(newRooms, roomsIndex, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection);
        }
        else if (((newRooms != null && (newRooms instanceof Array)) || newRooms === null) && ((roomsIndex != null && (roomsIndex instanceof Array)) || roomsIndex === null) && ((typeof oldSelectedItems === 'boolean') || oldSelectedItems === null) && ((typeof oldBasePlanLocked === 'boolean') || oldBasePlanLocked === null) && oldAllLevelsSelection === undefined) {
            return this.postCreateRooms$java_util_List$java_util_List$boolean$boolean(newRooms, roomsIndex, oldSelectedItems, oldBasePlanLocked);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.postCreateRooms$java_util_List$java_util_List$boolean$boolean = function (rooms, oldSelection, basePlanLocked, allLevelsSelection) {
        var newRooms = rooms.slice(0);
        var roomsIndex = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(/* size */ rooms.length);
        var homeRooms = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getRooms();
        for (var i = 0; i < roomsIndex.length; i++) {
            {
                roomsIndex[i] = homeRooms.lastIndexOf(newRooms[i]);
            }
            ;
        }
        this.postCreateRooms$com_eteks_sweethome3d_model_Room_A$int_A$java_util_List$boolean$boolean(newRooms, roomsIndex, oldSelection, basePlanLocked, allLevelsSelection);
    };
    /**
     * Adds the <code>rooms</code> to plan component.
     * @param {com.eteks.sweethome3d.model.Room[]} rooms
     * @param {int[]} roomsIndices
     * @param {com.eteks.sweethome3d.model.Level[]} roomsLevels
     * @param {Level} uniqueRoomsLevel
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doAddRooms = function (rooms, roomsIndices, roomsLevels, uniqueRoomsLevel, basePlanLocked) {
        for (var i = 0; i < roomsIndices.length; i++) {
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addRoom$com_eteks_sweethome3d_model_Room$int(rooms[i], roomsIndices[i]);
                rooms[i].setLevel(roomsLevels != null ? roomsLevels[i] : uniqueRoomsLevel);
            }
            ;
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Deletes <code>rooms</code>.
     * @param {com.eteks.sweethome3d.model.Room[]} rooms
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doDeleteRooms = function (rooms, basePlanLocked) {
        for (var index = 0; index < rooms.length; index++) {
            var room = rooms[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteRoom(room);
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Add <code>dimensionLines</code> to home and post an undoable new dimension line operation.
     * @param {DimensionLine[]} dimensionLines
     */
    PlanController.prototype.addDimensionLines = function (dimensionLines) {
        for (var index = 0; index < dimensionLines.length; index++) {
            var dimensionLine = dimensionLines[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addDimensionLine(dimensionLine);
            }
        }
        this.postCreateDimensionLines(dimensionLines, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
    };
    /**
     * Posts an undoable new dimension line operation, about <code>newDimensionLines</code>.
     * @param {DimensionLine[]} newDimensionLines
     * @param {*[]} oldSelectedItems
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @private
     */
    PlanController.prototype.postCreateDimensionLines = function (newDimensionLines, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if ( /* size */newDimensionLines.length > 0) {
            var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            if (basePlanLocked) {
                for (var index = 0; index < newDimensionLines.length; index++) {
                    var dimensionLine = newDimensionLines[index];
                    {
                        basePlanLocked = !this.isItemPartOfBasePlan(dimensionLine) && basePlanLocked;
                    }
                }
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
            }
            var newBasePlanLocked = basePlanLocked;
            var dimensionLines = newDimensionLines.slice(0);
            var oldSelection = oldSelectedItems.slice(0);
            var dimensionLinesLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.DimensionLinesCreationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, dimensionLines, dimensionLinesLevel, newBasePlanLocked));
        }
    };
    /**
     * Adds the dimension lines in <code>dimensionLines</code> to plan component.
     * @param {com.eteks.sweethome3d.model.DimensionLine[]} dimensionLines
     * @param {com.eteks.sweethome3d.model.Level[]} dimensionLinesLevels
     * @param {Level} uniqueDimensionLinesLevel
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doAddDimensionLines = function (dimensionLines, dimensionLinesLevels, uniqueDimensionLinesLevel, basePlanLocked) {
        for (var i = 0; i < dimensionLines.length; i++) {
            {
                var dimensionLine = dimensionLines[i];
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addDimensionLine(dimensionLine);
                dimensionLine.setLevel(dimensionLinesLevels != null ? dimensionLinesLevels[i] : uniqueDimensionLinesLevel);
            }
            ;
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Deletes dimension lines in <code>dimensionLines</code>.
     * @param {com.eteks.sweethome3d.model.DimensionLine[]} dimensionLines
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doDeleteDimensionLines = function (dimensionLines, basePlanLocked) {
        for (var index = 0; index < dimensionLines.length; index++) {
            var dimensionLine = dimensionLines[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteDimensionLine(dimensionLine);
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Add <code>newPolylines</code> to home and post an undoable new polyline line operation.
     * @param {Polyline[]} polylines
     */
    PlanController.prototype.addPolylines = function (polylines) {
        var newPolylines = polylines.slice(0);
        var polylinesIndex = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(/* size */ polylines.length);
        var endIndex = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getPolylines().length;
        for (var i = 0; i < polylinesIndex.length; i++) {
            {
                polylinesIndex[i] = endIndex++;
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addPolyline$com_eteks_sweethome3d_model_Polyline$int(newPolylines[i], polylinesIndex[i]);
            }
            ;
        }
        this.postCreatePolylines$com_eteks_sweethome3d_model_Polyline_A$int_A$java_util_List$boolean$boolean(newPolylines, polylinesIndex, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
    };
    PlanController.prototype.postCreatePolylines$com_eteks_sweethome3d_model_Polyline_A$int_A$java_util_List$boolean$boolean = function (newPolylines, polylinesIndex, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if (newPolylines.length > 0) {
            var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            if (basePlanLocked) {
                for (var index = 0; index < newPolylines.length; index++) {
                    var polyline = newPolylines[index];
                    {
                        basePlanLocked = !this.isItemPartOfBasePlan(polyline) && basePlanLocked;
                    }
                }
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
            }
            var newBasePlanLocked = basePlanLocked;
            var oldSelection = oldSelectedItems.slice(0);
            var polylinesLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PolylinesCreationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, newPolylines, polylinesIndex, polylinesLevel, newBasePlanLocked));
        }
    };
    /**
     * Posts an undoable new polyline operation about <code>newPolylines</code>.
     * @param {com.eteks.sweethome3d.model.Polyline[]} newPolylines
     * @param {int[]} polylinesIndex
     * @param {*[]} oldSelectedItems
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @private
     */
    PlanController.prototype.postCreatePolylines = function (newPolylines, polylinesIndex, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if (((newPolylines != null && newPolylines instanceof Array && (newPolylines.length == 0 || newPolylines[0] == null || (newPolylines[0] != null && newPolylines[0] instanceof Polyline))) || newPolylines === null) && ((polylinesIndex != null && polylinesIndex instanceof Array && (polylinesIndex.length == 0 || polylinesIndex[0] == null || (typeof polylinesIndex[0] === 'number'))) || polylinesIndex === null) && ((oldSelectedItems != null && (oldSelectedItems instanceof Array)) || oldSelectedItems === null) && ((typeof oldBasePlanLocked === 'boolean') || oldBasePlanLocked === null) && ((typeof oldAllLevelsSelection === 'boolean') || oldAllLevelsSelection === null)) {
            return this.postCreatePolylines$com_eteks_sweethome3d_model_Polyline_A$int_A$java_util_List$boolean$boolean(newPolylines, polylinesIndex, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection);
        }
        else if (((newPolylines != null && (newPolylines instanceof Array)) || newPolylines === null) && ((polylinesIndex != null && (polylinesIndex instanceof Array)) || polylinesIndex === null) && ((typeof oldSelectedItems === 'boolean') || oldSelectedItems === null) && ((typeof oldBasePlanLocked === 'boolean') || oldBasePlanLocked === null) && oldAllLevelsSelection === undefined) {
            return this.postCreatePolylines$java_util_List$java_util_List$boolean$boolean(newPolylines, polylinesIndex, oldSelectedItems, oldBasePlanLocked);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.postCreatePolylines$java_util_List$java_util_List$boolean$boolean = function (polylines, oldSelection, basePlanLocked, allLevelsSelection) {
        var newPolylines = polylines.slice(0);
        var polylinesIndex = (function (s) { var a = []; while (s-- > 0)
            a.push(0); return a; })(/* size */ polylines.length);
        var homePolylines = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getPolylines();
        for (var i = 0; i < polylinesIndex.length; i++) {
            {
                polylinesIndex[i] = homePolylines.lastIndexOf(newPolylines[i]);
            }
            ;
        }
        this.postCreatePolylines$com_eteks_sweethome3d_model_Polyline_A$int_A$java_util_List$boolean$boolean(newPolylines, polylinesIndex, oldSelection, basePlanLocked, allLevelsSelection);
    };
    /**
     * Adds the <code>polylines</code> to plan component.
     * @param {com.eteks.sweethome3d.model.Polyline[]} polylines
     * @param {int[]} polylinesIndex
     * @param {com.eteks.sweethome3d.model.Level[]} polylinesLevels
     * @param {Level} uniqueDimensionLinesLevel
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doAddPolylines = function (polylines, polylinesIndex, polylinesLevels, uniqueDimensionLinesLevel, basePlanLocked) {
        for (var i = 0; i < polylinesIndex.length; i++) {
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addPolyline$com_eteks_sweethome3d_model_Polyline$int(polylines[i], polylinesIndex[i]);
                polylines[i].setLevel(polylinesLevels != null ? polylinesLevels[i] : uniqueDimensionLinesLevel);
            }
            ;
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Deletes <code>polylines</code>.
     * @param {com.eteks.sweethome3d.model.Polyline[]} polylines
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doDeletePolylines = function (polylines, basePlanLocked) {
        for (var index = 0; index < polylines.length; index++) {
            var polyline = polylines[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deletePolyline(polyline);
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Add <code>labels</code> to home and post an undoable new label operation.
     * @param {Label[]} labels
     */
    PlanController.prototype.addLabels = function (labels) {
        for (var index = 0; index < labels.length; index++) {
            var label = labels[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addLabel(label);
            }
        }
        this.postCreateLabels(labels, this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked(), this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
    };
    /**
     * Posts an undoable new label operation, about <code>newLabels</code>.
     * @param {Label[]} newLabels
     * @param {*[]} oldSelectedItems
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @private
     */
    PlanController.prototype.postCreateLabels = function (newLabels, oldSelectedItems, oldBasePlanLocked, oldAllLevelsSelection) {
        if ( /* size */newLabels.length > 0) {
            var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            if (basePlanLocked) {
                for (var index = 0; index < newLabels.length; index++) {
                    var label = newLabels[index];
                    {
                        basePlanLocked = !this.isItemPartOfBasePlan(label) && basePlanLocked;
                    }
                }
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
            }
            var newBasePlanLocked = basePlanLocked;
            var labels = newLabels.slice(0);
            var oldSelection = oldSelectedItems.slice(0);
            var labelsLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LabelsCreationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, labels, labelsLevel, newBasePlanLocked));
        }
    };
    /**
     * Adds the labels in <code>labels</code> to plan component.
     * @param {com.eteks.sweethome3d.model.Label[]} labels
     * @param {com.eteks.sweethome3d.model.Level[]} labelsLevels
     * @param {Level} uniqueLabelLevel
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doAddLabels = function (labels, labelsLevels, uniqueLabelLevel, basePlanLocked) {
        for (var i = 0; i < labels.length; i++) {
            {
                var label = labels[i];
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addLabel(label);
                label.setLevel(labelsLevels != null ? labelsLevels[i] : uniqueLabelLevel);
            }
            ;
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Deletes labels in <code>labels</code>.
     * @param {com.eteks.sweethome3d.model.Label[]} labels
     * @param {boolean} basePlanLocked
     * @private
     */
    PlanController.prototype.doDeleteLabels = function (labels, basePlanLocked) {
        for (var index = 0; index < labels.length; index++) {
            var label = labels[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteLabel(label);
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setBasePlanLocked(basePlanLocked);
    };
    /**
     * Posts an undoable operation about <code>label</code> angle change.
     * @param {Label} label
     * @param {number} oldAngle
     * @private
     */
    PlanController.prototype.postLabelRotation = function (label, oldAngle) {
        var newAngle = label.getAngle();
        if (newAngle !== oldAngle) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LabelRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldAngle, label, newAngle));
        }
    };
    /**
     * Post to undo support an elevation change on <code>label</code>.
     * @param {Label} label
     * @param {number} oldElevation
     * @private
     */
    PlanController.prototype.postLabelElevation = function (label, oldElevation) {
        var newElevation = label.getElevation();
        if (newElevation !== oldElevation) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LabelElevationModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldElevation, label, newElevation));
        }
    };
    /**
     * Posts an undoable operation of a (<code>dx</code>, <code>dy</code>) move
     * of <code>movedItems</code>.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} movedItems
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} oldSelectedItems
     * @param {number} dx
     * @param {number} dy
     * @private
     */
    PlanController.prototype.postItemsMove = function (movedItems, oldSelectedItems, dx, dy) {
        if (dx !== 0 || dy !== 0) {
            var itemsArray = movedItems.slice(0);
            var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            var oldSelection = oldSelectedItems.slice(0);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.ItemsMovingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldSelection, allLevelsSelection, itemsArray, dx, dy));
        }
    };
    /**
     * Moves <code>movedItems</code> of (<code>dx</code>, <code>dy</code>) pixels,
     * selects them and make them visible.
     * @param {com.eteks.sweethome3d.model.Selectable[]} movedItems
     * @param {com.eteks.sweethome3d.model.Selectable[]} selectedItems
     * @param {number} dx
     * @param {number} dy
     * @param {boolean} allLevelsSelection
     * @private
     */
    PlanController.prototype.doMoveAndShowItems = function (movedItems, selectedItems, dx, dy, allLevelsSelection) {
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.setAllLevelsSelection(allLevelsSelection);
        this.moveItems(/* asList */ movedItems.slice(0), dx, dy);
        this.selectAndShowItems$java_util_List$boolean(/* asList */ selectedItems.slice(0), allLevelsSelection);
    };
    /**
     * Posts an undoable operation of a (<code>dx</code>, <code>dy</code>) move
     * of the given <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} dx
     * @param {number} dy
     * @param {number} oldAngle
     * @param {number} oldDepth
     * @param {number} oldElevation
     * @param {boolean} oldDoorOrWindowBoundToWall
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureMove = function (piece, dx, dy, oldAngle, oldDepth, oldElevation, oldDoorOrWindowBoundToWall) {
        var newAngle = piece.getAngle();
        var newDepth = piece.getDepth();
        var newElevation = piece.getElevation();
        if (dx !== 0 || dy !== 0 || newAngle !== oldAngle || newDepth !== oldDepth || newElevation !== oldElevation) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureMovingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldAngle, oldDepth, oldElevation, oldDoorOrWindowBoundToWall, piece, dx, dy, newAngle, newDepth, newElevation));
        }
    };
    /**
     * Posts an undoable operation about duplication <code>items</code>.
     * @param {*[]} items
     * @param {*[]} oldSelection
     * @private
     */
    PlanController.prototype.postItemsDuplication = function (items, oldSelection) {
        var basePlanLocked = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
        var allLevelsSelection = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
        var furniture = Home.getFurnitureSubList(items);
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deletePieceOfFurniture(piece);
            }
        }
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.beginUpdate();
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.DuplicationStartUndoableEdit(this, /* toArray */ oldSelection.slice(0), allLevelsSelection));
        this.addFurniture$java_util_List(furniture);
        var emptyList = [];
        this.postCreateWalls(Home.getWallsSubList(items), emptyList, basePlanLocked, allLevelsSelection);
        this.postCreateRooms$java_util_List$java_util_List$boolean$boolean(Home.getRoomsSubList(items), emptyList, basePlanLocked, allLevelsSelection);
        this.postCreatePolylines$java_util_List$java_util_List$boolean$boolean(Home.getPolylinesSubList(items), emptyList, basePlanLocked, allLevelsSelection);
        this.postCreateDimensionLines(Home.getDimensionLinesSubList(items), emptyList, basePlanLocked, allLevelsSelection);
        this.postCreateLabels(Home.getLabelsSubList(items), emptyList, basePlanLocked, allLevelsSelection);
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.DuplicationEndUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, /* toArray */ items.slice(0)));
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.endUpdate();
        this.selectItems$java_util_List(items);
    };
    /**
     * Posts an undoable operation about <code>wall</code> resizing.
     * @param {Wall} wall
     * @param {number} oldX
     * @param {number} oldY
     * @param {boolean} startPoint
     * @private
     */
    PlanController.prototype.postWallResize = function (wall, oldX, oldY, startPoint) {
        var newX;
        var newY;
        if (startPoint) {
            newX = wall.getXStart();
            newY = wall.getYStart();
        }
        else {
            newX = wall.getXEnd();
            newY = wall.getYEnd();
        }
        if (newX !== oldX || newY !== oldY) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.WallResizingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldX, oldY, wall, startPoint, newX, newY));
        }
    };
    /**
     * Posts an undoable operation about <code>wall</code> arc extent change.
     * @param {Wall} wall
     * @param {number} oldArcExtent
     * @private
     */
    PlanController.prototype.postWallArcExtent = function (wall, oldArcExtent) {
        var newArcExtent = wall.getArcExtent();
        if (newArcExtent !== oldArcExtent && (newArcExtent == null || !(newArcExtent === oldArcExtent))) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.WallArcExtentModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldArcExtent, wall, newArcExtent));
        }
    };
    /**
     * Posts an undoable operation about <code>room</code> resizing.
     * @param {Room} room
     * @param {number} oldX
     * @param {number} oldY
     * @param {number} pointIndex
     * @private
     */
    PlanController.prototype.postRoomResize = function (room, oldX, oldY, pointIndex) {
        var roomPoint = room.getPoints()[pointIndex];
        var newX = roomPoint[0];
        var newY = roomPoint[1];
        if (newX !== oldX || newY !== oldY) {
            var undoableEdit = new PlanController.RoomResizingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldX, oldY, room, pointIndex, newX, newY);
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(undoableEdit);
        }
    };
    /**
     * Posts an undoable operation about <code>room</code> name offset change.
     * @param {Room} room
     * @param {number} oldNameXOffset
     * @param {number} oldNameYOffset
     * @private
     */
    PlanController.prototype.postRoomNameOffset = function (room, oldNameXOffset, oldNameYOffset) {
        var newNameXOffset = room.getNameXOffset();
        var newNameYOffset = room.getNameYOffset();
        if (newNameXOffset !== oldNameXOffset || newNameYOffset !== oldNameYOffset) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomNameOffsetModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldNameXOffset, oldNameYOffset, room, newNameXOffset, newNameYOffset));
        }
    };
    /**
     * Posts an undoable operation about <code>room</code> name angle change.
     * @param {Room} room
     * @param {number} oldNameAngle
     * @private
     */
    PlanController.prototype.postRoomNameRotation = function (room, oldNameAngle) {
        var newNameAngle = room.getNameAngle();
        if (newNameAngle !== oldNameAngle) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomNameRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldNameAngle, room, newNameAngle));
        }
    };
    /**
     * Posts an undoable operation about <code>room</code> area offset change.
     * @param {Room} room
     * @param {number} oldAreaXOffset
     * @param {number} oldAreaYOffset
     * @private
     */
    PlanController.prototype.postRoomAreaOffset = function (room, oldAreaXOffset, oldAreaYOffset) {
        var newAreaXOffset = room.getAreaXOffset();
        var newAreaYOffset = room.getAreaYOffset();
        if (newAreaXOffset !== oldAreaXOffset || newAreaYOffset !== oldAreaYOffset) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomAreaOffsetModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldAreaXOffset, oldAreaYOffset, room, newAreaXOffset, newAreaYOffset));
        }
    };
    /**
     * Posts an undoable operation about <code>room</code> area angle change.
     * @param {Room} room
     * @param {number} oldAreaAngle
     * @private
     */
    PlanController.prototype.postRoomAreaRotation = function (room, oldAreaAngle) {
        var newAreaAngle = room.getAreaAngle();
        if (newAreaAngle !== oldAreaAngle) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.RoomAreaRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldAreaAngle, room, newAreaAngle));
        }
    };
    /**
     * Post to undo support an angle change on <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} oldAngle
     * @param {boolean} oldDoorOrWindowBoundToWall
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureRotation = function (piece, oldAngle, oldDoorOrWindowBoundToWall) {
        var newAngle = piece.getAngle();
        if (newAngle !== oldAngle) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldAngle, oldDoorOrWindowBoundToWall, piece, newAngle));
        }
    };
    /**
     * Post to undo support a pitch change on <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} oldPitch
     * @param {number} oldWidthInPlan
     * @param {number} oldDepthInPlan
     * @param {number} oldHeightInPlan
     * @private
     */
    PlanController.prototype.postPieceOfFurniturePitchRotation = function (piece, oldPitch, oldWidthInPlan, oldDepthInPlan, oldHeightInPlan) {
        var newPitch = piece.getPitch();
        if (newPitch !== oldPitch) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurniturePitchRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldPitch, oldWidthInPlan, oldDepthInPlan, oldHeightInPlan, piece, newPitch, piece.getWidthInPlan(), piece.getDepthInPlan(), piece.getHeightInPlan()));
        }
    };
    /**
     * Sets the pitch angle on the given piece without computing new size in plan.
     * @param {HomePieceOfFurniture} piece
     * @param {number} pitch
     * @param {number} widthInPlan
     * @param {number} depthInPlan
     * @param {number} heightInPlan
     * @private
     */
    PlanController.prototype.setPieceOfFurniturePitch = function (piece, pitch, widthInPlan, depthInPlan, heightInPlan) {
        piece.removePropertyChangeListener(this.furnitureSizeChangeListener);
        piece.setPitch(pitch);
        piece.setWidthInPlan(widthInPlan);
        piece.setDepthInPlan(depthInPlan);
        piece.setHeightInPlan(heightInPlan);
        piece.addPropertyChangeListener(this.furnitureSizeChangeListener);
    };
    /**
     * Post to undo support a roll change on <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} oldRoll
     * @param {number} oldWidthInPlan
     * @param {number} oldDepthInPlan
     * @param {number} oldHeightInPlan
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureRollRotation = function (piece, oldRoll, oldWidthInPlan, oldDepthInPlan, oldHeightInPlan) {
        var newRoll = piece.getRoll();
        if (newRoll !== oldRoll) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureRollRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldRoll, oldWidthInPlan, oldDepthInPlan, oldHeightInPlan, piece, newRoll, piece.getWidthInPlan(), piece.getDepthInPlan(), piece.getHeightInPlan()));
        }
    };
    /**
     * Sets the roll angle on the given piece without computing new size in plan.
     * @param {HomePieceOfFurniture} piece
     * @param {number} roll
     * @param {number} widthInPlan
     * @param {number} depthInPlan
     * @param {number} heightInPlan
     * @private
     */
    PlanController.prototype.setPieceOfFurnitureRoll = function (piece, roll, widthInPlan, depthInPlan, heightInPlan) {
        piece.removePropertyChangeListener(this.furnitureSizeChangeListener);
        piece.setRoll(roll);
        piece.setWidthInPlan(widthInPlan);
        piece.setDepthInPlan(depthInPlan);
        piece.setHeightInPlan(heightInPlan);
        piece.addPropertyChangeListener(this.furnitureSizeChangeListener);
    };
    /**
     * Post to undo support an elevation change on <code>piece</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} oldElevation
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureElevation = function (piece, oldElevation) {
        var newElevation = piece.getElevation();
        if (newElevation !== oldElevation) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureElevationModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldElevation, piece, newElevation));
        }
    };
    /**
     * Post to undo support a height change on <code>piece</code>.
     * @param {PlanController.ResizedPieceOfFurniture} resizedPiece
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureHeightResize = function (resizedPiece) {
        if (resizedPiece.getPieceOfFurniture().getHeight() !== resizedPiece.getHeight()) {
            this.postPieceOfFurnitureResize(resizedPiece, "undoPieceOfFurnitureHeightResizeName");
        }
    };
    /**
     * Post to undo support a width and depth change on <code>piece</code>.
     * @param {PlanController.ResizedPieceOfFurniture} resizedPiece
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureWidthAndDepthResize = function (resizedPiece) {
        var piece = resizedPiece.getPieceOfFurniture();
        if (piece.getWidth() !== resizedPiece.getWidth() || piece.getDepth() !== resizedPiece.getDepth()) {
            this.postPieceOfFurnitureResize(resizedPiece, "undoPieceOfFurnitureWidthAndDepthResizeName");
        }
    };
    /**
     * Post to undo support a size change on <code>piece</code>.
     * @param {PlanController.ResizedPieceOfFurniture} resizedPiece
     * @param {string} presentationNameKey
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureResize = function (resizedPiece, presentationNameKey) {
        var piece = resizedPiece.getPieceOfFurniture();
        var doorOrWindowBoundToWall = (piece != null && piece instanceof HomeDoorOrWindow) && piece.isBoundToWall();
        this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureResizingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, presentationNameKey, doorOrWindowBoundToWall, resizedPiece, piece.getX(), piece.getY(), piece.getWidth(), piece.getDepth(), piece.getHeight()));
    };
    /**
     * Sets the size of the given piece of furniture.
     * @param {PlanController.ResizedPieceOfFurniture} resizedPiece
     * @param {number} width
     * @param {number} depth
     * @param {number} height
     * @private
     */
    PlanController.prototype.setPieceOfFurnitureSize = function (resizedPiece, width, depth, height) {
        var piece = resizedPiece.getPieceOfFurniture();
        piece.removePropertyChangeListener(this.furnitureSizeChangeListener);
        if (piece != null && piece instanceof HomeFurnitureGroup) {
            {
                var array = piece.getAllFurniture();
                for (var index = 0; index < array.length; index++) {
                    var childPiece = array[index];
                    {
                        childPiece.removePropertyChangeListener(this.furnitureSizeChangeListener);
                    }
                }
            }
        }
        PlanController.ResizedPieceOfFurniture.setPieceOfFurnitureSize(piece, width, depth, height);
        piece.addPropertyChangeListener(this.furnitureSizeChangeListener);
        if (piece != null && piece instanceof HomeFurnitureGroup) {
            {
                var array = piece.getAllFurniture();
                for (var index = 0; index < array.length; index++) {
                    var childPiece = array[index];
                    {
                        childPiece.addPropertyChangeListener(this.furnitureSizeChangeListener);
                    }
                }
            }
        }
    };
    /**
     * Resets the size of the given piece of furniture.
     * @param {PlanController.ResizedPieceOfFurniture} resizedPiece
     * @private
     */
    PlanController.prototype.resetPieceOfFurnitureSize = function (resizedPiece) {
        var piece = resizedPiece.getPieceOfFurniture();
        piece.removePropertyChangeListener(this.furnitureSizeChangeListener);
        if (piece != null && piece instanceof HomeFurnitureGroup) {
            {
                var array = piece.getAllFurniture();
                for (var index = 0; index < array.length; index++) {
                    var childPiece = array[index];
                    {
                        childPiece.removePropertyChangeListener(this.furnitureSizeChangeListener);
                    }
                }
            }
        }
        resizedPiece.reset();
        piece.addPropertyChangeListener(this.furnitureSizeChangeListener);
        if (piece != null && piece instanceof HomeFurnitureGroup) {
            {
                var array = piece.getAllFurniture();
                for (var index = 0; index < array.length; index++) {
                    var childPiece = array[index];
                    {
                        childPiece.addPropertyChangeListener(this.furnitureSizeChangeListener);
                    }
                }
            }
        }
    };
    /**
     * Post to undo support a power modification on <code>light</code>.
     * @param {HomeLight} light
     * @param {number} oldPower
     * @private
     */
    PlanController.prototype.postLightPowerModification = function (light, oldPower) {
        var newPower = light.getPower();
        if (newPower !== oldPower) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.LightPowerModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldPower, light, newPower));
        }
    };
    /**
     * Posts an undoable operation about <code>piece</code> name offset change.
     * @param {HomePieceOfFurniture} piece
     * @param {number} oldNameXOffset
     * @param {number} oldNameYOffset
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureNameOffset = function (piece, oldNameXOffset, oldNameYOffset) {
        var newNameXOffset = piece.getNameXOffset();
        var newNameYOffset = piece.getNameYOffset();
        if (newNameXOffset !== oldNameXOffset || newNameYOffset !== oldNameYOffset) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureNameOffsetModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldNameXOffset, oldNameYOffset, piece, newNameXOffset, newNameYOffset));
        }
    };
    /**
     * Posts an undoable operation about <code>piece</code> name angle change.
     * @param {HomePieceOfFurniture} piece
     * @param {number} oldNameAngle
     * @private
     */
    PlanController.prototype.postPieceOfFurnitureNameRotation = function (piece, oldNameAngle) {
        var newNameAngle = piece.getNameAngle();
        if (newNameAngle !== oldNameAngle) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PieceOfFurnitureNameRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldNameAngle, piece, newNameAngle));
        }
    };
    /**
     * Posts an undoable operation about <code>dimensionLine</code> resizing.
     * @param {DimensionLine} dimensionLine
     * @param {number} oldX
     * @param {number} oldY
     * @param {boolean} startPoint
     * @param {boolean} reversed
     * @private
     */
    PlanController.prototype.postDimensionLineResize = function (dimensionLine, oldX, oldY, startPoint, reversed) {
        var newX;
        var newY;
        if (startPoint) {
            newX = dimensionLine.getXStart();
            newY = dimensionLine.getYStart();
        }
        else {
            newX = dimensionLine.getXEnd();
            newY = dimensionLine.getYEnd();
        }
        if (newX !== oldX || newY !== oldY || reversed) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.DimensionLineResizingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldX, oldY, dimensionLine, newX, newY, startPoint, reversed));
        }
    };
    /**
     * Posts an undoable operation about <code>dimensionLine</code> offset change.
     * @param {DimensionLine} dimensionLine
     * @param {number} oldOffset
     * @private
     */
    PlanController.prototype.postDimensionLineOffset = function (dimensionLine, oldOffset) {
        var newOffset = dimensionLine.getOffset();
        if (newOffset !== oldOffset) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.DimensionLineOffsetModificationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldOffset, dimensionLine, newOffset));
        }
    };
    /**
     * Posts an undoable operation about <code>polyline</code> resizing.
     * @param {Polyline} polyline
     * @param {number} oldX
     * @param {number} oldY
     * @param {number} pointIndex
     * @private
     */
    PlanController.prototype.postPolylineResize = function (polyline, oldX, oldY, pointIndex) {
        var polylinePoint = polyline.getPoints()[pointIndex];
        var newX = polylinePoint[0];
        var newY = polylinePoint[1];
        if (newX !== oldX || newY !== oldY) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.PolylineResizingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldX, oldY, polyline, pointIndex, newX, newY));
        }
    };
    /**
     * Post to undo support a north direction change on <code>compass</code>.
     * @param {Compass} compass
     * @param {number} oldNorthDirection
     * @private
     */
    PlanController.prototype.postCompassRotation = function (compass, oldNorthDirection) {
        var newNorthDirection = compass.getNorthDirection();
        if (newNorthDirection !== oldNorthDirection) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.CompassRotationUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldNorthDirection, compass, newNorthDirection));
        }
    };
    /**
     * Post to undo support a size change on <code>compass</code>.
     * @param {Compass} compass
     * @param {number} oldDiameter
     * @private
     */
    PlanController.prototype.postCompassResize = function (compass, oldDiameter) {
        var newDiameter = compass.getDiameter();
        if (newDiameter !== oldDiameter) {
            this.__com_eteks_sweethome3d_viewcontroller_PlanController_undoSupport.postEdit(new PlanController.CompassResizingUndoableEdit(this, this.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences, oldDiameter, compass, newDiameter));
        }
    };
    /**
     * Returns the points of a general path which contains only one path.
     * @param {java.awt.geom.GeneralPath} path
     * @param {boolean} removeAlignedPoints
     * @return {float[][]}
     * @private
     */
    PlanController.prototype.getPathPoints = function (path, removeAlignedPoints) {
        var pathPoints = ([]);
        var previousPathPoint = null;
        for (var it = path.getPathIterator(null); !it.isDone(); it.next()) {
            {
                var pathPoint = [0, 0];
                if (it.currentSegment(pathPoint) !== java.awt.geom.PathIterator.SEG_CLOSE && (previousPathPoint == null || !(function (a1, a2) { if (a1 == null && a2 == null)
                    return true; if (a1 == null || a2 == null)
                    return false; if (a1.length != a2.length)
                    return false; for (var i = 0; i < a1.length; i++) {
                    if (a1[i] != a2[i])
                        return false;
                } return true; })(pathPoint, previousPathPoint))) {
                    var replacePoint = false;
                    if (removeAlignedPoints && /* size */ pathPoints.length > 1) {
                        var lastLineStartPoint = pathPoints[ /* size */pathPoints.length - 2];
                        var lastLineEndPoint = previousPathPoint;
                        replacePoint = java.awt.geom.Line2D.ptLineDistSq(lastLineStartPoint[0], lastLineStartPoint[1], lastLineEndPoint[0], lastLineEndPoint[1], pathPoint[0], pathPoint[1]) < 1.0E-4;
                    }
                    if (replacePoint) {
                        /* set */ (pathPoints[ /* size */pathPoints.length - 1] = pathPoint);
                    }
                    else {
                        /* add */ (pathPoints.push(pathPoint) > 0);
                    }
                    previousPathPoint = pathPoint;
                }
            }
            ;
        }
        if ( /* size */pathPoints.length > 1 && /* equals */ (function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(/* get */ pathPoints[0], /* get */ pathPoints[ /* size */pathPoints.length - 1])) {
            /* remove */ pathPoints.splice(/* size */ pathPoints.length - 1, 1)[0];
        }
        return /* toArray */ pathPoints.slice(0);
    };
    /**
     * Returns the list of closed paths that may define rooms from
     * the current set of home walls.
     * @return {java.awt.geom.GeneralPath[]}
     * @private
     */
    PlanController.prototype.getRoomPathsFromWalls = function () {
        if (this.roomPathsCache == null) {
            var wallsArea = this.getWallsArea(false);
            var roomPaths = this.getAreaPaths(wallsArea);
            var insideWallsArea = new java.awt.geom.Area(wallsArea);
            for (var index = 0; index < roomPaths.length; index++) {
                var roomPath = roomPaths[index];
                {
                    insideWallsArea.add(new java.awt.geom.Area(roomPath));
                }
            }
            this.roomPathsCache = roomPaths;
            this.insideWallsAreaCache = insideWallsArea;
        }
        return this.roomPathsCache;
    };
    /**
     * Returns the paths described by the given <code>area</code>.
     * @param {java.awt.geom.Area} area
     * @return {java.awt.geom.GeneralPath[]}
     * @private
     */
    PlanController.prototype.getAreaPaths = function (area) {
        var roomPaths = ([]);
        var roomPath = null;
        var previousRoomPoint = null;
        for (var it = area.getPathIterator(null, 0.5); !it.isDone(); it.next()) {
            {
                var roomPoint = [0, 0];
                switch ((it.currentSegment(roomPoint))) {
                    case java.awt.geom.PathIterator.SEG_MOVETO:
                        roomPath = new java.awt.geom.GeneralPath();
                        roomPath.moveTo(roomPoint[0], roomPoint[1]);
                        previousRoomPoint = roomPoint;
                        break;
                    case java.awt.geom.PathIterator.SEG_LINETO:
                        if ((roomPoint[0] !== previousRoomPoint[0] || roomPoint[1] !== previousRoomPoint[1]) && java.awt.geom.Point2D.distanceSq(roomPoint[0], roomPoint[1], previousRoomPoint[0], previousRoomPoint[1]) > 1.0E-10) {
                            roomPath.lineTo(roomPoint[0], roomPoint[1]);
                            previousRoomPoint = roomPoint;
                        }
                        break;
                    case java.awt.geom.PathIterator.SEG_CLOSE:
                        roomPath.closePath();
                        /* add */ (roomPaths.push(roomPath) > 0);
                        break;
                }
            }
            ;
        }
        return roomPaths;
    };
    /**
     * Returns the area that includes walls and inside walls area.
     * @return {java.awt.geom.Area}
     * @private
     */
    PlanController.prototype.getInsideWallsArea = function () {
        if (this.insideWallsAreaCache == null) {
            this.getRoomPathsFromWalls();
        }
        return this.insideWallsAreaCache;
    };
    /**
     * Returns the area covered by walls.
     * @param {boolean} includeBaseboards
     * @return {java.awt.geom.Area}
     * @private
     */
    PlanController.prototype.getWallsArea = function (includeBaseboards) {
        if (!includeBaseboards && this.wallsAreaCache == null || includeBaseboards && this.wallsIncludingBaseboardsAreaCache == null) {
            var wallsArea = new java.awt.geom.Area();
            var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
            {
                var array = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        if (wall.isAtLevel(selectedLevel)) {
                            wallsArea.add(new java.awt.geom.Area(this.getPath$float_A_A(wall.getPoints$boolean(includeBaseboards))));
                        }
                    }
                }
            }
            if (includeBaseboards) {
                this.wallsIncludingBaseboardsAreaCache = wallsArea;
            }
            else {
                this.wallsAreaCache = wallsArea;
            }
        }
        return includeBaseboards ? this.wallsIncludingBaseboardsAreaCache : this.wallsAreaCache;
    };
    PlanController.prototype.getPath$float_A_A = function (points) {
        var path = new java.awt.geom.GeneralPath();
        path.moveTo(points[0][0], points[0][1]);
        for (var i = 1; i < points.length; i++) {
            {
                path.lineTo(points[i][0], points[i][1]);
            }
            ;
        }
        path.closePath();
        return path;
    };
    /**
     * Returns the shape matching the coordinates in <code>points</code> array.
     * @param {float[][]} points
     * @return {java.awt.geom.GeneralPath}
     * @private
     */
    PlanController.prototype.getPath = function (points) {
        if (((points != null && points instanceof Array && (points.length == 0 || points[0] == null || points[0] instanceof Array)) || points === null)) {
            return this.getPath$float_A_A(points);
        }
        else if (((points != null && points instanceof java.awt.geom.Area) || points === null)) {
            return this.getPath$java_awt_geom_Area(points);
        }
        else
            throw new Error('invalid overload');
    };
    PlanController.prototype.getPath$java_awt_geom_Area = function (area) {
        var path = new java.awt.geom.GeneralPath();
        var point = [0, 0];
        for (var it = area.getPathIterator(null, 0.5); !it.isDone(); it.next()) {
            {
                switch ((it.currentSegment(point))) {
                    case java.awt.geom.PathIterator.SEG_MOVETO:
                        path.moveTo(point[0], point[1]);
                        break;
                    case java.awt.geom.PathIterator.SEG_LINETO:
                        path.lineTo(point[0], point[1]);
                        break;
                }
            }
            ;
        }
        return path;
    };
    /**
     * Selects the level of the first elevatable item in the current selection
     * if no selected item is visible at the selected level.
     * @private
     */
    PlanController.prototype.selectLevelFromSelectedItems = function () {
        var selectedLevel = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
        var selectedItems = this.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
        for (var index = 0; index < selectedItems.length; index++) {
            var item = selectedItems[index];
            {
                if ((item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) && item.isAtLevel(selectedLevel)) {
                    return;
                }
            }
        }
        for (var index = 0; index < selectedItems.length; index++) {
            var item = selectedItems[index];
            {
                if (item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) {
                    this.setSelectedLevel(item.getLevel());
                    break;
                }
            }
        }
    };
    PlanController.SCALE_VISUAL_PROPERTY = "com.eteks.sweethome3d.SweetHome3D.PlanScale";
    PlanController.PIXEL_MARGIN = 4;
    PlanController.INDICATOR_PIXEL_MARGIN = 5;
    PlanController.WALL_ENDS_PIXEL_MARGIN = 2;
    return PlanController;
}(FurnitureController));
PlanController["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController";
PlanController["__interfaces"] = ["com.eteks.sweethome3d.viewcontroller.Controller"];
(function (PlanController) {
    /**
     * Selectable modes in controller.
     * @class
     */
    var Mode = /** @class */ (function () {
        function Mode(name) {
            if (this.__name === undefined) {
                this.__name = null;
            }
            this.__name = name;
        }
        Mode.SELECTION_$LI$ = function () { if (Mode.SELECTION == null) {
            Mode.SELECTION = new PlanController.Mode("SELECTION");
        } return Mode.SELECTION; };
        Mode.PANNING_$LI$ = function () { if (Mode.PANNING == null) {
            Mode.PANNING = new PlanController.Mode("PANNING");
        } return Mode.PANNING; };
        Mode.WALL_CREATION_$LI$ = function () { if (Mode.WALL_CREATION == null) {
            Mode.WALL_CREATION = new PlanController.Mode("WALL_CREATION");
        } return Mode.WALL_CREATION; };
        Mode.ROOM_CREATION_$LI$ = function () { if (Mode.ROOM_CREATION == null) {
            Mode.ROOM_CREATION = new PlanController.Mode("ROOM_CREATION");
        } return Mode.ROOM_CREATION; };
        Mode.POLYLINE_CREATION_$LI$ = function () { if (Mode.POLYLINE_CREATION == null) {
            Mode.POLYLINE_CREATION = new PlanController.Mode("POLYLINE_CREATION");
        } return Mode.POLYLINE_CREATION; };
        Mode.DIMENSION_LINE_CREATION_$LI$ = function () { if (Mode.DIMENSION_LINE_CREATION == null) {
            Mode.DIMENSION_LINE_CREATION = new PlanController.Mode("DIMENSION_LINE_CREATION");
        } return Mode.DIMENSION_LINE_CREATION; };
        Mode.LABEL_CREATION_$LI$ = function () { if (Mode.LABEL_CREATION == null) {
            Mode.LABEL_CREATION = new PlanController.Mode("LABEL_CREATION");
        } return Mode.LABEL_CREATION; };
        Mode.prototype.name = function () {
            return this.__name;
        };
        /**
         *
         * @return {string}
         */
        Mode.prototype.toString = function () {
            return this.__name;
        };
        return Mode;
    }());
    PlanController.Mode = Mode;
    Mode["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.Mode";
    /**
     * Undoable edit for plan locking.
     * @param {PlanController} controller
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.Selectable[]} newSelectedItems
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LockingUndoableEdit = /** @class */ (function (_super) {
        __extends(LockingUndoableEdit, _super);
        function LockingUndoableEdit(controller, home, preferences, oldSelection, allLevelsSelection, newSelectedItems) {
            var _this = _super.call(this, preferences, PlanController, "undoLockBasePlan") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.newSelectedItems === undefined) {
                _this.newSelectedItems = null;
            }
            _this.controller = controller;
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.newSelectedItems = newSelectedItems;
            return _this;
        }
        /**
         *
         */
        LockingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.setBasePlanLocked(false);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        LockingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setBasePlanLocked(true);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.newSelectedItems.slice(0), this.allLevelsSelection);
        };
        return LockingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LockingUndoableEdit = LockingUndoableEdit;
    LockingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LockingUndoableEdit";
    LockingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for plan unlocking.
     * @param {PlanController} controller
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} selectedItems
     * @param {boolean} allLevelsSelection
     * @class
     * @extends LocalizedUndoableEdit
     */
    var UnlockingUndoableEdit = /** @class */ (function (_super) {
        __extends(UnlockingUndoableEdit, _super);
        function UnlockingUndoableEdit(controller, home, preferences, selectedItems, allLevelsSelection) {
            var _this = _super.call(this, preferences, PlanController, "undoUnlockBasePlan") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.selectedItems === undefined) {
                _this.selectedItems = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            _this.controller = controller;
            _this.home = home;
            _this.selectedItems = selectedItems;
            _this.allLevelsSelection = allLevelsSelection;
            return _this;
        }
        /**
         *
         */
        UnlockingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.home.setBasePlanLocked(true);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.selectedItems.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        UnlockingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setBasePlanLocked(false);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.selectedItems.slice(0), false);
        };
        return UnlockingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.UnlockingUndoableEdit = UnlockingUndoableEdit;
    UnlockingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.UnlockingUndoableEdit";
    UnlockingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for flipped items.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @param {float[][]} itemTextBaseOffsets
     * @param {boolean} horizontalFlip
     * @class
     * @extends LocalizedUndoableEdit
     */
    var FlippingUndoableEdit = /** @class */ (function (_super) {
        __extends(FlippingUndoableEdit, _super);
        function FlippingUndoableEdit(controller, preferences, allLevelsSelection, items, itemTextBaseOffsets, horizontalFlip) {
            var _this = _super.call(this, preferences, PlanController, "undoFlipName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.items === undefined) {
                _this.items = null;
            }
            if (_this.itemTextBaseOffsets === undefined) {
                _this.itemTextBaseOffsets = null;
            }
            if (_this.horizontalFlip === undefined) {
                _this.horizontalFlip = false;
            }
            _this.controller = controller;
            _this.allLevelsSelection = allLevelsSelection;
            _this.items = items;
            _this.itemTextBaseOffsets = itemTextBaseOffsets;
            _this.horizontalFlip = horizontalFlip;
            return _this;
        }
        /**
         *
         */
        FlippingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doFlipItems(this.items, this.itemTextBaseOffsets, this.horizontalFlip);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.items.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        FlippingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doFlipItems(this.items, this.itemTextBaseOffsets, this.horizontalFlip);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.items.slice(0), this.allLevelsSelection);
        };
        return FlippingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.FlippingUndoableEdit = FlippingUndoableEdit;
    FlippingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.FlippingUndoableEdit";
    FlippingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for joining walls.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedWalls
     * @param {float[]} joinPoint
     * @class
     * @extends LocalizedUndoableEdit
     */
    var WallsJoiningUndoableEdit = /** @class */ (function (_super) {
        __extends(WallsJoiningUndoableEdit, _super);
        function WallsJoiningUndoableEdit(controller, preferences, oldSelection, allLevelsSelection, joinedWalls, joinPoint) {
            var _this = _super.call(this, preferences, PlanController, "undoJoinWallsName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.joinedWalls === undefined) {
                _this.joinedWalls = null;
            }
            if (_this.joinPoint === undefined) {
                _this.joinPoint = null;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.joinedWalls = joinedWalls;
            _this.joinPoint = joinPoint;
            return _this;
        }
        /**
         *
         */
        WallsJoiningUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            for (var index = 0; index < this.joinedWalls.length; index++) {
                var joinedWall = this.joinedWalls[index];
                {
                    var wall = joinedWall.getWall();
                    wall.setWallAtStart(joinedWall.getWallAtStart());
                    if (joinedWall.getWallAtStart() != null) {
                        if (joinedWall.isJoinedAtEndOfWallAtStart()) {
                            joinedWall.getWallAtStart().setWallAtEnd(wall);
                        }
                        else {
                            joinedWall.getWallAtStart().setWallAtStart(wall);
                        }
                    }
                    wall.setWallAtEnd(joinedWall.getWallAtEnd());
                    if (joinedWall.getWallAtEnd() != null) {
                        if (joinedWall.isJoinedAtStartOfWallAtEnd()) {
                            joinedWall.getWallAtEnd().setWallAtStart(wall);
                        }
                        else {
                            joinedWall.getWallAtEnd().setWallAtEnd(wall);
                        }
                    }
                    wall.setXStart(joinedWall.getXStart());
                    wall.setYStart(joinedWall.getYStart());
                    wall.setXEnd(joinedWall.getXEnd());
                    wall.setYEnd(joinedWall.getYEnd());
                }
            }
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        WallsJoiningUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doJoinWalls(this.joinedWalls, this.joinPoint);
        };
        return WallsJoiningUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.WallsJoiningUndoableEdit = WallsJoiningUndoableEdit;
    WallsJoiningUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallsJoiningUndoableEdit";
    WallsJoiningUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for reversing walls direction.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.Wall[]} walls
     * @class
     * @extends LocalizedUndoableEdit
     */
    var WallsDirectionReversingUndoableEdit = /** @class */ (function (_super) {
        __extends(WallsDirectionReversingUndoableEdit, _super);
        function WallsDirectionReversingUndoableEdit(controller, preferences, oldSelection, allLevelsSelection, walls) {
            var _this = _super.call(this, preferences, PlanController, "undoReverseWallsDirectionName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.walls === undefined) {
                _this.walls = null;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.walls = walls;
            return _this;
        }
        /**
         *
         */
        WallsDirectionReversingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doReverseWallsDirection(this.walls);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        WallsDirectionReversingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doReverseWallsDirection(this.walls);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.walls.slice(0), false);
        };
        return WallsDirectionReversingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.WallsDirectionReversingUndoableEdit = WallsDirectionReversingUndoableEdit;
    WallsDirectionReversingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallsDirectionReversingUndoableEdit";
    WallsDirectionReversingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for splitting wall.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @param {PlanController.JoinedWall} splitJoinedWall
     * @param {PlanController.JoinedWall} firstJoinedWall
     * @param {PlanController.JoinedWall} secondJoinedWall
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var WallSplittingUndoableEdit = /** @class */ (function (_super) {
        __extends(WallSplittingUndoableEdit, _super);
        function WallSplittingUndoableEdit(controller, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, splitJoinedWall, firstJoinedWall, secondJoinedWall, newBasePlanLocked) {
            var _this = _super.call(this, preferences, PlanController, "undoSplitWallName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.splitJoinedWall === undefined) {
                _this.splitJoinedWall = null;
            }
            if (_this.firstJoinedWall === undefined) {
                _this.firstJoinedWall = null;
            }
            if (_this.secondJoinedWall === undefined) {
                _this.secondJoinedWall = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.splitJoinedWall = splitJoinedWall;
            _this.firstJoinedWall = firstJoinedWall;
            _this.secondJoinedWall = secondJoinedWall;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        WallSplittingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doDeleteWalls([this.firstJoinedWall, this.secondJoinedWall], this.oldBasePlanLocked);
            this.controller.doAddWalls([this.splitJoinedWall], this.oldBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.oldAllLevelsSelection);
        };
        /**
         *
         */
        WallSplittingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doDeleteWalls([this.splitJoinedWall], this.newBasePlanLocked);
            this.controller.doAddWalls([this.firstJoinedWall, this.secondJoinedWall], this.newBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ [this.firstJoinedWall.getWall()].slice(0), false);
        };
        return WallSplittingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.WallSplittingUndoableEdit = WallSplittingUndoableEdit;
    WallSplittingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallSplittingUndoableEdit";
    WallSplittingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for text style modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.TextStyle[]} oldStyles
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @param {com.eteks.sweethome3d.model.TextStyle[]} styles
     * @class
     * @extends LocalizedUndoableEdit
     */
    var TextStyleModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(TextStyleModificationUndoableEdit, _super);
        function TextStyleModificationUndoableEdit(controller, preferences, oldSelection, allLevelsSelection, oldStyles, items, styles) {
            var _this = _super.call(this, preferences, PlanController, "undoModifyTextStyleName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.oldStyles === undefined) {
                _this.oldStyles = null;
            }
            if (_this.items === undefined) {
                _this.items = null;
            }
            if (_this.styles === undefined) {
                _this.styles = null;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.oldStyles = oldStyles;
            _this.items = items;
            _this.styles = styles;
            return _this;
        }
        /**
         *
         */
        TextStyleModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            PlanController.doModifyTextStyle(this.items, this.oldStyles);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        TextStyleModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            PlanController.doModifyTextStyle(this.items, this.styles);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        return TextStyleModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.TextStyleModificationUndoableEdit = TextStyleModificationUndoableEdit;
    TextStyleModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.TextStyleModificationUndoableEdit";
    TextStyleModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for level addition.
     * @param {PlanController} controller
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @param {Level} oldSelectedLevel
     * @param {Level} level0
     * @param {BackgroundImage} homeBackgroundImage
     * @param {Level} newLevel
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LevelAdditionUndoableEdit = /** @class */ (function (_super) {
        __extends(LevelAdditionUndoableEdit, _super);
        function LevelAdditionUndoableEdit(controller, home, preferences, oldSelection, allLevelsSelection, oldSelectedLevel, level0, homeBackgroundImage, newLevel) {
            var _this = _super.call(this, preferences, PlanController, "undoAddLevel") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.oldSelectedLevel === undefined) {
                _this.oldSelectedLevel = null;
            }
            if (_this.level0 === undefined) {
                _this.level0 = null;
            }
            if (_this.homeBackgroundImage === undefined) {
                _this.homeBackgroundImage = null;
            }
            if (_this.newLevel === undefined) {
                _this.newLevel = null;
            }
            _this.controller = controller;
            _this.home = home;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.oldSelectedLevel = oldSelectedLevel;
            _this.level0 = level0;
            _this.homeBackgroundImage = homeBackgroundImage;
            _this.newLevel = newLevel;
            return _this;
        }
        /**
         *
         */
        LevelAdditionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.setSelectedLevel(this.oldSelectedLevel);
            this.home.deleteLevel(this.newLevel);
            if (this.level0 != null) {
                this.home.setBackgroundImage(this.homeBackgroundImage);
                this.controller.moveHomeItemsToLevel(this.oldSelectedLevel);
                this.home.deleteLevel(this.level0);
            }
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        LevelAdditionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            if (this.level0 != null) {
                this.home.addLevel(this.level0);
                this.controller.moveHomeItemsToLevel(this.level0);
                this.level0.setBackgroundImage(this.homeBackgroundImage);
                this.home.setBackgroundImage(null);
            }
            this.home.addLevel(this.newLevel);
            this.controller.setSelectedLevel(this.newLevel);
        };
        return LevelAdditionUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LevelAdditionUndoableEdit = LevelAdditionUndoableEdit;
    LevelAdditionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LevelAdditionUndoableEdit";
    LevelAdditionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for level viewability modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {Level} selectedLevel
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LevelViewabilityModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(LevelViewabilityModificationUndoableEdit, _super);
        function LevelViewabilityModificationUndoableEdit(controller, preferences, selectedLevel) {
            var _this = _super.call(this, preferences, PlanController, "undoModifyLevelViewabilityName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.selectedLevel === undefined) {
                _this.selectedLevel = null;
            }
            _this.controller = controller;
            _this.selectedLevel = selectedLevel;
            return _this;
        }
        /**
         *
         */
        LevelViewabilityModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.setSelectedLevel(this.selectedLevel);
            this.selectedLevel.setViewable(!this.selectedLevel.isViewable());
        };
        /**
         *
         */
        LevelViewabilityModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.setSelectedLevel(this.selectedLevel);
            this.selectedLevel.setViewable(!this.selectedLevel.isViewable());
        };
        return LevelViewabilityModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LevelViewabilityModificationUndoableEdit = LevelViewabilityModificationUndoableEdit;
    LevelViewabilityModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LevelViewabilityModificationUndoableEdit";
    LevelViewabilityModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the viewability modification of multiple levels.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {Level} selectedLevel
     * @param {boolean} selectedLevelViewable
     * @param {com.eteks.sweethome3d.model.Level[]} viewableLevels
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LevelsViewabilityModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(LevelsViewabilityModificationUndoableEdit, _super);
        function LevelsViewabilityModificationUndoableEdit(controller, preferences, selectedLevel, selectedLevelViewable, viewableLevels) {
            var _this = _super.call(this, preferences, PlanController, "undoModifyLevelViewabilityName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.selectedLevel === undefined) {
                _this.selectedLevel = null;
            }
            if (_this.selectedLevelViewable === undefined) {
                _this.selectedLevelViewable = false;
            }
            if (_this.viewableLevels === undefined) {
                _this.viewableLevels = null;
            }
            _this.controller = controller;
            _this.selectedLevel = selectedLevel;
            _this.selectedLevelViewable = selectedLevelViewable;
            _this.viewableLevels = viewableLevels;
            return _this;
        }
        /**
         *
         */
        LevelsViewabilityModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.setSelectedLevel(this.selectedLevel);
            PlanController.setLevelsViewability(this.viewableLevels, true);
            this.selectedLevel.setViewable(this.selectedLevelViewable);
        };
        /**
         *
         */
        LevelsViewabilityModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.setSelectedLevel(this.selectedLevel);
            PlanController.setLevelsViewability(this.viewableLevels, false);
            this.selectedLevel.setViewable(true);
        };
        return LevelsViewabilityModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LevelsViewabilityModificationUndoableEdit = LevelsViewabilityModificationUndoableEdit;
    LevelsViewabilityModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LevelsViewabilityModificationUndoableEdit";
    LevelsViewabilityModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the viewability modification of all levels.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {Level} selectedLevel
     * @param {com.eteks.sweethome3d.model.Level[]} unviewableLevels
     * @class
     * @extends LocalizedUndoableEdit
     */
    var AllLevelsViewabilityModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(AllLevelsViewabilityModificationUndoableEdit, _super);
        function AllLevelsViewabilityModificationUndoableEdit(controller, preferences, selectedLevel, unviewableLevels) {
            var _this = _super.call(this, preferences, PlanController, "undoModifyLevelViewabilityName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.selectedLevel === undefined) {
                _this.selectedLevel = null;
            }
            if (_this.unviewableLevels === undefined) {
                _this.unviewableLevels = null;
            }
            _this.controller = controller;
            _this.selectedLevel = selectedLevel;
            _this.unviewableLevels = unviewableLevels;
            return _this;
        }
        /**
         *
         */
        AllLevelsViewabilityModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.setSelectedLevel(this.selectedLevel);
            PlanController.setLevelsViewability(this.unviewableLevels, false);
        };
        /**
         *
         */
        AllLevelsViewabilityModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.setSelectedLevel(this.selectedLevel);
            PlanController.setLevelsViewability(this.unviewableLevels, true);
        };
        return AllLevelsViewabilityModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.AllLevelsViewabilityModificationUndoableEdit = AllLevelsViewabilityModificationUndoableEdit;
    AllLevelsViewabilityModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.AllLevelsViewabilityModificationUndoableEdit";
    AllLevelsViewabilityModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the level deletion.
     * @param {PlanController} controller
     * @param {Home} home
     * @param {UserPreferences} preferences
     * @param {Level} oldSelectedLevel
     * @param {Level} remainingLevel
     * @param {number} remainingLevelElevation
     * @param {boolean} remainingLevelViewable
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LevelDeletionUndoableEdit = /** @class */ (function (_super) {
        __extends(LevelDeletionUndoableEdit, _super);
        function LevelDeletionUndoableEdit(controller, home, preferences, oldSelectedLevel, remainingLevel, remainingLevelElevation, remainingLevelViewable) {
            var _this = _super.call(this, preferences, PlanController, "undoDeleteSelectedLevel") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.oldSelectedLevel === undefined) {
                _this.oldSelectedLevel = null;
            }
            if (_this.remainingLevel === undefined) {
                _this.remainingLevel = null;
            }
            if (_this.remainingLevelElevation === undefined) {
                _this.remainingLevelElevation = null;
            }
            if (_this.remainingLevelViewable === undefined) {
                _this.remainingLevelViewable = false;
            }
            _this.controller = controller;
            _this.home = home;
            _this.oldSelectedLevel = oldSelectedLevel;
            _this.remainingLevel = remainingLevel;
            _this.remainingLevelElevation = remainingLevelElevation;
            _this.remainingLevelViewable = remainingLevelViewable;
            return _this;
        }
        /**
         *
         */
        LevelDeletionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            if (this.remainingLevel != null) {
                this.remainingLevel.setElevation(this.remainingLevelElevation);
                this.remainingLevel.setViewable(this.remainingLevelViewable);
            }
            this.home.addLevel(this.oldSelectedLevel);
            this.controller.setSelectedLevel(this.oldSelectedLevel);
        };
        /**
         *
         */
        LevelDeletionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.deleteLevel(this.oldSelectedLevel);
            if (this.remainingLevel != null) {
                this.remainingLevel.setElevation(0);
                this.remainingLevel.setViewable(true);
            }
        };
        return LevelDeletionUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LevelDeletionUndoableEdit = LevelDeletionUndoableEdit;
    LevelDeletionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LevelDeletionUndoableEdit";
    LevelDeletionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room point addition.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {Room} room
     * @param {number} index
     * @param {number} x
     * @param {number} y
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomPointAdditionUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomPointAdditionUndoableEdit, _super);
        function RoomPointAdditionUndoableEdit(controller, preferences, oldSelection, room, index, x, y) {
            var _this = _super.call(this, preferences, PlanController, "undoAddRoomPointName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.index === undefined) {
                _this.index = 0;
            }
            if (_this.x === undefined) {
                _this.x = 0;
            }
            if (_this.y === undefined) {
                _this.y = 0;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.room = room;
            _this.index = index;
            _this.x = x;
            _this.y = y;
            return _this;
        }
        /**
         *
         */
        RoomPointAdditionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.room.removePoint(this.index);
            this.controller.selectAndShowItems$java_util_List(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        RoomPointAdditionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.room.addPoint$float$float$int(this.x, this.y, this.index);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomPointAdditionUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomPointAdditionUndoableEdit = RoomPointAdditionUndoableEdit;
    RoomPointAdditionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomPointAdditionUndoableEdit";
    RoomPointAdditionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room point deletion.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {Room} room
     * @param {number} index
     * @param {number} xPoint
     * @param {number} yPoint
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomPointDeletionUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomPointDeletionUndoableEdit, _super);
        function RoomPointDeletionUndoableEdit(controller, preferences, oldSelection, room, index, xPoint, yPoint) {
            var _this = _super.call(this, preferences, PlanController, "undoDeleteRoomPointName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.index === undefined) {
                _this.index = 0;
            }
            if (_this.xPoint === undefined) {
                _this.xPoint = 0;
            }
            if (_this.yPoint === undefined) {
                _this.yPoint = 0;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.room = room;
            _this.index = index;
            _this.xPoint = xPoint;
            _this.yPoint = yPoint;
            return _this;
        }
        /**
         *
         */
        RoomPointDeletionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.room.addPoint$float$float$int(this.xPoint, this.yPoint, this.index);
            this.controller.selectAndShowItems$java_util_List(/* asList */ this.oldSelection.slice(0));
        };
        /**
         *
         */
        RoomPointDeletionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.room.removePoint(this.index);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomPointDeletionUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomPointDeletionUndoableEdit = RoomPointDeletionUndoableEdit;
    RoomPointDeletionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomPointDeletionUndoableEdit";
    RoomPointDeletionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for items deletion start.
     * @param {PlanController} controller
     * @param {Home} home
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.Selectable[]} selectedItems
     * @class
     * @extends javax.swing.undo.AbstractUndoableEdit
     */
    var ItemsDeletionStartUndoableEdit = /** @class */ (function (_super) {
        __extends(ItemsDeletionStartUndoableEdit, _super);
        function ItemsDeletionStartUndoableEdit(controller, home, allLevelsSelection, selectedItems) {
            var _this = _super.call(this) || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.selectedItems === undefined) {
                _this.selectedItems = null;
            }
            _this.controller = controller;
            _this.home = home;
            _this.allLevelsSelection = allLevelsSelection;
            _this.selectedItems = selectedItems;
            return _this;
        }
        /**
         *
         */
        ItemsDeletionStartUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.selectedItems.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        ItemsDeletionStartUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.removeSelectionListener(this.controller.getSelectionListener());
        };
        return ItemsDeletionStartUndoableEdit;
    }(javax.swing.undo.AbstractUndoableEdit));
    PlanController.ItemsDeletionStartUndoableEdit = ItemsDeletionStartUndoableEdit;
    ItemsDeletionStartUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ItemsDeletionStartUndoableEdit";
    ItemsDeletionStartUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for items deletion end.
     * @param {PlanController} controller
     * @param {Home} home
     * @class
     * @extends javax.swing.undo.AbstractUndoableEdit
     */
    var ItemsDeletionEndUndoableEdit = /** @class */ (function (_super) {
        __extends(ItemsDeletionEndUndoableEdit, _super);
        function ItemsDeletionEndUndoableEdit(controller, home) {
            var _this = _super.call(this) || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.home === undefined) {
                _this.home = null;
            }
            _this.controller = controller;
            _this.home = home;
            return _this;
        }
        /**
         *
         */
        ItemsDeletionEndUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.addSelectionListener(this.controller.getSelectionListener());
        };
        return ItemsDeletionEndUndoableEdit;
    }(javax.swing.undo.AbstractUndoableEdit));
    PlanController.ItemsDeletionEndUndoableEdit = ItemsDeletionEndUndoableEdit;
    ItemsDeletionEndUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ItemsDeletionEndUndoableEdit";
    ItemsDeletionEndUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for items deletion.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {boolean} basePlanLocked
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.Selectable[]} deletedItems
     * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedDeletedWalls
     * @param {com.eteks.sweethome3d.model.Room[]} rooms
     * @param {int[]} roomsIndices
     * @param {com.eteks.sweethome3d.model.Level[]} roomsLevels
     * @param {com.eteks.sweethome3d.model.DimensionLine[]} dimensionLines
     * @param {com.eteks.sweethome3d.model.Level[]} dimensionLinesLevels
     * @param {com.eteks.sweethome3d.model.Polyline[]} polylines
     * @param {int[]} polylinesIndices
     * @param {com.eteks.sweethome3d.model.Level[]} polylinesLevels
     * @param {com.eteks.sweethome3d.model.Label[]} labels
     * @param {com.eteks.sweethome3d.model.Level[]} labelsLevels
     * @class
     * @extends LocalizedUndoableEdit
     */
    var ItemsDeletionUndoableEdit = /** @class */ (function (_super) {
        __extends(ItemsDeletionUndoableEdit, _super);
        function ItemsDeletionUndoableEdit(controller, preferences, basePlanLocked, allLevelsSelection, deletedItems, joinedDeletedWalls, rooms, roomsIndices, roomsLevels, dimensionLines, dimensionLinesLevels, polylines, polylinesIndices, polylinesLevels, labels, labelsLevels) {
            var _this = _super.call(this, preferences, PlanController, "undoDeleteSelectionName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.basePlanLocked === undefined) {
                _this.basePlanLocked = false;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.deletedItems === undefined) {
                _this.deletedItems = null;
            }
            if (_this.joinedDeletedWalls === undefined) {
                _this.joinedDeletedWalls = null;
            }
            if (_this.rooms === undefined) {
                _this.rooms = null;
            }
            if (_this.roomsIndices === undefined) {
                _this.roomsIndices = null;
            }
            if (_this.roomsLevels === undefined) {
                _this.roomsLevels = null;
            }
            if (_this.dimensionLines === undefined) {
                _this.dimensionLines = null;
            }
            if (_this.dimensionLinesLevels === undefined) {
                _this.dimensionLinesLevels = null;
            }
            if (_this.polylines === undefined) {
                _this.polylines = null;
            }
            if (_this.polylinesIndices === undefined) {
                _this.polylinesIndices = null;
            }
            if (_this.polylinesLevels === undefined) {
                _this.polylinesLevels = null;
            }
            if (_this.labels === undefined) {
                _this.labels = null;
            }
            if (_this.labelsLevels === undefined) {
                _this.labelsLevels = null;
            }
            _this.controller = controller;
            _this.basePlanLocked = basePlanLocked;
            _this.allLevelsSelection = allLevelsSelection;
            _this.deletedItems = deletedItems;
            _this.joinedDeletedWalls = joinedDeletedWalls;
            _this.rooms = rooms;
            _this.roomsIndices = roomsIndices;
            _this.roomsLevels = roomsLevels;
            _this.dimensionLines = dimensionLines;
            _this.dimensionLinesLevels = dimensionLinesLevels;
            _this.polylines = polylines;
            _this.polylinesIndices = polylinesIndices;
            _this.polylinesLevels = polylinesLevels;
            _this.labels = labels;
            _this.labelsLevels = labelsLevels;
            return _this;
        }
        /**
         *
         */
        ItemsDeletionUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doAddWalls(this.joinedDeletedWalls, this.basePlanLocked);
            this.controller.doAddRooms(this.rooms, this.roomsIndices, this.roomsLevels, null, this.basePlanLocked);
            this.controller.doAddDimensionLines(this.dimensionLines, this.dimensionLinesLevels, null, this.basePlanLocked);
            this.controller.doAddPolylines(this.polylines, this.polylinesIndices, this.polylinesLevels, null, this.basePlanLocked);
            this.controller.doAddLabels(this.labels, this.labelsLevels, null, this.basePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.deletedItems.slice(0), this.allLevelsSelection);
        };
        /**
         *
         */
        ItemsDeletionUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.selectItems$java_util_List(/* asList */ this.deletedItems.slice(0));
            this.controller.doDeleteWalls(this.joinedDeletedWalls, this.basePlanLocked);
            this.controller.doDeleteRooms(this.rooms, this.basePlanLocked);
            this.controller.doDeleteDimensionLines(this.dimensionLines, this.basePlanLocked);
            this.controller.doDeletePolylines(this.polylines, this.basePlanLocked);
            this.controller.doDeleteLabels(this.labels, this.basePlanLocked);
        };
        return ItemsDeletionUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.ItemsDeletionUndoableEdit = ItemsDeletionUndoableEdit;
    ItemsDeletionUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ItemsDeletionUndoableEdit";
    ItemsDeletionUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for items addition end.
     * @extends LocalizedUndoableEdit
     * @class
     */
    var ItemsAdditionEndUndoableEdit = /** @class */ (function (_super) {
        __extends(ItemsAdditionEndUndoableEdit, _super);
        function ItemsAdditionEndUndoableEdit(home, preferences, items) {
            var _this = _super.call(this, preferences, PlanController, "undoAddItemsName") || this;
            if (_this.home === undefined) {
                _this.home = null;
            }
            if (_this.items === undefined) {
                _this.items = null;
            }
            _this.home = home;
            _this.items = items;
            return _this;
        }
        /**
         *
         */
        ItemsAdditionEndUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.home.setSelectedItems(/* asList */ this.items.slice(0));
        };
        return ItemsAdditionEndUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.ItemsAdditionEndUndoableEdit = ItemsAdditionEndUndoableEdit;
    ItemsAdditionEndUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ItemsAdditionEndUndoableEdit";
    ItemsAdditionEndUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for walls creation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedNewWalls
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var WallsCreationUndoableEdit = /** @class */ (function (_super) {
        __extends(WallsCreationUndoableEdit, _super);
        function WallsCreationUndoableEdit(controller, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, joinedNewWalls, newBasePlanLocked) {
            var _this = _super.call(this, preferences, PlanController, "undoCreateWallsName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.joinedNewWalls === undefined) {
                _this.joinedNewWalls = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.joinedNewWalls = joinedNewWalls;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        WallsCreationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doDeleteWalls(this.joinedNewWalls, this.oldBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.oldAllLevelsSelection);
        };
        /**
         *
         */
        WallsCreationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doAddWalls(this.joinedNewWalls, this.newBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(PlanController.JoinedWall.getWalls(this.joinedNewWalls), false);
        };
        return WallsCreationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.WallsCreationUndoableEdit = WallsCreationUndoableEdit;
    WallsCreationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallsCreationUndoableEdit";
    WallsCreationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for rooms creation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @param {com.eteks.sweethome3d.model.Room[]} newRooms
     * @param {int[]} roomsIndex
     * @param {Level} roomsLevel
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomsCreationUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomsCreationUndoableEdit, _super);
        function RoomsCreationUndoableEdit(controller, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, newRooms, roomsIndex, roomsLevel, newBasePlanLocked) {
            var _this = _super.call(this, preferences, PlanController, "undoCreateRoomsName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.newRooms === undefined) {
                _this.newRooms = null;
            }
            if (_this.roomsIndex === undefined) {
                _this.roomsIndex = null;
            }
            if (_this.roomsLevel === undefined) {
                _this.roomsLevel = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.newRooms = newRooms;
            _this.roomsIndex = roomsIndex;
            _this.roomsLevel = roomsLevel;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        RoomsCreationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doDeleteRooms(this.newRooms, this.oldBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.oldAllLevelsSelection);
        };
        /**
         *
         */
        RoomsCreationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doAddRooms(this.newRooms, this.roomsIndex, null, this.roomsLevel, this.newBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.newRooms.slice(0), false);
        };
        return RoomsCreationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomsCreationUndoableEdit = RoomsCreationUndoableEdit;
    RoomsCreationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomsCreationUndoableEdit";
    RoomsCreationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for dimension lines creation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @param {com.eteks.sweethome3d.model.DimensionLine[]} dimensionLines
     * @param {Level} dimensionLinesLevel
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var DimensionLinesCreationUndoableEdit = /** @class */ (function (_super) {
        __extends(DimensionLinesCreationUndoableEdit, _super);
        function DimensionLinesCreationUndoableEdit(controller, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, dimensionLines, dimensionLinesLevel, newBasePlanLocked) {
            var _this = _super.call(this, preferences, PlanController, "undoCreateDimensionLinesName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.dimensionLines === undefined) {
                _this.dimensionLines = null;
            }
            if (_this.dimensionLinesLevel === undefined) {
                _this.dimensionLinesLevel = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.dimensionLines = dimensionLines;
            _this.dimensionLinesLevel = dimensionLinesLevel;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        DimensionLinesCreationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doDeleteDimensionLines(this.dimensionLines, this.oldBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.oldAllLevelsSelection);
        };
        /**
         *
         */
        DimensionLinesCreationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doAddDimensionLines(this.dimensionLines, null, this.dimensionLinesLevel, this.newBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.dimensionLines.slice(0), false);
        };
        return DimensionLinesCreationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.DimensionLinesCreationUndoableEdit = DimensionLinesCreationUndoableEdit;
    DimensionLinesCreationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLinesCreationUndoableEdit";
    DimensionLinesCreationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for polylines creation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @param {com.eteks.sweethome3d.model.Polyline[]} newPolylines
     * @param {int[]} polylinesIndex
     * @param {Level} polylinesLevel
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PolylinesCreationUndoableEdit = /** @class */ (function (_super) {
        __extends(PolylinesCreationUndoableEdit, _super);
        function PolylinesCreationUndoableEdit(controller, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, newPolylines, polylinesIndex, polylinesLevel, newBasePlanLocked) {
            var _this = _super.call(this, preferences, PlanController, "undoCreatePolylinesName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.newPolylines === undefined) {
                _this.newPolylines = null;
            }
            if (_this.polylinesIndex === undefined) {
                _this.polylinesIndex = null;
            }
            if (_this.polylinesLevel === undefined) {
                _this.polylinesLevel = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.newPolylines = newPolylines;
            _this.polylinesIndex = polylinesIndex;
            _this.polylinesLevel = polylinesLevel;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        PolylinesCreationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doDeletePolylines(this.newPolylines, this.oldBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.oldAllLevelsSelection);
        };
        /**
         *
         */
        PolylinesCreationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doAddPolylines(this.newPolylines, this.polylinesIndex, null, this.polylinesLevel, this.newBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List(/* asList */ this.newPolylines.slice(0));
        };
        return PolylinesCreationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PolylinesCreationUndoableEdit = PolylinesCreationUndoableEdit;
    PolylinesCreationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PolylinesCreationUndoableEdit";
    PolylinesCreationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for label creation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} oldBasePlanLocked
     * @param {boolean} oldAllLevelsSelection
     * @param {com.eteks.sweethome3d.model.Label[]} labels
     * @param {Level} labelsLevel
     * @param {boolean} newBasePlanLocked
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LabelsCreationUndoableEdit = /** @class */ (function (_super) {
        __extends(LabelsCreationUndoableEdit, _super);
        function LabelsCreationUndoableEdit(controller, preferences, oldSelection, oldBasePlanLocked, oldAllLevelsSelection, labels, labelsLevel, newBasePlanLocked) {
            var _this = _super.call(this, preferences, PlanController, "undoCreateLabelsName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.labels === undefined) {
                _this.labels = null;
            }
            if (_this.labelsLevel === undefined) {
                _this.labelsLevel = null;
            }
            if (_this.newBasePlanLocked === undefined) {
                _this.newBasePlanLocked = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.oldBasePlanLocked = oldBasePlanLocked;
            _this.oldAllLevelsSelection = oldAllLevelsSelection;
            _this.labels = labels;
            _this.labelsLevel = labelsLevel;
            _this.newBasePlanLocked = newBasePlanLocked;
            return _this;
        }
        /**
         *
         */
        LabelsCreationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doDeleteLabels(this.labels, this.oldBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.oldAllLevelsSelection);
        };
        /**
         *
         */
        LabelsCreationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doAddLabels(this.labels, null, this.labelsLevel, this.newBasePlanLocked);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.labels.slice(0), false);
        };
        return LabelsCreationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LabelsCreationUndoableEdit = LabelsCreationUndoableEdit;
    LabelsCreationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LabelsCreationUndoableEdit";
    LabelsCreationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for label rotation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldAngle
     * @param {Label} label
     * @param {number} newAngle
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LabelRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(LabelRotationUndoableEdit, _super);
        function LabelRotationUndoableEdit(controller, preferences, oldAngle, label, newAngle) {
            var _this = _super.call(this, preferences, PlanController, "undoLabelRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldAngle === undefined) {
                _this.oldAngle = 0;
            }
            if (_this.label === undefined) {
                _this.label = null;
            }
            if (_this.newAngle === undefined) {
                _this.newAngle = 0;
            }
            _this.controller = controller;
            _this.oldAngle = oldAngle;
            _this.label = label;
            _this.newAngle = newAngle;
            return _this;
        }
        /**
         *
         */
        LabelRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.label.setAngle(this.oldAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.label].slice(0));
        };
        /**
         *
         */
        LabelRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.label.setAngle(this.newAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.label].slice(0));
        };
        return LabelRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LabelRotationUndoableEdit = LabelRotationUndoableEdit;
    LabelRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LabelRotationUndoableEdit";
    LabelRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for label elevation modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldElevation
     * @param {Label} label
     * @param {number} newElevation
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LabelElevationModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(LabelElevationModificationUndoableEdit, _super);
        function LabelElevationModificationUndoableEdit(controller, preferences, oldElevation, label, newElevation) {
            var _this = _super.call(this, preferences, PlanController, oldElevation < newElevation ? "undoLabelRaiseName" : "undoLabelLowerName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldElevation === undefined) {
                _this.oldElevation = 0;
            }
            if (_this.label === undefined) {
                _this.label = null;
            }
            if (_this.newElevation === undefined) {
                _this.newElevation = 0;
            }
            _this.controller = controller;
            _this.oldElevation = oldElevation;
            _this.label = label;
            _this.newElevation = newElevation;
            return _this;
        }
        /**
         *
         */
        LabelElevationModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.label.setElevation(this.oldElevation);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.label].slice(0));
        };
        /**
         *
         */
        LabelElevationModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.label.setElevation(this.newElevation);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.label].slice(0));
        };
        return LabelElevationModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LabelElevationModificationUndoableEdit = LabelElevationModificationUndoableEdit;
    LabelElevationModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LabelElevationModificationUndoableEdit";
    LabelElevationModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for moving items.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @param {number} dx
     * @param {number} dy
     * @class
     * @extends LocalizedUndoableEdit
     */
    var ItemsMovingUndoableEdit = /** @class */ (function (_super) {
        __extends(ItemsMovingUndoableEdit, _super);
        function ItemsMovingUndoableEdit(controller, preferences, oldSelection, allLevelsSelection, items, dx, dy) {
            var _this = _super.call(this, preferences, PlanController, "undoMoveSelectionName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            if (_this.itemsArray === undefined) {
                _this.itemsArray = null;
            }
            if (_this.dx === undefined) {
                _this.dx = 0;
            }
            if (_this.dy === undefined) {
                _this.dy = 0;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            _this.itemsArray = items;
            _this.dx = dx;
            _this.dy = dy;
            return _this;
        }
        /**
         *
         */
        ItemsMovingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.doMoveAndShowItems(this.itemsArray, this.oldSelection, -this.dx, -this.dy, this.allLevelsSelection);
        };
        /**
         *
         */
        ItemsMovingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.doMoveAndShowItems(this.itemsArray, this.itemsArray, this.dx, this.dy, this.allLevelsSelection);
        };
        return ItemsMovingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.ItemsMovingUndoableEdit = ItemsMovingUndoableEdit;
    ItemsMovingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ItemsMovingUndoableEdit";
    ItemsMovingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for moving a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldAngle
     * @param {number} oldDepth
     * @param {number} oldElevation
     * @param {boolean} oldDoorOrWindowBoundToWall
     * @param {HomePieceOfFurniture} piece
     * @param {number} dx
     * @param {number} dy
     * @param {number} newAngle
     * @param {number} newDepth
     * @param {number} newElevation
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureMovingUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureMovingUndoableEdit, _super);
        function PieceOfFurnitureMovingUndoableEdit(controller, preferences, oldAngle, oldDepth, oldElevation, oldDoorOrWindowBoundToWall, piece, dx, dy, newAngle, newDepth, newElevation) {
            var _this = _super.call(this, preferences, PlanController, "undoMoveSelectionName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldAngle === undefined) {
                _this.oldAngle = 0;
            }
            if (_this.oldDepth === undefined) {
                _this.oldDepth = 0;
            }
            if (_this.oldElevation === undefined) {
                _this.oldElevation = 0;
            }
            if (_this.oldDoorOrWindowBoundToWall === undefined) {
                _this.oldDoorOrWindowBoundToWall = false;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.dx === undefined) {
                _this.dx = 0;
            }
            if (_this.dy === undefined) {
                _this.dy = 0;
            }
            if (_this.newAngle === undefined) {
                _this.newAngle = 0;
            }
            if (_this.newDepth === undefined) {
                _this.newDepth = 0;
            }
            if (_this.newElevation === undefined) {
                _this.newElevation = 0;
            }
            _this.controller = controller;
            _this.oldAngle = oldAngle;
            _this.oldDepth = oldDepth;
            _this.oldElevation = oldElevation;
            _this.oldDoorOrWindowBoundToWall = oldDoorOrWindowBoundToWall;
            _this.piece = piece;
            _this.dx = dx;
            _this.dy = dy;
            _this.newAngle = newAngle;
            _this.newDepth = newDepth;
            _this.newElevation = newElevation;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureMovingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.piece.move(-this.dx, -this.dy);
            this.piece.setAngle(this.oldAngle);
            if ((this.piece != null && this.piece instanceof HomeDoorOrWindow) && this.piece.isResizable() && this.controller.isItemResizable(this.piece)) {
                this.piece.setDepth(this.oldDepth);
            }
            this.piece.setElevation(this.oldElevation);
            if (this.piece != null && this.piece instanceof HomeDoorOrWindow) {
                this.piece.setBoundToWall(this.oldDoorOrWindowBoundToWall);
            }
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureMovingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.piece.move(this.dx, this.dy);
            this.piece.setAngle(this.newAngle);
            if ((this.piece != null && this.piece instanceof HomeDoorOrWindow) && this.piece.isResizable() && this.controller.isItemResizable(this.piece)) {
                this.piece.setDepth(this.newDepth);
            }
            this.piece.setElevation(this.newElevation);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurnitureMovingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureMovingUndoableEdit = PieceOfFurnitureMovingUndoableEdit;
    PieceOfFurnitureMovingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureMovingUndoableEdit";
    PieceOfFurnitureMovingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for duplication start.
     * @param {PlanController} controller
     * @param {com.eteks.sweethome3d.model.Selectable[]} oldSelection
     * @param {boolean} allLevelsSelection
     * @class
     * @extends javax.swing.undo.AbstractUndoableEdit
     */
    var DuplicationStartUndoableEdit = /** @class */ (function (_super) {
        __extends(DuplicationStartUndoableEdit, _super);
        function DuplicationStartUndoableEdit(controller, oldSelection, allLevelsSelection) {
            var _this = _super.call(this) || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.allLevelsSelection === undefined) {
                _this.allLevelsSelection = false;
            }
            _this.controller = controller;
            _this.oldSelection = oldSelection;
            _this.allLevelsSelection = allLevelsSelection;
            return _this;
        }
        /**
         *
         */
        DuplicationStartUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.selectAndShowItems$java_util_List$boolean(/* asList */ this.oldSelection.slice(0), this.allLevelsSelection);
        };
        return DuplicationStartUndoableEdit;
    }(javax.swing.undo.AbstractUndoableEdit));
    PlanController.DuplicationStartUndoableEdit = DuplicationStartUndoableEdit;
    DuplicationStartUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DuplicationStartUndoableEdit";
    DuplicationStartUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for duplication end.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {com.eteks.sweethome3d.model.Selectable[]} items
     * @class
     * @extends LocalizedUndoableEdit
     */
    var DuplicationEndUndoableEdit = /** @class */ (function (_super) {
        __extends(DuplicationEndUndoableEdit, _super);
        function DuplicationEndUndoableEdit(controller, preferences, items) {
            var _this = _super.call(this, preferences, PlanController, "undoDuplicateSelectionName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.items === undefined) {
                _this.items = null;
            }
            _this.controller = controller;
            _this.items = items;
            return _this;
        }
        /**
         *
         */
        DuplicationEndUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.selectAndShowItems$java_util_List(/* asList */ this.items.slice(0));
        };
        return DuplicationEndUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.DuplicationEndUndoableEdit = DuplicationEndUndoableEdit;
    DuplicationEndUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DuplicationEndUndoableEdit";
    DuplicationEndUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for wall resizing.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldX
     * @param {number} oldY
     * @param {Wall} wall
     * @param {boolean} startPoint
     * @param {number} newX
     * @param {number} newY
     * @class
     * @extends LocalizedUndoableEdit
     */
    var WallResizingUndoableEdit = /** @class */ (function (_super) {
        __extends(WallResizingUndoableEdit, _super);
        function WallResizingUndoableEdit(controller, preferences, oldX, oldY, wall, startPoint, newX, newY) {
            var _this = _super.call(this, preferences, PlanController, "undoWallResizeName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.wall === undefined) {
                _this.wall = null;
            }
            if (_this.startPoint === undefined) {
                _this.startPoint = false;
            }
            if (_this.newX === undefined) {
                _this.newX = 0;
            }
            if (_this.newY === undefined) {
                _this.newY = 0;
            }
            _this.controller = controller;
            _this.oldX = oldX;
            _this.oldY = oldY;
            _this.wall = wall;
            _this.startPoint = startPoint;
            _this.newX = newX;
            _this.newY = newY;
            return _this;
        }
        /**
         *
         */
        WallResizingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            PlanController.moveWallPoint(this.wall, this.oldX, this.oldY, this.startPoint);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.wall].slice(0));
        };
        /**
         *
         */
        WallResizingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            PlanController.moveWallPoint(this.wall, this.newX, this.newY, this.startPoint);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.wall].slice(0));
        };
        return WallResizingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.WallResizingUndoableEdit = WallResizingUndoableEdit;
    WallResizingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallResizingUndoableEdit";
    WallResizingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for wall arc extent modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldArcExtent
     * @param {Wall} wall
     * @param {number} newArcExtent
     * @class
     * @extends LocalizedUndoableEdit
     */
    var WallArcExtentModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(WallArcExtentModificationUndoableEdit, _super);
        function WallArcExtentModificationUndoableEdit(controller, preferences, oldArcExtent, wall, newArcExtent) {
            var _this = _super.call(this, preferences, PlanController, "undoWallArcExtentName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldArcExtent === undefined) {
                _this.oldArcExtent = null;
            }
            if (_this.wall === undefined) {
                _this.wall = null;
            }
            if (_this.newArcExtent === undefined) {
                _this.newArcExtent = null;
            }
            _this.controller = controller;
            _this.oldArcExtent = oldArcExtent;
            _this.wall = wall;
            _this.newArcExtent = newArcExtent;
            return _this;
        }
        /**
         *
         */
        WallArcExtentModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.wall.setArcExtent(this.oldArcExtent);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.wall].slice(0));
        };
        /**
         *
         */
        WallArcExtentModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.wall.setArcExtent(this.newArcExtent);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.wall].slice(0));
        };
        return WallArcExtentModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.WallArcExtentModificationUndoableEdit = WallArcExtentModificationUndoableEdit;
    WallArcExtentModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallArcExtentModificationUndoableEdit";
    WallArcExtentModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room resizing.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldX
     * @param {number} oldY
     * @param {Room} room
     * @param {number} pointIndex
     * @param {number} newX
     * @param {number} newY
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomResizingUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomResizingUndoableEdit, _super);
        function RoomResizingUndoableEdit(controller, preferences, oldX, oldY, room, pointIndex, newX, newY) {
            var _this = _super.call(this, preferences, PlanController, "undoRoomResizeName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.pointIndex === undefined) {
                _this.pointIndex = 0;
            }
            if (_this.newX === undefined) {
                _this.newX = 0;
            }
            if (_this.newY === undefined) {
                _this.newY = 0;
            }
            _this.controller = controller;
            _this.oldX = oldX;
            _this.oldY = oldY;
            _this.room = room;
            _this.pointIndex = pointIndex;
            _this.newX = newX;
            _this.newY = newY;
            return _this;
        }
        /**
         *
         */
        RoomResizingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            PlanController.moveRoomPoint(this.room, this.oldX, this.oldY, this.pointIndex);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        /**
         *
         */
        RoomResizingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            PlanController.moveRoomPoint(this.room, this.newX, this.newY, this.pointIndex);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomResizingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomResizingUndoableEdit = RoomResizingUndoableEdit;
    RoomResizingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomResizingUndoableEdit";
    RoomResizingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room name offset modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldNameXOffset
     * @param {number} oldNameYOffset
     * @param {Room} room
     * @param {number} newNameXOffset
     * @param {number} newNameYOffset
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomNameOffsetModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomNameOffsetModificationUndoableEdit, _super);
        function RoomNameOffsetModificationUndoableEdit(controller, preferences, oldNameXOffset, oldNameYOffset, room, newNameXOffset, newNameYOffset) {
            var _this = _super.call(this, preferences, PlanController, "undoRoomNameOffsetName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldNameXOffset === undefined) {
                _this.oldNameXOffset = 0;
            }
            if (_this.oldNameYOffset === undefined) {
                _this.oldNameYOffset = 0;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.newNameXOffset === undefined) {
                _this.newNameXOffset = 0;
            }
            if (_this.newNameYOffset === undefined) {
                _this.newNameYOffset = 0;
            }
            _this.controller = controller;
            _this.oldNameXOffset = oldNameXOffset;
            _this.oldNameYOffset = oldNameYOffset;
            _this.room = room;
            _this.newNameXOffset = newNameXOffset;
            _this.newNameYOffset = newNameYOffset;
            return _this;
        }
        /**
         *
         */
        RoomNameOffsetModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.room.setNameXOffset(this.oldNameXOffset);
            this.room.setNameYOffset(this.oldNameYOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        /**
         *
         */
        RoomNameOffsetModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.room.setNameXOffset(this.newNameXOffset);
            this.room.setNameYOffset(this.newNameYOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomNameOffsetModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomNameOffsetModificationUndoableEdit = RoomNameOffsetModificationUndoableEdit;
    RoomNameOffsetModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomNameOffsetModificationUndoableEdit";
    RoomNameOffsetModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room name rotation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldNameAngle
     * @param {Room} room
     * @param {number} newNameAngle
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomNameRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomNameRotationUndoableEdit, _super);
        function RoomNameRotationUndoableEdit(controller, preferences, oldNameAngle, room, newNameAngle) {
            var _this = _super.call(this, preferences, PlanController, "undoRoomNameRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldNameAngle === undefined) {
                _this.oldNameAngle = 0;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.newNameAngle === undefined) {
                _this.newNameAngle = 0;
            }
            _this.controller = controller;
            _this.oldNameAngle = oldNameAngle;
            _this.room = room;
            _this.newNameAngle = newNameAngle;
            return _this;
        }
        /**
         *
         */
        RoomNameRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.room.setNameAngle(this.oldNameAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        /**
         *
         */
        RoomNameRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.room.setNameAngle(this.newNameAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomNameRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomNameRotationUndoableEdit = RoomNameRotationUndoableEdit;
    RoomNameRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomNameRotationUndoableEdit";
    RoomNameRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room area offset modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldAreaXOffset
     * @param {number} oldAreaYOffset
     * @param {Room} room
     * @param {number} newAreaXOffset
     * @param {number} newAreaYOffset
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomAreaOffsetModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomAreaOffsetModificationUndoableEdit, _super);
        function RoomAreaOffsetModificationUndoableEdit(controller, preferences, oldAreaXOffset, oldAreaYOffset, room, newAreaXOffset, newAreaYOffset) {
            var _this = _super.call(this, preferences, PlanController, "undoRoomAreaOffsetName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldAreaXOffset === undefined) {
                _this.oldAreaXOffset = 0;
            }
            if (_this.oldAreaYOffset === undefined) {
                _this.oldAreaYOffset = 0;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.newAreaXOffset === undefined) {
                _this.newAreaXOffset = 0;
            }
            if (_this.newAreaYOffset === undefined) {
                _this.newAreaYOffset = 0;
            }
            _this.controller = controller;
            _this.oldAreaXOffset = oldAreaXOffset;
            _this.oldAreaYOffset = oldAreaYOffset;
            _this.room = room;
            _this.newAreaXOffset = newAreaXOffset;
            _this.newAreaYOffset = newAreaYOffset;
            return _this;
        }
        /**
         *
         */
        RoomAreaOffsetModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.room.setAreaXOffset(this.oldAreaXOffset);
            this.room.setAreaYOffset(this.oldAreaYOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        /**
         *
         */
        RoomAreaOffsetModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.room.setAreaXOffset(this.newAreaXOffset);
            this.room.setAreaYOffset(this.newAreaYOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomAreaOffsetModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomAreaOffsetModificationUndoableEdit = RoomAreaOffsetModificationUndoableEdit;
    RoomAreaOffsetModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomAreaOffsetModificationUndoableEdit";
    RoomAreaOffsetModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for room area rotation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldAreaAngle
     * @param {Room} room
     * @param {number} newAreaAngle
     * @class
     * @extends LocalizedUndoableEdit
     */
    var RoomAreaRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(RoomAreaRotationUndoableEdit, _super);
        function RoomAreaRotationUndoableEdit(controller, preferences, oldAreaAngle, room, newAreaAngle) {
            var _this = _super.call(this, preferences, PlanController, "undoRoomAreaRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldAreaAngle === undefined) {
                _this.oldAreaAngle = 0;
            }
            if (_this.room === undefined) {
                _this.room = null;
            }
            if (_this.newAreaAngle === undefined) {
                _this.newAreaAngle = 0;
            }
            _this.controller = controller;
            _this.oldAreaAngle = oldAreaAngle;
            _this.room = room;
            _this.newAreaAngle = newAreaAngle;
            return _this;
        }
        /**
         *
         */
        RoomAreaRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.room.setAreaAngle(this.oldAreaAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        /**
         *
         */
        RoomAreaRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.room.setAreaAngle(this.newAreaAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.room].slice(0));
        };
        return RoomAreaRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.RoomAreaRotationUndoableEdit = RoomAreaRotationUndoableEdit;
    RoomAreaRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomAreaRotationUndoableEdit";
    RoomAreaRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the rotation of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldAngle
     * @param {boolean} oldDoorOrWindowBoundToWall
     * @param {HomePieceOfFurniture} piece
     * @param {number} newAngle
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureRotationUndoableEdit, _super);
        function PieceOfFurnitureRotationUndoableEdit(controller, preferences, oldAngle, oldDoorOrWindowBoundToWall, piece, newAngle) {
            var _this = _super.call(this, preferences, PlanController, "undoPieceOfFurnitureRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldAngle === undefined) {
                _this.oldAngle = 0;
            }
            if (_this.oldDoorOrWindowBoundToWall === undefined) {
                _this.oldDoorOrWindowBoundToWall = false;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.newAngle === undefined) {
                _this.newAngle = 0;
            }
            _this.controller = controller;
            _this.oldAngle = oldAngle;
            _this.oldDoorOrWindowBoundToWall = oldDoorOrWindowBoundToWall;
            _this.piece = piece;
            _this.newAngle = newAngle;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.piece.setAngle(this.oldAngle);
            if (this.piece != null && this.piece instanceof HomeDoorOrWindow) {
                this.piece.setBoundToWall(this.oldDoorOrWindowBoundToWall);
            }
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.piece.setAngle(this.newAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurnitureRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureRotationUndoableEdit = PieceOfFurnitureRotationUndoableEdit;
    PieceOfFurnitureRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureRotationUndoableEdit";
    PieceOfFurnitureRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the pitch rotation of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldPitch
     * @param {number} oldWidthInPlan
     * @param {number} oldDepthInPlan
     * @param {number} oldHeightInPlan
     * @param {HomePieceOfFurniture} piece
     * @param {number} newPitch
     * @param {number} newWidthInPlan
     * @param {number} newDepthInPlan
     * @param {number} newHeightInPlan
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurniturePitchRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurniturePitchRotationUndoableEdit, _super);
        function PieceOfFurniturePitchRotationUndoableEdit(controller, preferences, oldPitch, oldWidthInPlan, oldDepthInPlan, oldHeightInPlan, piece, newPitch, newWidthInPlan, newDepthInPlan, newHeightInPlan) {
            var _this = _super.call(this, preferences, PlanController, "undoPieceOfFurnitureRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldPitch === undefined) {
                _this.oldPitch = 0;
            }
            if (_this.oldWidthInPlan === undefined) {
                _this.oldWidthInPlan = 0;
            }
            if (_this.oldDepthInPlan === undefined) {
                _this.oldDepthInPlan = 0;
            }
            if (_this.oldHeightInPlan === undefined) {
                _this.oldHeightInPlan = 0;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.newPitch === undefined) {
                _this.newPitch = 0;
            }
            if (_this.newWidthInPlan === undefined) {
                _this.newWidthInPlan = 0;
            }
            if (_this.newDepthInPlan === undefined) {
                _this.newDepthInPlan = 0;
            }
            if (_this.newHeightInPlan === undefined) {
                _this.newHeightInPlan = 0;
            }
            _this.controller = controller;
            _this.oldPitch = oldPitch;
            _this.oldWidthInPlan = oldWidthInPlan;
            _this.oldDepthInPlan = oldDepthInPlan;
            _this.oldHeightInPlan = oldHeightInPlan;
            _this.piece = piece;
            _this.newPitch = newPitch;
            _this.newWidthInPlan = newWidthInPlan;
            _this.newDepthInPlan = newDepthInPlan;
            _this.newHeightInPlan = newHeightInPlan;
            return _this;
        }
        /**
         *
         */
        PieceOfFurniturePitchRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.setPieceOfFurniturePitch(this.piece, this.oldPitch, this.oldWidthInPlan, this.oldDepthInPlan, this.oldHeightInPlan);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurniturePitchRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.setPieceOfFurniturePitch(this.piece, this.newPitch, this.newWidthInPlan, this.newDepthInPlan, this.newHeightInPlan);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurniturePitchRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurniturePitchRotationUndoableEdit = PieceOfFurniturePitchRotationUndoableEdit;
    PieceOfFurniturePitchRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurniturePitchRotationUndoableEdit";
    PieceOfFurniturePitchRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the roll rotation of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldRoll
     * @param {number} oldWidthInPlan
     * @param {number} oldDepthInPlan
     * @param {number} oldHeightInPlan
     * @param {HomePieceOfFurniture} piece
     * @param {number} newRoll
     * @param {number} newWidthInPlan
     * @param {number} newDepthInPlan
     * @param {number} newHeightInPlan
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureRollRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureRollRotationUndoableEdit, _super);
        function PieceOfFurnitureRollRotationUndoableEdit(controller, preferences, oldRoll, oldWidthInPlan, oldDepthInPlan, oldHeightInPlan, piece, newRoll, newWidthInPlan, newDepthInPlan, newHeightInPlan) {
            var _this = _super.call(this, preferences, PlanController, "undoPieceOfFurnitureRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldRoll === undefined) {
                _this.oldRoll = 0;
            }
            if (_this.oldWidthInPlan === undefined) {
                _this.oldWidthInPlan = 0;
            }
            if (_this.oldDepthInPlan === undefined) {
                _this.oldDepthInPlan = 0;
            }
            if (_this.oldHeightInPlan === undefined) {
                _this.oldHeightInPlan = 0;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.newRoll === undefined) {
                _this.newRoll = 0;
            }
            if (_this.newWidthInPlan === undefined) {
                _this.newWidthInPlan = 0;
            }
            if (_this.newDepthInPlan === undefined) {
                _this.newDepthInPlan = 0;
            }
            if (_this.newHeightInPlan === undefined) {
                _this.newHeightInPlan = 0;
            }
            _this.controller = controller;
            _this.oldRoll = oldRoll;
            _this.oldWidthInPlan = oldWidthInPlan;
            _this.oldDepthInPlan = oldDepthInPlan;
            _this.oldHeightInPlan = oldHeightInPlan;
            _this.piece = piece;
            _this.newRoll = newRoll;
            _this.newWidthInPlan = newWidthInPlan;
            _this.newDepthInPlan = newDepthInPlan;
            _this.newHeightInPlan = newHeightInPlan;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureRollRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.setPieceOfFurnitureRoll(this.piece, this.oldRoll, this.oldWidthInPlan, this.oldDepthInPlan, this.oldHeightInPlan);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureRollRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.controller.setPieceOfFurnitureRoll(this.piece, this.newRoll, this.newWidthInPlan, this.newDepthInPlan, this.newHeightInPlan);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurnitureRollRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureRollRotationUndoableEdit = PieceOfFurnitureRollRotationUndoableEdit;
    PieceOfFurnitureRollRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureRollRotationUndoableEdit";
    PieceOfFurnitureRollRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the elevation modification of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldElevation
     * @param {HomePieceOfFurniture} piece
     * @param {number} newElevation
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureElevationModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureElevationModificationUndoableEdit, _super);
        function PieceOfFurnitureElevationModificationUndoableEdit(controller, preferences, oldElevation, piece, newElevation) {
            var _this = _super.call(this, preferences, PlanController, oldElevation < newElevation ? "undoPieceOfFurnitureRaiseName" : "undoPieceOfFurnitureLowerName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldElevation === undefined) {
                _this.oldElevation = 0;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.newElevation === undefined) {
                _this.newElevation = 0;
            }
            _this.controller = controller;
            _this.oldElevation = oldElevation;
            _this.piece = piece;
            _this.newElevation = newElevation;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureElevationModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.piece.setElevation(this.oldElevation);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureElevationModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.piece.setElevation(this.newElevation);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurnitureElevationModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureElevationModificationUndoableEdit = PieceOfFurnitureElevationModificationUndoableEdit;
    PieceOfFurnitureElevationModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureElevationModificationUndoableEdit";
    PieceOfFurnitureElevationModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the resizing of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {string} presentationNameKey
     * @param {boolean} doorOrWindowBoundToWall
     * @param {PlanController.ResizedPieceOfFurniture} resizedPiece
     * @param {number} newX
     * @param {number} newY
     * @param {number} newWidth
     * @param {number} newDepth
     * @param {number} newHeight
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureResizingUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureResizingUndoableEdit, _super);
        function PieceOfFurnitureResizingUndoableEdit(controller, preferences, presentationNameKey, doorOrWindowBoundToWall, resizedPiece, newX, newY, newWidth, newDepth, newHeight) {
            var _this = _super.call(this, preferences, PlanController, presentationNameKey) || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.doorOrWindowBoundToWall === undefined) {
                _this.doorOrWindowBoundToWall = false;
            }
            if (_this.resizedPiece === undefined) {
                _this.resizedPiece = null;
            }
            if (_this.newX === undefined) {
                _this.newX = 0;
            }
            if (_this.newY === undefined) {
                _this.newY = 0;
            }
            if (_this.newWidth === undefined) {
                _this.newWidth = 0;
            }
            if (_this.newDepth === undefined) {
                _this.newDepth = 0;
            }
            if (_this.newHeight === undefined) {
                _this.newHeight = 0;
            }
            _this.controller = controller;
            _this.doorOrWindowBoundToWall = doorOrWindowBoundToWall;
            _this.resizedPiece = resizedPiece;
            _this.newX = newX;
            _this.newY = newY;
            _this.newWidth = newWidth;
            _this.newDepth = newDepth;
            _this.newHeight = newHeight;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureResizingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.controller.resetPieceOfFurnitureSize(this.resizedPiece);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.resizedPiece.getPieceOfFurniture()].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureResizingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            var piece = this.resizedPiece.getPieceOfFurniture();
            piece.setX(this.newX);
            piece.setY(this.newY);
            this.controller.setPieceOfFurnitureSize(this.resizedPiece, this.newWidth, this.newDepth, this.newHeight);
            if (piece != null && piece instanceof HomeDoorOrWindow) {
                piece.setBoundToWall(this.doorOrWindowBoundToWall);
            }
            this.controller.selectAndShowItems$java_util_List(/* asList */ [piece].slice(0));
        };
        return PieceOfFurnitureResizingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureResizingUndoableEdit = PieceOfFurnitureResizingUndoableEdit;
    PieceOfFurnitureResizingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureResizingUndoableEdit";
    PieceOfFurnitureResizingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the light power modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldPower
     * @param {HomeLight} light
     * @param {number} newPower
     * @class
     * @extends LocalizedUndoableEdit
     */
    var LightPowerModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(LightPowerModificationUndoableEdit, _super);
        function LightPowerModificationUndoableEdit(controller, preferences, oldPower, light, newPower) {
            var _this = _super.call(this, preferences, PlanController, "undoLightPowerModificationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldPower === undefined) {
                _this.oldPower = 0;
            }
            if (_this.light === undefined) {
                _this.light = null;
            }
            if (_this.newPower === undefined) {
                _this.newPower = 0;
            }
            _this.controller = controller;
            _this.oldPower = oldPower;
            _this.light = light;
            _this.newPower = newPower;
            return _this;
        }
        /**
         *
         */
        LightPowerModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.light.setPower(this.oldPower);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.light].slice(0));
        };
        /**
         *
         */
        LightPowerModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.light.setPower(this.newPower);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.light].slice(0));
        };
        return LightPowerModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.LightPowerModificationUndoableEdit = LightPowerModificationUndoableEdit;
    LightPowerModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LightPowerModificationUndoableEdit";
    LightPowerModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the name offset modification of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldNameXOffset
     * @param {number} oldNameYOffset
     * @param {HomePieceOfFurniture} piece
     * @param {number} newNameXOffset
     * @param {number} newNameYOffset
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureNameOffsetModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureNameOffsetModificationUndoableEdit, _super);
        function PieceOfFurnitureNameOffsetModificationUndoableEdit(controller, preferences, oldNameXOffset, oldNameYOffset, piece, newNameXOffset, newNameYOffset) {
            var _this = _super.call(this, preferences, PlanController, "undoPieceOfFurnitureNameOffsetName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldNameXOffset === undefined) {
                _this.oldNameXOffset = 0;
            }
            if (_this.oldNameYOffset === undefined) {
                _this.oldNameYOffset = 0;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.newNameXOffset === undefined) {
                _this.newNameXOffset = 0;
            }
            if (_this.newNameYOffset === undefined) {
                _this.newNameYOffset = 0;
            }
            _this.controller = controller;
            _this.oldNameXOffset = oldNameXOffset;
            _this.oldNameYOffset = oldNameYOffset;
            _this.piece = piece;
            _this.newNameXOffset = newNameXOffset;
            _this.newNameYOffset = newNameYOffset;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureNameOffsetModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.piece.setNameXOffset(this.oldNameXOffset);
            this.piece.setNameYOffset(this.oldNameYOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureNameOffsetModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.piece.setNameXOffset(this.newNameXOffset);
            this.piece.setNameYOffset(this.newNameYOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurnitureNameOffsetModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureNameOffsetModificationUndoableEdit = PieceOfFurnitureNameOffsetModificationUndoableEdit;
    PieceOfFurnitureNameOffsetModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureNameOffsetModificationUndoableEdit";
    PieceOfFurnitureNameOffsetModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for the name rotation of a piece of furniture.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldNameAngle
     * @param {HomePieceOfFurniture} piece
     * @param {number} newNameAngle
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PieceOfFurnitureNameRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureNameRotationUndoableEdit, _super);
        function PieceOfFurnitureNameRotationUndoableEdit(controller, preferences, oldNameAngle, piece, newNameAngle) {
            var _this = _super.call(this, preferences, PlanController, "undoPieceOfFurnitureNameRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldNameAngle === undefined) {
                _this.oldNameAngle = 0;
            }
            if (_this.piece === undefined) {
                _this.piece = null;
            }
            if (_this.newNameAngle === undefined) {
                _this.newNameAngle = 0;
            }
            _this.controller = controller;
            _this.oldNameAngle = oldNameAngle;
            _this.piece = piece;
            _this.newNameAngle = newNameAngle;
            return _this;
        }
        /**
         *
         */
        PieceOfFurnitureNameRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.piece.setNameAngle(this.oldNameAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        /**
         *
         */
        PieceOfFurnitureNameRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.piece.setNameAngle(this.newNameAngle);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.piece].slice(0));
        };
        return PieceOfFurnitureNameRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PieceOfFurnitureNameRotationUndoableEdit = PieceOfFurnitureNameRotationUndoableEdit;
    PieceOfFurnitureNameRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureNameRotationUndoableEdit";
    PieceOfFurnitureNameRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for dimension line resizing.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldX
     * @param {number} oldY
     * @param {DimensionLine} dimensionLine
     * @param {number} newX
     * @param {number} newY
     * @param {boolean} startPoint
     * @param {boolean} reversed
     * @class
     * @extends LocalizedUndoableEdit
     */
    var DimensionLineResizingUndoableEdit = /** @class */ (function (_super) {
        __extends(DimensionLineResizingUndoableEdit, _super);
        function DimensionLineResizingUndoableEdit(controller, preferences, oldX, oldY, dimensionLine, newX, newY, startPoint, reversed) {
            var _this = _super.call(this, preferences, PlanController, "undoDimensionLineResizeName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.dimensionLine === undefined) {
                _this.dimensionLine = null;
            }
            if (_this.newX === undefined) {
                _this.newX = 0;
            }
            if (_this.newY === undefined) {
                _this.newY = 0;
            }
            if (_this.startPoint === undefined) {
                _this.startPoint = false;
            }
            if (_this.reversed === undefined) {
                _this.reversed = false;
            }
            _this.controller = controller;
            _this.oldX = oldX;
            _this.oldY = oldY;
            _this.dimensionLine = dimensionLine;
            _this.newX = newX;
            _this.newY = newY;
            _this.startPoint = startPoint;
            _this.reversed = reversed;
            return _this;
        }
        /**
         *
         */
        DimensionLineResizingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            if (this.reversed) {
                PlanController.reverseDimensionLine(this.dimensionLine);
                PlanController.moveDimensionLinePoint(this.dimensionLine, this.oldX, this.oldY, !this.startPoint);
            }
            else {
                PlanController.moveDimensionLinePoint(this.dimensionLine, this.oldX, this.oldY, this.startPoint);
            }
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.dimensionLine].slice(0));
        };
        /**
         *
         */
        DimensionLineResizingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            if (this.reversed) {
                PlanController.moveDimensionLinePoint(this.dimensionLine, this.newX, this.newY, !this.startPoint);
                PlanController.reverseDimensionLine(this.dimensionLine);
            }
            else {
                PlanController.moveDimensionLinePoint(this.dimensionLine, this.newX, this.newY, this.startPoint);
            }
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.dimensionLine].slice(0));
        };
        return DimensionLineResizingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.DimensionLineResizingUndoableEdit = DimensionLineResizingUndoableEdit;
    DimensionLineResizingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLineResizingUndoableEdit";
    DimensionLineResizingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for dimension line offset modification.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldOffset
     * @param {DimensionLine} dimensionLine
     * @param {number} newOffset
     * @class
     * @extends LocalizedUndoableEdit
     */
    var DimensionLineOffsetModificationUndoableEdit = /** @class */ (function (_super) {
        __extends(DimensionLineOffsetModificationUndoableEdit, _super);
        function DimensionLineOffsetModificationUndoableEdit(controller, preferences, oldOffset, dimensionLine, newOffset) {
            var _this = _super.call(this, preferences, PlanController, "undoDimensionLineOffsetName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldOffset === undefined) {
                _this.oldOffset = 0;
            }
            if (_this.dimensionLine === undefined) {
                _this.dimensionLine = null;
            }
            if (_this.newOffset === undefined) {
                _this.newOffset = 0;
            }
            _this.controller = controller;
            _this.oldOffset = oldOffset;
            _this.dimensionLine = dimensionLine;
            _this.newOffset = newOffset;
            return _this;
        }
        /**
         *
         */
        DimensionLineOffsetModificationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.dimensionLine.setOffset(this.oldOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.dimensionLine].slice(0));
        };
        /**
         *
         */
        DimensionLineOffsetModificationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.dimensionLine.setOffset(this.newOffset);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.dimensionLine].slice(0));
        };
        return DimensionLineOffsetModificationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.DimensionLineOffsetModificationUndoableEdit = DimensionLineOffsetModificationUndoableEdit;
    DimensionLineOffsetModificationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLineOffsetModificationUndoableEdit";
    DimensionLineOffsetModificationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for polyline resizing.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldX
     * @param {number} oldY
     * @param {Polyline} polyline
     * @param {number} pointIndex
     * @param {number} newX
     * @param {number} newY
     * @class
     * @extends LocalizedUndoableEdit
     */
    var PolylineResizingUndoableEdit = /** @class */ (function (_super) {
        __extends(PolylineResizingUndoableEdit, _super);
        function PolylineResizingUndoableEdit(controller, preferences, oldX, oldY, polyline, pointIndex, newX, newY) {
            var _this = _super.call(this, preferences, PlanController, "undoPolylineResizeName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.polyline === undefined) {
                _this.polyline = null;
            }
            if (_this.pointIndex === undefined) {
                _this.pointIndex = 0;
            }
            if (_this.newX === undefined) {
                _this.newX = 0;
            }
            if (_this.newY === undefined) {
                _this.newY = 0;
            }
            _this.controller = controller;
            _this.oldX = oldX;
            _this.oldY = oldY;
            _this.polyline = polyline;
            _this.pointIndex = pointIndex;
            _this.newX = newX;
            _this.newY = newY;
            return _this;
        }
        /**
         *
         */
        PolylineResizingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.polyline.setPoint(this.oldX, this.oldY, this.pointIndex);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.polyline].slice(0));
        };
        /**
         *
         */
        PolylineResizingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.polyline.setPoint(this.newX, this.newY, this.pointIndex);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.polyline].slice(0));
        };
        return PolylineResizingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.PolylineResizingUndoableEdit = PolylineResizingUndoableEdit;
    PolylineResizingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PolylineResizingUndoableEdit";
    PolylineResizingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for compass rotation.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldNorthDirection
     * @param {Compass} compass
     * @param {number} newNorthDirection
     * @class
     * @extends LocalizedUndoableEdit
     */
    var CompassRotationUndoableEdit = /** @class */ (function (_super) {
        __extends(CompassRotationUndoableEdit, _super);
        function CompassRotationUndoableEdit(controller, preferences, oldNorthDirection, compass, newNorthDirection) {
            var _this = _super.call(this, preferences, PlanController, "undoCompassRotationName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldNorthDirection === undefined) {
                _this.oldNorthDirection = 0;
            }
            if (_this.compass === undefined) {
                _this.compass = null;
            }
            if (_this.newNorthDirection === undefined) {
                _this.newNorthDirection = 0;
            }
            _this.controller = controller;
            _this.compass = compass;
            _this.newNorthDirection = newNorthDirection;
            _this.oldNorthDirection = oldNorthDirection;
            return _this;
        }
        /**
         *
         */
        CompassRotationUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.compass.setNorthDirection(this.oldNorthDirection);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.compass].slice(0));
        };
        /**
         *
         */
        CompassRotationUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.compass.setNorthDirection(this.newNorthDirection);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.compass].slice(0));
        };
        return CompassRotationUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.CompassRotationUndoableEdit = CompassRotationUndoableEdit;
    CompassRotationUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CompassRotationUndoableEdit";
    CompassRotationUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Undoable edit for compass resizing.
     * @param {PlanController} controller
     * @param {UserPreferences} preferences
     * @param {number} oldDiameter
     * @param {Compass} compass
     * @param {number} newDiameter
     * @class
     * @extends LocalizedUndoableEdit
     */
    var CompassResizingUndoableEdit = /** @class */ (function (_super) {
        __extends(CompassResizingUndoableEdit, _super);
        function CompassResizingUndoableEdit(controller, preferences, oldDiameter, compass, newDiameter) {
            var _this = _super.call(this, preferences, PlanController, "undoCompassResizeName") || this;
            if (_this.controller === undefined) {
                _this.controller = null;
            }
            if (_this.oldDiameter === undefined) {
                _this.oldDiameter = 0;
            }
            if (_this.compass === undefined) {
                _this.compass = null;
            }
            if (_this.newDiameter === undefined) {
                _this.newDiameter = 0;
            }
            _this.controller = controller;
            _this.oldDiameter = oldDiameter;
            _this.compass = compass;
            _this.newDiameter = newDiameter;
            return _this;
        }
        /**
         *
         */
        CompassResizingUndoableEdit.prototype.undo = function () {
            _super.prototype.undo.call(this);
            this.compass.setDiameter(this.oldDiameter);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.compass].slice(0));
        };
        /**
         *
         */
        CompassResizingUndoableEdit.prototype.redo = function () {
            _super.prototype.redo.call(this);
            this.compass.setDiameter(this.newDiameter);
            this.controller.selectAndShowItems$java_util_List(/* asList */ [this.compass].slice(0));
        };
        return CompassResizingUndoableEdit;
    }(LocalizedUndoableEdit));
    PlanController.CompassResizingUndoableEdit = CompassResizingUndoableEdit;
    CompassResizingUndoableEdit["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CompassResizingUndoableEdit";
    CompassResizingUndoableEdit["__interfaces"] = ["javax.swing.undo.UndoableEdit"];
    /**
     * Stores the size of a resized piece of furniture.
     * @param {HomePieceOfFurniture} piece
     * @class
     */
    var ResizedPieceOfFurniture = /** @class */ (function () {
        function ResizedPieceOfFurniture(piece) {
            if (this.piece === undefined) {
                this.piece = null;
            }
            if (this.x === undefined) {
                this.x = 0;
            }
            if (this.y === undefined) {
                this.y = 0;
            }
            if (this.width === undefined) {
                this.width = 0;
            }
            if (this.depth === undefined) {
                this.depth = 0;
            }
            if (this.height === undefined) {
                this.height = 0;
            }
            if (this.doorOrWindowBoundToWall === undefined) {
                this.doorOrWindowBoundToWall = false;
            }
            if (this.groupFurnitureX === undefined) {
                this.groupFurnitureX = null;
            }
            if (this.groupFurnitureY === undefined) {
                this.groupFurnitureY = null;
            }
            if (this.groupFurnitureWidth === undefined) {
                this.groupFurnitureWidth = null;
            }
            if (this.groupFurnitureDepth === undefined) {
                this.groupFurnitureDepth = null;
            }
            if (this.groupFurnitureHeight === undefined) {
                this.groupFurnitureHeight = null;
            }
            this.piece = piece;
            this.x = piece.getX();
            this.y = piece.getY();
            this.width = piece.getWidth();
            this.depth = piece.getDepth();
            this.height = piece.getHeight();
            this.doorOrWindowBoundToWall = (piece != null && piece instanceof HomeDoorOrWindow) && piece.isBoundToWall();
            if (piece != null && piece instanceof HomeFurnitureGroup) {
                var groupFurniture = piece.getAllFurniture();
                this.groupFurnitureX = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(/* size */ groupFurniture.length);
                this.groupFurnitureY = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(/* size */ groupFurniture.length);
                this.groupFurnitureWidth = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(/* size */ groupFurniture.length);
                this.groupFurnitureDepth = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(/* size */ groupFurniture.length);
                this.groupFurnitureHeight = (function (s) { var a = []; while (s-- > 0)
                    a.push(0); return a; })(/* size */ groupFurniture.length);
                for (var i = 0; i < /* size */ groupFurniture.length; i++) {
                    {
                        var groupPiece = groupFurniture[i];
                        this.groupFurnitureX[i] = groupPiece.getX();
                        this.groupFurnitureY[i] = groupPiece.getY();
                        this.groupFurnitureWidth[i] = groupPiece.getWidth();
                        this.groupFurnitureDepth[i] = groupPiece.getDepth();
                        this.groupFurnitureHeight[i] = groupPiece.getHeight();
                    }
                    ;
                }
            }
            else {
                this.groupFurnitureX = null;
                this.groupFurnitureY = null;
                this.groupFurnitureWidth = null;
                this.groupFurnitureDepth = null;
                this.groupFurnitureHeight = null;
            }
        }
        ResizedPieceOfFurniture.prototype.getPieceOfFurniture = function () {
            return this.piece;
        };
        ResizedPieceOfFurniture.prototype.getWidth = function () {
            return this.width;
        };
        ResizedPieceOfFurniture.prototype.getDepth = function () {
            return this.depth;
        };
        ResizedPieceOfFurniture.prototype.getHeight = function () {
            return this.height;
        };
        ResizedPieceOfFurniture.prototype.isDoorOrWindowBoundToWall = function () {
            return this.doorOrWindowBoundToWall;
        };
        ResizedPieceOfFurniture.prototype.reset = function () {
            this.piece.setX(this.x);
            this.piece.setY(this.y);
            ResizedPieceOfFurniture.setPieceOfFurnitureSize(this.piece, this.width, this.depth, this.height);
            if (this.piece != null && this.piece instanceof HomeDoorOrWindow) {
                this.piece.setBoundToWall(this.doorOrWindowBoundToWall);
            }
            if (this.piece != null && this.piece instanceof HomeFurnitureGroup) {
                var groupFurniture = this.piece.getAllFurniture();
                for (var i = 0; i < /* size */ groupFurniture.length; i++) {
                    {
                        var groupPiece = groupFurniture[i];
                        if (this.piece.isResizable()) {
                            groupPiece.setX(this.groupFurnitureX[i]);
                            groupPiece.setY(this.groupFurnitureY[i]);
                            ResizedPieceOfFurniture.setPieceOfFurnitureSize(groupPiece, this.groupFurnitureWidth[i], this.groupFurnitureDepth[i], this.groupFurnitureHeight[i]);
                        }
                    }
                    ;
                }
            }
        };
        ResizedPieceOfFurniture.setPieceOfFurnitureSize = function (piece, width, depth, height) {
            if (piece.isHorizontallyRotated()) {
                var scale = width / piece.getWidth();
                piece.scale(scale);
                piece.setWidthInPlan(scale * piece.getWidthInPlan());
                piece.setDepthInPlan(scale * piece.getDepthInPlan());
                piece.setHeightInPlan(scale * piece.getHeightInPlan());
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    {
                        var array = piece.getAllFurniture();
                        for (var index = 0; index < array.length; index++) {
                            var childPiece = array[index];
                            {
                                childPiece.setWidthInPlan(scale * childPiece.getWidthInPlan());
                                childPiece.setDepthInPlan(scale * childPiece.getDepthInPlan());
                                childPiece.setHeightInPlan(scale * childPiece.getHeightInPlan());
                            }
                        }
                    }
                }
            }
            else {
                var widthInPlan = piece.getWidthInPlan() * width / piece.getWidth();
                piece.setWidth(width);
                piece.setWidthInPlan(widthInPlan);
                var depthInPlan = piece.getDepthInPlan() * depth / piece.getDepth();
                piece.setDepth(depth);
                piece.setDepthInPlan(depthInPlan);
                var heightInPlan = piece.getHeightInPlan() * height / piece.getHeight();
                piece.setHeight(height);
                piece.setHeightInPlan(heightInPlan);
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    {
                        var array = piece.getAllFurniture();
                        for (var index = 0; index < array.length; index++) {
                            var childPiece = array[index];
                            {
                                childPiece.setWidthInPlan(childPiece.getWidth());
                                childPiece.setDepthInPlan(childPiece.getDepth());
                                childPiece.setHeightInPlan(childPiece.getHeight());
                            }
                        }
                    }
                }
            }
        };
        return ResizedPieceOfFurniture;
    }());
    PlanController.ResizedPieceOfFurniture = ResizedPieceOfFurniture;
    ResizedPieceOfFurniture["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ResizedPieceOfFurniture";
    /**
     * Stores the walls at start and at end of a given wall. This data are useful
     * to add a collection of walls after an undo/redo delete operation.
     * @param {Wall} wall
     * @class
     */
    var JoinedWall = /** @class */ (function () {
        function JoinedWall(wall) {
            if (this.wall === undefined) {
                this.wall = null;
            }
            if (this.level === undefined) {
                this.level = null;
            }
            if (this.xStart === undefined) {
                this.xStart = 0;
            }
            if (this.yStart === undefined) {
                this.yStart = 0;
            }
            if (this.xEnd === undefined) {
                this.xEnd = 0;
            }
            if (this.yEnd === undefined) {
                this.yEnd = 0;
            }
            if (this.wallAtStart === undefined) {
                this.wallAtStart = null;
            }
            if (this.wallAtEnd === undefined) {
                this.wallAtEnd = null;
            }
            if (this.joinedAtEndOfWallAtStart === undefined) {
                this.joinedAtEndOfWallAtStart = false;
            }
            if (this.joinedAtStartOfWallAtEnd === undefined) {
                this.joinedAtStartOfWallAtEnd = false;
            }
            this.wall = wall;
            this.level = wall.getLevel();
            this.xStart = wall.getXStart();
            this.xEnd = wall.getXEnd();
            this.yStart = wall.getYStart();
            this.yEnd = wall.getYEnd();
            this.wallAtStart = wall.getWallAtStart();
            this.joinedAtEndOfWallAtStart = this.wallAtStart != null && this.wallAtStart.getWallAtEnd() === wall;
            this.wallAtEnd = wall.getWallAtEnd();
            this.joinedAtStartOfWallAtEnd = this.wallAtEnd != null && this.wallAtEnd.getWallAtStart() === wall;
        }
        JoinedWall.prototype.getWall = function () {
            return this.wall;
        };
        JoinedWall.prototype.getLevel = function () {
            return this.level;
        };
        JoinedWall.prototype.getXStart = function () {
            return this.xStart;
        };
        JoinedWall.prototype.getYStart = function () {
            return this.yStart;
        };
        JoinedWall.prototype.getXEnd = function () {
            return this.xEnd;
        };
        JoinedWall.prototype.getYEnd = function () {
            return this.yEnd;
        };
        JoinedWall.prototype.getWallAtEnd = function () {
            return this.wallAtEnd;
        };
        JoinedWall.prototype.getWallAtStart = function () {
            return this.wallAtStart;
        };
        JoinedWall.prototype.isJoinedAtEndOfWallAtStart = function () {
            return this.joinedAtEndOfWallAtStart;
        };
        JoinedWall.prototype.isJoinedAtStartOfWallAtEnd = function () {
            return this.joinedAtStartOfWallAtEnd;
        };
        /**
         * A helper method that builds an array of <code>JoinedWall</code> objects
         * for a given list of walls.
         * @param {Wall[]} walls
         * @return {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]}
         */
        JoinedWall.getJoinedWalls = function (walls) {
            var joinedWalls = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(/* size */ walls.length);
            for (var i = 0; i < joinedWalls.length; i++) {
                {
                    joinedWalls[i] = new PlanController.JoinedWall(/* get */ walls[i]);
                }
                ;
            }
            return joinedWalls;
        };
        /**
         * A helper method that builds a list of <code>Wall</code> objects
         * for a given array of <code>JoinedWall</code> objects.
         * @param {com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall[]} joinedWalls
         * @return {Wall[]}
         */
        JoinedWall.getWalls = function (joinedWalls) {
            var walls = (function (s) { var a = []; while (s-- > 0)
                a.push(null); return a; })(joinedWalls.length);
            for (var i = 0; i < joinedWalls.length; i++) {
                {
                    walls[i] = joinedWalls[i].getWall();
                }
                ;
            }
            return /* asList */ walls.slice(0);
        };
        return JoinedWall;
    }());
    PlanController.JoinedWall = JoinedWall;
    JoinedWall["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.JoinedWall";
    /**
     * A point which coordinates are computed with an angle magnetism algorithm.
     * @param {number} xStart
     * @param {number} yStart
     * @param {number} x
     * @param {number} y
     * @param {LengthUnit} unit
     * @param {number} maxLengthDelta
     * @param {number} circleSteps
     * @class
     */
    var PointWithAngleMagnetism = /** @class */ (function () {
        function PointWithAngleMagnetism(xStart, yStart, x, y, unit, maxLengthDelta, circleSteps) {
            if (((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((unit != null) || unit === null) && ((typeof maxLengthDelta === 'number') || maxLengthDelta === null) && ((typeof circleSteps === 'number') || circleSteps === null)) {
                var __args = arguments;
                if (this.x === undefined) {
                    this.x = 0;
                }
                if (this.y === undefined) {
                    this.y = 0;
                }
                if (this.angle === undefined) {
                    this.angle = 0;
                }
                this.x = x;
                this.y = y;
                if (xStart === x) {
                    var magnetizedLength = unit.getMagnetizedLength(Math.abs(yStart - y), maxLengthDelta);
                    this.y = yStart + (magnetizedLength * /* signum */ (function (f) { if (f > 0) {
                        return 1;
                    }
                    else if (f < 0) {
                        return -1;
                    }
                    else {
                        return 0;
                    } })(y - yStart));
                }
                else if (yStart === y) {
                    var magnetizedLength = unit.getMagnetizedLength(Math.abs(xStart - x), maxLengthDelta);
                    this.x = xStart + (magnetizedLength * /* signum */ (function (f) { if (f > 0) {
                        return 1;
                    }
                    else if (f < 0) {
                        return -1;
                    }
                    else {
                        return 0;
                    } })(x - xStart));
                }
                else {
                    var angleStep = 2 * Math.PI / circleSteps;
                    var angle = Math.atan2(yStart - y, x - xStart);
                    var previousStepAngle = Math.floor(angle / angleStep) * angleStep;
                    var angle1 = void 0;
                    var tanAngle1 = void 0;
                    var angle2 = void 0;
                    var tanAngle2 = void 0;
                    if (Math.tan(angle) > 0) {
                        angle1 = previousStepAngle;
                        tanAngle1 = Math.tan(previousStepAngle);
                        angle2 = previousStepAngle + angleStep;
                        tanAngle2 = Math.tan(previousStepAngle + angleStep);
                    }
                    else {
                        angle1 = previousStepAngle + angleStep;
                        tanAngle1 = Math.tan(previousStepAngle + angleStep);
                        angle2 = previousStepAngle;
                        tanAngle2 = Math.tan(previousStepAngle);
                    }
                    var firstQuarterTanAngle1 = Math.abs(tanAngle1);
                    var firstQuarterTanAngle2 = Math.abs(tanAngle2);
                    var xEnd1 = Math.abs(xStart - x);
                    var yEnd2 = Math.abs(yStart - y);
                    var xEnd2 = 0;
                    if (firstQuarterTanAngle2 > 1.0E-10) {
                        xEnd2 = (yEnd2 / firstQuarterTanAngle2);
                    }
                    var yEnd1 = 0;
                    if (firstQuarterTanAngle1 < 1.0E10) {
                        yEnd1 = (xEnd1 * firstQuarterTanAngle1);
                    }
                    var magnetismAngle = void 0;
                    if (Math.abs(xEnd2 - xEnd1) < Math.abs(yEnd1 - yEnd2)) {
                        magnetismAngle = angle2;
                        this.x = xStart + ((yStart - y) / tanAngle2);
                    }
                    else {
                        magnetismAngle = angle1;
                        this.y = yStart - ((x - xStart) * tanAngle1);
                    }
                    var magnetizedLength = unit.getMagnetizedLength(java.awt.geom.Point2D.distance(xStart, yStart, this.x, this.y), maxLengthDelta);
                    this.x = xStart + (magnetizedLength * Math.cos(magnetismAngle));
                    this.y = yStart - (magnetizedLength * Math.sin(magnetismAngle));
                    this.angle = magnetismAngle;
                }
            }
            else if (((typeof xStart === 'number') || xStart === null) && ((typeof yStart === 'number') || yStart === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((unit != null) || unit === null) && ((typeof maxLengthDelta === 'number') || maxLengthDelta === null) && circleSteps === undefined) {
                var __args = arguments;
                {
                    var __args_88 = arguments;
                    var circleSteps_1 = PointWithAngleMagnetism.CIRCLE_STEPS_15_DEG;
                    if (this.x === undefined) {
                        this.x = 0;
                    }
                    if (this.y === undefined) {
                        this.y = 0;
                    }
                    if (this.angle === undefined) {
                        this.angle = 0;
                    }
                    this.x = x;
                    this.y = y;
                    if (xStart === x) {
                        var magnetizedLength = unit.getMagnetizedLength(Math.abs(yStart - y), maxLengthDelta);
                        this.y = yStart + (magnetizedLength * /* signum */ (function (f) { if (f > 0) {
                            return 1;
                        }
                        else if (f < 0) {
                            return -1;
                        }
                        else {
                            return 0;
                        } })(y - yStart));
                    }
                    else if (yStart === y) {
                        var magnetizedLength = unit.getMagnetizedLength(Math.abs(xStart - x), maxLengthDelta);
                        this.x = xStart + (magnetizedLength * /* signum */ (function (f) { if (f > 0) {
                            return 1;
                        }
                        else if (f < 0) {
                            return -1;
                        }
                        else {
                            return 0;
                        } })(x - xStart));
                    }
                    else {
                        var angleStep = 2 * Math.PI / circleSteps_1;
                        var angle = Math.atan2(yStart - y, x - xStart);
                        var previousStepAngle = Math.floor(angle / angleStep) * angleStep;
                        var angle1 = void 0;
                        var tanAngle1 = void 0;
                        var angle2 = void 0;
                        var tanAngle2 = void 0;
                        if (Math.tan(angle) > 0) {
                            angle1 = previousStepAngle;
                            tanAngle1 = Math.tan(previousStepAngle);
                            angle2 = previousStepAngle + angleStep;
                            tanAngle2 = Math.tan(previousStepAngle + angleStep);
                        }
                        else {
                            angle1 = previousStepAngle + angleStep;
                            tanAngle1 = Math.tan(previousStepAngle + angleStep);
                            angle2 = previousStepAngle;
                            tanAngle2 = Math.tan(previousStepAngle);
                        }
                        var firstQuarterTanAngle1 = Math.abs(tanAngle1);
                        var firstQuarterTanAngle2 = Math.abs(tanAngle2);
                        var xEnd1 = Math.abs(xStart - x);
                        var yEnd2 = Math.abs(yStart - y);
                        var xEnd2 = 0;
                        if (firstQuarterTanAngle2 > 1.0E-10) {
                            xEnd2 = (yEnd2 / firstQuarterTanAngle2);
                        }
                        var yEnd1 = 0;
                        if (firstQuarterTanAngle1 < 1.0E10) {
                            yEnd1 = (xEnd1 * firstQuarterTanAngle1);
                        }
                        var magnetismAngle = void 0;
                        if (Math.abs(xEnd2 - xEnd1) < Math.abs(yEnd1 - yEnd2)) {
                            magnetismAngle = angle2;
                            this.x = xStart + ((yStart - y) / tanAngle2);
                        }
                        else {
                            magnetismAngle = angle1;
                            this.y = yStart - ((x - xStart) * tanAngle1);
                        }
                        var magnetizedLength = unit.getMagnetizedLength(java.awt.geom.Point2D.distance(xStart, yStart, this.x, this.y), maxLengthDelta);
                        this.x = xStart + (magnetizedLength * Math.cos(magnetismAngle));
                        this.y = yStart - (magnetizedLength * Math.sin(magnetismAngle));
                        this.angle = magnetismAngle;
                    }
                }
                if (this.x === undefined) {
                    this.x = 0;
                }
                if (this.y === undefined) {
                    this.y = 0;
                }
                if (this.angle === undefined) {
                    this.angle = 0;
                }
            }
            else
                throw new Error('invalid overload');
        }
        /**
         * Returns the abscissa of end point.
         * @return {number}
         */
        PointWithAngleMagnetism.prototype.getX = function () {
            return this.x;
        };
        /**
         * Sets the abscissa of end point.
         * @param {number} x
         */
        PointWithAngleMagnetism.prototype.setX = function (x) {
            this.x = x;
        };
        /**
         * Returns the ordinate of end point.
         * @return {number}
         */
        PointWithAngleMagnetism.prototype.getY = function () {
            return this.y;
        };
        /**
         * Sets the ordinate of end point.
         * @param {number} y
         */
        PointWithAngleMagnetism.prototype.setY = function (y) {
            this.y = y;
        };
        PointWithAngleMagnetism.prototype.getAngle = function () {
            return this.angle;
        };
        PointWithAngleMagnetism.CIRCLE_STEPS_15_DEG = 24;
        return PointWithAngleMagnetism;
    }());
    PlanController.PointWithAngleMagnetism = PointWithAngleMagnetism;
    PointWithAngleMagnetism["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PointWithAngleMagnetism";
    /**
     * A point which coordinates are equal to the closest point of a wall or a room.
     * @param {Room} editedRoom
     * @param {number} editedPointIndex
     * @param {number} x
     * @param {number} y
     * @class
     */
    var PointMagnetizedToClosestWallOrRoomPoint = /** @class */ (function () {
        function PointMagnetizedToClosestWallOrRoomPoint(__parent, editedRoom, editedPointIndex, x, y) {
            if (((editedRoom != null && editedRoom instanceof Room) || editedRoom === null) && ((typeof editedPointIndex === 'number') || editedPointIndex === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null)) {
                var __args = Array.prototype.slice.call(arguments, [1]);
                if (this.x === undefined) {
                    this.x = 0;
                }
                if (this.y === undefined) {
                    this.y = 0;
                }
                if (this.magnetized === undefined) {
                    this.magnetized = false;
                }
                var margin = __parent.getSelectionMargin();
                var smallestDistance = 1.7976931348623157E308;
                {
                    var array = __parent.getRoomPathsFromWalls();
                    for (var index = 0; index < array.length; index++) {
                        var roomPath = array[index];
                        {
                            smallestDistance = this.updateMagnetizedPoint(-1, x, y, smallestDistance, __parent.getPathPoints(roomPath, false));
                        }
                    }
                }
                {
                    var array = __parent.getDetectableRoomsAtSelectedLevel();
                    for (var index = 0; index < array.length; index++) {
                        var room = array[index];
                        {
                            smallestDistance = this.updateMagnetizedPoint(room === editedRoom ? editedPointIndex : -1, x, y, smallestDistance, room.getPoints());
                        }
                    }
                }
                this.magnetized = smallestDistance <= margin * margin;
                if (!this.magnetized) {
                    this.x = x;
                    this.y = y;
                }
            }
            else if (((typeof editedRoom === 'number') || editedRoom === null) && ((typeof editedPointIndex === 'number') || editedPointIndex === null) && x === undefined && y === undefined) {
                var __args = Array.prototype.slice.call(arguments, [1]);
                var x_5 = __args[0];
                var y_5 = __args[1];
                {
                    var __args_89 = Array.prototype.slice.call(arguments, [1]);
                    var editedRoom_1 = null;
                    var editedPointIndex_1 = -1;
                    if (this.x === undefined) {
                        this.x = 0;
                    }
                    if (this.y === undefined) {
                        this.y = 0;
                    }
                    if (this.magnetized === undefined) {
                        this.magnetized = false;
                    }
                    var margin = __parent.getSelectionMargin();
                    var smallestDistance = 1.7976931348623157E308;
                    {
                        var array = __parent.getRoomPathsFromWalls();
                        for (var index = 0; index < array.length; index++) {
                            var roomPath = array[index];
                            {
                                smallestDistance = this.updateMagnetizedPoint(-1, x_5, y_5, smallestDistance, __parent.getPathPoints(roomPath, false));
                            }
                        }
                    }
                    {
                        var array = __parent.getDetectableRoomsAtSelectedLevel();
                        for (var index = 0; index < array.length; index++) {
                            var room = array[index];
                            {
                                smallestDistance = this.updateMagnetizedPoint(room === editedRoom_1 ? editedPointIndex_1 : -1, x_5, y_5, smallestDistance, room.getPoints());
                            }
                        }
                    }
                    this.magnetized = smallestDistance <= margin * margin;
                    if (!this.magnetized) {
                        this.x = x_5;
                        this.y = y_5;
                    }
                }
                if (this.x === undefined) {
                    this.x = 0;
                }
                if (this.y === undefined) {
                    this.y = 0;
                }
                if (this.magnetized === undefined) {
                    this.magnetized = false;
                }
            }
            else
                throw new Error('invalid overload');
        }
        PointMagnetizedToClosestWallOrRoomPoint.prototype.updateMagnetizedPoint = function (editedPointIndex, x, y, smallestDistance, points) {
            for (var i = 0; i < points.length; i++) {
                {
                    if (i !== editedPointIndex) {
                        var distance = java.awt.geom.Point2D.distanceSq(points[i][0], points[i][1], x, y);
                        if (distance < smallestDistance) {
                            this.x = points[i][0];
                            this.y = points[i][1];
                            smallestDistance = distance;
                        }
                    }
                }
                ;
            }
            return smallestDistance;
        };
        /**
         * Returns the abscissa of end point computed with magnetism.
         * @return {number}
         */
        PointMagnetizedToClosestWallOrRoomPoint.prototype.getX = function () {
            return this.x;
        };
        /**
         * Returns the ordinate of end point computed with magnetism.
         * @return {number}
         */
        PointMagnetizedToClosestWallOrRoomPoint.prototype.getY = function () {
            return this.y;
        };
        PointMagnetizedToClosestWallOrRoomPoint.prototype.isMagnetized = function () {
            return this.magnetized;
        };
        return PointMagnetizedToClosestWallOrRoomPoint;
    }());
    PlanController.PointMagnetizedToClosestWallOrRoomPoint = PointMagnetizedToClosestWallOrRoomPoint;
    PointMagnetizedToClosestWallOrRoomPoint["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PointMagnetizedToClosestWallOrRoomPoint";
    /**
     * Controller state classes super class.
     * @class
     */
    var ControllerState = /** @class */ (function () {
        function ControllerState() {
        }
        ControllerState.prototype.enter = function () {
        };
        ControllerState.prototype.exit = function () {
        };
        ControllerState.prototype.setMode = function (mode) {
        };
        ControllerState.prototype.isModificationState = function () {
            return false;
        };
        ControllerState.prototype.isBasePlanModificationState = function () {
            return false;
        };
        ControllerState.prototype.deleteSelection = function () {
        };
        ControllerState.prototype.escape = function () {
        };
        ControllerState.prototype.moveSelection = function (dx, dy) {
        };
        ControllerState.prototype.toggleMagnetism = function (magnetismToggled) {
        };
        ControllerState.prototype.setAlignmentActivated = function (alignmentActivated) {
        };
        ControllerState.prototype.setDuplicationActivated = function (duplicationActivated) {
        };
        ControllerState.prototype.setEditionActivated = function (editionActivated) {
        };
        ControllerState.prototype.updateEditableProperty = function (editableField, value) {
        };
        ControllerState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
        };
        ControllerState.prototype.releaseMouse = function (x, y) {
        };
        ControllerState.prototype.moveMouse = function (x, y) {
        };
        ControllerState.prototype.zoom = function (factor) {
        };
        return ControllerState;
    }());
    PlanController.ControllerState = ControllerState;
    ControllerState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ControllerState";
    /**
     * A point with coordinates computed with angle and wall points magnetism.
     * @param {Wall} editedWall
     * @param {number} xWall
     * @param {number} yWall
     * @param {number} x
     * @param {number} y
     * @class
     * @extends PlanController.PointWithAngleMagnetism
     */
    var WallPointWithAngleMagnetism = /** @class */ (function (_super) {
        __extends(WallPointWithAngleMagnetism, _super);
        function WallPointWithAngleMagnetism(__parent, editedWall, xWall, yWall, x, y) {
            var _this = _super.call(this, xWall, yWall, x, y, __parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), __parent.getView().getPixelLength()) || this;
            _this.__parent = __parent;
            var margin = PlanController.PIXEL_MARGIN / __parent.getScale();
            var deltaXToClosestWall = Infinity;
            var deltaYToClosestWall = Infinity;
            var xClosestWall = 0;
            var yClosestWall = 0;
            {
                var array = __parent.getDetectableWallsAtSelectedLevel();
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        if (wall !== editedWall) {
                            if (Math.abs(_this.getX() - wall.getXStart()) < margin && (editedWall == null || !_this.equalsWallPoint(wall.getXStart(), wall.getYStart(), editedWall))) {
                                if (Math.abs(deltaYToClosestWall) > Math.abs(_this.getY() - wall.getYStart())) {
                                    xClosestWall = wall.getXStart();
                                    deltaYToClosestWall = _this.getY() - yClosestWall;
                                }
                            }
                            else if (Math.abs(_this.getX() - wall.getXEnd()) < margin && (editedWall == null || !_this.equalsWallPoint(wall.getXEnd(), wall.getYEnd(), editedWall))) {
                                if (Math.abs(deltaYToClosestWall) > Math.abs(_this.getY() - wall.getYEnd())) {
                                    xClosestWall = wall.getXEnd();
                                    deltaYToClosestWall = _this.getY() - yClosestWall;
                                }
                            }
                            if (Math.abs(_this.getY() - wall.getYStart()) < margin && (editedWall == null || !_this.equalsWallPoint(wall.getXStart(), wall.getYStart(), editedWall))) {
                                if (Math.abs(deltaXToClosestWall) > Math.abs(_this.getX() - wall.getXStart())) {
                                    yClosestWall = wall.getYStart();
                                    deltaXToClosestWall = _this.getX() - xClosestWall;
                                }
                            }
                            else if (Math.abs(_this.getY() - wall.getYEnd()) < margin && (editedWall == null || !_this.equalsWallPoint(wall.getXEnd(), wall.getYEnd(), editedWall))) {
                                if (Math.abs(deltaXToClosestWall) > Math.abs(_this.getX() - wall.getXEnd())) {
                                    yClosestWall = wall.getYEnd();
                                    deltaXToClosestWall = _this.getX() - xClosestWall;
                                }
                            }
                        }
                    }
                }
            }
            if (editedWall != null) {
                var alpha = -Math.tan(_this.getAngle());
                var beta = Math.abs(alpha) < 1.0E10 ? yWall - alpha * xWall : Infinity;
                if (deltaXToClosestWall !== Infinity && Math.abs(alpha) > 1.0E-10) {
                    var newX = ((yClosestWall - beta) / alpha);
                    if (java.awt.geom.Point2D.distanceSq(_this.getX(), _this.getY(), newX, yClosestWall) <= margin * margin) {
                        _this.setX(newX);
                        _this.setY(yClosestWall);
                        return _this;
                    }
                }
                if (deltaYToClosestWall !== Infinity && beta !== Infinity) {
                    var newY = (alpha * xClosestWall + beta);
                    if (java.awt.geom.Point2D.distanceSq(_this.getX(), _this.getY(), xClosestWall, newY) <= margin * margin) {
                        _this.setX(xClosestWall);
                        _this.setY(newY);
                    }
                }
            }
            else {
                if (deltaXToClosestWall !== Infinity) {
                    _this.setY(yClosestWall);
                }
                if (deltaYToClosestWall !== Infinity) {
                    _this.setX(xClosestWall);
                }
            }
            return _this;
        }
        /**
         * Returns <code>true</code> if <code>wall</code> start or end point
         * equals the point (<code>x</code>, <code>y</code>).
         * @param {number} x
         * @param {number} y
         * @param {Wall} wall
         * @return {boolean}
         * @private
         */
        WallPointWithAngleMagnetism.prototype.equalsWallPoint = function (x, y, wall) {
            return x === wall.getXStart() && y === wall.getYStart() || x === wall.getXEnd() && y === wall.getYEnd();
        };
        return WallPointWithAngleMagnetism;
    }(PlanController.PointWithAngleMagnetism));
    PlanController.WallPointWithAngleMagnetism = WallPointWithAngleMagnetism;
    WallPointWithAngleMagnetism["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallPointWithAngleMagnetism";
    /**
     * A point with coordinates computed with angle and room points magnetism.
     * @param {Room} editedRoom
     * @param {number} editedPointIndex
     * @param {number} xRoom
     * @param {number} yRoom
     * @param {number} x
     * @param {number} y
     * @class
     * @extends PlanController.PointWithAngleMagnetism
     */
    var RoomPointWithAngleMagnetism = /** @class */ (function (_super) {
        __extends(RoomPointWithAngleMagnetism, _super);
        function RoomPointWithAngleMagnetism(__parent, editedRoom, editedPointIndex, xRoom, yRoom, x, y) {
            var _this = _super.call(this, xRoom, yRoom, x, y, __parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), __parent.getView().getPixelLength()) || this;
            _this.__parent = __parent;
            var planScale = __parent.getScale();
            var margin = PlanController.PIXEL_MARGIN / planScale;
            var deltaXToClosestObject = Infinity;
            var deltaYToClosestObject = Infinity;
            var xClosestObject = 0;
            var yClosestObject = 0;
            {
                var array = __parent.getDetectableRoomsAtSelectedLevel();
                for (var index = 0; index < array.length; index++) {
                    var room = array[index];
                    {
                        var roomPoints = room.getPoints();
                        for (var i = 0; i < roomPoints.length; i++) {
                            {
                                if (editedPointIndex === -1 || (i !== editedPointIndex && roomPoints.length > 2)) {
                                    if (Math.abs(_this.getX() - roomPoints[i][0]) < margin && Math.abs(deltaYToClosestObject) > Math.abs(_this.getY() - roomPoints[i][1])) {
                                        xClosestObject = roomPoints[i][0];
                                        deltaYToClosestObject = _this.getY() - roomPoints[i][1];
                                    }
                                    if (Math.abs(_this.getY() - roomPoints[i][1]) < margin && Math.abs(deltaXToClosestObject) > Math.abs(_this.getX() - roomPoints[i][0])) {
                                        yClosestObject = roomPoints[i][1];
                                        deltaXToClosestObject = _this.getX() - roomPoints[i][0];
                                    }
                                }
                            }
                            ;
                        }
                    }
                }
            }
            {
                var array = __parent.getDetectableWallsAtSelectedLevel();
                for (var index = 0; index < array.length; index++) {
                    var wall = array[index];
                    {
                        var wallPoints = wall.getPoints$();
                        wallPoints = [wallPoints[0], wallPoints[(wallPoints.length / 2 | 0) - 1], wallPoints[(wallPoints.length / 2 | 0)], wallPoints[wallPoints.length - 1]];
                        for (var i = 0; i < wallPoints.length; i++) {
                            {
                                if (Math.abs(_this.getX() - wallPoints[i][0]) < margin && Math.abs(deltaYToClosestObject) > Math.abs(_this.getY() - wallPoints[i][1])) {
                                    xClosestObject = wallPoints[i][0];
                                    deltaYToClosestObject = _this.getY() - wallPoints[i][1];
                                }
                                if (Math.abs(_this.getY() - wallPoints[i][1]) < margin && Math.abs(deltaXToClosestObject) > Math.abs(_this.getX() - wallPoints[i][0])) {
                                    yClosestObject = wallPoints[i][1];
                                    deltaXToClosestObject = _this.getX() - wallPoints[i][0];
                                }
                            }
                            ;
                        }
                    }
                }
            }
            if (editedRoom != null) {
                var alpha = -Math.tan(_this.getAngle());
                var beta = Math.abs(alpha) < 1.0E10 ? yRoom - alpha * xRoom : Infinity;
                if (deltaXToClosestObject !== Infinity && Math.abs(alpha) > 1.0E-10) {
                    var newX = ((yClosestObject - beta) / alpha);
                    if (java.awt.geom.Point2D.distanceSq(_this.getX(), _this.getY(), newX, yClosestObject) <= margin * margin) {
                        _this.setX(newX);
                        _this.setY(yClosestObject);
                        return _this;
                    }
                }
                if (deltaYToClosestObject !== Infinity && beta !== Infinity) {
                    var newY = (alpha * xClosestObject + beta);
                    if (java.awt.geom.Point2D.distanceSq(_this.getX(), _this.getY(), xClosestObject, newY) <= margin * margin) {
                        _this.setX(xClosestObject);
                        _this.setY(newY);
                    }
                }
            }
            else {
                if (deltaXToClosestObject !== Infinity) {
                    _this.setY(yClosestObject);
                }
                if (deltaYToClosestObject !== Infinity) {
                    _this.setX(xClosestObject);
                }
            }
            return _this;
        }
        return RoomPointWithAngleMagnetism;
    }(PlanController.PointWithAngleMagnetism));
    PlanController.RoomPointWithAngleMagnetism = RoomPointWithAngleMagnetism;
    RoomPointWithAngleMagnetism["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomPointWithAngleMagnetism";
    /**
     * A decorator on controller state, useful to change the behavior of an existing state.
     * @param {PlanController.ControllerState} state
     * @class
     * @extends PlanController.ControllerState
     */
    var ControllerStateDecorator = /** @class */ (function (_super) {
        __extends(ControllerStateDecorator, _super);
        function ControllerStateDecorator(state) {
            var _this = _super.call(this) || this;
            if (_this.state === undefined) {
                _this.state = null;
            }
            _this.state = state;
            return _this;
        }
        /**
         *
         */
        ControllerStateDecorator.prototype.enter = function () {
            this.state.enter();
        };
        /**
         *
         */
        ControllerStateDecorator.prototype.exit = function () {
            this.state.exit();
        };
        /**
         *
         * @return {PlanController.Mode}
         */
        ControllerStateDecorator.prototype.getMode = function () {
            return this.state.getMode();
        };
        /**
         *
         * @param {PlanController.Mode} mode
         */
        ControllerStateDecorator.prototype.setMode = function (mode) {
            this.state.setMode(mode);
        };
        /**
         *
         * @return {boolean}
         */
        ControllerStateDecorator.prototype.isModificationState = function () {
            return this.state.isModificationState();
        };
        /**
         *
         * @return {boolean}
         */
        ControllerStateDecorator.prototype.isBasePlanModificationState = function () {
            return this.state.isBasePlanModificationState();
        };
        /**
         *
         */
        ControllerStateDecorator.prototype.deleteSelection = function () {
            this.state.deleteSelection();
        };
        /**
         *
         */
        ControllerStateDecorator.prototype.escape = function () {
            this.state.escape();
        };
        /**
         *
         * @param {number} dx
         * @param {number} dy
         */
        ControllerStateDecorator.prototype.moveSelection = function (dx, dy) {
            this.state.moveSelection(dx, dy);
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        ControllerStateDecorator.prototype.toggleMagnetism = function (magnetismToggled) {
            this.state.toggleMagnetism(magnetismToggled);
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        ControllerStateDecorator.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.state.setAlignmentActivated(alignmentActivated);
        };
        /**
         *
         * @param {boolean} duplicationActivated
         */
        ControllerStateDecorator.prototype.setDuplicationActivated = function (duplicationActivated) {
            this.state.setDuplicationActivated(duplicationActivated);
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        ControllerStateDecorator.prototype.setEditionActivated = function (editionActivated) {
            this.state.setEditionActivated(editionActivated);
        };
        /**
         *
         * @param {string} editableField
         * @param {Object} value
         */
        ControllerStateDecorator.prototype.updateEditableProperty = function (editableField, value) {
            this.state.updateEditableProperty(editableField, value);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        ControllerStateDecorator.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            this.state.pressMouse(x, y, clickCount, shiftDown, duplicationActivated);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        ControllerStateDecorator.prototype.releaseMouse = function (x, y) {
            this.state.releaseMouse(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        ControllerStateDecorator.prototype.moveMouse = function (x, y) {
            this.state.moveMouse(x, y);
        };
        /**
         *
         * @param {number} factor
         */
        ControllerStateDecorator.prototype.zoom = function (factor) {
            this.state.zoom(factor);
        };
        return ControllerStateDecorator;
    }(PlanController.ControllerState));
    PlanController.ControllerStateDecorator = ControllerStateDecorator;
    ControllerStateDecorator["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.ControllerStateDecorator";
    /**
     * Abstract state able to manage the transition to other modes.
     * @extends PlanController.ControllerState
     * @class
     */
    var AbstractModeChangeState = /** @class */ (function (_super) {
        __extends(AbstractModeChangeState, _super);
        function AbstractModeChangeState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         * @param {PlanController.Mode} mode
         */
        AbstractModeChangeState.prototype.setMode = function (mode) {
            if (mode === PlanController.Mode.SELECTION_$LI$()) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else if (mode === PlanController.Mode.PANNING_$LI$()) {
                this.__parent.setState(this.__parent.getPanningState());
            }
            else if (mode === PlanController.Mode.WALL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getWallCreationState());
            }
            else if (mode === PlanController.Mode.ROOM_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getRoomCreationState());
            }
            else if (mode === PlanController.Mode.POLYLINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getPolylineCreationState());
            }
            else if (mode === PlanController.Mode.DIMENSION_LINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getLabelCreationState());
            }
        };
        /**
         *
         */
        AbstractModeChangeState.prototype.deleteSelection = function () {
            this.__parent.deleteItems(this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems());
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {number} dx
         * @param {number} dy
         */
        AbstractModeChangeState.prototype.moveSelection = function (dx, dy) {
            this.__parent.moveAndShowSelectedItems(dx, dy);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {number} factor
         */
        AbstractModeChangeState.prototype.zoom = function (factor) {
            this.__parent.setScale(this.__parent.getScale() * factor);
        };
        return AbstractModeChangeState;
    }(PlanController.ControllerState));
    PlanController.AbstractModeChangeState = AbstractModeChangeState;
    AbstractModeChangeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.AbstractModeChangeState";
    /**
     * Move selection state. This state manages the move of current selected items
     * with mouse and the selection of one item, if mouse isn't moved while button
     * is depressed. If duplication is activated during the move of the mouse,
     * moved items are duplicated first.
     * @extends PlanController.ControllerState
     * @class
     */
    var SelectionMoveState = /** @class */ (function (_super) {
        __extends(SelectionMoveState, _super);
        function SelectionMoveState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = 0;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = 0;
            }
            if (_this.mouseMoved === undefined) {
                _this.mouseMoved = false;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.selectionUpdateNeeded === undefined) {
                _this.selectionUpdateNeeded = false;
            }
            if (_this.movedItems === undefined) {
                _this.movedItems = null;
            }
            if (_this.duplicatedItems === undefined) {
                _this.duplicatedItems = null;
            }
            if (_this.movedPieceOfFurniture === undefined) {
                _this.movedPieceOfFurniture = null;
            }
            if (_this.angleMovedPieceOfFurniture === undefined) {
                _this.angleMovedPieceOfFurniture = 0;
            }
            if (_this.depthMovedPieceOfFurniture === undefined) {
                _this.depthMovedPieceOfFurniture = 0;
            }
            if (_this.elevationMovedPieceOfFurniture === undefined) {
                _this.elevationMovedPieceOfFurniture = 0;
            }
            if (_this.xMovedPieceOfFurniture === undefined) {
                _this.xMovedPieceOfFurniture = 0;
            }
            if (_this.yMovedPieceOfFurniture === undefined) {
                _this.yMovedPieceOfFurniture = 0;
            }
            if (_this.movedDoorOrWindowBoundToWall === undefined) {
                _this.movedDoorOrWindowBoundToWall = false;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.duplicationActivated === undefined) {
                _this.duplicationActivated = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.basePlanModification === undefined) {
                _this.basePlanModification = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        SelectionMoveState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        SelectionMoveState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        SelectionMoveState.prototype.isBasePlanModificationState = function () {
            return this.basePlanModification;
        };
        /**
         *
         */
        SelectionMoveState.prototype.enter = function () {
            this.xLastMouseMove = this.__parent.getXLastMousePress();
            this.yLastMouseMove = this.__parent.getYLastMousePress();
            this.mouseMoved = false;
            var selectableItemsUnderCursor = this.__parent.getSelectableItemsAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            var selectableItemsAndGroupsFurnitureUnderCursor = (selectableItemsUnderCursor.slice(0));
            var selectionMargin = this.__parent.getSelectionMargin();
            for (var index = 0; index < selectableItemsUnderCursor.length; index++) {
                var item = selectableItemsUnderCursor[index];
                {
                    if (item != null && item instanceof HomeFurnitureGroup) {
                        {
                            var array = item.getAllFurniture();
                            for (var index1 = 0; index1 < array.length; index1++) {
                                var piece = array[index1];
                                {
                                    if (piece.containsPoint(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), selectionMargin)) {
                                        /* add */ (selectableItemsAndGroupsFurnitureUnderCursor.push(piece) > 0);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            this.oldSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            this.selectionUpdateNeeded = /* disjoint */ (function (c1, c2) { for (var i = 0; i < c1.length; i++) {
                if (c2.indexOf(c1[i]) >= 0)
                    return false;
            } return true; })(selectableItemsAndGroupsFurnitureUnderCursor, this.oldSelection);
            if (this.selectionUpdateNeeded && this.__parent.getPointerTypeLastMousePress() !== View.PointerType.TOUCH) {
                this.__parent.selectItem(this.__parent.getSelectableItemAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), false));
            }
            var selectedItems = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            this.movedItems = ([]);
            this.basePlanModification = false;
            for (var index = 0; index < selectedItems.length; index++) {
                var item = selectedItems[index];
                {
                    if (this.__parent.isItemMovable(item)) {
                        /* add */ (this.movedItems.push(item) > 0);
                        if (!this.basePlanModification && this.__parent.isItemPartOfBasePlan(item)) {
                            this.basePlanModification = true;
                        }
                    }
                }
            }
            if ( /* size */this.movedItems.length === 1 && ( /* get */this.movedItems[0] != null && /* get */ this.movedItems[0] instanceof HomePieceOfFurniture)) {
                this.movedPieceOfFurniture = this.movedItems[0];
                this.xMovedPieceOfFurniture = this.movedPieceOfFurniture.getX();
                this.yMovedPieceOfFurniture = this.movedPieceOfFurniture.getY();
                this.angleMovedPieceOfFurniture = this.movedPieceOfFurniture.getAngle();
                this.depthMovedPieceOfFurniture = this.movedPieceOfFurniture.getDepth();
                this.elevationMovedPieceOfFurniture = this.movedPieceOfFurniture.getElevation();
                this.movedDoorOrWindowBoundToWall = (this.movedPieceOfFurniture != null && this.movedPieceOfFurniture instanceof HomeDoorOrWindow) && this.movedPieceOfFurniture.isBoundToWall();
            }
            this.duplicatedItems = null;
            this.duplicationActivated = this.__parent.wasDuplicationActivatedLastMousePress() && !this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            if (!(this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH && this.selectionUpdateNeeded)) {
                this.__parent.getView().setCursor(PlanView.CursorType.MOVE);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        SelectionMoveState.prototype.moveMouse = function (x, y) {
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH && this.selectionUpdateNeeded) {
                this.__parent.setState(new SelectionMoveState.SelectionMoveState$0(this, this.__parent.getPanningState()));
            }
            else {
                if (!this.mouseMoved) {
                    this.toggleDuplication(this.duplicationActivated);
                }
                if (this.alignmentActivated) {
                    var alignedPoint = new PlanController.PointWithAngleMagnetism(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), this.__parent.getView().getPixelLength(), 4);
                    x = alignedPoint.getX();
                    y = alignedPoint.getY();
                }
                if (this.movedPieceOfFurniture != null) {
                    this.movedPieceOfFurniture.setX(this.xMovedPieceOfFurniture);
                    this.movedPieceOfFurniture.setY(this.yMovedPieceOfFurniture);
                    this.movedPieceOfFurniture.setAngle(this.angleMovedPieceOfFurniture);
                    if ((this.movedPieceOfFurniture != null && this.movedPieceOfFurniture instanceof HomeDoorOrWindow) && this.movedPieceOfFurniture.isResizable() && this.__parent.isItemResizable(this.movedPieceOfFurniture)) {
                        this.movedPieceOfFurniture.setDepth(this.depthMovedPieceOfFurniture);
                    }
                    this.movedPieceOfFurniture.setElevation(this.elevationMovedPieceOfFurniture);
                    this.movedPieceOfFurniture.move(x - this.__parent.getXLastMousePress(), y - this.__parent.getYLastMousePress());
                    if (this.magnetismEnabled && !this.alignmentActivated) {
                        var elevationAdjusted = this.__parent.adjustPieceOfFurnitureElevation(this.movedPieceOfFurniture) != null;
                        var magnetWall = this.__parent.adjustPieceOfFurnitureOnWallAt(this.movedPieceOfFurniture, x, y, false);
                        if (!elevationAdjusted) {
                            this.__parent.adjustPieceOfFurnitureSideBySideAt(this.movedPieceOfFurniture, false, magnetWall);
                        }
                        if (magnetWall != null) {
                            this.__parent.getView().setDimensionLinesFeedback(this.__parent.getDimensionLinesAlongWall(this.movedPieceOfFurniture, magnetWall));
                        }
                        else {
                            this.__parent.getView().setDimensionLinesFeedback(null);
                        }
                    }
                }
                else {
                    this.__parent.moveItems(this.movedItems, x - this.xLastMouseMove, y - this.yLastMouseMove);
                }
                if (!this.mouseMoved) {
                    this.__parent.selectItems(this.movedItems, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
                }
                this.__parent.getView().makePointVisible(x, y);
                this.xLastMouseMove = x;
                this.yLastMouseMove = y;
                this.mouseMoved = true;
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        SelectionMoveState.prototype.releaseMouse = function (x, y) {
            if (this.mouseMoved) {
                if ( /* size */this.movedItems.length > 0 && !( /* get */this.movedItems[0] != null && /* get */ this.movedItems[0] instanceof Camera)) {
                    if (this.duplicatedItems != null) {
                        this.__parent.postItemsDuplication(this.movedItems, this.duplicatedItems);
                    }
                    else if (this.movedPieceOfFurniture != null) {
                        this.__parent.postPieceOfFurnitureMove(this.movedPieceOfFurniture, this.movedPieceOfFurniture.getX() - this.xMovedPieceOfFurniture, this.movedPieceOfFurniture.getY() - this.yMovedPieceOfFurniture, this.angleMovedPieceOfFurniture, this.depthMovedPieceOfFurniture, this.elevationMovedPieceOfFurniture, this.movedDoorOrWindowBoundToWall);
                    }
                    else {
                        this.__parent.postItemsMove(this.movedItems, this.oldSelection, this.xLastMouseMove - this.__parent.getXLastMousePress(), this.yLastMouseMove - this.__parent.getYLastMousePress());
                    }
                }
            }
            else {
                if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH || !(function (c1, c2) { for (var i = 0; i < c1.length; i++) {
                    if (c2.indexOf(c1[i]) >= 0)
                        return false;
                } return true; })(this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems(), this.oldSelection)) {
                    var itemUnderCursor = this.__parent.getSelectableItemAt(x, y, false);
                    if (itemUnderCursor != null) {
                        this.__parent.selectItem(itemUnderCursor);
                    }
                    else {
                        this.__parent.deselectAll();
                    }
                }
            }
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        SelectionMoveState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.movedPieceOfFurniture != null) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
                if (!this.magnetismEnabled) {
                    this.__parent.getView().deleteFeedback();
                }
            }
        };
        /**
         *
         */
        SelectionMoveState.prototype.escape = function () {
            if (this.mouseMoved) {
                if (this.duplicatedItems != null) {
                    this.__parent.doDeleteItems(this.movedItems);
                    this.__parent.selectItems(this.duplicatedItems);
                }
                else {
                    if (this.movedPieceOfFurniture != null) {
                        this.movedPieceOfFurniture.setX(this.xMovedPieceOfFurniture);
                        this.movedPieceOfFurniture.setY(this.yMovedPieceOfFurniture);
                        this.movedPieceOfFurniture.setAngle(this.angleMovedPieceOfFurniture);
                        if ((this.movedPieceOfFurniture != null && this.movedPieceOfFurniture instanceof HomeDoorOrWindow) && this.movedPieceOfFurniture.isResizable() && this.__parent.isItemResizable(this.movedPieceOfFurniture)) {
                            this.movedPieceOfFurniture.setDepth(this.depthMovedPieceOfFurniture);
                        }
                        this.movedPieceOfFurniture.setElevation(this.elevationMovedPieceOfFurniture);
                        if (this.movedPieceOfFurniture != null && this.movedPieceOfFurniture instanceof HomeDoorOrWindow) {
                            this.movedPieceOfFurniture.setBoundToWall(this.movedDoorOrWindowBoundToWall);
                        }
                    }
                    else {
                        this.__parent.moveItems(this.movedItems, this.__parent.getXLastMousePress() - this.xLastMouseMove, this.__parent.getYLastMousePress() - this.yLastMouseMove);
                    }
                }
            }
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} duplicationActivated
         */
        SelectionMoveState.prototype.setDuplicationActivated = function (duplicationActivated) {
            duplicationActivated = !this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection() && duplicationActivated;
            if (this.mouseMoved) {
                this.toggleDuplication(duplicationActivated);
            }
            this.duplicationActivated = duplicationActivated;
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        SelectionMoveState.prototype.setAlignmentActivated = function (alignmentActivated) {
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH && this.selectionUpdateNeeded && !this.duplicationActivated) {
                this.__parent.setState(this.__parent.getSelectionState());
                this.__parent.pressMouse$float$float$int$boolean$boolean$boolean$boolean$com_eteks_sweethome3d_viewcontroller_View_PointerType(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), 1, true, false, false, false, this.__parent.getPointerTypeLastMousePress());
            }
            else {
                this.alignmentActivated = alignmentActivated;
                if (this.mouseMoved) {
                    this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
                }
                if (this.alignmentActivated) {
                    this.__parent.getView().deleteFeedback();
                }
            }
        };
        SelectionMoveState.prototype.toggleDuplication = function (duplicationActivated) {
            if ( /* size */this.movedItems.length > 1 || ( /* size */this.movedItems.length === 1 && !( /* get */this.movedItems[0] != null && /* get */ this.movedItems[0] instanceof Camera) && !( /* get */this.movedItems[0] != null && /* get */ this.movedItems[0] instanceof Compass))) {
                if (duplicationActivated && this.duplicatedItems == null) {
                    this.duplicatedItems = this.movedItems;
                    this.movedItems = ([]);
                    {
                        var array = Home.duplicate(this.duplicatedItems);
                        for (var index = 0; index < array.length; index++) {
                            var item = array[index];
                            {
                                if (item != null && item instanceof Wall) {
                                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addWall(item);
                                }
                                else if (item != null && item instanceof Room) {
                                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addRoom$com_eteks_sweethome3d_model_Room(item);
                                }
                                else if (item != null && item instanceof Polyline) {
                                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addPolyline$com_eteks_sweethome3d_model_Polyline(item);
                                }
                                else if (item != null && item instanceof DimensionLine) {
                                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addDimensionLine(item);
                                }
                                else if (item != null && item instanceof HomePieceOfFurniture) {
                                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture(item);
                                }
                                else if (item != null && item instanceof Label) {
                                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addLabel(item);
                                }
                                else {
                                    continue;
                                }
                                /* add */ (this.movedItems.push(item) > 0);
                            }
                        }
                    }
                    if (this.movedPieceOfFurniture != null) {
                        this.movedPieceOfFurniture.setX(this.xMovedPieceOfFurniture);
                        this.movedPieceOfFurniture.setY(this.yMovedPieceOfFurniture);
                        this.movedPieceOfFurniture.setAngle(this.angleMovedPieceOfFurniture);
                        if ((this.movedPieceOfFurniture != null && this.movedPieceOfFurniture instanceof HomeDoorOrWindow) && this.movedPieceOfFurniture.isResizable() && this.__parent.isItemResizable(this.movedPieceOfFurniture)) {
                            this.movedPieceOfFurniture.setDepth(this.depthMovedPieceOfFurniture);
                        }
                        this.movedPieceOfFurniture.setElevation(this.elevationMovedPieceOfFurniture);
                        this.movedPieceOfFurniture = this.movedItems[0];
                    }
                    else {
                        this.__parent.moveItems(this.duplicatedItems, this.__parent.getXLastMousePress() - this.xLastMouseMove, this.__parent.getYLastMousePress() - this.yLastMouseMove);
                    }
                    this.__parent.getView().setCursor(PlanView.CursorType.DUPLICATION);
                }
                else if (!duplicationActivated && this.duplicatedItems != null) {
                    this.__parent.doDeleteItems(this.movedItems);
                    this.__parent.moveItems(this.duplicatedItems, this.xLastMouseMove - this.__parent.getXLastMousePress(), this.yLastMouseMove - this.__parent.getYLastMousePress());
                    this.movedItems = this.duplicatedItems;
                    this.duplicatedItems = null;
                    if (this.movedPieceOfFurniture != null) {
                        this.movedPieceOfFurniture = this.movedItems[0];
                    }
                    this.__parent.getView().setCursor(PlanView.CursorType.MOVE);
                }
                this.__parent.selectItems(this.movedItems, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
            }
        };
        /**
         *
         */
        SelectionMoveState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
            this.movedItems = null;
            this.duplicatedItems = null;
            this.movedPieceOfFurniture = null;
        };
        return SelectionMoveState;
    }(PlanController.ControllerState));
    PlanController.SelectionMoveState = SelectionMoveState;
    SelectionMoveState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.SelectionMoveState";
    (function (SelectionMoveState) {
        var SelectionMoveState$0 = /** @class */ (function (_super) {
            __extends(SelectionMoveState$0, _super);
            function SelectionMoveState$0(__parent, __arg0) {
                var _this = _super.call(this, __arg0) || this;
                _this.__parent = __parent;
                return _this;
            }
            /**
             *
             */
            SelectionMoveState$0.prototype.enter = function () {
                _super.prototype.enter.call(this);
                this.pressMouse(this.__parent.__parent.getXLastMousePress(), this.__parent.__parent.getYLastMousePress(), 1, this.__parent.__parent.wasShiftDownLastMousePress(), this.__parent.__parent.wasDuplicationActivatedLastMousePress());
                this.moveMouse(this.__parent.__parent.getXLastMouseMove(), this.__parent.__parent.getYLastMouseMove());
            };
            /**
             *
             * @param {number} x
             * @param {number} y
             */
            SelectionMoveState$0.prototype.releaseMouse = function (x, y) {
                this.escape();
            };
            /**
             *
             */
            SelectionMoveState$0.prototype.escape = function () {
                _super.prototype.escape.call(this);
                this.__parent.__parent.setState(this.__parent.__parent.getSelectionState());
            };
            return SelectionMoveState$0;
        }(PlanController.ControllerStateDecorator));
        SelectionMoveState.SelectionMoveState$0 = SelectionMoveState$0;
    })(SelectionMoveState = PlanController.SelectionMoveState || (PlanController.SelectionMoveState = {}));
    /**
     * Selection with rectangle state. This state manages selection when mouse
     * press is done outside of an item or when mouse press is done with shift key
     * down.
     * @extends PlanController.ControllerState
     * @class
     */
    var RectangleSelectionState = /** @class */ (function (_super) {
        __extends(RectangleSelectionState, _super);
        function RectangleSelectionState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedItemsMousePressed === undefined) {
                _this.selectedItemsMousePressed = null;
            }
            if (_this.ignoreRectangleSelection === undefined) {
                _this.ignoreRectangleSelection = false;
            }
            if (_this.mouseMoved === undefined) {
                _this.mouseMoved = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RectangleSelectionState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RectangleSelectionState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        RectangleSelectionState.prototype.enter = function () {
            var itemUnderCursor = this.__parent.getSelectableItemAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            if (itemUnderCursor == null && !this.__parent.wasShiftDownLastMousePress()) {
                this.__parent.deselectAll();
            }
            this.selectedItemsMousePressed = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems().slice(0));
            var furniture = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture();
            this.ignoreRectangleSelection = false;
            for (var index = 0; index < this.selectedItemsMousePressed.length; index++) {
                var item = this.selectedItemsMousePressed[index];
                {
                    if ((item != null && item instanceof HomePieceOfFurniture) && !(furniture.indexOf((item)) >= 0)) {
                        this.ignoreRectangleSelection = true;
                        break;
                    }
                }
            }
            this.mouseMoved = false;
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RectangleSelectionState.prototype.moveMouse = function (x, y) {
            this.mouseMoved = true;
            if (!this.ignoreRectangleSelection) {
                this.updateSelectedItems(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), x, y, this.selectedItemsMousePressed);
                var planView = this.__parent.getView();
                planView.setRectangleFeedback(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), x, y);
                planView.makePointVisible(x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RectangleSelectionState.prototype.releaseMouse = function (x, y) {
            if (!this.mouseMoved) {
                var itemUnderCursor_1 = this.__parent.getSelectableItemAt(x, y, false);
                if (itemUnderCursor_1 != null) {
                    if ( /* contains */(this.selectedItemsMousePressed.indexOf((itemUnderCursor_1)) >= 0)) {
                        /* remove */ (function (a) { var index = a.indexOf(itemUnderCursor_1); if (index >= 0) {
                            a.splice(index, 1);
                            return true;
                        }
                        else {
                            return false;
                        } })(this.selectedItemsMousePressed);
                    }
                    else {
                        for (var i = this.selectedItemsMousePressed.length - 1; i >= 0; i--) {
                            {
                                var item = this.selectedItemsMousePressed[i];
                                if ((item != null && item instanceof Camera) || ((itemUnderCursor_1 != null && itemUnderCursor_1 instanceof HomePieceOfFurniture) && (item != null && item instanceof HomeFurnitureGroup) && /* contains */ (item.getAllFurniture().indexOf((itemUnderCursor_1)) >= 0)) || ((itemUnderCursor_1 != null && itemUnderCursor_1 instanceof HomeFurnitureGroup) && (item != null && item instanceof HomePieceOfFurniture) && /* contains */ (itemUnderCursor_1.getAllFurniture().indexOf((item)) >= 0))) {
                                    /* remove */ this.selectedItemsMousePressed.splice(i, 1)[0];
                                }
                            }
                            ;
                        }
                        if (!(itemUnderCursor_1 != null && itemUnderCursor_1 instanceof Camera) || /* size */ this.selectedItemsMousePressed.length === 0) {
                            /* add */ (this.selectedItemsMousePressed.push(itemUnderCursor_1) > 0);
                        }
                    }
                    this.__parent.selectItems(this.selectedItemsMousePressed, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection() && this.__parent.wasShiftDownLastMousePress());
                }
            }
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RectangleSelectionState.prototype.escape = function () {
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RectangleSelectionState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
            this.selectedItemsMousePressed = null;
        };
        /**
         * Updates selection from <code>selectedItemsMousePressed</code> and the
         * items that intersects the rectangle at coordinates (<code>x0</code>,
         * <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
         * @param {number} x0
         * @param {number} y0
         * @param {number} x1
         * @param {number} y1
         * @param {*[]} selectedItemsMousePressed
         * @private
         */
        RectangleSelectionState.prototype.updateSelectedItems = function (x0, y0, x1, y1, selectedItemsMousePressed) {
            var selectedItems;
            var shiftDown = this.__parent.wasShiftDownLastMousePress();
            if (shiftDown) {
                selectedItems = (selectedItemsMousePressed.slice(0));
            }
            else {
                selectedItems = ([]);
            }
            {
                var array = this.__parent.getSelectableItemsIntersectingRectangle(x0, y0, x1, y1);
                var _loop_3 = function (index) {
                    var item = array[index];
                    {
                        if (!(item != null && item instanceof Camera)) {
                            if (shiftDown) {
                                if ( /* contains */(selectedItemsMousePressed.indexOf((item)) >= 0)) {
                                    /* remove */ (function (a) { var index = a.indexOf(item); if (index >= 0) {
                                        a.splice(index, 1);
                                        return true;
                                    }
                                    else {
                                        return false;
                                    } })(selectedItems);
                                }
                                else {
                                    /* add */ (selectedItems.push(item) > 0);
                                }
                            }
                            else if (!(selectedItemsMousePressed.indexOf((item)) >= 0)) {
                                /* add */ (selectedItems.push(item) > 0);
                            }
                        }
                    }
                };
                for (var index = 0; index < array.length; index++) {
                    _loop_3(index);
                }
            }
            this.__parent.selectItems(selectedItems, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection() && shiftDown);
        };
        return RectangleSelectionState;
    }(PlanController.ControllerState));
    PlanController.RectangleSelectionState = RectangleSelectionState;
    RectangleSelectionState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RectangleSelectionState";
    /**
     * Panning state.
     * @extends PlanController.ControllerState
     * @class
     */
    var PanningState = /** @class */ (function (_super) {
        __extends(PanningState, _super);
        function PanningState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = null;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PanningState.prototype.getMode = function () {
            return PlanController.Mode.PANNING_$LI$();
        };
        /**
         *
         * @param {PlanController.Mode} mode
         */
        PanningState.prototype.setMode = function (mode) {
            if (mode === PlanController.Mode.SELECTION_$LI$()) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else if (mode === PlanController.Mode.WALL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getWallCreationState());
            }
            else if (mode === PlanController.Mode.ROOM_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getRoomCreationState());
            }
            else if (mode === PlanController.Mode.POLYLINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getPolylineCreationState());
            }
            else if (mode === PlanController.Mode.DIMENSION_LINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getLabelCreationState());
            }
        };
        /**
         *
         */
        PanningState.prototype.enter = function () {
            this.__parent.getView().setCursor(PlanView.CursorType.PANNING);
        };
        /**
         *
         * @param {number} dx
         * @param {number} dy
         */
        PanningState.prototype.moveSelection = function (dx, dy) {
            this.__parent.getView().moveView(dx * 10, dy * 10);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        PanningState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (clickCount === 1) {
                this.xLastMouseMove = this.__parent.getView().convertXModelToScreen(x);
                this.yLastMouseMove = this.__parent.getView().convertYModelToScreen(y);
            }
            else {
                this.xLastMouseMove = null;
                this.yLastMouseMove = null;
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PanningState.prototype.moveMouse = function (x, y) {
            if (this.xLastMouseMove != null) {
                var newX = this.__parent.getView().convertXModelToScreen(x);
                var newY = this.__parent.getView().convertYModelToScreen(y);
                this.__parent.getView().moveView((this.xLastMouseMove - newX) / this.__parent.getScale(), (this.yLastMouseMove - newY) / this.__parent.getScale());
                this.xLastMouseMove = newX;
                this.yLastMouseMove = newY;
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PanningState.prototype.releaseMouse = function (x, y) {
            this.xLastMouseMove = null;
        };
        /**
         *
         */
        PanningState.prototype.escape = function () {
            this.xLastMouseMove = null;
        };
        /**
         *
         * @param {number} factor
         */
        PanningState.prototype.zoom = function (factor) {
            this.__parent.setScale(this.__parent.getScale() * factor);
        };
        return PanningState;
    }(PlanController.ControllerState));
    PlanController.PanningState = PanningState;
    PanningState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PanningState";
    /**
     * Drag and drop state. This state manages the dragging of items
     * transfered from outside of plan view with the mouse.
     * @extends PlanController.ControllerState
     * @class
     */
    var DragAndDropState = /** @class */ (function (_super) {
        __extends(DragAndDropState, _super);
        function DragAndDropState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = 0;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = 0;
            }
            if (_this.draggedPieceOfFurniture === undefined) {
                _this.draggedPieceOfFurniture = null;
            }
            if (_this.xDraggedPieceOfFurniture === undefined) {
                _this.xDraggedPieceOfFurniture = 0;
            }
            if (_this.yDraggedPieceOfFurniture === undefined) {
                _this.yDraggedPieceOfFurniture = 0;
            }
            if (_this.angleDraggedPieceOfFurniture === undefined) {
                _this.angleDraggedPieceOfFurniture = 0;
            }
            if (_this.depthDraggedPieceOfFurniture === undefined) {
                _this.depthDraggedPieceOfFurniture = 0;
            }
            if (_this.elevationDraggedPieceOfFurniture === undefined) {
                _this.elevationDraggedPieceOfFurniture = 0;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        DragAndDropState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        DragAndDropState.prototype.isModificationState = function () {
            return false;
        };
        /**
         *
         * @return {boolean}
         */
        DragAndDropState.prototype.isBasePlanModificationState = function () {
            return this.draggedPieceOfFurniture != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.draggedPieceOfFurniture);
        };
        /**
         *
         */
        DragAndDropState.prototype.enter = function () {
            this.xLastMouseMove = 0;
            this.yLastMouseMove = 0;
            this.__parent.getView().setDraggedItemsFeedback(this.__parent.draggedItems);
            if ( /* size */this.__parent.draggedItems.length === 1 && ( /* get */this.__parent.draggedItems[0] != null && /* get */ this.__parent.draggedItems[0] instanceof HomePieceOfFurniture)) {
                this.draggedPieceOfFurniture = this.__parent.draggedItems[0];
                this.xDraggedPieceOfFurniture = this.draggedPieceOfFurniture.getX();
                this.yDraggedPieceOfFurniture = this.draggedPieceOfFurniture.getY();
                this.angleDraggedPieceOfFurniture = this.draggedPieceOfFurniture.getAngle();
                this.depthDraggedPieceOfFurniture = this.draggedPieceOfFurniture.getDepth();
                this.elevationDraggedPieceOfFurniture = this.draggedPieceOfFurniture.getElevation();
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DragAndDropState.prototype.moveMouse = function (x, y) {
            var draggedItemsFeedback = (this.__parent.draggedItems.slice(0));
            this.__parent.moveItems(this.__parent.draggedItems, x - this.xLastMouseMove, y - this.yLastMouseMove);
            if (this.draggedPieceOfFurniture != null && this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) {
                this.draggedPieceOfFurniture.setX(this.xDraggedPieceOfFurniture);
                this.draggedPieceOfFurniture.setY(this.yDraggedPieceOfFurniture);
                this.draggedPieceOfFurniture.setAngle(this.angleDraggedPieceOfFurniture);
                if (this.draggedPieceOfFurniture.isResizable()) {
                    this.draggedPieceOfFurniture.setDepth(this.depthDraggedPieceOfFurniture);
                    this.draggedPieceOfFurniture.setDepthInPlan(this.depthDraggedPieceOfFurniture);
                }
                this.draggedPieceOfFurniture.setElevation(this.elevationDraggedPieceOfFurniture);
                this.draggedPieceOfFurniture.move(x, y);
                var elevationAdjusted = this.__parent.adjustPieceOfFurnitureElevation(this.draggedPieceOfFurniture) != null;
                var magnetWall = this.__parent.adjustPieceOfFurnitureOnWallAt(this.draggedPieceOfFurniture, x, y, true);
                if (!elevationAdjusted) {
                    this.__parent.adjustPieceOfFurnitureSideBySideAt(this.draggedPieceOfFurniture, magnetWall == null, magnetWall);
                }
                if (magnetWall != null) {
                    this.__parent.getView().setDimensionLinesFeedback(this.__parent.getDimensionLinesAlongWall(this.draggedPieceOfFurniture, magnetWall));
                }
                else {
                    this.__parent.getView().setDimensionLinesFeedback(null);
                }
            }
            this.__parent.getView().setDraggedItemsFeedback(draggedItemsFeedback);
            this.xLastMouseMove = x;
            this.yLastMouseMove = y;
        };
        /**
         *
         */
        DragAndDropState.prototype.exit = function () {
            this.draggedPieceOfFurniture = null;
            this.__parent.getView().deleteFeedback();
        };
        return DragAndDropState;
    }(PlanController.ControllerState));
    PlanController.DragAndDropState = DragAndDropState;
    DragAndDropState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DragAndDropState";
    /**
     * Wall modification state.
     * @extends PlanController.ControllerState
     * @class
     */
    var AbstractWallState = /** @class */ (function (_super) {
        __extends(AbstractWallState, _super);
        function AbstractWallState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.wallLengthToolTipFeedback === undefined) {
                _this.wallLengthToolTipFeedback = null;
            }
            if (_this.wallAngleToolTipFeedback === undefined) {
                _this.wallAngleToolTipFeedback = null;
            }
            if (_this.wallArcExtentToolTipFeedback === undefined) {
                _this.wallArcExtentToolTipFeedback = null;
            }
            if (_this.wallThicknessToolTipFeedback === undefined) {
                _this.wallThicknessToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         */
        AbstractWallState.prototype.enter = function () {
            this.wallLengthToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "wallLengthToolTipFeedback");
            try {
                this.wallAngleToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "wallAngleToolTipFeedback");
            }
            catch (ex) {
            }
            this.wallArcExtentToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "wallArcExtentToolTipFeedback");
            try {
                this.wallThicknessToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "wallThicknessToolTipFeedback");
            }
            catch (ex) {
            }
        };
        AbstractWallState.prototype.getToolTipFeedbackText = function (wall, ignoreArcExtent) {
            var arcExtent = wall.getArcExtent();
            if (!ignoreArcExtent && arcExtent != null) {
                return "<html>" + CoreTools.format(this.wallArcExtentToolTipFeedback, Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(arcExtent)));
            }
            else {
                var startPointToEndPointDistance = wall.getStartPointToEndPointDistance();
                var toolTipFeedbackText = "<html>" + CoreTools.format(this.wallLengthToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(startPointToEndPointDistance));
                if (this.wallAngleToolTipFeedback != null && this.wallAngleToolTipFeedback.length > 0) {
                    toolTipFeedbackText += "<br>" + CoreTools.format(this.wallAngleToolTipFeedback, this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall$float(wall, startPointToEndPointDistance));
                }
                if (this.wallThicknessToolTipFeedback != null && this.wallThicknessToolTipFeedback.length > 0) {
                    toolTipFeedbackText += "<br>" + CoreTools.format(this.wallThicknessToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(wall.getThickness()));
                }
                return toolTipFeedbackText;
            }
        };
        AbstractWallState.prototype.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall = function (wall) {
            return this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall$float(wall, wall.getStartPointToEndPointDistance());
        };
        AbstractWallState.prototype.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall$float = function (wall, startPointToEndPointDistance) {
            var wallAtStart = wall.getWallAtStart();
            if (wallAtStart != null) {
                var wallAtStartSegmentDistance = wallAtStart.getStartPointToEndPointDistance();
                if (startPointToEndPointDistance !== 0 && wallAtStartSegmentDistance !== 0) {
                    var xWallVector = (wall.getXEnd() - wall.getXStart()) / startPointToEndPointDistance;
                    var yWallVector = (wall.getYEnd() - wall.getYStart()) / startPointToEndPointDistance;
                    var xWallAtStartVector = (wallAtStart.getXEnd() - wallAtStart.getXStart()) / wallAtStartSegmentDistance;
                    var yWallAtStartVector = (wallAtStart.getYEnd() - wallAtStart.getYStart()) / wallAtStartSegmentDistance;
                    if (wallAtStart.getWallAtStart() === wall) {
                        xWallAtStartVector = -xWallAtStartVector;
                        yWallAtStartVector = -yWallAtStartVector;
                    }
                    var wallAngle = (Math.round(180 - /* toDegrees */ (function (x) { return x * 180 / Math.PI; })(Math.atan2(yWallVector * xWallAtStartVector - xWallVector * yWallAtStartVector, xWallVector * xWallAtStartVector + yWallVector * yWallAtStartVector))) | 0);
                    if (wallAngle > 180) {
                        wallAngle -= 360;
                    }
                    return wallAngle;
                }
            }
            if (startPointToEndPointDistance === 0) {
                return 0;
            }
            else {
                return (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(Math.atan2(wall.getYStart() - wall.getYEnd(), wall.getXEnd() - wall.getXStart()))) | 0);
            }
        };
        AbstractWallState.prototype.getWallAngleInDegrees = function (wall, startPointToEndPointDistance) {
            if (((wall != null && wall instanceof Wall) || wall === null) && ((typeof startPointToEndPointDistance === 'number') || startPointToEndPointDistance === null)) {
                return this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall$float(wall, startPointToEndPointDistance);
            }
            else if (((wall != null && wall instanceof Wall) || wall === null) && startPointToEndPointDistance === undefined) {
                return this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall(wall);
            }
            else
                throw new Error('invalid overload');
        };
        /**
         * Returns arc extent from the circumscribed circle of the triangle
         * with vertices (x1, y1) (x2, y2) (x, y).
         * @param {number} x1
         * @param {number} y1
         * @param {number} x2
         * @param {number} y2
         * @param {number} x
         * @param {number} y
         * @return {number}
         */
        AbstractWallState.prototype.getArcExtent = function (x1, y1, x2, y2, x, y) {
            var arcCenter = this.getCircumscribedCircleCenter(x1, y1, x2, y2, x, y);
            var startPointToBissectorLine1Distance = java.awt.geom.Point2D.distance(x1, y1, x2, y2) / 2;
            var arcCenterToWallDistance = (function (value) { return Number.NEGATIVE_INFINITY === value || Number.POSITIVE_INFINITY === value; })(arcCenter[0]) || /* isInfinite */ (function (value) { return Number.NEGATIVE_INFINITY === value || Number.POSITIVE_INFINITY === value; })(arcCenter[1]) ? Infinity : java.awt.geom.Line2D.ptLineDist(x1, y1, x2, y2, arcCenter[0], arcCenter[1]);
            var mousePosition = java.awt.geom.Line2D.relativeCCW(x1, y1, x2, y2, x, y);
            var centerPosition = java.awt.geom.Line2D.relativeCCW(x1, y1, x2, y2, arcCenter[0], arcCenter[1]);
            var arcExtent;
            if (centerPosition === mousePosition) {
                arcExtent = (Math.PI + 2 * Math.atan2(arcCenterToWallDistance, startPointToBissectorLine1Distance));
            }
            else {
                arcExtent = (2 * Math.atan2(startPointToBissectorLine1Distance, arcCenterToWallDistance));
            }
            arcExtent = Math.min(arcExtent, 3 * Math.PI / 2);
            arcExtent *= mousePosition;
            return arcExtent;
        };
        /**
         * Returns the circumscribed circle of the triangle with vertices (x1, y1) (x2, y2) (x, y).
         * @param {number} x1
         * @param {number} y1
         * @param {number} x2
         * @param {number} y2
         * @param {number} x
         * @param {number} y
         * @return {float[]}
         * @private
         */
        AbstractWallState.prototype.getCircumscribedCircleCenter = function (x1, y1, x2, y2, x, y) {
            var bissectorLine1 = this.getBissectorLine(x1, y1, x2, y2);
            var bissectorLine2 = this.getBissectorLine(x1, y1, x, y);
            var arcCenter = PlanController.computeIntersection(bissectorLine1[0], bissectorLine1[1], bissectorLine2[0], bissectorLine2[1]);
            return arcCenter;
        };
        AbstractWallState.prototype.getBissectorLine = function (x1, y1, x2, y2) {
            var xMiddlePoint = (x1 + x2) / 2;
            var yMiddlePoint = (y1 + y2) / 2;
            var bissectorLineAlpha = (x1 - x2) / (y2 - y1);
            if (bissectorLineAlpha > 1.0E10) {
                return [[xMiddlePoint, yMiddlePoint], [xMiddlePoint, yMiddlePoint + 1]];
            }
            else {
                return [[xMiddlePoint, yMiddlePoint], [xMiddlePoint + 1, bissectorLineAlpha + yMiddlePoint]];
            }
        };
        AbstractWallState.prototype.showWallAngleFeedback = function (wall, ignoreArcExtent) {
            var arcExtent = wall.getArcExtent();
            if (!ignoreArcExtent && arcExtent != null) {
                if (arcExtent < 0) {
                    this.__parent.getView().setAngleFeedback(wall.getXArcCircleCenter(), wall.getYArcCircleCenter(), wall.getXStart(), wall.getYStart(), wall.getXEnd(), wall.getYEnd());
                }
                else {
                    this.__parent.getView().setAngleFeedback(wall.getXArcCircleCenter(), wall.getYArcCircleCenter(), wall.getXEnd(), wall.getYEnd(), wall.getXStart(), wall.getYStart());
                }
            }
            else if (this.wallAngleToolTipFeedback != null && this.wallAngleToolTipFeedback.length > 0) {
                var wallAtStart = wall.getWallAtStart();
                if (wallAtStart != null) {
                    if (wallAtStart.getWallAtStart() === wall) {
                        if (this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall(wall) > 0) {
                            this.__parent.getView().setAngleFeedback(wall.getXStart(), wall.getYStart(), wallAtStart.getXEnd(), wallAtStart.getYEnd(), wall.getXEnd(), wall.getYEnd());
                        }
                        else {
                            this.__parent.getView().setAngleFeedback(wall.getXStart(), wall.getYStart(), wall.getXEnd(), wall.getYEnd(), wallAtStart.getXEnd(), wallAtStart.getYEnd());
                        }
                    }
                    else {
                        if (this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall(wall) > 0) {
                            this.__parent.getView().setAngleFeedback(wall.getXStart(), wall.getYStart(), wallAtStart.getXStart(), wallAtStart.getYStart(), wall.getXEnd(), wall.getYEnd());
                        }
                        else {
                            this.__parent.getView().setAngleFeedback(wall.getXStart(), wall.getYStart(), wall.getXEnd(), wall.getYEnd(), wallAtStart.getXStart(), wallAtStart.getYStart());
                        }
                    }
                }
            }
        };
        return AbstractWallState;
    }(PlanController.ControllerState));
    PlanController.AbstractWallState = AbstractWallState;
    AbstractWallState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.AbstractWallState";
    /**
     * Furniture rotation state. This states manages the rotation of a piece of furniture around the vertical axis.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureRotationState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureRotationState, _super);
        function PieceOfFurnitureRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.selectedPiece === undefined) {
                _this.selectedPiece = null;
            }
            if (_this.angleMousePress === undefined) {
                _this.angleMousePress = 0;
            }
            if (_this.oldAngle === undefined) {
                _this.oldAngle = 0;
            }
            if (_this.doorOrWindowBoundToWall === undefined) {
                _this.doorOrWindowBoundToWall = false;
            }
            if (_this.rotationToolTipFeedback === undefined) {
                _this.rotationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureRotationState.prototype.isBasePlanModificationState = function () {
            return this.selectedPiece != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.selectedPiece);
        };
        /**
         *
         */
        PieceOfFurnitureRotationState.prototype.enter = function () {
            this.rotationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "rotationToolTipFeedback");
            this.selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.angleMousePress = Math.atan2(this.selectedPiece.getY() - this.__parent.getYLastMousePress(), this.__parent.getXLastMousePress() - this.selectedPiece.getX());
            this.oldAngle = this.selectedPiece.getAngle();
            this.doorOrWindowBoundToWall = (this.selectedPiece != null && this.selectedPiece instanceof HomeDoorOrWindow) && this.selectedPiece.isBoundToWall();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldAngle), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedPiece.getX() || y !== this.selectedPiece.getY()) {
                var angleMouseMove = Math.atan2(this.selectedPiece.getY() - y, x - this.selectedPiece.getX());
                var newAngle = this.oldAngle - angleMouseMove + this.angleMousePress;
                if (this.alignmentActivated || this.magnetismEnabled) {
                    var angleStep = 2 * Math.PI / PieceOfFurnitureRotationState.STEP_COUNT;
                    newAngle = Math.round(newAngle / angleStep) * angleStep;
                }
                this.selectedPiece.setAngle(newAngle);
                var planView = this.__parent.getView();
                planView.makePointVisible(x, y);
                planView.setToolTipFeedback(this.getToolTipFeedbackText(newAngle), x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureRotation(this.selectedPiece, this.oldAngle, this.doorOrWindowBoundToWall);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PieceOfFurnitureRotationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        PieceOfFurnitureRotationState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PieceOfFurnitureRotationState.prototype.escape = function () {
            this.selectedPiece.setAngle(this.oldAngle);
            if (this.selectedPiece != null && this.selectedPiece instanceof HomeDoorOrWindow) {
                this.selectedPiece.setBoundToWall(this.doorOrWindowBoundToWall);
            }
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureRotationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedPiece = null;
        };
        PieceOfFurnitureRotationState.prototype.getToolTipFeedbackText = function (angle) {
            return CoreTools.format(this.rotationToolTipFeedback, (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(angle)) + 360) % 360);
        };
        PieceOfFurnitureRotationState.STEP_COUNT = 24;
        return PieceOfFurnitureRotationState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureRotationState = PieceOfFurnitureRotationState;
    PieceOfFurnitureRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureRotationState";
    /**
     * Furniture pitch rotation state. This states manages the rotation of a piece of furniture
     * around the horizontal pitch (transversal) axis.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurniturePitchRotationState = /** @class */ (function (_super) {
        __extends(PieceOfFurniturePitchRotationState, _super);
        function PieceOfFurniturePitchRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedPiece === undefined) {
                _this.selectedPiece = null;
            }
            if (_this.oldPitch === undefined) {
                _this.oldPitch = 0;
            }
            if (_this.oldWidthInPlan === undefined) {
                _this.oldWidthInPlan = 0;
            }
            if (_this.oldDepthInPlan === undefined) {
                _this.oldDepthInPlan = 0;
            }
            if (_this.oldHeightInPlan === undefined) {
                _this.oldHeightInPlan = 0;
            }
            if (_this.pitchRotationToolTipFeedback === undefined) {
                _this.pitchRotationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurniturePitchRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurniturePitchRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurniturePitchRotationState.prototype.isBasePlanModificationState = function () {
            return this.selectedPiece != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.selectedPiece);
        };
        /**
         *
         */
        PieceOfFurniturePitchRotationState.prototype.enter = function () {
            this.pitchRotationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "pitchRotationToolTipFeedback");
            this.selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldPitch = this.selectedPiece.getPitch();
            this.oldWidthInPlan = this.selectedPiece.getWidthInPlan();
            this.oldDepthInPlan = this.selectedPiece.getDepthInPlan();
            this.oldHeightInPlan = this.selectedPiece.getHeightInPlan();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldPitch), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurniturePitchRotationState.prototype.moveMouse = function (x, y) {
            var newPitch = (this.oldPitch - (y - this.__parent.getYLastMousePress()) * Math.cos(this.selectedPiece.getAngle()) * Math.PI / 360 + (x - this.__parent.getXLastMousePress()) * Math.sin(this.selectedPiece.getAngle()) * Math.PI / 360);
            if (Math.abs(newPitch) < 1.0E-8) {
                newPitch = 0;
            }
            this.selectedPiece.setPitch(newPitch);
            this.__parent.getView().setToolTipFeedback(this.getToolTipFeedbackText(newPitch), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurniturePitchRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurniturePitchRotation(this.selectedPiece, this.oldPitch, this.oldWidthInPlan, this.oldDepthInPlan, this.oldHeightInPlan);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurniturePitchRotationState.prototype.escape = function () {
            this.selectedPiece.setPitch(this.oldPitch);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurniturePitchRotationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedPiece = null;
        };
        PieceOfFurniturePitchRotationState.prototype.getToolTipFeedbackText = function (pitch) {
            return CoreTools.format(this.pitchRotationToolTipFeedback, (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(pitch)) + 360) % 360);
        };
        return PieceOfFurniturePitchRotationState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurniturePitchRotationState = PieceOfFurniturePitchRotationState;
    PieceOfFurniturePitchRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurniturePitchRotationState";
    /**
     * Furniture roll rotation state. This states manages the rotation of a piece of furniture
     * around the horizontal roll axis.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureRollRotationState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureRollRotationState, _super);
        function PieceOfFurnitureRollRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedPiece === undefined) {
                _this.selectedPiece = null;
            }
            if (_this.oldRoll === undefined) {
                _this.oldRoll = 0;
            }
            if (_this.oldWidthInPlan === undefined) {
                _this.oldWidthInPlan = 0;
            }
            if (_this.oldDepthInPlan === undefined) {
                _this.oldDepthInPlan = 0;
            }
            if (_this.oldHeightInPlan === undefined) {
                _this.oldHeightInPlan = 0;
            }
            if (_this.rollRotationToolTipFeedback === undefined) {
                _this.rollRotationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureRollRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureRollRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureRollRotationState.prototype.isBasePlanModificationState = function () {
            return this.selectedPiece != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.selectedPiece);
        };
        /**
         *
         */
        PieceOfFurnitureRollRotationState.prototype.enter = function () {
            this.rollRotationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "rollRotationToolTipFeedback");
            this.selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldRoll = this.selectedPiece.getRoll();
            this.oldWidthInPlan = this.selectedPiece.getWidthInPlan();
            this.oldDepthInPlan = this.selectedPiece.getDepthInPlan();
            this.oldHeightInPlan = this.selectedPiece.getHeightInPlan();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldRoll), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureRollRotationState.prototype.moveMouse = function (x, y) {
            var newRoll = (this.oldRoll + (y - this.__parent.getYLastMousePress()) * Math.sin(this.selectedPiece.getAngle()) * Math.PI / 360 + (x - this.__parent.getXLastMousePress()) * Math.cos(this.selectedPiece.getAngle()) * Math.PI / 360);
            if (Math.abs(newRoll) < 1.0E-8) {
                newRoll = 0;
            }
            this.selectedPiece.setRoll(newRoll);
            this.__parent.getView().setToolTipFeedback(this.getToolTipFeedbackText(newRoll), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureRollRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureRollRotation(this.selectedPiece, this.oldRoll, this.oldWidthInPlan, this.oldDepthInPlan, this.oldHeightInPlan);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureRollRotationState.prototype.escape = function () {
            this.selectedPiece.setRoll(this.oldRoll);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureRollRotationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedPiece = null;
        };
        PieceOfFurnitureRollRotationState.prototype.getToolTipFeedbackText = function (roll) {
            return CoreTools.format(this.rollRotationToolTipFeedback, (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(roll)) + 360) % 360);
        };
        return PieceOfFurnitureRollRotationState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureRollRotationState = PieceOfFurnitureRollRotationState;
    PieceOfFurnitureRollRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureRollRotationState";
    /**
     * Furniture elevation state. This states manages the elevation change of a piece of furniture.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureElevationState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureElevationState, _super);
        function PieceOfFurnitureElevationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.deltaYToElevationPoint === undefined) {
                _this.deltaYToElevationPoint = 0;
            }
            if (_this.selectedPiece === undefined) {
                _this.selectedPiece = null;
            }
            if (_this.oldElevation === undefined) {
                _this.oldElevation = 0;
            }
            if (_this.elevationToolTipFeedback === undefined) {
                _this.elevationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureElevationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureElevationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureElevationState.prototype.isBasePlanModificationState = function () {
            return this.selectedPiece != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.selectedPiece);
        };
        /**
         *
         */
        PieceOfFurnitureElevationState.prototype.enter = function () {
            this.elevationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "elevationToolTipFeedback");
            this.selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            var elevationPoint = this.selectedPiece.getPoints()[1];
            this.deltaYToElevationPoint = this.__parent.getYLastMousePress() - elevationPoint[1];
            this.oldElevation = this.selectedPiece.getElevation();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldElevation), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureElevationState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var topRightPoint = this.selectedPiece.getPoints()[1];
            var deltaY = y - this.deltaYToElevationPoint - topRightPoint[1];
            var newElevation = this.oldElevation - deltaY;
            newElevation = Math.min(Math.max(newElevation, 0.0), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumElevation());
            if (this.magnetismEnabled) {
                newElevation = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(newElevation, planView.getPixelLength());
            }
            this.selectedPiece.setElevation(newElevation);
            planView.makePointVisible(x, y);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(newElevation), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureElevationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureElevation(this.selectedPiece, this.oldElevation);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PieceOfFurnitureElevationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PieceOfFurnitureElevationState.prototype.escape = function () {
            this.selectedPiece.setElevation(this.oldElevation);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureElevationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedPiece = null;
        };
        PieceOfFurnitureElevationState.prototype.getToolTipFeedbackText = function (height) {
            return CoreTools.format(this.elevationToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(height));
        };
        return PieceOfFurnitureElevationState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureElevationState = PieceOfFurnitureElevationState;
    PieceOfFurnitureElevationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureElevationState";
    /**
     * Furniture height state. This states manages the height resizing of a piece of furniture.
     * Caution: Do not use for furniture with a roll or pitch angle different from 0
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureHeightState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureHeightState, _super);
        function PieceOfFurnitureHeightState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.resizedPiece === undefined) {
                _this.resizedPiece = null;
            }
            if (_this.topLeftPoint === undefined) {
                _this.topLeftPoint = null;
            }
            if (_this.resizePoint === undefined) {
                _this.resizePoint = null;
            }
            if (_this.resizeToolTipFeedback === undefined) {
                _this.resizeToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureHeightState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureHeightState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureHeightState.prototype.isBasePlanModificationState = function () {
            return this.resizedPiece != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.resizedPiece.getPieceOfFurniture());
        };
        /**
         *
         */
        PieceOfFurnitureHeightState.prototype.enter = function () {
            this.resizeToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "heightResizeToolTipFeedback");
            var selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.resizedPiece = new PlanController.ResizedPieceOfFurniture(selectedPiece);
            var resizedPiecePoints = selectedPiece.getPoints();
            this.resizePoint = resizedPiecePoints[3];
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - this.resizePoint[1];
            this.topLeftPoint = resizedPiecePoints[0];
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(selectedPiece.getHeight()), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureHeightState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var selectedPiece = this.resizedPiece.getPieceOfFurniture();
            var deltaY = y - this.deltaYToResizePoint - this.resizePoint[1];
            var newHeight = this.resizedPiece.getHeight() - deltaY;
            newHeight = Math.max(newHeight, 0.0);
            if (this.magnetismEnabled) {
                newHeight = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(newHeight, planView.getPixelLength());
            }
            newHeight = Math.min(Math.max(newHeight, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMinimumLength()), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength());
            if (selectedPiece.isDeformable() && !selectedPiece.isHorizontallyRotated() && selectedPiece.getModelTransformations() == null) {
                this.__parent.setPieceOfFurnitureSize(this.resizedPiece, this.resizedPiece.getWidth(), this.resizedPiece.getDepth(), newHeight);
            }
            else {
                var scale = newHeight / this.resizedPiece.getHeight();
                var newWidth = this.resizedPiece.getWidth() * scale;
                var newDepth = this.resizedPiece.getDepth() * scale;
                var angle = selectedPiece.getAngle();
                var cos = Math.cos(angle);
                var sin = Math.sin(angle);
                var newX = (this.topLeftPoint[0] + (newWidth * cos - newDepth * sin) / 2.0);
                var newY = (this.topLeftPoint[1] + (newWidth * sin + newDepth * cos) / 2.0);
                selectedPiece.setX(newX);
                selectedPiece.setY(newY);
                this.__parent.setPieceOfFurnitureSize(this.resizedPiece, newWidth, newDepth, newHeight);
            }
            planView.makePointVisible(x, y);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(newHeight), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureHeightState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureHeightResize(this.resizedPiece);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PieceOfFurnitureHeightState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PieceOfFurnitureHeightState.prototype.escape = function () {
            this.__parent.resetPieceOfFurnitureSize(this.resizedPiece);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureHeightState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.resizedPiece = null;
        };
        PieceOfFurnitureHeightState.prototype.getToolTipFeedbackText = function (height) {
            return CoreTools.format(this.resizeToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(height));
        };
        return PieceOfFurnitureHeightState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureHeightState = PieceOfFurnitureHeightState;
    PieceOfFurnitureHeightState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureHeightState";
    /**
     * Furniture resize state. This states manages the resizing of a piece of furniture.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureResizeState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureResizeState, _super);
        function PieceOfFurnitureResizeState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.widthOrDepthResizingActivated === undefined) {
                _this.widthOrDepthResizingActivated = false;
            }
            if (_this.deltaXToResizePoint === undefined) {
                _this.deltaXToResizePoint = 0;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.resizedPiece === undefined) {
                _this.resizedPiece = null;
            }
            if (_this.resizedPieceWidthInPlan === undefined) {
                _this.resizedPieceWidthInPlan = 0;
            }
            if (_this.resizePoint === undefined) {
                _this.resizePoint = null;
            }
            if (_this.topLeftPoint === undefined) {
                _this.topLeftPoint = null;
            }
            if (_this.widthResizeToolTipFeedback === undefined) {
                _this.widthResizeToolTipFeedback = null;
            }
            if (_this.depthResizeToolTipFeedback === undefined) {
                _this.depthResizeToolTipFeedback = null;
            }
            if (_this.heightResizeToolTipFeedback === undefined) {
                _this.heightResizeToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureResizeState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureResizeState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureResizeState.prototype.isBasePlanModificationState = function () {
            return this.resizedPiece != null && this.__parent.isPieceOfFurniturePartOfBasePlan(this.resizedPiece.getPieceOfFurniture());
        };
        /**
         *
         */
        PieceOfFurnitureResizeState.prototype.enter = function () {
            this.widthResizeToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "widthResizeToolTipFeedback");
            this.depthResizeToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "depthResizeToolTipFeedback");
            this.heightResizeToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "heightResizeToolTipFeedback");
            var selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.resizedPiece = new PlanController.ResizedPieceOfFurniture(selectedPiece);
            this.resizedPieceWidthInPlan = selectedPiece.getWidthInPlan();
            var resizedPiecePoints = selectedPiece.getPoints();
            this.resizePoint = resizedPiecePoints[2];
            this.deltaXToResizePoint = this.__parent.getXLastMousePress() - this.resizePoint[0];
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - this.resizePoint[1];
            this.topLeftPoint = resizedPiecePoints[0];
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.widthOrDepthResizingActivated = this.__parent.wasDuplicationActivatedLastMousePress();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(selectedPiece.getWidth(), selectedPiece.getDepth(), selectedPiece.getHeight()), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureResizeState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var selectedPiece = this.resizedPiece.getPieceOfFurniture();
            var angle = selectedPiece.getAngle();
            var cos = Math.cos(angle);
            var sin = Math.sin(angle);
            var deltaX = x - this.deltaXToResizePoint - this.topLeftPoint[0];
            var deltaY = y - this.deltaYToResizePoint - this.topLeftPoint[1];
            var newWidth = (deltaY * sin + deltaX * cos);
            if (this.magnetismEnabled) {
                newWidth = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(newWidth, planView.getPixelLength());
            }
            newWidth = Math.min(Math.max(newWidth, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMinimumLength()), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength());
            var newDepth = this.resizedPiece.getDepth();
            var newHeight = this.resizedPiece.getHeight();
            var doorOrWindowBoundToWall = this.resizedPiece.isDoorOrWindowBoundToWall();
            if (this.isProprortionallyResized(selectedPiece)) {
                var scale = newWidth / this.resizedPieceWidthInPlan;
                newWidth = this.resizedPiece.getWidth() * scale;
                newDepth = this.resizedPiece.getDepth() * scale;
                newHeight = this.resizedPiece.getHeight() * scale;
                doorOrWindowBoundToWall = newDepth === this.resizedPiece.getDepth();
            }
            else if (!selectedPiece.isWidthDepthDeformable()) {
                newDepth = this.resizedPiece.getDepth() * newWidth / this.resizedPiece.getWidth();
            }
            else if (!this.resizedPiece.isDoorOrWindowBoundToWall() || !this.magnetismEnabled || this.widthOrDepthResizingActivated) {
                newDepth = (deltaY * cos - deltaX * sin);
                if (this.magnetismEnabled) {
                    newDepth = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(newDepth, planView.getPixelLength());
                }
                newDepth = Math.min(Math.max(newDepth, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMinimumLength()), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength());
                doorOrWindowBoundToWall = newDepth === this.resizedPiece.getDepth();
                if (this.widthOrDepthResizingActivated) {
                    if ( /* signum */(function (f) { if (f > 0) {
                        return 1;
                    }
                    else if (f < 0) {
                        return -1;
                    }
                    else {
                        return 0;
                    } })(java.awt.geom.Line2D.relativeCCW(this.topLeftPoint[0], this.topLeftPoint[1], this.resizePoint[0], this.resizePoint[1], x - this.deltaXToResizePoint, y - this.deltaYToResizePoint)) >= 0) {
                        newDepth = this.resizedPiece.getDepth();
                    }
                    else {
                        newWidth = this.resizedPiece.getWidth();
                    }
                }
            }
            this.__parent.setPieceOfFurnitureSize(this.resizedPiece, newWidth, newDepth, newHeight);
            if (this.resizedPiece.isDoorOrWindowBoundToWall()) {
                selectedPiece.setBoundToWall(this.magnetismEnabled && doorOrWindowBoundToWall);
            }
            var newX = (this.topLeftPoint[0] + (selectedPiece.getWidthInPlan() * cos - selectedPiece.getDepthInPlan() * sin) / 2.0);
            var newY = (this.topLeftPoint[1] + (selectedPiece.getWidthInPlan() * sin + selectedPiece.getDepthInPlan() * cos) / 2.0);
            selectedPiece.setX(newX);
            selectedPiece.setY(newY);
            planView.makePointVisible(x, y);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(newWidth, newDepth, newHeight), x, y);
        };
        /**
         * Returns <code>true</code> if the <code>piece</code> should be proportionally resized.
         * @param {HomePieceOfFurniture} piece
         * @return {boolean}
         * @private
         */
        PieceOfFurnitureResizeState.prototype.isProprortionallyResized = function (piece) {
            return !piece.isDeformable() || piece.isHorizontallyRotated() || piece.getModelTransformations() != null || this.alignmentActivated;
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureResizeState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureWidthAndDepthResize(this.resizedPiece);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PieceOfFurnitureResizeState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        PieceOfFurnitureResizeState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} duplicationActivated
         */
        PieceOfFurnitureResizeState.prototype.setDuplicationActivated = function (duplicationActivated) {
            this.widthOrDepthResizingActivated = duplicationActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PieceOfFurnitureResizeState.prototype.escape = function () {
            this.__parent.resetPieceOfFurnitureSize(this.resizedPiece);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureResizeState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.resizedPiece = null;
        };
        PieceOfFurnitureResizeState.prototype.getToolTipFeedbackText = function (width, depth, height) {
            var toolTipFeedbackText = "<html>" + CoreTools.format(this.widthResizeToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(width));
            if (!(this.resizedPiece.getPieceOfFurniture() != null && this.resizedPiece.getPieceOfFurniture() instanceof HomeDoorOrWindow) || !this.resizedPiece.getPieceOfFurniture().isBoundToWall() || this.isProprortionallyResized(this.resizedPiece.getPieceOfFurniture())) {
                toolTipFeedbackText += "<br>" + CoreTools.format(this.depthResizeToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(depth));
            }
            if (this.isProprortionallyResized(this.resizedPiece.getPieceOfFurniture())) {
                toolTipFeedbackText += "<br>" + CoreTools.format(this.heightResizeToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(height));
            }
            return toolTipFeedbackText;
        };
        return PieceOfFurnitureResizeState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureResizeState = PieceOfFurnitureResizeState;
    PieceOfFurnitureResizeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureResizeState";
    /**
     * Light power state. This states manages the power modification of a light.
     * @extends PlanController.ControllerState
     * @class
     */
    var LightPowerModificationState = /** @class */ (function (_super) {
        __extends(LightPowerModificationState, _super);
        function LightPowerModificationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.deltaXToModificationPoint === undefined) {
                _this.deltaXToModificationPoint = 0;
            }
            if (_this.selectedLight === undefined) {
                _this.selectedLight = null;
            }
            if (_this.oldPower === undefined) {
                _this.oldPower = 0;
            }
            if (_this.lightPowerToolTipFeedback === undefined) {
                _this.lightPowerToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        LightPowerModificationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        LightPowerModificationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        LightPowerModificationState.prototype.enter = function () {
            this.lightPowerToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "lightPowerToolTipFeedback");
            this.selectedLight = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            var resizePoint = this.selectedLight.getPoints()[3];
            this.deltaXToModificationPoint = this.__parent.getXLastMousePress() - resizePoint[0];
            this.oldPower = this.selectedLight.getPower();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldPower), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        LightPowerModificationState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var bottomLeftPoint = this.selectedLight.getPoints()[3];
            var deltaX = x - this.deltaXToModificationPoint - bottomLeftPoint[0];
            var newPower = this.oldPower + deltaX / 100.0 * this.__parent.getScale();
            newPower = Math.min(Math.max(newPower, 0.0), 1.0);
            this.selectedLight.setPower(newPower);
            planView.makePointVisible(x, y);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(newPower), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        LightPowerModificationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postLightPowerModification(this.selectedLight, this.oldPower);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        LightPowerModificationState.prototype.escape = function () {
            this.selectedLight.setPower(this.oldPower);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        LightPowerModificationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedLight = null;
        };
        LightPowerModificationState.prototype.getToolTipFeedbackText = function (power) {
            return CoreTools.format(this.lightPowerToolTipFeedback, Math.round(power * 100));
        };
        return LightPowerModificationState;
    }(PlanController.ControllerState));
    PlanController.LightPowerModificationState = LightPowerModificationState;
    LightPowerModificationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LightPowerModificationState";
    /**
     * Furniture name offset state. This state manages the name offset of a piece of furniture.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureNameOffsetState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureNameOffsetState, _super);
        function PieceOfFurnitureNameOffsetState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedPiece === undefined) {
                _this.selectedPiece = null;
            }
            if (_this.oldNameXOffset === undefined) {
                _this.oldNameXOffset = 0;
            }
            if (_this.oldNameYOffset === undefined) {
                _this.oldNameYOffset = 0;
            }
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = 0;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = 0;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureNameOffsetState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureNameOffsetState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        PieceOfFurnitureNameOffsetState.prototype.enter = function () {
            this.selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldNameXOffset = this.selectedPiece.getNameXOffset();
            this.oldNameYOffset = this.selectedPiece.getNameYOffset();
            this.xLastMouseMove = this.__parent.getXLastMousePress();
            this.yLastMouseMove = this.__parent.getYLastMousePress();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureNameOffsetState.prototype.moveMouse = function (x, y) {
            if (this.alignmentActivated) {
                var alignedPoint = new PlanController.PointWithAngleMagnetism(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), this.__parent.getView().getPixelLength(), 4);
                x = alignedPoint.getX();
                y = alignedPoint.getY();
            }
            this.selectedPiece.setNameXOffset(this.selectedPiece.getNameXOffset() + x - this.xLastMouseMove);
            this.selectedPiece.setNameYOffset(this.selectedPiece.getNameYOffset() + y - this.yLastMouseMove);
            this.xLastMouseMove = x;
            this.yLastMouseMove = y;
            this.__parent.getView().makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureNameOffsetState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureNameOffset(this.selectedPiece, this.oldNameXOffset, this.oldNameYOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureNameOffsetState.prototype.escape = function () {
            this.selectedPiece.setNameXOffset(this.oldNameXOffset);
            this.selectedPiece.setNameYOffset(this.oldNameYOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        PieceOfFurnitureNameOffsetState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PieceOfFurnitureNameOffsetState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedPiece = null;
        };
        return PieceOfFurnitureNameOffsetState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureNameOffsetState = PieceOfFurnitureNameOffsetState;
    PieceOfFurnitureNameOffsetState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureNameOffsetState";
    /**
     * Furniture name rotation state. This state manages the name rotation of a piece of furniture.
     * @extends PlanController.ControllerState
     * @class
     */
    var PieceOfFurnitureNameRotationState = /** @class */ (function (_super) {
        __extends(PieceOfFurnitureNameRotationState, _super);
        function PieceOfFurnitureNameRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedPiece === undefined) {
                _this.selectedPiece = null;
            }
            if (_this.oldNameAngle === undefined) {
                _this.oldNameAngle = 0;
            }
            if (_this.angleMousePress === undefined) {
                _this.angleMousePress = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PieceOfFurnitureNameRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PieceOfFurnitureNameRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        PieceOfFurnitureNameRotationState.prototype.enter = function () {
            this.selectedPiece = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.angleMousePress = Math.atan2(this.selectedPiece.getY() + this.selectedPiece.getNameYOffset() - this.__parent.getYLastMousePress(), this.__parent.getXLastMousePress() - this.selectedPiece.getX() - this.selectedPiece.getNameXOffset());
            this.oldNameAngle = this.selectedPiece.getNameAngle();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureNameRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedPiece.getX() + this.selectedPiece.getNameXOffset() || y !== this.selectedPiece.getY() + this.selectedPiece.getNameYOffset()) {
                var angleMouseMove = Math.atan2(this.selectedPiece.getY() + this.selectedPiece.getNameYOffset() - y, x - this.selectedPiece.getX() - this.selectedPiece.getNameXOffset());
                var newAngle = this.oldNameAngle - angleMouseMove + this.angleMousePress;
                if (this.alignmentActivated || this.magnetismEnabled) {
                    var angleStep = 2 * Math.PI / PieceOfFurnitureNameRotationState.STEP_COUNT;
                    newAngle = Math.round(newAngle / angleStep) * angleStep;
                }
                this.selectedPiece.setNameAngle(newAngle);
                this.__parent.getView().makePointVisible(x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PieceOfFurnitureNameRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPieceOfFurnitureNameRotation(this.selectedPiece, this.oldNameAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PieceOfFurnitureNameRotationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        PieceOfFurnitureNameRotationState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PieceOfFurnitureNameRotationState.prototype.escape = function () {
            this.selectedPiece.setNameAngle(this.oldNameAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PieceOfFurnitureNameRotationState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedPiece = null;
        };
        PieceOfFurnitureNameRotationState.STEP_COUNT = 24;
        return PieceOfFurnitureNameRotationState;
    }(PlanController.ControllerState));
    PlanController.PieceOfFurnitureNameRotationState = PieceOfFurnitureNameRotationState;
    PieceOfFurnitureNameRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PieceOfFurnitureNameRotationState";
    /**
     * Camera yaw change state. This states manages the change of the observer camera yaw angle.
     * @extends PlanController.ControllerState
     * @class
     */
    var CameraYawRotationState = /** @class */ (function (_super) {
        __extends(CameraYawRotationState, _super);
        function CameraYawRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedCamera === undefined) {
                _this.selectedCamera = null;
            }
            if (_this.oldYaw === undefined) {
                _this.oldYaw = 0;
            }
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = 0;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = 0;
            }
            if (_this.angleLastMouseMove === undefined) {
                _this.angleLastMouseMove = 0;
            }
            if (_this.rotationToolTipFeedback === undefined) {
                _this.rotationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        CameraYawRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        CameraYawRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        CameraYawRotationState.prototype.enter = function () {
            this.rotationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "cameraYawRotationToolTipFeedback");
            this.selectedCamera = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldYaw = this.selectedCamera.getYaw();
            this.xLastMouseMove = this.__parent.getXLastMousePress();
            this.yLastMouseMove = this.__parent.getYLastMousePress();
            this.angleLastMouseMove = Math.atan2(this.selectedCamera.getY() - this.yLastMouseMove, this.xLastMouseMove - this.selectedCamera.getX());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldYaw), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CameraYawRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedCamera.getX() || y !== this.selectedCamera.getY()) {
                var angleMouseMove = Math.atan2(this.selectedCamera.getY() - y, x - this.selectedCamera.getX());
                var deltaYaw = this.angleLastMouseMove - angleMouseMove;
                var orientation_1 = (function (f) { if (f > 0) {
                    return 1;
                }
                else if (f < 0) {
                    return -1;
                }
                else {
                    return 0;
                } })((y - this.selectedCamera.getY()) * (this.xLastMouseMove - this.selectedCamera.getX()) - (this.yLastMouseMove - this.selectedCamera.getY()) * (x - this.selectedCamera.getX()));
                if (orientation_1 < 0 && deltaYaw > 0) {
                    deltaYaw -= (Math.PI * 2.0);
                }
                else if (orientation_1 > 0 && deltaYaw < 0) {
                    deltaYaw += (Math.PI * 2.0);
                }
                var newYaw = this.selectedCamera.getYaw() + deltaYaw;
                this.selectedCamera.setYaw(newYaw);
                this.__parent.getView().setToolTipFeedback(this.getToolTipFeedbackText(newYaw), x, y);
                this.xLastMouseMove = x;
                this.yLastMouseMove = y;
                this.angleLastMouseMove = angleMouseMove;
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CameraYawRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CameraYawRotationState.prototype.escape = function () {
            this.selectedCamera.setYaw(this.oldYaw);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CameraYawRotationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedCamera = null;
        };
        CameraYawRotationState.prototype.getToolTipFeedbackText = function (angle) {
            return CoreTools.format(this.rotationToolTipFeedback, (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(angle)) + 360) % 360);
        };
        return CameraYawRotationState;
    }(PlanController.ControllerState));
    PlanController.CameraYawRotationState = CameraYawRotationState;
    CameraYawRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CameraYawRotationState";
    /**
     * Camera pitch rotation state. This states manages the change of the observer camera pitch angle.
     * @extends PlanController.ControllerState
     * @class
     */
    var CameraPitchRotationState = /** @class */ (function (_super) {
        __extends(CameraPitchRotationState, _super);
        function CameraPitchRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedCamera === undefined) {
                _this.selectedCamera = null;
            }
            if (_this.oldPitch === undefined) {
                _this.oldPitch = 0;
            }
            if (_this.rotationToolTipFeedback === undefined) {
                _this.rotationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        CameraPitchRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        CameraPitchRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        CameraPitchRotationState.prototype.enter = function () {
            this.rotationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "cameraPitchRotationToolTipFeedback");
            this.selectedCamera = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldPitch = this.selectedCamera.getPitch();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldPitch), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CameraPitchRotationState.prototype.moveMouse = function (x, y) {
            var newPitch = (this.oldPitch + (y - this.__parent.getYLastMousePress()) * Math.cos(this.selectedCamera.getYaw()) * Math.PI / 360 - (x - this.__parent.getXLastMousePress()) * Math.sin(this.selectedCamera.getYaw()) * Math.PI / 360);
            newPitch = Math.max(newPitch, -Math.PI / 2);
            newPitch = Math.min(newPitch, Math.PI / 2);
            this.selectedCamera.setPitch(newPitch);
            this.__parent.getView().setToolTipFeedback(this.getToolTipFeedbackText(newPitch), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CameraPitchRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CameraPitchRotationState.prototype.escape = function () {
            this.selectedCamera.setPitch(this.oldPitch);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CameraPitchRotationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedCamera = null;
        };
        CameraPitchRotationState.prototype.getToolTipFeedbackText = function (angle) {
            return CoreTools.format(this.rotationToolTipFeedback, Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(angle)) % 360);
        };
        return CameraPitchRotationState;
    }(PlanController.ControllerState));
    PlanController.CameraPitchRotationState = CameraPitchRotationState;
    CameraPitchRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CameraPitchRotationState";
    /**
     * Camera elevation state. This states manages the change of the observer camera elevation.
     * @extends PlanController.ControllerState
     * @class
     */
    var CameraElevationState = /** @class */ (function (_super) {
        __extends(CameraElevationState, _super);
        function CameraElevationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedCamera === undefined) {
                _this.selectedCamera = null;
            }
            if (_this.oldElevation === undefined) {
                _this.oldElevation = 0;
            }
            if (_this.cameraElevationToolTipFeedback === undefined) {
                _this.cameraElevationToolTipFeedback = null;
            }
            if (_this.observerHeightToolTipFeedback === undefined) {
                _this.observerHeightToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        CameraElevationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        CameraElevationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        CameraElevationState.prototype.enter = function () {
            this.cameraElevationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "cameraElevationToolTipFeedback");
            this.observerHeightToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "observerHeightToolTipFeedback");
            this.selectedCamera = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldElevation = this.selectedCamera.getZ();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldElevation), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CameraElevationState.prototype.moveMouse = function (x, y) {
            var newElevation = (this.oldElevation - (y - this.__parent.getYLastMousePress()));
            var levels = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getLevels();
            var minimumElevation = levels.length === 0 ? 10 : 10 + /* get */ levels[0].getElevation();
            newElevation = Math.min(Math.max(newElevation, minimumElevation), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumElevation());
            this.selectedCamera.setZ(newElevation);
            this.__parent.getView().setToolTipFeedback(this.getToolTipFeedbackText(newElevation), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CameraElevationState.prototype.releaseMouse = function (x, y) {
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CameraElevationState.prototype.escape = function () {
            this.selectedCamera.setZ(this.oldElevation);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CameraElevationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedCamera = null;
        };
        CameraElevationState.prototype.getToolTipFeedbackText = function (elevation) {
            var toolTipFeedbackText = "<html>" + CoreTools.format(this.cameraElevationToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(elevation));
            if (!this.selectedCamera.isFixedSize() && elevation >= 70 && elevation <= 218.75) {
                toolTipFeedbackText += "<br>" + CoreTools.format(this.observerHeightToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(elevation * 15 / 14));
            }
            return toolTipFeedbackText;
        };
        return CameraElevationState;
    }(PlanController.ControllerState));
    PlanController.CameraElevationState = CameraElevationState;
    CameraElevationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CameraElevationState";
    /**
     * Dimension line drawing state. This state manages dimension line creation at mouse press.
     * @extends PlanController.ControllerState
     * @class
     */
    var DimensionLineDrawingState = /** @class */ (function (_super) {
        __extends(DimensionLineDrawingState, _super);
        function DimensionLineDrawingState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.editingStartPoint === undefined) {
                _this.editingStartPoint = false;
            }
            if (_this.newDimensionLine === undefined) {
                _this.newDimensionLine = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.offsetChoice === undefined) {
                _this.offsetChoice = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        DimensionLineDrawingState.prototype.getMode = function () {
            return PlanController.Mode.DIMENSION_LINE_CREATION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        DimensionLineDrawingState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        DimensionLineDrawingState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         * @param {PlanController.Mode} mode
         */
        DimensionLineDrawingState.prototype.setMode = function (mode) {
            this.escape();
            if (mode === PlanController.Mode.SELECTION_$LI$()) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else if (mode === PlanController.Mode.PANNING_$LI$()) {
                this.__parent.setState(this.__parent.getPanningState());
            }
            else if (mode === PlanController.Mode.WALL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getWallCreationState());
            }
            else if (mode === PlanController.Mode.ROOM_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getRoomCreationState());
            }
            else if (mode === PlanController.Mode.POLYLINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getPolylineCreationState());
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getLabelCreationState());
            }
        };
        /**
         *
         */
        DimensionLineDrawingState.prototype.enter = function () {
            this.oldSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            this.oldBasePlanLocked = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            this.oldAllLevelsSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            this.xStart = this.__parent.getXLastMouseMove();
            this.yStart = this.__parent.getYLastMouseMove();
            this.editingStartPoint = false;
            this.offsetChoice = false;
            this.newDimensionLine = null;
            this.__parent.deselectAll();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            var dimensionLine = this.__parent.getMeasuringDimensionLineAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), this.magnetismEnabled);
            if (dimensionLine != null) {
                this.__parent.getView().setDimensionLinesFeedback(/* asList */ [dimensionLine].slice(0));
            }
            this.__parent.getView().setAlignmentFeedback(DimensionLine, null, this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), false);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineDrawingState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            planView.deleteFeedback();
            if (this.offsetChoice) {
                var distanceToDimensionLine = java.awt.geom.Line2D.ptLineDist(this.newDimensionLine.getXStart(), this.newDimensionLine.getYStart(), this.newDimensionLine.getXEnd(), this.newDimensionLine.getYEnd(), x, y);
                if (this.newDimensionLine.getLength() > 0) {
                    var relativeCCW = java.awt.geom.Line2D.relativeCCW(this.newDimensionLine.getXStart(), this.newDimensionLine.getYStart(), this.newDimensionLine.getXEnd(), this.newDimensionLine.getYEnd(), x, y);
                    this.newDimensionLine.setOffset(-(function (f) { if (f > 0) {
                        return 1;
                    }
                    else if (f < 0) {
                        return -1;
                    }
                    else {
                        return 0;
                    } })(relativeCCW) * distanceToDimensionLine);
                }
            }
            else {
                var newX = void 0;
                var newY = void 0;
                if (this.magnetismEnabled || this.alignmentActivated) {
                    var point = new PlanController.PointWithAngleMagnetism(this.xStart, this.yStart, x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                    newX = point.getX();
                    newY = point.getY();
                }
                else {
                    newX = x;
                    newY = y;
                }
                if (this.newDimensionLine == null) {
                    this.newDimensionLine = this.__parent.createDimensionLine(this.xStart, this.yStart, newX, newY, 0);
                    this.__parent.getView().setDimensionLinesFeedback(null);
                }
                else {
                    if (this.editingStartPoint) {
                        this.newDimensionLine.setXStart(newX);
                        this.newDimensionLine.setYStart(newY);
                    }
                    else {
                        this.newDimensionLine.setXEnd(newX);
                        this.newDimensionLine.setYEnd(newY);
                    }
                }
                this.updateReversedDimensionLine();
                planView.setAlignmentFeedback(DimensionLine, this.newDimensionLine, newX, newY, false);
            }
            planView.makePointVisible(x, y);
        };
        /**
         * Swaps start and end point of the created dimension line if needed
         * to ensure its text is never upside down.
         * @private
         */
        DimensionLineDrawingState.prototype.updateReversedDimensionLine = function () {
            var angle = this.getDimensionLineAngle();
            var reverse = angle < -Math.PI / 2 || angle > Math.PI / 2;
            if ((reverse) !== (this.editingStartPoint)) {
                PlanController.reverseDimensionLine(this.newDimensionLine);
                this.editingStartPoint = !this.editingStartPoint;
            }
        };
        DimensionLineDrawingState.prototype.getDimensionLineAngle = function () {
            if (this.newDimensionLine.getLength() === 0) {
                return 0;
            }
            else {
                if (this.editingStartPoint) {
                    return Math.atan2(this.yStart - this.newDimensionLine.getYStart(), this.newDimensionLine.getXStart() - this.xStart);
                }
                else {
                    return Math.atan2(this.yStart - this.newDimensionLine.getYEnd(), this.newDimensionLine.getXEnd() - this.xStart);
                }
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        DimensionLineDrawingState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (this.newDimensionLine == null && clickCount === 2) {
                var dimensionLine = this.__parent.getMeasuringDimensionLineAt(x, y, this.magnetismEnabled);
                if (dimensionLine != null) {
                    this.newDimensionLine = this.__parent.createDimensionLine(dimensionLine.getXStart(), dimensionLine.getYStart(), dimensionLine.getXEnd(), dimensionLine.getYEnd(), dimensionLine.getOffset());
                    if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                        this.validateDrawnDimensionLine();
                    }
                }
                else {
                    this.__parent.setState(this.__parent.getDimensionLineCreationState());
                    return;
                }
            }
            if (this.newDimensionLine != null) {
                if (this.offsetChoice) {
                    this.validateDrawnDimensionLine();
                }
                else {
                    this.offsetChoice = true;
                    var planView = this.__parent.getView();
                    planView.setCursor(PlanView.CursorType.HEIGHT);
                    planView.deleteFeedback();
                }
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineDrawingState.prototype.releaseMouse = function (x, y) {
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH && this.newDimensionLine != null) {
                this.validateDrawnDimensionLine();
            }
        };
        DimensionLineDrawingState.prototype.validateDrawnDimensionLine = function () {
            this.__parent.selectItem(this.newDimensionLine);
            this.__parent.postCreateDimensionLines(/* asList */ [this.newDimensionLine].slice(0), this.oldSelection, this.oldBasePlanLocked, this.oldAllLevelsSelection);
            this.newDimensionLine = null;
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        DimensionLineDrawingState.prototype.setEditionActivated = function (editionActivated) {
            var planView = this.__parent.getView();
            if (editionActivated) {
                planView.deleteFeedback();
                if (this.newDimensionLine == null) {
                    planView.setToolTipEditedProperties(["X", "Y"], [this.xStart, this.yStart], this.xStart, this.yStart);
                }
                else if (this.offsetChoice) {
                    planView.setToolTipEditedProperties(["OFFSET"], [this.newDimensionLine.getOffset()], this.newDimensionLine.getXEnd(), this.newDimensionLine.getYEnd());
                }
                else {
                    planView.setToolTipEditedProperties(["LENGTH", "ANGLE"], [this.newDimensionLine.getLength(), (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(this.getDimensionLineAngle())) | 0)], this.newDimensionLine.getXEnd(), this.newDimensionLine.getYEnd());
                }
            }
            else {
                if (this.newDimensionLine == null) {
                    var lengthUnit = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit();
                    var defaultLength = lengthUnit === LengthUnit.INCH || lengthUnit === LengthUnit.INCH_DECIMALS ? LengthUnit.footToCentimeter(3) : 100;
                    this.newDimensionLine = this.__parent.createDimensionLine(this.xStart, this.yStart, this.xStart + defaultLength, this.yStart, 0);
                    planView.deleteFeedback();
                    this.setEditionActivated(true);
                }
                else if (this.offsetChoice) {
                    this.validateDrawnDimensionLine();
                }
                else {
                    this.offsetChoice = true;
                    this.setEditionActivated(true);
                }
            }
        };
        /**
         *
         * @param {string} editableProperty
         * @param {Object} value
         */
        DimensionLineDrawingState.prototype.updateEditableProperty = function (editableProperty, value) {
            var planView = this.__parent.getView();
            var maximumLength = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength();
            if (this.newDimensionLine == null) {
                switch ((editableProperty)) {
                    case "X":
                        this.xStart = value != null ? /* floatValue */ value : 0;
                        this.xStart = Math.max(-maximumLength, Math.min(this.xStart, maximumLength));
                        break;
                    case "Y":
                        this.yStart = value != null ? /* floatValue */ value : 0;
                        this.yStart = Math.max(-maximumLength, Math.min(this.yStart, maximumLength));
                        break;
                }
                planView.setAlignmentFeedback(DimensionLine, null, this.xStart, this.yStart, true);
                planView.makePointVisible(this.xStart, this.yStart);
            }
            else if (this.offsetChoice) {
                if (editableProperty === "OFFSET") {
                    var offset = value != null ? /* floatValue */ value : 0;
                    offset = Math.max(-maximumLength, Math.min(offset, maximumLength));
                    this.newDimensionLine.setOffset(offset);
                }
            }
            else {
                var newX = void 0;
                var newY = void 0;
                switch ((editableProperty)) {
                    case "LENGTH":
                        var length_1 = value != null ? /* floatValue */ value : 0;
                        length_1 = Math.max(0.001, Math.min(length_1, maximumLength));
                        var dimensionLineAngle = this.getDimensionLineAngle();
                        newX = (this.xStart + length_1 * Math.cos(dimensionLineAngle));
                        newY = (this.yStart - length_1 * Math.sin(dimensionLineAngle));
                        break;
                    case "ANGLE":
                        dimensionLineAngle = /* toRadians */ (function (x) { return x * Math.PI / 180; })(value != null ? /* floatValue */ value : 0);
                        var dimensionLineLength = this.newDimensionLine.getLength();
                        newX = (this.xStart + dimensionLineLength * Math.cos(dimensionLineAngle));
                        newY = (this.yStart - dimensionLineLength * Math.sin(dimensionLineAngle));
                        break;
                    default:
                        return;
                }
                if (this.editingStartPoint) {
                    this.newDimensionLine.setXStart(newX);
                    this.newDimensionLine.setYStart(newY);
                }
                else {
                    this.newDimensionLine.setXEnd(newX);
                    this.newDimensionLine.setYEnd(newY);
                }
                this.updateReversedDimensionLine();
                planView.setAlignmentFeedback(DimensionLine, this.newDimensionLine, newX, newY, false);
                planView.makePointVisible(this.xStart, this.yStart);
                planView.makePointVisible(newX, newY);
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        DimensionLineDrawingState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.newDimensionLine != null && !this.offsetChoice) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        DimensionLineDrawingState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        DimensionLineDrawingState.prototype.escape = function () {
            if (this.newDimensionLine != null) {
                this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteDimensionLine(this.newDimensionLine);
            }
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
        };
        /**
         *
         */
        DimensionLineDrawingState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
            this.newDimensionLine = null;
            this.oldSelection = null;
        };
        return DimensionLineDrawingState;
    }(PlanController.ControllerState));
    PlanController.DimensionLineDrawingState = DimensionLineDrawingState;
    DimensionLineDrawingState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLineDrawingState";
    /**
     * Dimension line resize state. This state manages dimension line resizing.
     * @extends PlanController.ControllerState
     * @class
     */
    var DimensionLineResizeState = /** @class */ (function (_super) {
        __extends(DimensionLineResizeState, _super);
        function DimensionLineResizeState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedDimensionLine === undefined) {
                _this.selectedDimensionLine = null;
            }
            if (_this.editingStartPoint === undefined) {
                _this.editingStartPoint = false;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.reversedDimensionLine === undefined) {
                _this.reversedDimensionLine = false;
            }
            if (_this.deltaXToResizePoint === undefined) {
                _this.deltaXToResizePoint = 0;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.distanceFromResizePointToDimensionBaseLine === undefined) {
                _this.distanceFromResizePointToDimensionBaseLine = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        DimensionLineResizeState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        DimensionLineResizeState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        DimensionLineResizeState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        DimensionLineResizeState.prototype.enter = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            this.selectedDimensionLine = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.editingStartPoint = this.selectedDimensionLine === this.__parent.getResizedDimensionLineStartAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            if (this.editingStartPoint) {
                this.oldX = this.selectedDimensionLine.getXStart();
                this.oldY = this.selectedDimensionLine.getYStart();
            }
            else {
                this.oldX = this.selectedDimensionLine.getXEnd();
                this.oldY = this.selectedDimensionLine.getYEnd();
            }
            this.reversedDimensionLine = false;
            var xResizePoint;
            var yResizePoint;
            var alpha1 = (this.selectedDimensionLine.getYEnd() - this.selectedDimensionLine.getYStart()) / (this.selectedDimensionLine.getXEnd() - this.selectedDimensionLine.getXStart());
            if (Math.abs(alpha1) > 100000.0) {
                xResizePoint = this.__parent.getXLastMousePress();
                if (this.editingStartPoint) {
                    yResizePoint = this.selectedDimensionLine.getYStart();
                }
                else {
                    yResizePoint = this.selectedDimensionLine.getYEnd();
                }
            }
            else if (this.selectedDimensionLine.getYStart() === this.selectedDimensionLine.getYEnd()) {
                if (this.editingStartPoint) {
                    xResizePoint = this.selectedDimensionLine.getXStart();
                }
                else {
                    xResizePoint = this.selectedDimensionLine.getXEnd();
                }
                yResizePoint = this.__parent.getYLastMousePress();
            }
            else {
                var beta1 = this.__parent.getYLastMousePress() - alpha1 * this.__parent.getXLastMousePress();
                var alpha2 = -1 / alpha1;
                var beta2 = void 0;
                if (this.editingStartPoint) {
                    beta2 = this.selectedDimensionLine.getYStart() - alpha2 * this.selectedDimensionLine.getXStart();
                }
                else {
                    beta2 = this.selectedDimensionLine.getYEnd() - alpha2 * this.selectedDimensionLine.getXEnd();
                }
                xResizePoint = (beta2 - beta1) / (alpha1 - alpha2);
                yResizePoint = alpha1 * xResizePoint + beta1;
            }
            this.deltaXToResizePoint = this.__parent.getXLastMousePress() - xResizePoint;
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - yResizePoint;
            if (this.editingStartPoint) {
                this.distanceFromResizePointToDimensionBaseLine = java.awt.geom.Point2D.distance(xResizePoint, yResizePoint, this.selectedDimensionLine.getXStart(), this.selectedDimensionLine.getYStart());
                planView.setAlignmentFeedback(DimensionLine, this.selectedDimensionLine, this.selectedDimensionLine.getXStart(), this.selectedDimensionLine.getYStart(), false);
            }
            else {
                this.distanceFromResizePointToDimensionBaseLine = java.awt.geom.Point2D.distance(xResizePoint, yResizePoint, this.selectedDimensionLine.getXEnd(), this.selectedDimensionLine.getYEnd());
                planView.setAlignmentFeedback(DimensionLine, this.selectedDimensionLine, this.selectedDimensionLine.getXEnd(), this.selectedDimensionLine.getYEnd(), false);
            }
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineResizeState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var xResizePoint = x - this.deltaXToResizePoint;
            var yResizePoint = y - this.deltaYToResizePoint;
            if (this.editingStartPoint) {
                var distanceFromResizePointToDimensionLineEnd = java.awt.geom.Point2D.distance(xResizePoint, yResizePoint, this.selectedDimensionLine.getXEnd(), this.selectedDimensionLine.getYEnd());
                var distanceFromDimensionLineStartToDimensionLineEnd = Math.sqrt(distanceFromResizePointToDimensionLineEnd * distanceFromResizePointToDimensionLineEnd - this.distanceFromResizePointToDimensionBaseLine * this.distanceFromResizePointToDimensionBaseLine);
                if (distanceFromDimensionLineStartToDimensionLineEnd > 0) {
                    var dimensionLineRelativeAngle = -Math.atan2(this.distanceFromResizePointToDimensionBaseLine, distanceFromDimensionLineStartToDimensionLineEnd);
                    if (this.selectedDimensionLine.getOffset() >= 0) {
                        dimensionLineRelativeAngle = -dimensionLineRelativeAngle;
                    }
                    var resizePointToDimensionLineEndAngle = Math.atan2(yResizePoint - this.selectedDimensionLine.getYEnd(), xResizePoint - this.selectedDimensionLine.getXEnd());
                    var dimensionLineStartToDimensionLineEndAngle = dimensionLineRelativeAngle + resizePointToDimensionLineEndAngle;
                    var xNewStartPoint = this.selectedDimensionLine.getXEnd() + (distanceFromDimensionLineStartToDimensionLineEnd * Math.cos(dimensionLineStartToDimensionLineEndAngle));
                    var yNewStartPoint = this.selectedDimensionLine.getYEnd() + (distanceFromDimensionLineStartToDimensionLineEnd * Math.sin(dimensionLineStartToDimensionLineEndAngle));
                    if (this.alignmentActivated || this.magnetismEnabled) {
                        var point = new PlanController.PointWithAngleMagnetism(this.selectedDimensionLine.getXEnd(), this.selectedDimensionLine.getYEnd(), xNewStartPoint, yNewStartPoint, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                        xNewStartPoint = point.getX();
                        yNewStartPoint = point.getY();
                    }
                    PlanController.moveDimensionLinePoint(this.selectedDimensionLine, xNewStartPoint, yNewStartPoint, this.editingStartPoint);
                    this.updateReversedDimensionLine();
                    planView.setAlignmentFeedback(DimensionLine, this.selectedDimensionLine, xNewStartPoint, yNewStartPoint, false);
                }
                else {
                    planView.deleteFeedback();
                }
            }
            else {
                var distanceFromResizePointToDimensionLineStart = java.awt.geom.Point2D.distance(xResizePoint, yResizePoint, this.selectedDimensionLine.getXStart(), this.selectedDimensionLine.getYStart());
                var distanceFromDimensionLineStartToDimensionLineEnd = Math.sqrt(distanceFromResizePointToDimensionLineStart * distanceFromResizePointToDimensionLineStart - this.distanceFromResizePointToDimensionBaseLine * this.distanceFromResizePointToDimensionBaseLine);
                if (distanceFromDimensionLineStartToDimensionLineEnd > 0) {
                    var dimensionLineRelativeAngle = Math.atan2(this.distanceFromResizePointToDimensionBaseLine, distanceFromDimensionLineStartToDimensionLineEnd);
                    if (this.selectedDimensionLine.getOffset() >= 0) {
                        dimensionLineRelativeAngle = -dimensionLineRelativeAngle;
                    }
                    var resizePointToDimensionLineStartAngle = Math.atan2(yResizePoint - this.selectedDimensionLine.getYStart(), xResizePoint - this.selectedDimensionLine.getXStart());
                    var dimensionLineStartToDimensionLineEndAngle = dimensionLineRelativeAngle + resizePointToDimensionLineStartAngle;
                    var xNewEndPoint = this.selectedDimensionLine.getXStart() + (distanceFromDimensionLineStartToDimensionLineEnd * Math.cos(dimensionLineStartToDimensionLineEndAngle));
                    var yNewEndPoint = this.selectedDimensionLine.getYStart() + (distanceFromDimensionLineStartToDimensionLineEnd * Math.sin(dimensionLineStartToDimensionLineEndAngle));
                    if (this.alignmentActivated || this.magnetismEnabled) {
                        var point = new PlanController.PointWithAngleMagnetism(this.selectedDimensionLine.getXStart(), this.selectedDimensionLine.getYStart(), xNewEndPoint, yNewEndPoint, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                        xNewEndPoint = point.getX();
                        yNewEndPoint = point.getY();
                    }
                    PlanController.moveDimensionLinePoint(this.selectedDimensionLine, xNewEndPoint, yNewEndPoint, this.editingStartPoint);
                    this.updateReversedDimensionLine();
                    planView.setAlignmentFeedback(DimensionLine, this.selectedDimensionLine, xNewEndPoint, yNewEndPoint, false);
                }
                else {
                    planView.deleteFeedback();
                }
            }
            this.__parent.getView().makePointVisible(x, y);
        };
        /**
         * Swaps start and end point of the dimension line if needed
         * to ensure its text is never upside down.
         * @private
         */
        DimensionLineResizeState.prototype.updateReversedDimensionLine = function () {
            var angle = this.getDimensionLineAngle();
            if (angle < -Math.PI / 2 || angle > Math.PI / 2) {
                PlanController.reverseDimensionLine(this.selectedDimensionLine);
                this.editingStartPoint = !this.editingStartPoint;
                this.reversedDimensionLine = !this.reversedDimensionLine;
            }
        };
        DimensionLineResizeState.prototype.getDimensionLineAngle = function () {
            if (this.selectedDimensionLine.getLength() === 0) {
                return 0;
            }
            else {
                return Math.atan2(this.selectedDimensionLine.getYStart() - this.selectedDimensionLine.getYEnd(), this.selectedDimensionLine.getXEnd() - this.selectedDimensionLine.getXStart());
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineResizeState.prototype.releaseMouse = function (x, y) {
            this.__parent.postDimensionLineResize(this.selectedDimensionLine, this.oldX, this.oldY, this.editingStartPoint, this.reversedDimensionLine);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        DimensionLineResizeState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        DimensionLineResizeState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        DimensionLineResizeState.prototype.escape = function () {
            if (this.reversedDimensionLine) {
                PlanController.reverseDimensionLine(this.selectedDimensionLine);
                this.editingStartPoint = !this.editingStartPoint;
            }
            PlanController.moveDimensionLinePoint(this.selectedDimensionLine, this.oldX, this.oldY, this.editingStartPoint);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        DimensionLineResizeState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.deleteFeedback();
            planView.setResizeIndicatorVisible(false);
            this.selectedDimensionLine = null;
        };
        return DimensionLineResizeState;
    }(PlanController.ControllerState));
    PlanController.DimensionLineResizeState = DimensionLineResizeState;
    DimensionLineResizeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLineResizeState";
    /**
     * Dimension line offset state. This state manages dimension line offset.
     * @extends PlanController.ControllerState
     * @class
     */
    var DimensionLineOffsetState = /** @class */ (function (_super) {
        __extends(DimensionLineOffsetState, _super);
        function DimensionLineOffsetState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedDimensionLine === undefined) {
                _this.selectedDimensionLine = null;
            }
            if (_this.oldOffset === undefined) {
                _this.oldOffset = 0;
            }
            if (_this.deltaXToOffsetPoint === undefined) {
                _this.deltaXToOffsetPoint = 0;
            }
            if (_this.deltaYToOffsetPoint === undefined) {
                _this.deltaYToOffsetPoint = 0;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        DimensionLineOffsetState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        DimensionLineOffsetState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        DimensionLineOffsetState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        DimensionLineOffsetState.prototype.enter = function () {
            this.selectedDimensionLine = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldOffset = this.selectedDimensionLine.getOffset();
            var angle = Math.atan2(this.selectedDimensionLine.getYEnd() - this.selectedDimensionLine.getYStart(), this.selectedDimensionLine.getXEnd() - this.selectedDimensionLine.getXStart());
            var dx = -Math.sin(angle) * this.oldOffset;
            var dy = Math.cos(angle) * this.oldOffset;
            var xMiddle = (this.selectedDimensionLine.getXStart() + this.selectedDimensionLine.getXEnd()) / 2 + dx;
            var yMiddle = (this.selectedDimensionLine.getYStart() + this.selectedDimensionLine.getYEnd()) / 2 + dy;
            this.deltaXToOffsetPoint = this.__parent.getXLastMousePress() - xMiddle;
            this.deltaYToOffsetPoint = this.__parent.getYLastMousePress() - yMiddle;
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineOffsetState.prototype.moveMouse = function (x, y) {
            var newX = x - this.deltaXToOffsetPoint;
            var newY = y - this.deltaYToOffsetPoint;
            var distanceToDimensionLine = java.awt.geom.Line2D.ptLineDist(this.selectedDimensionLine.getXStart(), this.selectedDimensionLine.getYStart(), this.selectedDimensionLine.getXEnd(), this.selectedDimensionLine.getYEnd(), newX, newY);
            var relativeCCW = java.awt.geom.Line2D.relativeCCW(this.selectedDimensionLine.getXStart(), this.selectedDimensionLine.getYStart(), this.selectedDimensionLine.getXEnd(), this.selectedDimensionLine.getYEnd(), newX, newY);
            this.selectedDimensionLine.setOffset(-(function (f) { if (f > 0) {
                return 1;
            }
            else if (f < 0) {
                return -1;
            }
            else {
                return 0;
            } })(relativeCCW) * distanceToDimensionLine);
            this.__parent.getView().makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineOffsetState.prototype.releaseMouse = function (x, y) {
            this.__parent.postDimensionLineOffset(this.selectedDimensionLine, this.oldOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        DimensionLineOffsetState.prototype.escape = function () {
            this.selectedDimensionLine.setOffset(this.oldOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        DimensionLineOffsetState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedDimensionLine = null;
        };
        return DimensionLineOffsetState;
    }(PlanController.ControllerState));
    PlanController.DimensionLineOffsetState = DimensionLineOffsetState;
    DimensionLineOffsetState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLineOffsetState";
    /**
     * Room modification state.
     * @extends PlanController.ControllerState
     * @class
     */
    var AbstractRoomState = /** @class */ (function (_super) {
        __extends(AbstractRoomState, _super);
        function AbstractRoomState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.roomSideLengthToolTipFeedback === undefined) {
                _this.roomSideLengthToolTipFeedback = null;
            }
            if (_this.roomSideAngleToolTipFeedback === undefined) {
                _this.roomSideAngleToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         */
        AbstractRoomState.prototype.enter = function () {
            this.roomSideLengthToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "roomSideLengthToolTipFeedback");
            try {
                this.roomSideAngleToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "roomSideAngleToolTipFeedback");
            }
            catch (ex) {
            }
        };
        AbstractRoomState.prototype.getToolTipFeedbackText = function (room, pointIndex) {
            var length = this.getRoomSideLength(room, pointIndex);
            var angle = this.getRoomSideAngle(room, pointIndex);
            var toolTipFeedbackText = "<html>" + CoreTools.format(this.roomSideLengthToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(length));
            if (this.roomSideAngleToolTipFeedback != null && this.roomSideAngleToolTipFeedback.length > 0) {
                toolTipFeedbackText += "<br>" + CoreTools.format(this.roomSideAngleToolTipFeedback, angle);
            }
            return toolTipFeedbackText;
        };
        AbstractRoomState.prototype.getRoomSideLength = function (room, pointIndex) {
            var points = room.getPoints();
            var previousPoint = points[(pointIndex + points.length - 1) % points.length];
            return java.awt.geom.Point2D.distance(previousPoint[0], previousPoint[1], points[pointIndex][0], points[pointIndex][1]);
        };
        AbstractRoomState.prototype.getTriangulationDimensionLines = function (room, pointIndex) {
            var points = room.getPoints();
            var previousPoint = points[(pointIndex + points.length - 1) % points.length];
            var dimensionLines = ([]);
            var offset = 20 / this.__parent.getView().getScale();
            if (!(function (a1, a2) { if (a1 == null && a2 == null)
                return true; if (a1 == null || a2 == null)
                return false; if (a1.length != a2.length)
                return false; for (var i = 0; i < a1.length; i++) {
                if (a1[i] != a2[i])
                    return false;
            } return true; })(points[pointIndex], previousPoint)) {
                /* add */ (dimensionLines.push(this.__parent.getDimensionLineBetweenPoints(previousPoint, points[pointIndex], this.isDimensionInsideRoom(room, previousPoint, points[pointIndex]) ? -offset : offset, false)) > 0);
            }
            if (points.length > 2) {
                var nextPoint = points[pointIndex + 1 < points.length ? pointIndex + 1 : 0];
                if (!(function (a1, a2) { if (a1 == null && a2 == null)
                    return true; if (a1 == null || a2 == null)
                    return false; if (a1.length != a2.length)
                    return false; for (var i = 0; i < a1.length; i++) {
                    if (a1[i] != a2[i])
                        return false;
                } return true; })(points[pointIndex], nextPoint)) {
                    /* add */ (dimensionLines.push(this.__parent.getDimensionLineBetweenPoints(points[pointIndex], nextPoint, this.isDimensionInsideRoom(room, points[pointIndex], nextPoint) ? -offset : offset, false)) > 0);
                }
                var previousPreviousPoint = points[(pointIndex + points.length - 2) % points.length];
                if (points.length === 3) {
                    /* add */ (dimensionLines.push(this.__parent.getDimensionLineBetweenPoints(previousPoint, previousPreviousPoint, this.isDimensionInsideRoom(room, previousPoint, previousPreviousPoint) ? -offset : offset, false)) > 0);
                }
                else if (!(function (a1, a2) { if (a1 == null && a2 == null)
                    return true; if (a1 == null || a2 == null)
                    return false; if (a1.length != a2.length)
                    return false; for (var i = 0; i < a1.length; i++) {
                    if (a1[i] != a2[i])
                        return false;
                } return true; })(points[pointIndex], previousPreviousPoint)) {
                    /* add */ (dimensionLines.push(this.__parent.getDimensionLineBetweenPoints(points[pointIndex], previousPreviousPoint, 0, false)) > 0);
                }
            }
            return dimensionLines;
        };
        AbstractRoomState.prototype.isDimensionInsideRoom = function (room, point1, point2) {
            var rotation = java.awt.geom.AffineTransform.getRotateInstance(Math.atan2(point2[1] - point1[1], point2[0] - point1[0]), point1[0], point1[1]);
            var dimensionPoint = [(point1[0] + java.awt.geom.Point2D.distance(point1[0], point1[1], point2[0], point2[1]) / 2), point1[1] + 1.0];
            rotation.transform(dimensionPoint, 0, dimensionPoint, 0, 1);
            return room.containsPoint(dimensionPoint[0], dimensionPoint[1], 0);
        };
        /**
         * Returns room side angle at the given point index in degrees.
         * @param {Room} room
         * @param {number} pointIndex
         * @return {number}
         */
        AbstractRoomState.prototype.getRoomSideAngle = function (room, pointIndex) {
            var points = room.getPoints();
            var point = points[pointIndex];
            var previousPoint = points[(pointIndex + points.length - 1) % points.length];
            var previousPreviousPoint = points[(pointIndex + points.length - 2) % points.length];
            var sideLength = java.awt.geom.Point2D.distance(previousPoint[0], previousPoint[1], points[pointIndex][0], points[pointIndex][1]);
            var previousSideLength = java.awt.geom.Point2D.distance(previousPreviousPoint[0], previousPreviousPoint[1], previousPoint[0], previousPoint[1]);
            if (previousPreviousPoint !== point && sideLength !== 0 && previousSideLength !== 0) {
                var xSideVector = (point[0] - previousPoint[0]) / sideLength;
                var ySideVector = (point[1] - previousPoint[1]) / sideLength;
                var xPreviousSideVector = (previousPoint[0] - previousPreviousPoint[0]) / previousSideLength;
                var yPreviousSideVector = (previousPoint[1] - previousPreviousPoint[1]) / previousSideLength;
                var sideAngle = (Math.round(180 - /* toDegrees */ (function (x) { return x * 180 / Math.PI; })(Math.atan2(ySideVector * xPreviousSideVector - xSideVector * yPreviousSideVector, xSideVector * xPreviousSideVector + ySideVector * yPreviousSideVector))) | 0);
                if (sideAngle > 180) {
                    sideAngle -= 360;
                }
                return sideAngle;
            }
            if (sideLength === 0) {
                return 0;
            }
            else {
                return (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(Math.atan2(previousPoint[1] - point[1], point[0] - previousPoint[0]))) | 0);
            }
        };
        AbstractRoomState.prototype.showRoomAngleFeedback = function (room, pointIndex) {
            var points = room.getPoints();
            if (this.roomSideAngleToolTipFeedback != null && this.roomSideAngleToolTipFeedback.length > 0 && points.length > 2) {
                var previousPoint = points[(pointIndex + points.length - 1) % points.length];
                var previousPreviousPoint = points[(pointIndex + points.length - 2) % points.length];
                if (this.getRoomSideAngle(room, pointIndex) > 0) {
                    this.__parent.getView().setAngleFeedback(previousPoint[0], previousPoint[1], previousPreviousPoint[0], previousPreviousPoint[1], points[pointIndex][0], points[pointIndex][1]);
                }
                else {
                    this.__parent.getView().setAngleFeedback(previousPoint[0], previousPoint[1], points[pointIndex][0], points[pointIndex][1], previousPreviousPoint[0], previousPreviousPoint[1]);
                }
            }
        };
        return AbstractRoomState;
    }(PlanController.ControllerState));
    PlanController.AbstractRoomState = AbstractRoomState;
    AbstractRoomState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.AbstractRoomState";
    /**
     * Room name offset state. This state manages room name offset.
     * @extends PlanController.ControllerState
     * @class
     */
    var RoomNameOffsetState = /** @class */ (function (_super) {
        __extends(RoomNameOffsetState, _super);
        function RoomNameOffsetState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedRoom === undefined) {
                _this.selectedRoom = null;
            }
            if (_this.oldNameXOffset === undefined) {
                _this.oldNameXOffset = 0;
            }
            if (_this.oldNameYOffset === undefined) {
                _this.oldNameYOffset = 0;
            }
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = 0;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = 0;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomNameOffsetState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RoomNameOffsetState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        RoomNameOffsetState.prototype.enter = function () {
            this.selectedRoom = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldNameXOffset = this.selectedRoom.getNameXOffset();
            this.oldNameYOffset = this.selectedRoom.getNameYOffset();
            this.xLastMouseMove = this.__parent.getXLastMousePress();
            this.yLastMouseMove = this.__parent.getYLastMousePress();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomNameOffsetState.prototype.moveMouse = function (x, y) {
            if (this.alignmentActivated) {
                var alignedPoint = new PlanController.PointWithAngleMagnetism(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), this.__parent.getView().getPixelLength(), 4);
                x = alignedPoint.getX();
                y = alignedPoint.getY();
            }
            this.selectedRoom.setNameXOffset(this.selectedRoom.getNameXOffset() + x - this.xLastMouseMove);
            this.selectedRoom.setNameYOffset(this.selectedRoom.getNameYOffset() + y - this.yLastMouseMove);
            this.xLastMouseMove = x;
            this.yLastMouseMove = y;
            this.__parent.getView().makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomNameOffsetState.prototype.releaseMouse = function (x, y) {
            this.__parent.postRoomNameOffset(this.selectedRoom, this.oldNameXOffset, this.oldNameYOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        RoomNameOffsetState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        RoomNameOffsetState.prototype.escape = function () {
            this.selectedRoom.setNameXOffset(this.oldNameXOffset);
            this.selectedRoom.setNameYOffset(this.oldNameYOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RoomNameOffsetState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedRoom = null;
        };
        return RoomNameOffsetState;
    }(PlanController.ControllerState));
    PlanController.RoomNameOffsetState = RoomNameOffsetState;
    RoomNameOffsetState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomNameOffsetState";
    /**
     * Room name rotation state. This state manages the name rotation of a room.
     * @extends PlanController.ControllerState
     * @class
     */
    var RoomNameRotationState = /** @class */ (function (_super) {
        __extends(RoomNameRotationState, _super);
        function RoomNameRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedRoom === undefined) {
                _this.selectedRoom = null;
            }
            if (_this.oldNameAngle === undefined) {
                _this.oldNameAngle = 0;
            }
            if (_this.angleMousePress === undefined) {
                _this.angleMousePress = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomNameRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RoomNameRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        RoomNameRotationState.prototype.enter = function () {
            this.selectedRoom = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.angleMousePress = Math.atan2(this.selectedRoom.getYCenter() + this.selectedRoom.getNameYOffset() - this.__parent.getYLastMousePress(), this.__parent.getXLastMousePress() - this.selectedRoom.getXCenter() - this.selectedRoom.getNameXOffset());
            this.oldNameAngle = this.selectedRoom.getNameAngle();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomNameRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedRoom.getXCenter() + this.selectedRoom.getNameXOffset() || y !== this.selectedRoom.getYCenter() + this.selectedRoom.getNameYOffset()) {
                var angleMouseMove = Math.atan2(this.selectedRoom.getYCenter() + this.selectedRoom.getNameYOffset() - y, x - this.selectedRoom.getXCenter() - this.selectedRoom.getNameXOffset());
                var newAngle = this.oldNameAngle - angleMouseMove + this.angleMousePress;
                if (this.alignmentActivated || this.magnetismEnabled) {
                    var angleStep = 2 * Math.PI / RoomNameRotationState.STEP_COUNT;
                    newAngle = Math.round(newAngle / angleStep) * angleStep;
                }
                this.selectedRoom.setNameAngle(newAngle);
                this.__parent.getView().makePointVisible(x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomNameRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postRoomNameRotation(this.selectedRoom, this.oldNameAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        RoomNameRotationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        RoomNameRotationState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        RoomNameRotationState.prototype.escape = function () {
            this.selectedRoom.setNameAngle(this.oldNameAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RoomNameRotationState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedRoom = null;
        };
        RoomNameRotationState.STEP_COUNT = 24;
        return RoomNameRotationState;
    }(PlanController.ControllerState));
    PlanController.RoomNameRotationState = RoomNameRotationState;
    RoomNameRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomNameRotationState";
    /**
     * Room area offset state. This state manages room area offset.
     * @extends PlanController.ControllerState
     * @class
     */
    var RoomAreaOffsetState = /** @class */ (function (_super) {
        __extends(RoomAreaOffsetState, _super);
        function RoomAreaOffsetState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedRoom === undefined) {
                _this.selectedRoom = null;
            }
            if (_this.oldAreaXOffset === undefined) {
                _this.oldAreaXOffset = 0;
            }
            if (_this.oldAreaYOffset === undefined) {
                _this.oldAreaYOffset = 0;
            }
            if (_this.xLastMouseMove === undefined) {
                _this.xLastMouseMove = 0;
            }
            if (_this.yLastMouseMove === undefined) {
                _this.yLastMouseMove = 0;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomAreaOffsetState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RoomAreaOffsetState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        RoomAreaOffsetState.prototype.enter = function () {
            this.selectedRoom = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldAreaXOffset = this.selectedRoom.getAreaXOffset();
            this.oldAreaYOffset = this.selectedRoom.getAreaYOffset();
            this.xLastMouseMove = this.__parent.getXLastMousePress();
            this.yLastMouseMove = this.__parent.getYLastMousePress();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomAreaOffsetState.prototype.moveMouse = function (x, y) {
            if (this.alignmentActivated) {
                var alignedPoint = new PlanController.PointWithAngleMagnetism(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), this.__parent.getView().getPixelLength(), 4);
                x = alignedPoint.getX();
                y = alignedPoint.getY();
            }
            this.selectedRoom.setAreaXOffset(this.selectedRoom.getAreaXOffset() + x - this.xLastMouseMove);
            this.selectedRoom.setAreaYOffset(this.selectedRoom.getAreaYOffset() + y - this.yLastMouseMove);
            this.xLastMouseMove = x;
            this.yLastMouseMove = y;
            this.__parent.getView().makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomAreaOffsetState.prototype.releaseMouse = function (x, y) {
            this.__parent.postRoomAreaOffset(this.selectedRoom, this.oldAreaXOffset, this.oldAreaYOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        RoomAreaOffsetState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        RoomAreaOffsetState.prototype.escape = function () {
            this.selectedRoom.setAreaXOffset(this.oldAreaXOffset);
            this.selectedRoom.setAreaYOffset(this.oldAreaYOffset);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RoomAreaOffsetState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedRoom = null;
        };
        return RoomAreaOffsetState;
    }(PlanController.ControllerState));
    PlanController.RoomAreaOffsetState = RoomAreaOffsetState;
    RoomAreaOffsetState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomAreaOffsetState";
    /**
     * Room area rotation state. This state manages the area rotation of a room.
     * @extends PlanController.ControllerState
     * @class
     */
    var RoomAreaRotationState = /** @class */ (function (_super) {
        __extends(RoomAreaRotationState, _super);
        function RoomAreaRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedRoom === undefined) {
                _this.selectedRoom = null;
            }
            if (_this.oldAreaAngle === undefined) {
                _this.oldAreaAngle = 0;
            }
            if (_this.angleMousePress === undefined) {
                _this.angleMousePress = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomAreaRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RoomAreaRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         */
        RoomAreaRotationState.prototype.enter = function () {
            this.selectedRoom = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.angleMousePress = Math.atan2(this.selectedRoom.getYCenter() + this.selectedRoom.getAreaYOffset() - this.__parent.getYLastMousePress(), this.__parent.getXLastMousePress() - this.selectedRoom.getXCenter() - this.selectedRoom.getAreaXOffset());
            this.oldAreaAngle = this.selectedRoom.getAreaAngle();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomAreaRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedRoom.getXCenter() + this.selectedRoom.getAreaXOffset() || y !== this.selectedRoom.getYCenter() + this.selectedRoom.getAreaYOffset()) {
                var angleMouseMove = Math.atan2(this.selectedRoom.getYCenter() + this.selectedRoom.getAreaYOffset() - y, x - this.selectedRoom.getXCenter() - this.selectedRoom.getAreaXOffset());
                var newAngle = this.oldAreaAngle - angleMouseMove + this.angleMousePress;
                if (this.alignmentActivated || this.magnetismEnabled) {
                    var angleStep = 2 * Math.PI / RoomAreaRotationState.STEP_COUNT;
                    newAngle = Math.round(newAngle / angleStep) * angleStep;
                }
                this.selectedRoom.setAreaAngle(newAngle);
                this.__parent.getView().makePointVisible(x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomAreaRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postRoomAreaRotation(this.selectedRoom, this.oldAreaAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        RoomAreaRotationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        RoomAreaRotationState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        RoomAreaRotationState.prototype.escape = function () {
            this.selectedRoom.setAreaAngle(this.oldAreaAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RoomAreaRotationState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedRoom = null;
        };
        RoomAreaRotationState.STEP_COUNT = 24;
        return RoomAreaRotationState;
    }(PlanController.ControllerState));
    PlanController.RoomAreaRotationState = RoomAreaRotationState;
    RoomAreaRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomAreaRotationState";
    /**
     * Polyline modification state.
     * @extends PlanController.ControllerState
     * @class
     */
    var AbstractPolylineState = /** @class */ (function (_super) {
        __extends(AbstractPolylineState, _super);
        function AbstractPolylineState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.polylineSegmentLengthToolTipFeedback === undefined) {
                _this.polylineSegmentLengthToolTipFeedback = null;
            }
            if (_this.polylineSegmentAngleToolTipFeedback === undefined) {
                _this.polylineSegmentAngleToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         */
        AbstractPolylineState.prototype.enter = function () {
            this.polylineSegmentLengthToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "polylineSegmentLengthToolTipFeedback");
            try {
                this.polylineSegmentAngleToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "polylineSegmentAngleToolTipFeedback");
            }
            catch (ex) {
            }
        };
        AbstractPolylineState.prototype.getToolTipFeedbackText = function (polyline, pointIndex) {
            var length = this.getPolylineSegmentLength(polyline, pointIndex);
            var angle = this.getPolylineSegmentAngle(polyline, pointIndex);
            var toolTipFeedbackText = "<html>" + CoreTools.format(this.polylineSegmentLengthToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(length));
            if (this.polylineSegmentAngleToolTipFeedback != null && this.polylineSegmentAngleToolTipFeedback.length > 0) {
                toolTipFeedbackText += "<br>" + CoreTools.format(this.polylineSegmentAngleToolTipFeedback, angle);
            }
            return toolTipFeedbackText;
        };
        AbstractPolylineState.prototype.getPolylineSegmentLength = function (polyline, pointIndex) {
            if (pointIndex === 0 && !polyline.isClosedPath()) {
                pointIndex++;
            }
            var points = polyline.getPoints();
            var previousPoint = points[(pointIndex + points.length - 1) % points.length];
            return java.awt.geom.Point2D.distance(previousPoint[0], previousPoint[1], points[pointIndex][0], points[pointIndex][1]);
        };
        /**
         * Returns polyline segment angle at the given point index in degrees.
         * @param {Polyline} polyline
         * @param {number} pointIndex
         * @return {number}
         */
        AbstractPolylineState.prototype.getPolylineSegmentAngle = function (polyline, pointIndex) {
            if (pointIndex === 0 && !polyline.isClosedPath()) {
                pointIndex++;
            }
            var points = polyline.getPoints();
            var point = points[pointIndex];
            var previousPoint = points[(pointIndex + points.length - 1) % points.length];
            var previousPreviousPoint = points[(pointIndex + points.length - 2) % points.length];
            var segmentLength = java.awt.geom.Point2D.distance(previousPoint[0], previousPoint[1], points[pointIndex][0], points[pointIndex][1]);
            var previousSegmentLength = java.awt.geom.Point2D.distance(previousPreviousPoint[0], previousPreviousPoint[1], previousPoint[0], previousPoint[1]);
            if (previousPreviousPoint !== point && segmentLength !== 0 && previousSegmentLength !== 0) {
                var xSegmentVector = (point[0] - previousPoint[0]) / segmentLength;
                var ySegmentVector = (point[1] - previousPoint[1]) / segmentLength;
                var xPreviousSegmentVector = (previousPoint[0] - previousPreviousPoint[0]) / previousSegmentLength;
                var yPreviousSegmentVector = (previousPoint[1] - previousPreviousPoint[1]) / previousSegmentLength;
                var segmentAngle = (Math.round(180 - /* toDegrees */ (function (x) { return x * 180 / Math.PI; })(Math.atan2(ySegmentVector * xPreviousSegmentVector - xSegmentVector * yPreviousSegmentVector, xSegmentVector * xPreviousSegmentVector + ySegmentVector * yPreviousSegmentVector))) | 0);
                if (segmentAngle > 180) {
                    segmentAngle -= 360;
                }
                return segmentAngle;
            }
            if (segmentLength === 0) {
                return 0;
            }
            else {
                return (Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(Math.atan2(previousPoint[1] - point[1], point[0] - previousPoint[0]))) | 0);
            }
        };
        AbstractPolylineState.prototype.showPolylineAngleFeedback = function (polyline, pointIndex) {
            var points = polyline.getPoints();
            if (this.polylineSegmentAngleToolTipFeedback != null && this.polylineSegmentAngleToolTipFeedback.length > 0 && (pointIndex >= 2 || points.length > 2 && polyline.isClosedPath())) {
                var previousPoint = points[(pointIndex + points.length - 1) % points.length];
                var previousPreviousPoint = points[(pointIndex + points.length - 2) % points.length];
                this.__parent.getView().setAngleFeedback(previousPoint[0], previousPoint[1], previousPreviousPoint[0], previousPreviousPoint[1], points[pointIndex][0], points[pointIndex][1]);
            }
        };
        return AbstractPolylineState;
    }(PlanController.ControllerState));
    PlanController.AbstractPolylineState = AbstractPolylineState;
    AbstractPolylineState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.AbstractPolylineState";
    /**
     * Label rotation state. This state manages the rotation of a label.
     * @extends PlanController.ControllerState
     * @class
     */
    var LabelRotationState = /** @class */ (function (_super) {
        __extends(LabelRotationState, _super);
        function LabelRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedLabel === undefined) {
                _this.selectedLabel = null;
            }
            if (_this.oldAngle === undefined) {
                _this.oldAngle = 0;
            }
            if (_this.angleMousePress === undefined) {
                _this.angleMousePress = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        LabelRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        LabelRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        LabelRotationState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        LabelRotationState.prototype.enter = function () {
            this.selectedLabel = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.angleMousePress = Math.atan2(this.selectedLabel.getY() - this.__parent.getYLastMousePress(), this.__parent.getXLastMousePress() - this.selectedLabel.getX());
            this.oldAngle = this.selectedLabel.getAngle();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        LabelRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedLabel.getX() || y !== this.selectedLabel.getY()) {
                var angleMouseMove = Math.atan2(this.selectedLabel.getY() - y, x - this.selectedLabel.getX());
                var newAngle = this.oldAngle - angleMouseMove + this.angleMousePress;
                if (this.alignmentActivated || this.magnetismEnabled) {
                    var angleStep = 2 * Math.PI / LabelRotationState.STEP_COUNT;
                    newAngle = Math.round(newAngle / angleStep) * angleStep;
                }
                this.selectedLabel.setAngle(newAngle);
                this.__parent.getView().makePointVisible(x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        LabelRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postLabelRotation(this.selectedLabel, this.oldAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        LabelRotationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        LabelRotationState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        LabelRotationState.prototype.escape = function () {
            this.selectedLabel.setAngle(this.oldAngle);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        LabelRotationState.prototype.exit = function () {
            this.__parent.getView().setResizeIndicatorVisible(false);
            this.selectedLabel = null;
        };
        LabelRotationState.STEP_COUNT = 24;
        return LabelRotationState;
    }(PlanController.ControllerState));
    PlanController.LabelRotationState = LabelRotationState;
    LabelRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LabelRotationState";
    /**
     * Label elevation state. This states manages the elevation change of a label.
     * @extends PlanController.ControllerState
     * @class
     */
    var LabelElevationState = /** @class */ (function (_super) {
        __extends(LabelElevationState, _super);
        function LabelElevationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.deltaYToElevationPoint === undefined) {
                _this.deltaYToElevationPoint = 0;
            }
            if (_this.selectedLabel === undefined) {
                _this.selectedLabel = null;
            }
            if (_this.oldElevation === undefined) {
                _this.oldElevation = 0;
            }
            if (_this.elevationToolTipFeedback === undefined) {
                _this.elevationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        LabelElevationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        LabelElevationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        LabelElevationState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        LabelElevationState.prototype.enter = function () {
            this.elevationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "elevationToolTipFeedback");
            this.selectedLabel = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            var textStyle = this.__parent.getItemTextStyle(this.selectedLabel, this.selectedLabel.getStyle());
            var textBounds = this.__parent.getView().getTextBounds(this.selectedLabel.getText(), textStyle, this.selectedLabel.getX(), this.selectedLabel.getY(), this.selectedLabel.getAngle());
            this.deltaYToElevationPoint = this.__parent.getYLastMousePress() - (textBounds[2][1] + textBounds[3][1]) / 2;
            this.oldElevation = this.selectedLabel.getElevation();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldElevation), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        LabelElevationState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var textStyle = this.__parent.getItemTextStyle(this.selectedLabel, this.selectedLabel.getStyle());
            var textBounds = this.__parent.getView().getTextBounds(this.selectedLabel.getText(), textStyle, this.selectedLabel.getX(), this.selectedLabel.getY(), this.selectedLabel.getAngle());
            var deltaY = y - this.deltaYToElevationPoint - (textBounds[2][1] + textBounds[3][1]) / 2;
            var newElevation = this.oldElevation - deltaY;
            newElevation = Math.min(Math.max(newElevation, 0.0), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumElevation());
            if (this.magnetismEnabled) {
                newElevation = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(newElevation, planView.getPixelLength());
            }
            this.selectedLabel.setElevation(newElevation);
            planView.makePointVisible(x, y);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(newElevation), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        LabelElevationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postLabelElevation(this.selectedLabel, this.oldElevation);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        LabelElevationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        LabelElevationState.prototype.escape = function () {
            this.selectedLabel.setElevation(this.oldElevation);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        LabelElevationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedLabel = null;
        };
        LabelElevationState.prototype.getToolTipFeedbackText = function (height) {
            return CoreTools.format(this.elevationToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(height));
        };
        return LabelElevationState;
    }(PlanController.ControllerState));
    PlanController.LabelElevationState = LabelElevationState;
    LabelElevationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LabelElevationState";
    /**
     * Compass rotation state. This states manages the rotation of the compass.
     * @extends PlanController.ControllerState
     * @class
     */
    var CompassRotationState = /** @class */ (function (_super) {
        __extends(CompassRotationState, _super);
        function CompassRotationState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedCompass === undefined) {
                _this.selectedCompass = null;
            }
            if (_this.angleMousePress === undefined) {
                _this.angleMousePress = 0;
            }
            if (_this.oldNorthDirection === undefined) {
                _this.oldNorthDirection = 0;
            }
            if (_this.rotationToolTipFeedback === undefined) {
                _this.rotationToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        CompassRotationState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        CompassRotationState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        CompassRotationState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        CompassRotationState.prototype.enter = function () {
            this.rotationToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "rotationToolTipFeedback");
            this.selectedCompass = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.angleMousePress = Math.atan2(this.selectedCompass.getY() - this.__parent.getYLastMousePress(), this.__parent.getXLastMousePress() - this.selectedCompass.getX());
            this.oldNorthDirection = this.selectedCompass.getNorthDirection();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldNorthDirection), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CompassRotationState.prototype.moveMouse = function (x, y) {
            if (x !== this.selectedCompass.getX() || y !== this.selectedCompass.getY()) {
                var angleMouseMove = Math.atan2(this.selectedCompass.getY() - y, x - this.selectedCompass.getX());
                var newNorthDirection = this.oldNorthDirection - angleMouseMove + this.angleMousePress;
                var angleStep = Math.PI / 180;
                newNorthDirection = Math.round(newNorthDirection / angleStep) * angleStep;
                newNorthDirection = ((newNorthDirection + 2 * Math.PI) % (2 * Math.PI));
                this.selectedCompass.setNorthDirection(newNorthDirection);
                var planView = this.__parent.getView();
                planView.makePointVisible(x, y);
                planView.setToolTipFeedback(this.getToolTipFeedbackText(newNorthDirection), x, y);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CompassRotationState.prototype.releaseMouse = function (x, y) {
            this.__parent.postCompassRotation(this.selectedCompass, this.oldNorthDirection);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CompassRotationState.prototype.escape = function () {
            this.selectedCompass.setNorthDirection(this.oldNorthDirection);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CompassRotationState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedCompass = null;
        };
        CompassRotationState.prototype.getToolTipFeedbackText = function (angle) {
            return CoreTools.format(this.rotationToolTipFeedback, Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(angle)));
        };
        return CompassRotationState;
    }(PlanController.ControllerState));
    PlanController.CompassRotationState = CompassRotationState;
    CompassRotationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CompassRotationState";
    /**
     * Compass resize state. This states manages the resizing of the compass.
     * @extends PlanController.ControllerState
     * @class
     */
    var CompassResizeState = /** @class */ (function (_super) {
        __extends(CompassResizeState, _super);
        function CompassResizeState(__parent) {
            var _this = _super.call(this) || this;
            _this.__parent = __parent;
            if (_this.selectedCompass === undefined) {
                _this.selectedCompass = null;
            }
            if (_this.oldDiameter === undefined) {
                _this.oldDiameter = 0;
            }
            if (_this.deltaXToResizePoint === undefined) {
                _this.deltaXToResizePoint = 0;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.resizeToolTipFeedback === undefined) {
                _this.resizeToolTipFeedback = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        CompassResizeState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        CompassResizeState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        CompassResizeState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        CompassResizeState.prototype.enter = function () {
            this.resizeToolTipFeedback = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLocalizedString(PlanController, "diameterToolTipFeedback");
            this.selectedCompass = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            var compassPoints = this.selectedCompass.getPoints();
            var xMiddleSecondAndThirdPoint = (compassPoints[1][0] + compassPoints[2][0]) / 2;
            var yMiddleSecondAndThirdPoint = (compassPoints[1][1] + compassPoints[2][1]) / 2;
            this.deltaXToResizePoint = this.__parent.getXLastMousePress() - xMiddleSecondAndThirdPoint;
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - yMiddleSecondAndThirdPoint;
            this.oldDiameter = this.selectedCompass.getDiameter();
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.oldDiameter), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CompassResizeState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var newDiameter = java.awt.geom.Point2D.distance(this.selectedCompass.getX(), this.selectedCompass.getY(), x - this.deltaXToResizePoint, y - this.deltaYToResizePoint) * 2;
            newDiameter = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMagnetizedLength(newDiameter, planView.getPixelLength());
            newDiameter = Math.min(Math.max(newDiameter, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMinimumLength()), this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength() / 10);
            this.selectedCompass.setDiameter(newDiameter);
            planView.makePointVisible(x, y);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(newDiameter), x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        CompassResizeState.prototype.releaseMouse = function (x, y) {
            this.__parent.postCompassResize(this.selectedCompass, this.oldDiameter);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CompassResizeState.prototype.escape = function () {
            this.selectedCompass.setDiameter(this.oldDiameter);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        CompassResizeState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedCompass = null;
        };
        CompassResizeState.prototype.getToolTipFeedbackText = function (diameter) {
            return CoreTools.format(this.resizeToolTipFeedback, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getFormatWithUnit().format(diameter));
        };
        return CompassResizeState;
    }(PlanController.ControllerState));
    PlanController.CompassResizeState = CompassResizeState;
    CompassResizeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.CompassResizeState";
    /**
     * Default selection state. This state manages transition to other modes,
     * the deletion of selected items, and the move of selected items with arrow keys.
     * @extends PlanController.AbstractModeChangeState
     * @class
     */
    var SelectionState = /** @class */ (function (_super) {
        __extends(SelectionState, _super);
        function SelectionState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            _this.selectionListener = new SelectionState.SelectionState$0(_this);
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        SelectionState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         */
        SelectionState.prototype.enter = function () {
            if (this.__parent.getView() != null) {
                if (this.__parent.getPointerTypeLastMousePress() !== View.PointerType.TOUCH) {
                    this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
                }
                this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.addSelectionListener(this.selectionListener);
                this.selectionListener.selectionChanged(null);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        SelectionState.prototype.moveMouse = function (x, y) {
            if (this.__parent.getRotatedLabelAt(x, y) != null || this.__parent.getYawRotatedCameraAt(x, y) != null || this.__parent.getPitchRotatedCameraAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ROTATION);
            }
            else if (this.__parent.getElevatedLabelAt(x, y) != null || this.__parent.getElevatedCameraAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ELEVATION);
            }
            else if (this.__parent.getRoomNameAt(x, y) != null || this.__parent.getRoomAreaAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.RESIZE);
            }
            else if (this.__parent.getRoomRotatedNameAt(x, y) != null || this.__parent.getRoomRotatedAreaAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ROTATION);
            }
            else if (this.__parent.getResizedDimensionLineStartAt(x, y) != null || this.__parent.getResizedDimensionLineEndAt(x, y) != null || this.__parent.getWidthAndDepthResizedPieceOfFurnitureAt(x, y) != null || this.__parent.getResizedWallStartAt(x, y) != null || this.__parent.getResizedWallEndAt(x, y) != null || this.__parent.getResizedPolylineAt(x, y) != null || this.__parent.getResizedRoomAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.RESIZE);
            }
            else if (this.__parent.getPitchRotatedPieceOfFurnitureAt(x, y) != null || this.__parent.getRollRotatedPieceOfFurnitureAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ROTATION);
            }
            else if (this.__parent.getModifiedLightPowerAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.POWER);
            }
            else if (this.__parent.getOffsetDimensionLineAt(x, y) != null || this.__parent.getHeightResizedPieceOfFurnitureAt(x, y) != null || this.__parent.getArcExtentWallAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.HEIGHT);
            }
            else if (this.__parent.getRotatedPieceOfFurnitureAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ROTATION);
            }
            else if (this.__parent.getElevatedPieceOfFurnitureAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ELEVATION);
            }
            else if (this.__parent.getPieceOfFurnitureNameAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.RESIZE);
            }
            else if (this.__parent.getPieceOfFurnitureRotatedNameAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ROTATION);
            }
            else if (this.__parent.getRotatedCompassAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.ROTATION);
            }
            else if (this.__parent.getResizedCompassAt(x, y) != null) {
                this.__parent.getView().setCursor(PlanView.CursorType.RESIZE);
            }
            else {
                if (this.__parent.isItemSelectedAt(x, y)) {
                    this.__parent.getView().setCursor(PlanView.CursorType.MOVE);
                }
                else {
                    this.__parent.getView().setCursor(PlanView.CursorType.SELECTION);
                }
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        SelectionState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (clickCount === 1) {
                if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                    this.moveMouse(x, y);
                }
                if (this.__parent.getRotatedLabelAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getLabelRotationState());
                }
                else if (this.__parent.getYawRotatedCameraAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getCameraYawRotationState());
                }
                else if (this.__parent.getPitchRotatedCameraAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getCameraPitchRotationState());
                }
                else if (this.__parent.getElevatedLabelAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getLabelElevationState());
                }
                else if (this.__parent.getElevatedCameraAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getCameraElevationState());
                }
                else if (this.__parent.getRoomNameAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getRoomNameOffsetState());
                }
                else if (this.__parent.getRoomRotatedNameAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getRoomNameRotationState());
                }
                else if (this.__parent.getRoomAreaAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getRoomAreaOffsetState());
                }
                else if (this.__parent.getRoomRotatedAreaAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getRoomAreaRotationState());
                }
                else if (this.__parent.getResizedDimensionLineStartAt(x, y) != null || this.__parent.getResizedDimensionLineEndAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getDimensionLineResizeState());
                }
                else if (this.__parent.getWidthAndDepthResizedPieceOfFurnitureAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureResizeState());
                }
                else if (this.__parent.getResizedWallStartAt(x, y) != null || this.__parent.getResizedWallEndAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getWallResizeState());
                }
                else if (this.__parent.getResizedRoomAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getRoomResizeState());
                }
                else if (this.__parent.getOffsetDimensionLineAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getDimensionLineOffsetState());
                }
                else if (this.__parent.getResizedPolylineAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPolylineResizeState());
                }
                else if (this.__parent.getPitchRotatedPieceOfFurnitureAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurniturePitchRotationState());
                }
                else if (this.__parent.getRollRotatedPieceOfFurnitureAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureRollRotationState());
                }
                else if (this.__parent.getModifiedLightPowerAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getLightPowerModificationState());
                }
                else if (this.__parent.getHeightResizedPieceOfFurnitureAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureHeightState());
                }
                else if (this.__parent.getArcExtentWallAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getWallArcExtentState());
                }
                else if (this.__parent.getRotatedPieceOfFurnitureAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureRotationState());
                }
                else if (this.__parent.getElevatedPieceOfFurnitureAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureElevationState());
                }
                else if (this.__parent.getPieceOfFurnitureNameAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureNameOffsetState());
                }
                else if (this.__parent.getPieceOfFurnitureRotatedNameAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getPieceOfFurnitureNameRotationState());
                }
                else if (this.__parent.getRotatedCompassAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getCompassRotationState());
                }
                else if (this.__parent.getResizedCompassAt(x, y) != null) {
                    this.__parent.setState(this.__parent.getCompassResizeState());
                }
                else {
                    if (!shiftDown && (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH || this.__parent.getSelectableItemAt(x, y) != null)) {
                        this.__parent.setState(this.__parent.getSelectionMoveState());
                    }
                    else {
                        this.__parent.setState(this.__parent.getRectangleSelectionState());
                    }
                }
            }
            else if (clickCount === 2) {
                var item = this.__parent.getSelectableItemAt(x, y);
                if (!shiftDown && item != null) {
                    if (item != null && item instanceof Wall) {
                        this.__parent.modifySelectedWalls();
                    }
                    else if (item != null && item instanceof HomePieceOfFurniture) {
                        this.__parent.modifySelectedFurniture();
                    }
                    else if (item != null && item instanceof Room) {
                        this.__parent.modifySelectedRooms();
                    }
                    else if (item != null && item instanceof Polyline) {
                        this.__parent.modifySelectedPolylines();
                    }
                    else if (item != null && item instanceof Label) {
                        this.__parent.modifySelectedLabels();
                    }
                    else if (item != null && item instanceof Compass) {
                        this.__parent.modifyCompass();
                    }
                    else if (item != null && item instanceof ObserverCamera) {
                        this.__parent.modifyObserverCamera();
                    }
                }
            }
        };
        /**
         *
         */
        SelectionState.prototype.exit = function () {
            if (this.__parent.getView() != null) {
                this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.removeSelectionListener(this.selectionListener);
                this.__parent.getView().setResizeIndicatorVisible(false);
            }
        };
        return SelectionState;
    }(PlanController.AbstractModeChangeState));
    PlanController.SelectionState = SelectionState;
    SelectionState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.SelectionState";
    (function (SelectionState) {
        var SelectionState$0 = /** @class */ (function () {
            function SelectionState$0(__parent) {
                this.__parent = __parent;
            }
            SelectionState$0.prototype.selectionChanged = function (selectionEvent) {
                var selectedItems = this.__parent.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
                this.__parent.__parent.getView().setResizeIndicatorVisible(/* size */ selectedItems.length === 1 && (this.__parent.__parent.isItemResizable(/* get */ selectedItems[0]) || this.__parent.__parent.isItemMovable(/* get */ selectedItems[0])));
            };
            return SelectionState$0;
        }());
        SelectionState.SelectionState$0 = SelectionState$0;
        SelectionState$0["__interfaces"] = ["com.eteks.sweethome3d.model.SelectionListener"];
    })(SelectionState = PlanController.SelectionState || (PlanController.SelectionState = {}));
    /**
     * Wall creation state. This state manages transition to other modes,
     * and initial wall creation.
     * @extends PlanController.AbstractModeChangeState
     * @class
     */
    var WallCreationState = /** @class */ (function (_super) {
        __extends(WallCreationState, _super);
        function WallCreationState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        WallCreationState.prototype.getMode = function () {
            return PlanController.Mode.WALL_CREATION_$LI$();
        };
        /**
         *
         */
        WallCreationState.prototype.enter = function () {
            this.__parent.getView().setCursor(PlanView.CursorType.DRAW);
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        WallCreationState.prototype.moveMouse = function (x, y) {
            if (this.magnetismEnabled) {
                var point = new PlanController.WallPointWithAngleMagnetism(this.__parent, null, x, y, x, y);
                x = point.getX();
                y = point.getY();
            }
            this.__parent.getView().setAlignmentFeedback(Wall, null, x, y, false);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        WallCreationState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            this.__parent.setState(this.__parent.getWallDrawingState());
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        WallCreationState.prototype.setEditionActivated = function (editionActivated) {
            if (editionActivated) {
                this.__parent.setState(this.__parent.getWallDrawingState());
                this.setEditionActivated(editionActivated);
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        WallCreationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.__parent.getPointerTypeLastMousePress() !== View.PointerType.TOUCH) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         */
        WallCreationState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
        };
        return WallCreationState;
    }(PlanController.AbstractModeChangeState));
    PlanController.WallCreationState = WallCreationState;
    WallCreationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallCreationState";
    /**
     * Dimension line creation state. This state manages transition to
     * other modes, and initial dimension line creation.
     * @extends PlanController.AbstractModeChangeState
     * @class
     */
    var DimensionLineCreationState = /** @class */ (function (_super) {
        __extends(DimensionLineCreationState, _super);
        function DimensionLineCreationState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        DimensionLineCreationState.prototype.getMode = function () {
            return PlanController.Mode.DIMENSION_LINE_CREATION_$LI$();
        };
        /**
         *
         */
        DimensionLineCreationState.prototype.enter = function () {
            this.__parent.getView().setCursor(PlanView.CursorType.DRAW);
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        DimensionLineCreationState.prototype.moveMouse = function (x, y) {
            this.__parent.getView().setAlignmentFeedback(DimensionLine, null, x, y, false);
            var dimensionLine = this.__parent.getMeasuringDimensionLineAt(x, y, this.magnetismEnabled);
            if (dimensionLine != null) {
                this.__parent.getView().setDimensionLinesFeedback(/* asList */ [dimensionLine].slice(0));
            }
            else {
                this.__parent.getView().setDimensionLinesFeedback(null);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        DimensionLineCreationState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (clickCount === 1) {
                this.__parent.setState(this.__parent.getDimensionLineDrawingState());
            }
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        DimensionLineCreationState.prototype.setEditionActivated = function (editionActivated) {
            if (editionActivated) {
                this.__parent.setState(this.__parent.getDimensionLineDrawingState());
                this.setEditionActivated(editionActivated);
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        DimensionLineCreationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.__parent.getPointerTypeLastMousePress() !== View.PointerType.TOUCH) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         */
        DimensionLineCreationState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
        };
        return DimensionLineCreationState;
    }(PlanController.AbstractModeChangeState));
    PlanController.DimensionLineCreationState = DimensionLineCreationState;
    DimensionLineCreationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.DimensionLineCreationState";
    /**
     * Room creation state. This state manages transition to
     * other modes, and initial room creation.
     * @extends PlanController.AbstractModeChangeState
     * @class
     */
    var RoomCreationState = /** @class */ (function (_super) {
        __extends(RoomCreationState, _super);
        function RoomCreationState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomCreationState.prototype.getMode = function () {
            return PlanController.Mode.ROOM_CREATION_$LI$();
        };
        /**
         *
         */
        RoomCreationState.prototype.enter = function () {
            this.__parent.getView().setCursor(PlanView.CursorType.DRAW);
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomCreationState.prototype.moveMouse = function (x, y) {
            if (this.magnetismEnabled) {
                var point = new PlanController.PointMagnetizedToClosestWallOrRoomPoint(this.__parent, x, y);
                if (point.isMagnetized()) {
                    this.__parent.getView().setAlignmentFeedback(Room, null, point.getX(), point.getY(), point.isMagnetized());
                }
                else {
                    var pointWithAngleMagnetism = new PlanController.RoomPointWithAngleMagnetism(this.__parent, null, -1, this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove(), this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
                    this.__parent.getView().setAlignmentFeedback(Room, null, pointWithAngleMagnetism.getX(), pointWithAngleMagnetism.getY(), point.isMagnetized());
                }
            }
            else {
                this.__parent.getView().setAlignmentFeedback(Room, null, x, y, false);
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        RoomCreationState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            this.__parent.setState(this.__parent.getRoomDrawingState());
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        RoomCreationState.prototype.setEditionActivated = function (editionActivated) {
            if (editionActivated) {
                this.__parent.setState(this.__parent.getRoomDrawingState());
                this.setEditionActivated(editionActivated);
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        RoomCreationState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.__parent.getPointerTypeLastMousePress() !== View.PointerType.TOUCH) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         */
        RoomCreationState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
        };
        return RoomCreationState;
    }(PlanController.AbstractModeChangeState));
    PlanController.RoomCreationState = RoomCreationState;
    RoomCreationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomCreationState";
    /**
     * Polyline creation state. This state manages transition to
     * other modes, and initial polyline creation.
     * @extends PlanController.AbstractModeChangeState
     * @class
     */
    var PolylineCreationState = /** @class */ (function (_super) {
        __extends(PolylineCreationState, _super);
        function PolylineCreationState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PolylineCreationState.prototype.getMode = function () {
            return PlanController.Mode.POLYLINE_CREATION_$LI$();
        };
        /**
         *
         */
        PolylineCreationState.prototype.enter = function () {
            this.__parent.getView().setCursor(PlanView.CursorType.DRAW);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        PolylineCreationState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            this.__parent.setState(this.__parent.getPolylineDrawingState());
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        PolylineCreationState.prototype.setEditionActivated = function (editionActivated) {
            if (editionActivated) {
                this.__parent.setState(this.__parent.getPolylineDrawingState());
                this.setEditionActivated(editionActivated);
            }
        };
        return PolylineCreationState;
    }(PlanController.AbstractModeChangeState));
    PlanController.PolylineCreationState = PolylineCreationState;
    PolylineCreationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PolylineCreationState";
    /**
     * Label creation state. This state manages transition to
     * other modes, and initial label creation.
     * @extends PlanController.AbstractModeChangeState
     * @class
     */
    var LabelCreationState = /** @class */ (function (_super) {
        __extends(LabelCreationState, _super);
        function LabelCreationState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        LabelCreationState.prototype.getMode = function () {
            return PlanController.Mode.LABEL_CREATION_$LI$();
        };
        /**
         *
         */
        LabelCreationState.prototype.enter = function () {
            this.__parent.getView().setCursor(PlanView.CursorType.DRAW);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        LabelCreationState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            this.__parent.createLabel(x, y);
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
        };
        return LabelCreationState;
    }(PlanController.AbstractModeChangeState));
    PlanController.LabelCreationState = LabelCreationState;
    LabelCreationState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.LabelCreationState";
    /**
     * Wall drawing state. This state manages wall creation at each mouse press.
     * @extends PlanController.AbstractWallState
     * @class
     */
    var WallDrawingState = /** @class */ (function (_super) {
        __extends(WallDrawingState, _super);
        function WallDrawingState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.xStart === undefined) {
                _this.xStart = 0;
            }
            if (_this.yStart === undefined) {
                _this.yStart = 0;
            }
            if (_this.xLastEnd === undefined) {
                _this.xLastEnd = 0;
            }
            if (_this.yLastEnd === undefined) {
                _this.yLastEnd = 0;
            }
            if (_this.wallStartAtStart === undefined) {
                _this.wallStartAtStart = null;
            }
            if (_this.wallEndAtStart === undefined) {
                _this.wallEndAtStart = null;
            }
            if (_this.newWall === undefined) {
                _this.newWall = null;
            }
            if (_this.wallStartAtEnd === undefined) {
                _this.wallStartAtEnd = null;
            }
            if (_this.wallEndAtEnd === undefined) {
                _this.wallEndAtEnd = null;
            }
            if (_this.lastWall === undefined) {
                _this.lastWall = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.newWalls === undefined) {
                _this.newWalls = null;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.roundWall === undefined) {
                _this.roundWall = false;
            }
            if (_this.lastWallCreationTime === undefined) {
                _this.lastWallCreationTime = 0;
            }
            if (_this.wallArcExtent === undefined) {
                _this.wallArcExtent = null;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        WallDrawingState.prototype.getMode = function () {
            return PlanController.Mode.WALL_CREATION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        WallDrawingState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        WallDrawingState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         * @param {PlanController.Mode} mode
         */
        WallDrawingState.prototype.setMode = function (mode) {
            this.escape();
            if (mode === PlanController.Mode.SELECTION_$LI$()) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else if (mode === PlanController.Mode.PANNING_$LI$()) {
                this.__parent.setState(this.__parent.getPanningState());
            }
            else if (mode === PlanController.Mode.ROOM_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getRoomCreationState());
            }
            else if (mode === PlanController.Mode.POLYLINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getPolylineCreationState());
            }
            else if (mode === PlanController.Mode.DIMENSION_LINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getLabelCreationState());
            }
        };
        /**
         *
         */
        WallDrawingState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.oldSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            this.oldBasePlanLocked = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            this.oldAllLevelsSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            this.xStart = this.__parent.getXLastMouseMove();
            this.yStart = this.__parent.getYLastMouseMove();
            this.wallEndAtStart = this.__parent.getWallEndAt(this.xStart, this.yStart, null);
            if (this.wallEndAtStart != null) {
                this.wallStartAtStart = null;
                this.xStart = this.wallEndAtStart.getXEnd();
                this.yStart = this.wallEndAtStart.getYEnd();
            }
            else {
                this.wallStartAtStart = this.__parent.getWallStartAt(this.xStart, this.yStart, null);
                if (this.wallStartAtStart != null) {
                    this.xStart = this.wallStartAtStart.getXStart();
                    this.yStart = this.wallStartAtStart.getYStart();
                }
                else if (this.magnetismEnabled) {
                    var point = new PlanController.WallPointWithAngleMagnetism(this.__parent, null, this.xStart, this.yStart, this.xStart, this.yStart);
                    this.xStart = point.getX();
                    this.yStart = point.getY();
                }
            }
            this.newWall = null;
            this.wallStartAtEnd = null;
            this.wallEndAtEnd = null;
            this.lastWall = null;
            this.newWalls = ([]);
            this.lastWallCreationTime = -1;
            this.__parent.deselectAll();
            this.setDuplicationActivated(this.__parent.wasDuplicationActivatedLastMousePress());
            var planView = this.__parent.getView();
            planView.setAlignmentFeedback(Wall, null, this.xStart, this.yStart, false);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        WallDrawingState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var xEnd;
            var yEnd;
            if (this.alignmentActivated) {
                var point = new PlanController.PointWithAngleMagnetism(this.xStart, this.yStart, x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                xEnd = point.getX();
                yEnd = point.getY();
            }
            else if (this.magnetismEnabled) {
                var point = new PlanController.WallPointWithAngleMagnetism(this.__parent, this.newWall, this.xStart, this.yStart, x, y);
                xEnd = point.getX();
                yEnd = point.getY();
            }
            else {
                xEnd = x;
                yEnd = y;
            }
            if (this.newWall == null) {
                this.newWall = this.__parent.createWall(this.xStart, this.yStart, xEnd, yEnd, this.wallStartAtStart, this.wallEndAtStart);
                /* add */ (this.newWalls.push(this.newWall) > 0);
            }
            else if (this.wallArcExtent != null) {
                this.wallArcExtent = this.getArcExtent(this.newWall.getXStart(), this.newWall.getXEnd(), this.newWall.getYStart(), this.newWall.getYEnd(), x, y);
                if (this.alignmentActivated || this.magnetismEnabled) {
                    this.wallArcExtent = (function (x) { return x * Math.PI / 180; })(Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(this.wallArcExtent)));
                }
                this.newWall.setArcExtent(this.wallArcExtent);
            }
            else {
                this.newWall.setXEnd(xEnd);
                this.newWall.setYEnd(yEnd);
            }
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.newWall, false), x, y);
            planView.setAlignmentFeedback(Wall, this.newWall, xEnd, yEnd, false);
            this.showWallAngleFeedback(this.newWall, false);
            this.wallStartAtEnd = this.__parent.getWallStartAt(xEnd, yEnd, this.newWall);
            if (this.wallStartAtEnd != null) {
                this.wallEndAtEnd = null;
                this.__parent.selectItem(this.wallStartAtEnd);
            }
            else {
                this.wallEndAtEnd = this.__parent.getWallEndAt(xEnd, yEnd, this.newWall);
                if (this.wallEndAtEnd != null) {
                    this.__parent.selectItem(this.wallEndAtEnd);
                }
                else {
                    this.__parent.deselectAll();
                }
            }
            planView.makePointVisible(x, y);
            this.xLastEnd = xEnd;
            this.yLastEnd = yEnd;
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        WallDrawingState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (clickCount === 2) {
                var selectableItem = this.__parent.getSelectableItemAt(x, y);
                if ( /* size */this.newWalls.length === 0 && (selectableItem != null && selectableItem instanceof Room)) {
                    this.createWallsAroundRoom(selectableItem);
                }
                else {
                    if (this.roundWall && this.newWall != null) {
                        this.endWallCreation();
                    }
                    if (this.lastWall != null) {
                        this.__parent.joinNewWallEndToWall(this.lastWall, this.wallStartAtEnd, this.wallEndAtEnd);
                    }
                }
                this.validateDrawnWalls();
            }
            else {
                if (this.newWall != null && this.newWall.getStartPointToEndPointDistance() > 0) {
                    if (this.roundWall && this.wallArcExtent == null) {
                        this.wallArcExtent = Math.PI;
                        this.newWall.setArcExtent(this.wallArcExtent);
                        this.__parent.getView().setToolTipFeedback(this.getToolTipFeedbackText(this.newWall, false), x, y);
                    }
                    else {
                        this.__parent.getView().deleteToolTipFeedback();
                        this.__parent.selectItem(this.newWall);
                        this.endWallCreation();
                    }
                }
            }
        };
        /**
         * Creates walls around the given <code>room</code>.
         * @param {Room} room
         * @private
         */
        WallDrawingState.prototype.createWallsAroundRoom = function (room) {
            if (room.isSingular()) {
                var roomPoints = room.getPoints();
                var pointsList = ( /* asList */roomPoints.slice(0).slice(0));
                if (!room.isClockwise()) {
                    /* reverse */ pointsList.reverse();
                }
                for (var i = 0; i < /* size */ pointsList.length;) {
                    {
                        var point = pointsList[i];
                        var nextPoint = pointsList[(i + 1) % /* size */ pointsList.length];
                        if (point[0] === nextPoint[0] && point[1] === nextPoint[1]) {
                            /* remove */ pointsList.splice(i, 1)[0];
                        }
                        else {
                            i++;
                        }
                    }
                    ;
                }
                roomPoints = /* toArray */ pointsList.slice(0);
                var halfWallThickness = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getNewWallThickness() / 2;
                var largerRoomPoints = (function (s) { var a = []; while (s-- > 0)
                    a.push(null); return a; })(roomPoints.length);
                for (var i = 0; i < roomPoints.length; i++) {
                    {
                        var point = roomPoints[i];
                        var previousPoint = roomPoints[(i + roomPoints.length - 1) % roomPoints.length];
                        var nextPoint = roomPoints[(i + 1) % roomPoints.length];
                        var previousAngle = Math.atan2(point[0] - previousPoint[0], previousPoint[1] - point[1]);
                        var deltaX = (Math.cos(previousAngle) * halfWallThickness);
                        var deltaY = (Math.sin(previousAngle) * halfWallThickness);
                        var point1 = [previousPoint[0] - deltaX, previousPoint[1] - deltaY];
                        var point2 = [point[0] - deltaX, point[1] - deltaY];
                        var nextAngle = Math.atan2(nextPoint[0] - point[0], point[1] - nextPoint[1]);
                        deltaX = (Math.cos(nextAngle) * halfWallThickness);
                        deltaY = (Math.sin(nextAngle) * halfWallThickness);
                        var point3 = [point[0] - deltaX, point[1] - deltaY];
                        var point4 = [nextPoint[0] - deltaX, nextPoint[1] - deltaY];
                        largerRoomPoints[i] = PlanController.computeIntersection(point1, point2, point3, point4);
                    }
                    ;
                }
                var lastWall = null;
                var wallsArea = this.__parent.getWallsArea(false);
                var thinThickness = 0.05;
                for (var i = 0; i < largerRoomPoints.length; i++) {
                    {
                        var sidePoint = largerRoomPoints[i];
                        var nextSidePoint = largerRoomPoints[(i + 1) % roomPoints.length];
                        var lineArea = new java.awt.geom.Area(this.__parent.getPath(new Wall(sidePoint[0], sidePoint[1], nextSidePoint[0], nextSidePoint[1], thinThickness, 0).getPoints$()));
                        lineArea.subtract(wallsArea);
                        var newWallPaths = this.__parent.getAreaPaths(lineArea);
                        var roomSideWalls = ([]);
                        var ignoredWall = 0;
                        for (var j = 0; j < /* size */ newWallPaths.length; j++) {
                            {
                                var newWallPoints = this.__parent.getPathPoints(/* get */ newWallPaths[j], false);
                                if (newWallPoints.length > 4) {
                                    newWallPoints = this.__parent.getPathPoints(/* get */ newWallPaths[j], true);
                                }
                                if (newWallPoints.length === 4) {
                                    var point1 = void 0;
                                    var point2 = void 0;
                                    if (java.awt.geom.Point2D.distanceSq(newWallPoints[0][0], newWallPoints[0][1], newWallPoints[1][0], newWallPoints[1][1]) < java.awt.geom.Point2D.distanceSq(newWallPoints[0][0], newWallPoints[0][1], newWallPoints[3][0], newWallPoints[3][1])) {
                                        point1 = [(newWallPoints[0][0] + newWallPoints[1][0]) / 2, (newWallPoints[0][1] + newWallPoints[1][1]) / 2];
                                        point2 = [(newWallPoints[2][0] + newWallPoints[3][0]) / 2, (newWallPoints[2][1] + newWallPoints[3][1]) / 2];
                                    }
                                    else {
                                        point1 = [(newWallPoints[0][0] + newWallPoints[3][0]) / 2, (newWallPoints[0][1] + newWallPoints[3][1]) / 2];
                                        point2 = [(newWallPoints[1][0] + newWallPoints[2][0]) / 2, (newWallPoints[1][1] + newWallPoints[2][1]) / 2];
                                    }
                                    var startPoint = void 0;
                                    var endPoint = void 0;
                                    if (java.awt.geom.Point2D.distanceSq(point1[0], point1[1], sidePoint[0], sidePoint[1]) < java.awt.geom.Point2D.distanceSq(point2[0], point2[1], sidePoint[0], sidePoint[1])) {
                                        startPoint = point1;
                                        endPoint = point2;
                                    }
                                    else {
                                        startPoint = point2;
                                        endPoint = point1;
                                    }
                                    if (java.awt.geom.Point2D.distanceSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1]) > 0.01) {
                                        /* add */ (roomSideWalls.push(this.__parent.createWall(startPoint[0], startPoint[1], endPoint[0], endPoint[1], null, lastWall != null && java.awt.geom.Point2D.distanceSq(lastWall.getXEnd(), lastWall.getYEnd(), startPoint[0], startPoint[1]) < 0.01 ? lastWall : null)) > 0);
                                    }
                                    else {
                                        ignoredWall++;
                                    }
                                }
                            }
                            ;
                        }
                        if ( /* size */newWallPaths.length > ignoredWall && /* isEmpty */ (roomSideWalls.length == 0)) {
                            var existingWall = null;
                            {
                                var array = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
                                for (var index = 0; index < array.length; index++) {
                                    var wall = array[index];
                                    {
                                        if (wall.isAtLevel(this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel()) && Math.abs(wall.getXStart() - sidePoint[0]) < 0.05 && Math.abs(wall.getYStart() - sidePoint[1]) < 0.05 && Math.abs(wall.getXEnd() - nextSidePoint[0]) < 0.05 && Math.abs(wall.getYEnd() - nextSidePoint[1]) < 0.05 && (wall.getArcExtent() == null || wall.getArcExtent() === 0)) {
                                            existingWall = wall;
                                            break;
                                        }
                                    }
                                }
                            }
                            if (existingWall == null) {
                                /* add */ (roomSideWalls.push(this.__parent.createWall(sidePoint[0], sidePoint[1], nextSidePoint[0], nextSidePoint[1], null, lastWall)) > 0);
                            }
                        }
                        if ( /* size */roomSideWalls.length > 0) {
                            /* sort */ (function (l, c) { if (c.compare)
                                l.sort(function (e1, e2) { return c.compare(e1, e2); });
                            else
                                l.sort(c); })(roomSideWalls, new WallDrawingState.WallDrawingState$0(this, sidePoint));
                            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(this.newWalls, roomSideWalls);
                            lastWall = /* get */ roomSideWalls[ /* size */roomSideWalls.length - 1];
                        }
                        else {
                            lastWall = null;
                        }
                    }
                    ;
                }
                if (lastWall != null && java.awt.geom.Point2D.distanceSq(lastWall.getXEnd(), lastWall.getYEnd(), /* get */ this.newWalls[0].getXStart(), /* get */ this.newWalls[0].getYStart()) < 0.01) {
                    this.__parent.joinNewWallEndToWall(lastWall, /* get */ this.newWalls[0], null);
                }
            }
        };
        WallDrawingState.prototype.validateDrawnWalls = function () {
            if ( /* size */this.newWalls.length > 0) {
                this.__parent.postCreateWalls(this.newWalls, this.oldSelection, this.oldBasePlanLocked, this.oldAllLevelsSelection);
                this.__parent.selectItems(this.newWalls);
            }
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else {
                this.__parent.setState(this.__parent.getWallCreationState());
            }
        };
        WallDrawingState.prototype.endWallCreation = function () {
            this.lastWall = this.wallEndAtStart = this.newWall;
            this.wallStartAtStart = null;
            this.xStart = this.newWall.getXEnd();
            this.yStart = this.newWall.getYEnd();
            this.newWall = null;
            this.wallArcExtent = null;
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        WallDrawingState.prototype.setEditionActivated = function (editionActivated) {
            var _this = this;
            var planView = this.__parent.getView();
            if (editionActivated) {
                planView.deleteFeedback();
                if ( /* size */this.newWalls.length === 0 && this.wallEndAtStart == null && this.wallStartAtStart == null) {
                    planView.setToolTipEditedProperties(["X", "Y"], [this.xStart, this.yStart], this.xStart, this.yStart);
                }
                else {
                    if (this.newWall == null) {
                        this.createNextWall();
                    }
                    if (this.wallArcExtent == null) {
                        planView.setToolTipEditedProperties(["LENGTH", "ANGLE", "THICKNESS"], [this.newWall.getLength(), this.getWallAngleInDegrees$com_eteks_sweethome3d_model_Wall(this.newWall), this.newWall.getThickness()], this.newWall.getXEnd(), this.newWall.getYEnd());
                    }
                    else {
                        planView.setToolTipEditedProperties(["ARC_EXTENT"], [new Number((Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(this.wallArcExtent)) | 0)).valueOf()], this.newWall.getXEnd(), this.newWall.getYEnd());
                    }
                }
            }
            else {
                if (this.newWall == null) {
                    var lengthUnit = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit();
                    var defaultLength = lengthUnit === LengthUnit.INCH || lengthUnit === LengthUnit.INCH_DECIMALS ? LengthUnit.footToCentimeter(10) : 300;
                    this.xLastEnd = this.xStart + defaultLength;
                    this.yLastEnd = this.yStart;
                    this.newWall = this.__parent.createWall(this.xStart, this.yStart, this.xLastEnd, this.yLastEnd, this.wallStartAtStart, this.wallEndAtStart);
                    /* add */ (this.newWalls.push(this.newWall) > 0);
                    planView.deleteFeedback();
                    this.setEditionActivated(true);
                }
                else if (this.roundWall && this.wallArcExtent == null) {
                    this.wallArcExtent = Math.PI;
                    this.newWall.setArcExtent(this.wallArcExtent);
                    this.setEditionActivated(true);
                }
                else if ( /* currentTimeMillis */Date.now() - this.lastWallCreationTime < 300) {
                    if ( /* size */this.newWalls.length > 1) {
                        /* remove */ (function (a) { var index = a.indexOf(_this.newWall); if (index >= 0) {
                            a.splice(index, 1);
                            return true;
                        }
                        else {
                            return false;
                        } })(this.newWalls);
                        this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteWall(this.newWall);
                    }
                    this.validateDrawnWalls();
                }
                else {
                    this.endWallCreation();
                    if ( /* size */this.newWalls.length > 2 && this.wallStartAtEnd != null) {
                        this.__parent.joinNewWallEndToWall(this.lastWall, this.wallStartAtEnd, null);
                        this.validateDrawnWalls();
                        return;
                    }
                    this.createNextWall();
                    planView.deleteToolTipFeedback();
                    this.setEditionActivated(true);
                }
            }
        };
        WallDrawingState.prototype.createNextWall = function () {
            var previousWall = this.wallEndAtStart != null ? this.wallEndAtStart : this.wallStartAtStart;
            var previousWallAngle = Math.PI - Math.atan2(previousWall.getYStart() - previousWall.getYEnd(), previousWall.getXStart() - previousWall.getXEnd());
            previousWallAngle -= Math.PI / 2;
            var previousWallSegmentDistance = previousWall.getStartPointToEndPointDistance();
            this.xLastEnd = (this.xStart + previousWallSegmentDistance * Math.cos(previousWallAngle));
            this.yLastEnd = (this.yStart - previousWallSegmentDistance * Math.sin(previousWallAngle));
            this.newWall = this.__parent.createWall(this.xStart, this.yStart, this.xLastEnd, this.yLastEnd, this.wallStartAtStart, previousWall);
            this.newWall.setThickness(previousWall.getThickness());
            /* add */ (this.newWalls.push(this.newWall) > 0);
            this.lastWallCreationTime = /* currentTimeMillis */ Date.now();
            this.__parent.deselectAll();
        };
        /**
         *
         * @param {string} editableProperty
         * @param {Object} value
         */
        WallDrawingState.prototype.updateEditableProperty = function (editableProperty, value) {
            var planView = this.__parent.getView();
            if (this.newWall == null) {
                var maximumLength = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength();
                switch ((editableProperty)) {
                    case "X":
                        this.xStart = value != null ? /* floatValue */ value : 0;
                        this.xStart = Math.max(-maximumLength, Math.min(this.xStart, maximumLength));
                        break;
                    case "Y":
                        this.yStart = value != null ? /* floatValue */ value : 0;
                        this.yStart = Math.max(-maximumLength, Math.min(this.yStart, maximumLength));
                        break;
                }
                planView.setAlignmentFeedback(Wall, null, this.xStart, this.yStart, true);
                planView.makePointVisible(this.xStart, this.yStart);
            }
            else {
                if (editableProperty === "THICKNESS") {
                    var thickness = value != null ? Math.abs(/* floatValue */ value) : 0;
                    thickness = Math.max(0.01, Math.min(thickness, 1000));
                    this.newWall.setThickness(thickness);
                }
                else if (editableProperty === "ARC_EXTENT") {
                    var arcExtent = (function (x) { return x * Math.PI / 180; })(value != null ? /* doubleValue */ value : 0);
                    this.wallArcExtent = ( /* signum */(function (f) { if (f > 0) {
                        return 1;
                    }
                    else if (f < 0) {
                        return -1;
                    }
                    else {
                        return 0;
                    } })(arcExtent) * Math.min(Math.abs(arcExtent), 3 * Math.PI / 2));
                    this.newWall.setArcExtent(this.wallArcExtent);
                    this.showWallAngleFeedback(this.newWall, false);
                }
                else {
                    switch ((editableProperty)) {
                        case "LENGTH":
                            var length_2 = value != null ? /* floatValue */ value : 0;
                            length_2 = Math.max(0.001, Math.min(length_2, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength()));
                            var wallAngle = Math.PI - Math.atan2(this.yStart - this.yLastEnd, this.xStart - this.xLastEnd);
                            this.xLastEnd = (this.xStart + length_2 * Math.cos(wallAngle));
                            this.yLastEnd = (this.yStart - length_2 * Math.sin(wallAngle));
                            break;
                        case "ANGLE":
                            wallAngle = /* toRadians */ (function (x) { return x * Math.PI / 180; })(value != null ? /* doubleValue */ value : 0);
                            var previousWall = this.newWall.getWallAtStart();
                            if (previousWall != null && previousWall.getStartPointToEndPointDistance() > 0) {
                                wallAngle -= Math.atan2(previousWall.getYStart() - previousWall.getYEnd(), previousWall.getXStart() - previousWall.getXEnd());
                            }
                            var startPointToEndPointDistance = this.newWall.getStartPointToEndPointDistance();
                            this.xLastEnd = (this.xStart + startPointToEndPointDistance * Math.cos(wallAngle));
                            this.yLastEnd = (this.yStart - startPointToEndPointDistance * Math.sin(wallAngle));
                            break;
                        default:
                            return;
                    }
                    this.newWall.setXEnd(this.xLastEnd);
                    this.newWall.setYEnd(this.yLastEnd);
                    planView.setAlignmentFeedback(Wall, this.newWall, this.xLastEnd, this.yLastEnd, false);
                    this.showWallAngleFeedback(this.newWall, false);
                    planView.makePointVisible(this.xStart, this.yStart);
                    planView.makePointVisible(this.xLastEnd, this.yLastEnd);
                    if ( /* size */this.newWalls.length > 2 && /* get */ this.newWalls[0].getWallAtStart() == null && /* get */ this.newWalls[0].containsWallStartAt(this.xLastEnd, this.yLastEnd, 0.001)) {
                        this.wallStartAtEnd = /* get */ this.newWalls[0];
                        this.__parent.selectItem(this.wallStartAtEnd);
                    }
                    else {
                        this.wallStartAtEnd = null;
                        this.__parent.deselectAll();
                    }
                }
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        WallDrawingState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.newWall != null) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        WallDrawingState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} duplicationActivated
         */
        WallDrawingState.prototype.setDuplicationActivated = function (duplicationActivated) {
            this.roundWall = duplicationActivated;
        };
        /**
         *
         */
        WallDrawingState.prototype.escape = function () {
            var _this = this;
            if (this.newWall != null) {
                this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteWall(this.newWall);
                /* remove */ (function (a) { var index = a.indexOf(_this.newWall); if (index >= 0) {
                    a.splice(index, 1);
                    return true;
                }
                else {
                    return false;
                } })(this.newWalls);
            }
            this.validateDrawnWalls();
        };
        /**
         *
         */
        WallDrawingState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.deleteFeedback();
            this.wallStartAtStart = null;
            this.wallEndAtStart = null;
            this.newWall = null;
            this.wallArcExtent = null;
            this.wallStartAtEnd = null;
            this.wallEndAtEnd = null;
            this.lastWall = null;
            this.oldSelection = null;
            this.newWalls = null;
        };
        return WallDrawingState;
    }(PlanController.AbstractWallState));
    PlanController.WallDrawingState = WallDrawingState;
    WallDrawingState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallDrawingState";
    (function (WallDrawingState) {
        var WallDrawingState$0 = /** @class */ (function () {
            function WallDrawingState$0(__parent, sidePoint) {
                this.sidePoint = sidePoint;
                this.__parent = __parent;
            }
            WallDrawingState$0.prototype.compare = function (wall1, wall2) {
                return /* compare */ (java.awt.geom.Point2D.distanceSq(wall1.getXStart(), wall1.getYStart(), this.sidePoint[0], this.sidePoint[1]) - java.awt.geom.Point2D.distanceSq(wall2.getXStart(), wall2.getYStart(), this.sidePoint[0], this.sidePoint[1]));
            };
            return WallDrawingState$0;
        }());
        WallDrawingState.WallDrawingState$0 = WallDrawingState$0;
    })(WallDrawingState = PlanController.WallDrawingState || (PlanController.WallDrawingState = {}));
    /**
     * Wall resize state. This state manages wall resizing.
     * @extends PlanController.AbstractWallState
     * @class
     */
    var WallResizeState = /** @class */ (function (_super) {
        __extends(WallResizeState, _super);
        function WallResizeState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.selectedWall === undefined) {
                _this.selectedWall = null;
            }
            if (_this.startPoint === undefined) {
                _this.startPoint = false;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.deltaXToResizePoint === undefined) {
                _this.deltaXToResizePoint = 0;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        WallResizeState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        WallResizeState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        WallResizeState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        WallResizeState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.selectedWall = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.startPoint = this.selectedWall === this.__parent.getResizedWallStartAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            if (this.startPoint) {
                this.oldX = this.selectedWall.getXStart();
                this.oldY = this.selectedWall.getYStart();
            }
            else {
                this.oldX = this.selectedWall.getXEnd();
                this.oldY = this.selectedWall.getYEnd();
            }
            this.deltaXToResizePoint = this.__parent.getXLastMousePress() - this.oldX;
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - this.oldY;
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedWall, true), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            planView.setAlignmentFeedback(Wall, this.selectedWall, this.oldX, this.oldY, false);
            this.showWallAngleFeedback(this.selectedWall, true);
            planView.setDimensionLinesFeedback(this.getDimensionLinesAlongWall(this.selectedWall));
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        WallResizeState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var newX = x - this.deltaXToResizePoint;
            var newY = y - this.deltaYToResizePoint;
            var opositeEndX = this.startPoint ? this.selectedWall.getXEnd() : this.selectedWall.getXStart();
            var opositeEndY = this.startPoint ? this.selectedWall.getYEnd() : this.selectedWall.getYStart();
            if (this.alignmentActivated) {
                var point = new PlanController.PointWithAngleMagnetism(opositeEndX, opositeEndY, newX, newY, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                newX = point.getX();
                newY = point.getY();
            }
            else if (this.magnetismEnabled) {
                var point = new PlanController.WallPointWithAngleMagnetism(this.__parent, this.selectedWall, opositeEndX, opositeEndY, newX, newY);
                newX = point.getX();
                newY = point.getY();
            }
            PlanController.moveWallPoint(this.selectedWall, newX, newY, this.startPoint);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedWall, true), x, y);
            planView.setAlignmentFeedback(Wall, this.selectedWall, newX, newY, false);
            this.showWallAngleFeedback(this.selectedWall, true);
            planView.setDimensionLinesFeedback(this.getDimensionLinesAlongWall(this.selectedWall));
            planView.makePointVisible(x, y);
        };
        WallResizeState.prototype.getDimensionLinesAlongWall = function (wall) {
            var dimensionLines = ([]);
            if (wall.getArcExtent() == null || wall.getArcExtent() === 0) {
                var offset = 20 / this.__parent.getView().getScale();
                var wallPoints = wall.getPoints$();
                var roomPaths = this.__parent.getRoomPathsFromWalls();
                for (var i = 0; i < /* size */ roomPaths.length; i++) {
                    {
                        var roomPoints = this.__parent.getPathPoints(/* get */ roomPaths[i], true);
                        for (var j = 0; j < roomPoints.length; j++) {
                            {
                                var startPoint = roomPoints[j];
                                var endPoint = roomPoints[(j + 1) % roomPoints.length];
                                var segmentPartOfLeftSide = java.awt.geom.Line2D.ptLineDistSq(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], startPoint[0], startPoint[1]) < 1.0E-4 && java.awt.geom.Line2D.ptLineDistSq(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], endPoint[0], endPoint[1]) < 1.0E-4;
                                var segmentAccepted = void 0;
                                if (segmentPartOfLeftSide) {
                                    segmentAccepted = java.awt.geom.Line2D.ptSegDistSq(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], startPoint[0], startPoint[1]) < 1.0E-4 || java.awt.geom.Line2D.ptSegDistSq(wallPoints[0][0], wallPoints[0][1], wallPoints[1][0], wallPoints[1][1], endPoint[0], endPoint[1]) < 1.0E-4 || java.awt.geom.Line2D.ptSegDistSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1], wallPoints[0][0], wallPoints[0][1]) < 1.0E-4 || java.awt.geom.Line2D.ptSegDistSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1], wallPoints[1][0], wallPoints[1][1]) < 1.0E-4;
                                }
                                else {
                                    segmentAccepted = java.awt.geom.Line2D.ptLineDistSq(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], startPoint[0], startPoint[1]) < 1.0E-4 && java.awt.geom.Line2D.ptLineDistSq(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], endPoint[0], endPoint[1]) < 1.0E-4 && (java.awt.geom.Line2D.ptSegDistSq(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], startPoint[0], startPoint[1]) < 1.0E-4 || java.awt.geom.Line2D.ptSegDistSq(wallPoints[2][0], wallPoints[2][1], wallPoints[3][0], wallPoints[3][1], endPoint[0], endPoint[1]) < 1.0E-4 || java.awt.geom.Line2D.ptSegDistSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1], wallPoints[2][0], wallPoints[2][1]) < 1.0E-4 || java.awt.geom.Line2D.ptSegDistSq(startPoint[0], startPoint[1], endPoint[0], endPoint[1], wallPoints[3][0], wallPoints[3][1]) < 1.0E-4);
                                }
                                if (segmentAccepted) {
                                    /* add */ (dimensionLines.push(this.__parent.getDimensionLineBetweenPoints(startPoint, endPoint, this.isDimensionInsideWall(wall, startPoint, endPoint) ? -offset : offset, false)) > 0);
                                }
                            }
                            ;
                        }
                    }
                    ;
                }
                for (var i = dimensionLines.length - 1; i >= 0; i--) {
                    {
                        if ( /* get */dimensionLines[i].getLength() < 0.01) {
                            /* remove */ dimensionLines.splice(i, 1)[0];
                        }
                    }
                    ;
                }
                if ( /* size */dimensionLines.length === 2 && Math.abs(/* get */ dimensionLines[0].getLength() - /* get */ dimensionLines[1].getLength()) < 0.01) {
                    /* remove */ dimensionLines.splice(1, 1)[0];
                }
            }
            return dimensionLines;
        };
        WallResizeState.prototype.isDimensionInsideWall = function (wall, point1, point2) {
            var rotation = java.awt.geom.AffineTransform.getRotateInstance(Math.atan2(point2[1] - point1[1], point2[0] - point1[0]), point1[0], point1[1]);
            var dimensionPoint = [(point1[0] + java.awt.geom.Point2D.distance(point1[0], point1[1], point2[0], point2[1]) / 2), point1[1] + 0.01];
            rotation.transform(dimensionPoint, 0, dimensionPoint, 0, 1);
            return wall.containsPoint$float$float$float(dimensionPoint[0], dimensionPoint[1], 0);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        WallResizeState.prototype.releaseMouse = function (x, y) {
            this.__parent.postWallResize(this.selectedWall, this.oldX, this.oldY, this.startPoint);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        WallResizeState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        WallResizeState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        WallResizeState.prototype.escape = function () {
            PlanController.moveWallPoint(this.selectedWall, this.oldX, this.oldY, this.startPoint);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        WallResizeState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedWall = null;
        };
        return WallResizeState;
    }(PlanController.AbstractWallState));
    PlanController.WallResizeState = WallResizeState;
    WallResizeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallResizeState";
    /**
     * Wall arc extent state. This state manages wall arc extent change.
     * @extends PlanController.AbstractWallState
     * @class
     */
    var WallArcExtentState = /** @class */ (function (_super) {
        __extends(WallArcExtentState, _super);
        function WallArcExtentState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.selectedWall === undefined) {
                _this.selectedWall = null;
            }
            if (_this.oldArcExtent === undefined) {
                _this.oldArcExtent = null;
            }
            if (_this.deltaXToMiddlePoint === undefined) {
                _this.deltaXToMiddlePoint = 0;
            }
            if (_this.deltaYToMiddlePoint === undefined) {
                _this.deltaYToMiddlePoint = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        WallArcExtentState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        WallArcExtentState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        WallArcExtentState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        WallArcExtentState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.selectedWall = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.oldArcExtent = this.selectedWall.getArcExtent();
            var wallPoints = this.selectedWall.getPoints$();
            var leftSideMiddlePointIndex = (wallPoints.length / 4 | 0);
            var rightSideMiddlePointIndex = wallPoints.length - 1 - leftSideMiddlePointIndex;
            if (wallPoints.length % 4 === 0) {
                leftSideMiddlePointIndex--;
            }
            var middleX = (wallPoints[leftSideMiddlePointIndex][0] + wallPoints[rightSideMiddlePointIndex][0]) / 2;
            var middleY = (wallPoints[leftSideMiddlePointIndex][1] + wallPoints[rightSideMiddlePointIndex][1]) / 2;
            this.deltaXToMiddlePoint = this.__parent.getXLastMousePress() - middleX;
            this.deltaYToMiddlePoint = this.__parent.getYLastMousePress() - middleY;
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedWall, false), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            this.showWallAngleFeedback(this.selectedWall, false);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        WallArcExtentState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var newX = x - this.deltaXToMiddlePoint;
            var newY = y - this.deltaYToMiddlePoint;
            var arcExtent = this.getArcExtent(this.selectedWall.getXStart(), this.selectedWall.getYStart(), this.selectedWall.getXEnd(), this.selectedWall.getYEnd(), newX, newY);
            if (this.alignmentActivated || this.magnetismEnabled) {
                arcExtent = (function (x) { return x * Math.PI / 180; })(Math.round(/* toDegrees */ (function (x) { return x * 180 / Math.PI; })(arcExtent)));
            }
            this.selectedWall.setArcExtent(arcExtent);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedWall, false), x, y);
            this.showWallAngleFeedback(this.selectedWall, false);
            planView.makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        WallArcExtentState.prototype.releaseMouse = function (x, y) {
            this.__parent.postWallArcExtent(this.selectedWall, this.oldArcExtent);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        WallArcExtentState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        WallArcExtentState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        WallArcExtentState.prototype.escape = function () {
            this.selectedWall.setArcExtent(this.oldArcExtent);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        WallArcExtentState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedWall = null;
        };
        return WallArcExtentState;
    }(PlanController.AbstractWallState));
    PlanController.WallArcExtentState = WallArcExtentState;
    WallArcExtentState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.WallArcExtentState";
    /**
     * Room drawing state. This state manages room creation at mouse press.
     * @extends PlanController.AbstractRoomState
     * @class
     */
    var RoomDrawingState = /** @class */ (function (_super) {
        __extends(RoomDrawingState, _super);
        function RoomDrawingState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.xPreviousPoint === undefined) {
                _this.xPreviousPoint = 0;
            }
            if (_this.yPreviousPoint === undefined) {
                _this.yPreviousPoint = 0;
            }
            if (_this.newRoom === undefined) {
                _this.newRoom = null;
            }
            if (_this.newPoint === undefined) {
                _this.newPoint = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.lastPointCreationTime === undefined) {
                _this.lastPointCreationTime = 0;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomDrawingState.prototype.getMode = function () {
            return PlanController.Mode.ROOM_CREATION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RoomDrawingState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        RoomDrawingState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         * @param {PlanController.Mode} mode
         */
        RoomDrawingState.prototype.setMode = function (mode) {
            this.escape();
            if (mode === PlanController.Mode.SELECTION_$LI$()) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else if (mode === PlanController.Mode.PANNING_$LI$()) {
                this.__parent.setState(this.__parent.getPanningState());
            }
            else if (mode === PlanController.Mode.WALL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getWallCreationState());
            }
            else if (mode === PlanController.Mode.POLYLINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getPolylineCreationState());
            }
            else if (mode === PlanController.Mode.DIMENSION_LINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getLabelCreationState());
            }
        };
        /**
         *
         */
        RoomDrawingState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.oldSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            this.oldBasePlanLocked = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            this.oldAllLevelsSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            this.newRoom = null;
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            if (this.magnetismEnabled) {
                var point = new PlanController.PointMagnetizedToClosestWallOrRoomPoint(this.__parent, this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
                if (point.isMagnetized()) {
                    this.xPreviousPoint = point.getX();
                    this.yPreviousPoint = point.getY();
                }
                else {
                    var pointWithAngleMagnetism = new PlanController.RoomPointWithAngleMagnetism(this.__parent, null, -1, this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove(), this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
                    this.xPreviousPoint = pointWithAngleMagnetism.getX();
                    this.yPreviousPoint = pointWithAngleMagnetism.getY();
                }
                this.__parent.getView().setAlignmentFeedback(Room, null, this.xPreviousPoint, this.yPreviousPoint, point.isMagnetized());
            }
            else {
                this.xPreviousPoint = this.__parent.getXLastMousePress();
                this.yPreviousPoint = this.__parent.getYLastMousePress();
                this.__parent.getView().setAlignmentFeedback(Room, null, this.xPreviousPoint, this.yPreviousPoint, false);
            }
            this.__parent.deselectAll();
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomDrawingState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var xEnd = x;
            var yEnd = y;
            var magnetizedPoint = false;
            if (this.alignmentActivated) {
                var pointWithAngleMagnetism = new PlanController.PointWithAngleMagnetism(this.xPreviousPoint, this.yPreviousPoint, x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                xEnd = pointWithAngleMagnetism.getX();
                yEnd = pointWithAngleMagnetism.getY();
            }
            else if (this.magnetismEnabled) {
                var point = this.newRoom != null ? new PlanController.PointMagnetizedToClosestWallOrRoomPoint(this.__parent, this.newRoom, this.newRoom.getPointCount() - 1, x, y) : new PlanController.PointMagnetizedToClosestWallOrRoomPoint(this.__parent, x, y);
                magnetizedPoint = point.isMagnetized();
                if (magnetizedPoint) {
                    xEnd = point.getX();
                    yEnd = point.getY();
                }
                else {
                    var editedPointIndex = this.newRoom != null ? this.newRoom.getPointCount() - 1 : -1;
                    var pointWithAngleMagnetism = new PlanController.RoomPointWithAngleMagnetism(this.__parent, this.newRoom, editedPointIndex, this.xPreviousPoint, this.yPreviousPoint, x, y);
                    xEnd = pointWithAngleMagnetism.getX();
                    yEnd = pointWithAngleMagnetism.getY();
                }
            }
            if (this.newRoom == null) {
                this.newRoom = this.createAndSelectRoom(this.xPreviousPoint, this.yPreviousPoint, xEnd, yEnd);
            }
            else if (this.newPoint != null) {
                var points = this.newRoom.getPoints();
                this.xPreviousPoint = points[points.length - 1][0];
                this.yPreviousPoint = points[points.length - 1][1];
                this.newRoom.addPoint$float$float(xEnd, yEnd);
                this.newPoint = null;
            }
            else {
                this.newRoom.setPoint(xEnd, yEnd, this.newRoom.getPointCount() - 1);
            }
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.newRoom, this.newRoom.getPointCount() - 1), x, y);
            planView.setAlignmentFeedback(Room, this.newRoom, xEnd, yEnd, magnetizedPoint);
            this.showRoomAngleFeedback(this.newRoom, this.newRoom.getPointCount() - 1);
            planView.setDimensionLinesFeedback(this.getTriangulationDimensionLines(this.newRoom, this.newRoom.getPointCount() - 1));
            planView.makePointVisible(x, y);
        };
        /**
         * Returns a new room instance with one side between (<code>xStart</code>,
         * <code>yStart</code>) and (<code>xEnd</code>, <code>yEnd</code>) points.
         * The new room is added to home and selected
         * @param {number} xStart
         * @param {number} yStart
         * @param {number} xEnd
         * @param {number} yEnd
         * @return {Room}
         * @private
         */
        RoomDrawingState.prototype.createAndSelectRoom = function (xStart, yStart, xEnd, yEnd) {
            var newRoom = this.__parent.createRoom([[xStart, yStart], [xEnd, yEnd]]);
            var insideWallsArea = this.__parent.getInsideWallsArea();
            newRoom.setCeilingVisible(insideWallsArea.contains(xStart, yStart));
            this.__parent.selectItem(newRoom);
            return newRoom;
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        RoomDrawingState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (clickCount === 2) {
                if (this.newRoom == null) {
                    this.newRoom = this.createRoomAt(x, y);
                    if (this.newRoom != null) {
                        this.__parent.selectItem(this.newRoom);
                    }
                }
                this.validateDrawnRoom();
            }
            else {
                this.endRoomSide();
            }
        };
        RoomDrawingState.prototype.validateDrawnRoom = function () {
            if (this.newRoom != null) {
                var points = this.newRoom.getPoints();
                if (points.length < 3) {
                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deleteRoom(this.newRoom);
                }
                else {
                    this.__parent.postCreateRooms(/* asList */ [this.newRoom].slice(0), this.oldSelection, this.oldBasePlanLocked, this.oldAllLevelsSelection);
                }
            }
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else {
                this.__parent.setState(this.__parent.getRoomCreationState());
            }
        };
        RoomDrawingState.prototype.endRoomSide = function () {
            if (this.newRoom != null && this.getRoomSideLength(this.newRoom, this.newRoom.getPointCount() - 1) > 0) {
                this.newPoint = [0, 0];
                if (this.newRoom.isCeilingVisible()) {
                    var roomPoints = this.newRoom.getPoints();
                    var lastPoint = roomPoints[roomPoints.length - 1];
                    if (!this.__parent.getInsideWallsArea().contains(lastPoint[0], lastPoint[1])) {
                        this.newRoom.setCeilingVisible(false);
                    }
                }
            }
        };
        /**
         * Returns the room matching the closed path that contains the point at the given
         * coordinates or <code>null</code> if there's no closed path at this point.
         * @param {number} x
         * @param {number} y
         * @return {Room}
         * @private
         */
        RoomDrawingState.prototype.createRoomAt = function (x, y) {
            {
                var array = this.__parent.getRoomPathsFromWalls();
                for (var index = 0; index < array.length; index++) {
                    var roomPath = array[index];
                    {
                        if (roomPath.contains(x, y)) {
                            {
                                var array1 = this.getVisibleDoorsAndWindowsAtGround(this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getFurniture());
                                for (var index1 = 0; index1 < array1.length; index1++) {
                                    var piece = array1[index1];
                                    {
                                        var doorPoints = piece.getPoints();
                                        var intersectionCount = 0;
                                        for (var i = 0; i < doorPoints.length; i++) {
                                            {
                                                if (roomPath.contains(doorPoints[i][0], doorPoints[i][1])) {
                                                    intersectionCount++;
                                                }
                                            }
                                            ;
                                        }
                                        if (doorPoints.length === 4) {
                                            var epsilon = 0.05;
                                            var doorStepPoints = null;
                                            if ((piece != null && piece instanceof HomeDoorOrWindow) && piece.isWallCutOutOnBothSides()) {
                                                var door = piece;
                                                var selectedLevel = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel();
                                                var doorArea = new java.awt.geom.Area(this.__parent.getPath(doorPoints));
                                                var wallsDoorIntersection = new java.awt.geom.Area();
                                                {
                                                    var array2 = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getWalls();
                                                    for (var index2 = 0; index2 < array2.length; index2++) {
                                                        var wall = array2[index2];
                                                        {
                                                            if (wall.isAtLevel(selectedLevel) && door.isParallelToWall(wall)) {
                                                                var wallPath = this.__parent.getPath(wall.getPoints$());
                                                                var intersectionArea = new java.awt.geom.Area(wallPath);
                                                                intersectionArea.intersect(doorArea);
                                                                if (!intersectionArea.isEmpty()) {
                                                                    var deeperDoor = (function (o) { if (o.clone != undefined) {
                                                                        return o.clone();
                                                                    }
                                                                    else {
                                                                        var clone = Object.create(o);
                                                                        for (var p in o) {
                                                                            if (o.hasOwnProperty(p))
                                                                                clone[p] = o[p];
                                                                        }
                                                                        return clone;
                                                                    } })(door);
                                                                    deeperDoor.setDepthInPlan(deeperDoor.getDepth() + 4 * wall.getThickness());
                                                                    intersectionArea = new java.awt.geom.Area(wallPath);
                                                                    intersectionArea.intersect(new java.awt.geom.Area(this.__parent.getPath(deeperDoor.getPoints())));
                                                                    wallsDoorIntersection.add(intersectionArea);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                                if (!wallsDoorIntersection.isEmpty() && wallsDoorIntersection.isSingular()) {
                                                    var intersectionPoints = this.__parent.getPathPoints(this.__parent.getPath(wallsDoorIntersection), true);
                                                    if (intersectionPoints.length === 4) {
                                                        var doorMiddleY = door.getY() + door.getDepth() * (-0.5 + door.getWallDistance() + door.getWallThickness() / 2);
                                                        var halfWidth = door.getWidth() / 2;
                                                        var doorMiddlePoints = [door.getX() - halfWidth, doorMiddleY, door.getX() + halfWidth, doorMiddleY];
                                                        var rotation = java.awt.geom.AffineTransform.getRotateInstance(door.getAngle(), door.getX(), door.getY());
                                                        rotation.transform(doorMiddlePoints, 0, doorMiddlePoints, 0, 2);
                                                        for (var i = 0; i < intersectionPoints.length - 1; i++) {
                                                            {
                                                                if (roomPath.intersects(intersectionPoints[i][0] - epsilon / 2, intersectionPoints[i][1] - epsilon / 2, epsilon, epsilon)) {
                                                                    var inPoint1 = i;
                                                                    var outPoint1 = void 0;
                                                                    var outPoint2 = void 0;
                                                                    if (roomPath.intersects(intersectionPoints[i + 1][0] - epsilon / 2, intersectionPoints[i + 1][1] - epsilon / 2, epsilon, epsilon)) {
                                                                        outPoint2 = (i + 2) % 4;
                                                                        outPoint1 = (i + 3) % 4;
                                                                    }
                                                                    else if (roomPath.intersects(intersectionPoints[(i + 3) % 4][0] - epsilon / 2, intersectionPoints[(i + 3) % 4][1] - epsilon / 2, epsilon, epsilon)) {
                                                                        outPoint1 = (i + 1) % 4;
                                                                        outPoint2 = (i + 2) % 4;
                                                                    }
                                                                    else {
                                                                        break;
                                                                    }
                                                                    if (java.awt.geom.Point2D.distanceSq(intersectionPoints[inPoint1][0], intersectionPoints[inPoint1][1], doorMiddlePoints[0], doorMiddlePoints[1]) < java.awt.geom.Point2D.distanceSq(intersectionPoints[inPoint1][0], intersectionPoints[inPoint1][1], doorMiddlePoints[2], doorMiddlePoints[3])) {
                                                                        intersectionPoints[outPoint1][0] = doorMiddlePoints[0];
                                                                        intersectionPoints[outPoint1][1] = doorMiddlePoints[1];
                                                                        intersectionPoints[outPoint2][0] = doorMiddlePoints[2];
                                                                        intersectionPoints[outPoint2][1] = doorMiddlePoints[3];
                                                                    }
                                                                    else {
                                                                        intersectionPoints[outPoint1][0] = doorMiddlePoints[2];
                                                                        intersectionPoints[outPoint1][1] = doorMiddlePoints[3];
                                                                        intersectionPoints[outPoint2][0] = doorMiddlePoints[0];
                                                                        intersectionPoints[outPoint2][1] = doorMiddlePoints[1];
                                                                    }
                                                                    doorStepPoints = intersectionPoints;
                                                                    break;
                                                                }
                                                            }
                                                            ;
                                                        }
                                                    }
                                                }
                                            }
                                            if (doorStepPoints == null && intersectionCount === 2) {
                                                var wallsDoorIntersection = new java.awt.geom.Area(this.__parent.getWallsArea(false));
                                                wallsDoorIntersection.intersect(new java.awt.geom.Area(this.__parent.getPath(doorPoints)));
                                                var intersectionPoints = this.__parent.getPathPoints(this.__parent.getPath(wallsDoorIntersection), false);
                                                if (intersectionPoints.length === 4) {
                                                    for (var i = 0; i < intersectionPoints.length; i++) {
                                                        {
                                                            if (roomPath.intersects(intersectionPoints[i][0] - epsilon / 2, intersectionPoints[i][1] - epsilon / 2, epsilon, epsilon)) {
                                                                var inPoint1 = i;
                                                                var inPoint2 = void 0;
                                                                var outPoint1 = void 0;
                                                                var outPoint2 = void 0;
                                                                if (roomPath.intersects(intersectionPoints[i + 1][0] - epsilon / 2, intersectionPoints[i + 1][1] - epsilon / 2, epsilon, epsilon)) {
                                                                    inPoint2 = i + 1;
                                                                    outPoint2 = (i + 2) % 4;
                                                                    outPoint1 = (i + 3) % 4;
                                                                }
                                                                else {
                                                                    outPoint1 = (i + 1) % 4;
                                                                    outPoint2 = (i + 2) % 4;
                                                                    inPoint2 = (i + 3) % 4;
                                                                }
                                                                intersectionPoints[outPoint1][0] = (intersectionPoints[outPoint1][0] + intersectionPoints[inPoint1][0]) / 2;
                                                                intersectionPoints[outPoint1][1] = (intersectionPoints[outPoint1][1] + intersectionPoints[inPoint1][1]) / 2;
                                                                intersectionPoints[outPoint2][0] = (intersectionPoints[outPoint2][0] + intersectionPoints[inPoint2][0]) / 2;
                                                                intersectionPoints[outPoint2][1] = (intersectionPoints[outPoint2][1] + intersectionPoints[inPoint2][1]) / 2;
                                                                doorStepPoints = intersectionPoints;
                                                                break;
                                                            }
                                                        }
                                                        ;
                                                    }
                                                }
                                            }
                                            if (doorStepPoints != null) {
                                                var path = this.__parent.getPath(doorStepPoints);
                                                var bounds2D = path.getBounds2D();
                                                var transform = java.awt.geom.AffineTransform.getTranslateInstance(bounds2D.getCenterX(), bounds2D.getCenterY());
                                                var min = Math.min(bounds2D.getWidth(), bounds2D.getHeight());
                                                var scale = (min + epsilon) / min;
                                                transform.scale(scale, scale);
                                                transform.translate(-bounds2D.getCenterX(), -bounds2D.getCenterY());
                                                var doorStepPath = path.createTransformedShape(transform);
                                                var halfDoorRoomUnion = new java.awt.geom.Area(doorStepPath);
                                                halfDoorRoomUnion.add(new java.awt.geom.Area(roomPath));
                                                roomPath = this.__parent.getPath(halfDoorRoomUnion);
                                            }
                                        }
                                    }
                                }
                            }
                            return this.__parent.createRoom(this.__parent.getPathPoints(roomPath, false));
                        }
                    }
                }
            }
            return null;
        };
        /**
         * Returns all the visible doors and windows with a null elevation in the given <code>furniture</code>.
         * @param {HomePieceOfFurniture[]} furniture
         * @return {HomePieceOfFurniture[]}
         * @private
         */
        RoomDrawingState.prototype.getVisibleDoorsAndWindowsAtGround = function (furniture) {
            var doorsAndWindows = ([]);
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    if (this.__parent.isPieceOfFurnitureVisibleAtSelectedLevel(piece) && piece.getElevation() === 0) {
                        if (piece != null && piece instanceof HomeFurnitureGroup) {
                            /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(doorsAndWindows, this.getVisibleDoorsAndWindowsAtGround(piece.getFurniture()));
                        }
                        else if (piece.isDoorOrWindow()) {
                            /* add */ (doorsAndWindows.push(piece) > 0);
                        }
                    }
                }
            }
            return doorsAndWindows;
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        RoomDrawingState.prototype.setEditionActivated = function (editionActivated) {
            var planView = this.__parent.getView();
            if (editionActivated) {
                planView.deleteFeedback();
                if (this.newRoom == null) {
                    planView.setToolTipEditedProperties(["X", "Y"], [this.xPreviousPoint, this.yPreviousPoint], this.xPreviousPoint, this.yPreviousPoint);
                }
                else {
                    if (this.newPoint != null) {
                        this.createNextSide();
                    }
                    var points = this.newRoom.getPoints();
                    planView.setToolTipEditedProperties(["LENGTH", "ANGLE"], [this.getRoomSideLength(this.newRoom, points.length - 1), this.getRoomSideAngle(this.newRoom, points.length - 1)], points[points.length - 1][0], points[points.length - 1][1]);
                }
            }
            else {
                if (this.newRoom == null) {
                    var lengthUnit = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit();
                    var defaultLength = lengthUnit === LengthUnit.INCH || lengthUnit === LengthUnit.INCH_DECIMALS ? LengthUnit.footToCentimeter(10) : 300;
                    this.newRoom = this.createAndSelectRoom(this.xPreviousPoint, this.yPreviousPoint, this.xPreviousPoint + defaultLength, this.yPreviousPoint);
                    planView.deleteFeedback();
                    this.setEditionActivated(true);
                }
                else if ( /* currentTimeMillis */Date.now() - this.lastPointCreationTime < 300) {
                    this.escape();
                }
                else {
                    this.endRoomSide();
                    var points = this.newRoom.getPoints();
                    if (points.length > 2 && this.newRoom.getPointIndexAt(points[points.length - 1][0], points[points.length - 1][1], 0.001) === 0) {
                        this.newRoom.removePoint(this.newRoom.getPointCount() - 1);
                        this.validateDrawnRoom();
                        return;
                    }
                    this.createNextSide();
                    planView.deleteToolTipFeedback();
                    this.setEditionActivated(true);
                }
            }
        };
        RoomDrawingState.prototype.createNextSide = function () {
            var points = this.newRoom.getPoints();
            this.xPreviousPoint = points[points.length - 1][0];
            this.yPreviousPoint = points[points.length - 1][1];
            var previousSideAngle = Math.PI - Math.atan2(points[points.length - 2][1] - points[points.length - 1][1], points[points.length - 2][0] - points[points.length - 1][0]);
            previousSideAngle -= Math.PI / 2;
            var previousSideLength = this.getRoomSideLength(this.newRoom, points.length - 1);
            this.newRoom.addPoint$float$float((this.xPreviousPoint + previousSideLength * Math.cos(previousSideAngle)), (this.yPreviousPoint - previousSideLength * Math.sin(previousSideAngle)));
            this.newPoint = null;
            this.lastPointCreationTime = /* currentTimeMillis */ Date.now();
        };
        /**
         *
         * @param {string} editableProperty
         * @param {Object} value
         */
        RoomDrawingState.prototype.updateEditableProperty = function (editableProperty, value) {
            var planView = this.__parent.getView();
            if (this.newRoom == null) {
                var maximumLength = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength();
                switch ((editableProperty)) {
                    case "X":
                        this.xPreviousPoint = value != null ? /* floatValue */ value : 0;
                        this.xPreviousPoint = Math.max(-maximumLength, Math.min(this.xPreviousPoint, maximumLength));
                        break;
                    case "Y":
                        this.yPreviousPoint = value != null ? /* floatValue */ value : 0;
                        this.yPreviousPoint = Math.max(-maximumLength, Math.min(this.yPreviousPoint, maximumLength));
                        break;
                }
                planView.setAlignmentFeedback(Room, null, this.xPreviousPoint, this.yPreviousPoint, true);
                planView.makePointVisible(this.xPreviousPoint, this.yPreviousPoint);
            }
            else {
                var roomPoints = this.newRoom.getPoints();
                var previousPoint = roomPoints[roomPoints.length - 2];
                var point = roomPoints[roomPoints.length - 1];
                var newX = void 0;
                var newY = void 0;
                switch ((editableProperty)) {
                    case "LENGTH":
                        var length_3 = value != null ? /* floatValue */ value : 0;
                        length_3 = Math.max(0.001, Math.min(length_3, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength()));
                        var sideAngle = Math.PI - Math.atan2(previousPoint[1] - point[1], previousPoint[0] - point[0]);
                        newX = (previousPoint[0] + length_3 * Math.cos(sideAngle));
                        newY = (previousPoint[1] - length_3 * Math.sin(sideAngle));
                        break;
                    case "ANGLE":
                        sideAngle = /* toRadians */ (function (x) { return x * Math.PI / 180; })(value != null ? /* floatValue */ value : 0);
                        if (roomPoints.length > 2) {
                            sideAngle -= Math.atan2(roomPoints[roomPoints.length - 3][1] - previousPoint[1], roomPoints[roomPoints.length - 3][0] - previousPoint[0]);
                        }
                        var sideLength = this.getRoomSideLength(this.newRoom, roomPoints.length - 1);
                        newX = (previousPoint[0] + sideLength * Math.cos(sideAngle));
                        newY = (previousPoint[1] - sideLength * Math.sin(sideAngle));
                        break;
                    default:
                        return;
                }
                this.newRoom.setPoint(newX, newY, roomPoints.length - 1);
                planView.setAlignmentFeedback(Room, this.newRoom, newX, newY, false);
                this.showRoomAngleFeedback(this.newRoom, roomPoints.length - 1);
                planView.setDimensionLinesFeedback(this.getTriangulationDimensionLines(this.newRoom, roomPoints.length - 1));
                planView.makePointVisible(previousPoint[0], previousPoint[1]);
                planView.makePointVisible(newX, newY);
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        RoomDrawingState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.newRoom != null) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        RoomDrawingState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        RoomDrawingState.prototype.escape = function () {
            if (this.newRoom != null && this.newPoint == null) {
                this.newRoom.removePoint(this.newRoom.getPointCount() - 1);
            }
            this.validateDrawnRoom();
        };
        /**
         *
         */
        RoomDrawingState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
            this.newRoom = null;
            this.newPoint = null;
            this.oldSelection = null;
        };
        return RoomDrawingState;
    }(PlanController.AbstractRoomState));
    PlanController.RoomDrawingState = RoomDrawingState;
    RoomDrawingState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomDrawingState";
    /**
     * Room resize state. This state manages room resizing.
     * @extends PlanController.AbstractRoomState
     * @class
     */
    var RoomResizeState = /** @class */ (function (_super) {
        __extends(RoomResizeState, _super);
        function RoomResizeState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.selectedRoom === undefined) {
                _this.selectedRoom = null;
            }
            if (_this.roomPointIndex === undefined) {
                _this.roomPointIndex = 0;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.deltaXToResizePoint === undefined) {
                _this.deltaXToResizePoint = 0;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        RoomResizeState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        RoomResizeState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        RoomResizeState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        RoomResizeState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.selectedRoom = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            var margin = this.__parent.getIndicatorMargin();
            this.roomPointIndex = this.selectedRoom.getPointIndexAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), margin);
            var roomPoints = this.selectedRoom.getPoints();
            this.oldX = roomPoints[this.roomPointIndex][0];
            this.oldY = roomPoints[this.roomPointIndex][1];
            this.deltaXToResizePoint = this.__parent.getXLastMousePress() - this.oldX;
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - this.oldY;
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedRoom, this.roomPointIndex), this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
            this.showRoomAngleFeedback(this.selectedRoom, this.roomPointIndex);
            planView.setDimensionLinesFeedback(this.getTriangulationDimensionLines(this.selectedRoom, this.roomPointIndex));
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomResizeState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var newX = x - this.deltaXToResizePoint;
            var newY = y - this.deltaYToResizePoint;
            var roomPoints = this.selectedRoom.getPoints();
            var previousPointIndex = this.roomPointIndex === 0 ? roomPoints.length - 1 : this.roomPointIndex - 1;
            var xPreviousPoint = roomPoints[previousPointIndex][0];
            var yPreviousPoint = roomPoints[previousPointIndex][1];
            var magnetizedPoint = false;
            if (this.alignmentActivated) {
                var pointWithAngleMagnetism = new PlanController.PointWithAngleMagnetism(xPreviousPoint, yPreviousPoint, newX, newY, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                newX = pointWithAngleMagnetism.getX();
                newY = pointWithAngleMagnetism.getY();
            }
            else if (this.magnetismEnabled) {
                var point = new PlanController.PointMagnetizedToClosestWallOrRoomPoint(this.__parent, this.selectedRoom, this.roomPointIndex, newX, newY);
                magnetizedPoint = point.isMagnetized();
                if (magnetizedPoint) {
                    newX = point.getX();
                    newY = point.getY();
                }
                else {
                    var pointWithAngleMagnetism = new PlanController.RoomPointWithAngleMagnetism(this.__parent, this.selectedRoom, this.roomPointIndex, xPreviousPoint, yPreviousPoint, newX, newY);
                    newX = pointWithAngleMagnetism.getX();
                    newY = pointWithAngleMagnetism.getY();
                }
            }
            PlanController.moveRoomPoint(this.selectedRoom, newX, newY, this.roomPointIndex);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedRoom, this.roomPointIndex), x, y);
            planView.setAlignmentFeedback(Room, this.selectedRoom, newX, newY, magnetizedPoint);
            this.showRoomAngleFeedback(this.selectedRoom, this.roomPointIndex);
            planView.setDimensionLinesFeedback(this.getTriangulationDimensionLines(this.selectedRoom, this.roomPointIndex));
            planView.makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        RoomResizeState.prototype.releaseMouse = function (x, y) {
            this.__parent.postRoomResize(this.selectedRoom, this.oldX, this.oldY, this.roomPointIndex);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        RoomResizeState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        RoomResizeState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        RoomResizeState.prototype.escape = function () {
            PlanController.moveRoomPoint(this.selectedRoom, this.oldX, this.oldY, this.roomPointIndex);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        RoomResizeState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedRoom = null;
        };
        return RoomResizeState;
    }(PlanController.AbstractRoomState));
    PlanController.RoomResizeState = RoomResizeState;
    RoomResizeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.RoomResizeState";
    /**
     * Polyline drawing state. This state manages polyline creation at mouse press.
     * @extends PlanController.AbstractPolylineState
     * @class
     */
    var PolylineDrawingState = /** @class */ (function (_super) {
        __extends(PolylineDrawingState, _super);
        function PolylineDrawingState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.xPreviousPoint === undefined) {
                _this.xPreviousPoint = 0;
            }
            if (_this.yPreviousPoint === undefined) {
                _this.yPreviousPoint = 0;
            }
            if (_this.newPolyline === undefined) {
                _this.newPolyline = null;
            }
            if (_this.newPoint === undefined) {
                _this.newPoint = null;
            }
            if (_this.oldSelection === undefined) {
                _this.oldSelection = null;
            }
            if (_this.oldBasePlanLocked === undefined) {
                _this.oldBasePlanLocked = false;
            }
            if (_this.oldAllLevelsSelection === undefined) {
                _this.oldAllLevelsSelection = false;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            if (_this.curvedPolyline === undefined) {
                _this.curvedPolyline = false;
            }
            if (_this.lastPointCreationTime === undefined) {
                _this.lastPointCreationTime = 0;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PolylineDrawingState.prototype.getMode = function () {
            return PlanController.Mode.POLYLINE_CREATION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PolylineDrawingState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PolylineDrawingState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         * @param {PlanController.Mode} mode
         */
        PolylineDrawingState.prototype.setMode = function (mode) {
            this.escape();
            if (mode === PlanController.Mode.SELECTION_$LI$()) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else if (mode === PlanController.Mode.PANNING_$LI$()) {
                this.__parent.setState(this.__parent.getPanningState());
            }
            else if (mode === PlanController.Mode.WALL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getWallCreationState());
            }
            else if (mode === PlanController.Mode.ROOM_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getRoomCreationState());
            }
            else if (mode === PlanController.Mode.DIMENSION_LINE_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getDimensionLineCreationState());
            }
            else if (mode === PlanController.Mode.LABEL_CREATION_$LI$()) {
                this.__parent.setState(this.__parent.getLabelCreationState());
            }
        };
        /**
         *
         */
        PolylineDrawingState.prototype.enter = function () {
            _super.prototype.enter.call(this);
            this.oldSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems();
            this.oldBasePlanLocked = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isBasePlanLocked();
            this.oldAllLevelsSelection = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection();
            this.newPolyline = null;
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            this.xPreviousPoint = this.__parent.getXLastMousePress();
            this.yPreviousPoint = this.__parent.getYLastMousePress();
            this.setDuplicationActivated(this.__parent.wasDuplicationActivatedLastMousePress());
            this.__parent.deselectAll();
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PolylineDrawingState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var xEnd = x;
            var yEnd = y;
            if (this.alignmentActivated || this.magnetismEnabled) {
                var pointWithAngleMagnetism = new PlanController.PointWithAngleMagnetism(this.xPreviousPoint, this.yPreviousPoint, x, y, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                xEnd = pointWithAngleMagnetism.getX();
                yEnd = pointWithAngleMagnetism.getY();
            }
            if (this.newPolyline == null) {
                this.newPolyline = this.createAndSelectPolyline(this.xPreviousPoint, this.yPreviousPoint, xEnd, yEnd);
            }
            else if (this.newPoint != null) {
                var points = this.newPolyline.getPoints();
                this.xPreviousPoint = points[points.length - 1][0];
                this.yPreviousPoint = points[points.length - 1][1];
                this.newPolyline.addPoint$float$float(xEnd, yEnd);
                this.newPoint[0] = xEnd;
                this.newPoint[1] = yEnd;
                this.newPoint = null;
            }
            else {
                this.newPolyline.setPoint(xEnd, yEnd, this.newPolyline.getPointCount() - 1);
            }
            planView.setAlignmentFeedback(Polyline, null, x, y, false);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.newPolyline, this.newPolyline.getPointCount() - 1), x, y);
            if (this.newPolyline.getJoinStyle() !== Polyline.JoinStyle.CURVED) {
                this.showPolylineAngleFeedback(this.newPolyline, this.newPolyline.getPointCount() - 1);
            }
            planView.makePointVisible(x, y);
        };
        /**
         * Returns a new polyline instance with one segment between (<code>xStart</code>,
         * <code>yStart</code>) and (<code>xEnd</code>, <code>yEnd</code>) points.
         * The new polyline is added to home and selected
         * @param {number} xStart
         * @param {number} yStart
         * @param {number} xEnd
         * @param {number} yEnd
         * @return {Polyline}
         * @private
         */
        PolylineDrawingState.prototype.createAndSelectPolyline = function (xStart, yStart, xEnd, yEnd) {
            var newPolyline = this.__parent.createPolyline([[xStart, yStart], [xEnd, yEnd]]);
            if (this.curvedPolyline) {
                newPolyline.setJoinStyle(Polyline.JoinStyle.CURVED);
            }
            this.__parent.selectItems(/* asList */ [newPolyline].slice(0));
            return newPolyline;
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         * @param {number} clickCount
         * @param {boolean} shiftDown
         * @param {boolean} duplicationActivated
         */
        PolylineDrawingState.prototype.pressMouse = function (x, y, clickCount, shiftDown, duplicationActivated) {
            if (clickCount === 2) {
                if (this.newPolyline != null) {
                    var pointIndex = this.newPolyline.getPointIndexAt(x, y, this.__parent.getSelectionMargin());
                    if (pointIndex === 0) {
                        this.newPolyline.removePoint(this.newPolyline.getPointCount() - 1);
                        this.newPolyline.setClosedPath(true);
                    }
                    this.validateDrawnPolyline();
                }
                else {
                    if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                        this.__parent.setState(this.__parent.getSelectionState());
                    }
                    else {
                        this.__parent.setState(this.__parent.getPolylineCreationState());
                    }
                }
            }
            else {
                this.endPolylineSegment();
            }
        };
        PolylineDrawingState.prototype.validateDrawnPolyline = function () {
            if (this.newPolyline != null) {
                var points = this.newPolyline.getPoints();
                if (points.length < 2) {
                    this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.deletePolyline(this.newPolyline);
                }
                else {
                    this.__parent.postCreatePolylines(/* asList */ [this.newPolyline].slice(0), this.oldSelection, this.oldBasePlanLocked, this.oldAllLevelsSelection);
                }
            }
            if (this.__parent.getPointerTypeLastMousePress() === View.PointerType.TOUCH) {
                this.__parent.setState(this.__parent.getSelectionState());
            }
            else {
                this.__parent.setState(this.__parent.getPolylineCreationState());
            }
        };
        PolylineDrawingState.prototype.endPolylineSegment = function () {
            if (this.newPolyline != null && this.getPolylineSegmentLength(this.newPolyline, this.newPolyline.getPointCount() - 1) > 0) {
                this.newPoint = [0, 0];
                if (this.newPolyline.getPointCount() <= 2 && this.curvedPolyline && this.newPolyline.getJoinStyle() !== Polyline.JoinStyle.CURVED) {
                    this.newPolyline.setJoinStyle(Polyline.JoinStyle.CURVED);
                }
            }
        };
        /**
         *
         * @param {boolean} editionActivated
         */
        PolylineDrawingState.prototype.setEditionActivated = function (editionActivated) {
            var planView = this.__parent.getView();
            if (editionActivated) {
                planView.deleteFeedback();
                if (this.newPolyline == null) {
                    planView.setToolTipEditedProperties(["X", "Y"], [this.xPreviousPoint, this.yPreviousPoint], this.xPreviousPoint, this.yPreviousPoint);
                }
                else {
                    if (this.newPoint != null) {
                        this.createNextSegment();
                    }
                    var points = this.newPolyline.getPoints();
                    planView.setToolTipEditedProperties(["LENGTH", "ANGLE"], [this.getPolylineSegmentLength(this.newPolyline, points.length - 1), this.getPolylineSegmentAngle(this.newPolyline, points.length - 1)], points[points.length - 1][0], points[points.length - 1][1]);
                }
            }
            else {
                if (this.newPolyline == null) {
                    var lengthUnit = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit();
                    var defaultLength = lengthUnit === LengthUnit.INCH || lengthUnit === LengthUnit.INCH_DECIMALS ? LengthUnit.footToCentimeter(10) : 300;
                    this.newPolyline = this.createAndSelectPolyline(this.xPreviousPoint, this.yPreviousPoint, this.xPreviousPoint + defaultLength, this.yPreviousPoint);
                    planView.deleteFeedback();
                    this.setEditionActivated(true);
                }
                else if ( /* currentTimeMillis */Date.now() - this.lastPointCreationTime < 300) {
                    this.escape();
                }
                else {
                    this.endPolylineSegment();
                    var points = this.newPolyline.getPoints();
                    if (points.length > 2 && this.newPolyline.getPointIndexAt(points[points.length - 1][0], points[points.length - 1][1], 0.001) === 0) {
                        this.newPolyline.removePoint(this.newPolyline.getPointCount() - 1);
                        this.newPolyline.setClosedPath(true);
                        this.validateDrawnPolyline();
                        return;
                    }
                    this.createNextSegment();
                    planView.deleteToolTipFeedback();
                    this.setEditionActivated(true);
                }
            }
        };
        PolylineDrawingState.prototype.createNextSegment = function () {
            var points = this.newPolyline.getPoints();
            this.xPreviousPoint = points[points.length - 1][0];
            this.yPreviousPoint = points[points.length - 1][1];
            var previousSegmentAngle = Math.PI - Math.atan2(points[points.length - 2][1] - points[points.length - 1][1], points[points.length - 2][0] - points[points.length - 1][0]);
            previousSegmentAngle -= Math.PI / 2;
            var previousSegmentLength = this.getPolylineSegmentLength(this.newPolyline, points.length - 1);
            this.newPolyline.addPoint$float$float((this.xPreviousPoint + previousSegmentLength * Math.cos(previousSegmentAngle)), (this.yPreviousPoint - previousSegmentLength * Math.sin(previousSegmentAngle)));
            this.newPoint = null;
            this.lastPointCreationTime = /* currentTimeMillis */ Date.now();
        };
        /**
         *
         * @param {string} editableProperty
         * @param {Object} value
         */
        PolylineDrawingState.prototype.updateEditableProperty = function (editableProperty, value) {
            var planView = this.__parent.getView();
            if (this.newPolyline == null) {
                switch ((editableProperty)) {
                    case "X":
                        this.xPreviousPoint = value != null ? /* floatValue */ value : 0;
                        this.xPreviousPoint = Math.max(-100000.0, Math.min(this.xPreviousPoint, 100000.0));
                        break;
                    case "Y":
                        this.yPreviousPoint = value != null ? /* floatValue */ value : 0;
                        this.yPreviousPoint = Math.max(-100000.0, Math.min(this.yPreviousPoint, 100000.0));
                        break;
                }
                planView.setAlignmentFeedback(Polyline, null, this.xPreviousPoint, this.yPreviousPoint, true);
                planView.makePointVisible(this.xPreviousPoint, this.yPreviousPoint);
            }
            else {
                var points = this.newPolyline.getPoints();
                var previousPoint = points[points.length - 2];
                var point = points[points.length - 1];
                var newX = void 0;
                var newY = void 0;
                switch ((editableProperty)) {
                    case "LENGTH":
                        var length_4 = value != null ? /* floatValue */ value : 0;
                        length_4 = Math.max(0.001, Math.min(length_4, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit().getMaximumLength()));
                        var segmentAngle = Math.PI - Math.atan2(previousPoint[1] - point[1], previousPoint[0] - point[0]);
                        newX = (previousPoint[0] + length_4 * Math.cos(segmentAngle));
                        newY = (previousPoint[1] - length_4 * Math.sin(segmentAngle));
                        break;
                    case "ANGLE":
                        segmentAngle = /* toRadians */ (function (x) { return x * Math.PI / 180; })(value != null ? /* floatValue */ value : 0);
                        if (points.length > 2) {
                            segmentAngle -= Math.atan2(points[points.length - 3][1] - previousPoint[1], points[points.length - 3][0] - previousPoint[0]);
                        }
                        var segmentLength = this.getPolylineSegmentLength(this.newPolyline, points.length - 1);
                        newX = (previousPoint[0] + segmentLength * Math.cos(segmentAngle));
                        newY = (previousPoint[1] - segmentLength * Math.sin(segmentAngle));
                        break;
                    default:
                        return;
                }
                this.newPolyline.setPoint(newX, newY, points.length - 1);
                if (this.newPolyline.getJoinStyle() !== Polyline.JoinStyle.CURVED) {
                    this.showPolylineAngleFeedback(this.newPolyline, points.length - 1);
                }
                planView.setAlignmentFeedback(Polyline, null, newX, newY, false);
                planView.makePointVisible(points[points.length - 2][0], points[points.length - 2][1]);
                planView.makePointVisible(points[points.length - 1][0], points[points.length - 1][1]);
            }
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PolylineDrawingState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            if (this.newPolyline != null) {
                this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
            }
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        PolylineDrawingState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} duplicationActivated
         */
        PolylineDrawingState.prototype.setDuplicationActivated = function (duplicationActivated) {
            this.curvedPolyline = duplicationActivated;
        };
        /**
         *
         */
        PolylineDrawingState.prototype.escape = function () {
            if (this.newPolyline != null && this.newPoint == null) {
                this.newPolyline.removePoint(this.newPolyline.getPointCount() - 1);
            }
            this.validateDrawnPolyline();
        };
        /**
         *
         */
        PolylineDrawingState.prototype.exit = function () {
            this.__parent.getView().deleteFeedback();
            this.newPolyline = null;
            this.newPoint = null;
            this.oldSelection = null;
        };
        return PolylineDrawingState;
    }(PlanController.AbstractPolylineState));
    PlanController.PolylineDrawingState = PolylineDrawingState;
    PolylineDrawingState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PolylineDrawingState";
    /**
     * Polyline resize state. This state manages polyline resizing.
     * @extends PlanController.AbstractPolylineState
     * @class
     */
    var PolylineResizeState = /** @class */ (function (_super) {
        __extends(PolylineResizeState, _super);
        function PolylineResizeState(__parent) {
            var _this = _super.call(this, __parent) || this;
            _this.__parent = __parent;
            if (_this.polylines === undefined) {
                _this.polylines = null;
            }
            if (_this.selectedPolyline === undefined) {
                _this.selectedPolyline = null;
            }
            if (_this.polylinePointIndex === undefined) {
                _this.polylinePointIndex = 0;
            }
            if (_this.oldX === undefined) {
                _this.oldX = 0;
            }
            if (_this.oldY === undefined) {
                _this.oldY = 0;
            }
            if (_this.deltaXToResizePoint === undefined) {
                _this.deltaXToResizePoint = 0;
            }
            if (_this.deltaYToResizePoint === undefined) {
                _this.deltaYToResizePoint = 0;
            }
            if (_this.magnetismEnabled === undefined) {
                _this.magnetismEnabled = false;
            }
            if (_this.alignmentActivated === undefined) {
                _this.alignmentActivated = false;
            }
            return _this;
        }
        /**
         *
         * @return {PlanController.Mode}
         */
        PolylineResizeState.prototype.getMode = function () {
            return PlanController.Mode.SELECTION_$LI$();
        };
        /**
         *
         * @return {boolean}
         */
        PolylineResizeState.prototype.isModificationState = function () {
            return true;
        };
        /**
         *
         * @return {boolean}
         */
        PolylineResizeState.prototype.isBasePlanModificationState = function () {
            return true;
        };
        /**
         *
         */
        PolylineResizeState.prototype.enter = function () {
            var _this = this;
            _super.prototype.enter.call(this);
            this.selectedPolyline = this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems()[0];
            this.polylines = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getPolylines().slice(0));
            /* remove */ (function (a) { var index = a.indexOf(_this.selectedPolyline); if (index >= 0) {
                a.splice(index, 1);
                return true;
            }
            else {
                return false;
            } })(this.polylines);
            var margin = this.__parent.getIndicatorMargin();
            this.polylinePointIndex = this.selectedPolyline.getPointIndexAt(this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress(), margin);
            var polylinePoints = this.selectedPolyline.getPoints();
            this.oldX = polylinePoints[this.polylinePointIndex][0];
            this.oldY = polylinePoints[this.polylinePointIndex][1];
            this.deltaXToResizePoint = this.__parent.getXLastMousePress() - this.oldX;
            this.deltaYToResizePoint = this.__parent.getYLastMousePress() - this.oldY;
            this.alignmentActivated = this.__parent.wasAlignmentActivatedLastMousePress();
            this.toggleMagnetism(this.__parent.wasMagnetismToggledLastMousePress());
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(true);
            var toolTipFeedbackText = this.getToolTipFeedbackText(this.selectedPolyline, this.polylinePointIndex);
            if (toolTipFeedbackText != null) {
                planView.setToolTipFeedback(toolTipFeedbackText, this.__parent.getXLastMousePress(), this.__parent.getYLastMousePress());
                if (this.selectedPolyline.getJoinStyle() !== Polyline.JoinStyle.CURVED) {
                    this.showPolylineAngleFeedback(this.selectedPolyline, this.polylinePointIndex);
                }
            }
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PolylineResizeState.prototype.moveMouse = function (x, y) {
            var planView = this.__parent.getView();
            var newX = x - this.deltaXToResizePoint;
            var newY = y - this.deltaYToResizePoint;
            if (this.alignmentActivated || this.magnetismEnabled) {
                var polylinePoints = this.selectedPolyline.getPoints();
                var previousPointIndex = this.polylinePointIndex === 0 ? (this.selectedPolyline.isClosedPath() ? polylinePoints.length - 1 : 1) : this.polylinePointIndex - 1;
                var xPreviousPoint = polylinePoints[previousPointIndex][0];
                var yPreviousPoint = polylinePoints[previousPointIndex][1];
                var pointWithAngleMagnetism = new PlanController.PointWithAngleMagnetism(xPreviousPoint, yPreviousPoint, newX, newY, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.getLengthUnit(), planView.getPixelLength());
                newX = pointWithAngleMagnetism.getX();
                newY = pointWithAngleMagnetism.getY();
            }
            this.selectedPolyline.setPoint(newX, newY, this.polylinePointIndex);
            planView.setToolTipFeedback(this.getToolTipFeedbackText(this.selectedPolyline, this.polylinePointIndex), x, y);
            if (this.selectedPolyline.getJoinStyle() !== Polyline.JoinStyle.CURVED) {
                this.showPolylineAngleFeedback(this.selectedPolyline, this.polylinePointIndex);
            }
            planView.makePointVisible(x, y);
        };
        /**
         *
         * @param {number} x
         * @param {number} y
         */
        PolylineResizeState.prototype.releaseMouse = function (x, y) {
            this.__parent.postPolylineResize(this.selectedPolyline, this.oldX, this.oldY, this.polylinePointIndex);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         * @param {boolean} magnetismToggled
         */
        PolylineResizeState.prototype.toggleMagnetism = function (magnetismToggled) {
            this.magnetismEnabled = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_preferences.isMagnetismEnabled()) !== (magnetismToggled);
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         * @param {boolean} alignmentActivated
         */
        PolylineResizeState.prototype.setAlignmentActivated = function (alignmentActivated) {
            this.alignmentActivated = alignmentActivated;
            this.moveMouse(this.__parent.getXLastMouseMove(), this.__parent.getYLastMouseMove());
        };
        /**
         *
         */
        PolylineResizeState.prototype.escape = function () {
            this.selectedPolyline.setPoint(this.oldX, this.oldY, this.polylinePointIndex);
            this.__parent.setState(this.__parent.getSelectionState());
        };
        /**
         *
         */
        PolylineResizeState.prototype.exit = function () {
            var planView = this.__parent.getView();
            planView.setResizeIndicatorVisible(false);
            planView.deleteFeedback();
            this.selectedPolyline = null;
        };
        return PolylineResizeState;
    }(PlanController.AbstractPolylineState));
    PlanController.PolylineResizeState = PolylineResizeState;
    PolylineResizeState["__class"] = "com.eteks.sweethome3d.viewcontroller.PlanController.PolylineResizeState";
    var PlanController$0 = /** @class */ (function () {
        function PlanController$0(__parent, walls) {
            this.walls = walls;
            this.__parent = __parent;
        }
        PlanController$0.prototype.compare = function (wall1, wall2) {
            var intersection1 = PlanController.computeIntersection(wall1.getXStart(), wall1.getYStart(), wall1.getXEnd(), wall1.getYEnd(), this.walls[0].getXStart(), this.walls[0].getYStart(), this.walls[0].getXEnd(), this.walls[0].getYEnd());
            var intersection2 = PlanController.computeIntersection(wall2.getXStart(), wall2.getYStart(), wall2.getXEnd(), wall2.getYEnd(), this.walls[0].getXStart(), this.walls[0].getYStart(), this.walls[0].getXEnd(), this.walls[0].getYEnd());
            var closestPoint1 = Math.min(java.awt.geom.Point2D.distanceSq(this.walls[0].getXStart(), this.walls[0].getYStart(), intersection1[0], intersection1[1]), java.awt.geom.Point2D.distanceSq(this.walls[0].getXEnd(), this.walls[0].getYEnd(), intersection1[0], intersection1[1]));
            var closestPoint2 = Math.min(java.awt.geom.Point2D.distanceSq(this.walls[0].getXStart(), this.walls[0].getYStart(), intersection2[0], intersection2[1]), java.awt.geom.Point2D.distanceSq(this.walls[0].getXEnd(), this.walls[0].getYEnd(), intersection2[0], intersection2[1]));
            return /* compare */ (closestPoint1 - closestPoint2);
        };
        return PlanController$0;
    }());
    PlanController.PlanController$0 = PlanController$0;
    var PlanController$1 = /** @class */ (function () {
        function PlanController$1(__parent) {
            this.__parent = __parent;
        }
        PlanController$1.prototype.selectionChanged = function (ev) {
            this.__parent.selectLevelFromSelectedItems();
            if (this.__parent.getView() != null) {
                this.__parent.getView().makeSelectionVisible();
            }
        };
        return PlanController$1;
    }());
    PlanController.PlanController$1 = PlanController$1;
    PlanController$1["__interfaces"] = ["com.eteks.sweethome3d.model.SelectionListener"];
    var PlanController$2 = /** @class */ (function () {
        function PlanController$2(__parent) {
            this.__parent = __parent;
        }
        PlanController$2.prototype.propertyChange = function (ev) {
            if ( /* contains */(this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems().indexOf((ev.getSource())) >= 0)) {
                if (this.__parent.getView() != null) {
                    this.__parent.getView().makeSelectionVisible();
                }
            }
        };
        return PlanController$2;
    }());
    PlanController.PlanController$2 = PlanController$2;
    var PlanController$3 = /** @class */ (function () {
        function PlanController$3(__parent) {
            this.__parent = __parent;
        }
        PlanController$3.prototype.propertyChange = function (ev) {
            var propertyName = ev.getPropertyName();
            if (( /* name */"X_START" === propertyName) || ( /* name */"X_END" === propertyName) || ( /* name */"Y_START" === propertyName) || ( /* name */"Y_END" === propertyName) || ( /* name */"WALL_AT_START" === propertyName) || ( /* name */"WALL_AT_END" === propertyName) || ( /* name */"THICKNESS" === propertyName) || ( /* name */"ARC_EXTENT" === propertyName) || ( /* name */"LEVEL" === propertyName) || ( /* name */"HEIGHT" === propertyName) || ( /* name */"HEIGHT_AT_END" === propertyName) || ( /* name */"LEFT_SIDE_BASEBOARD" === propertyName) || ( /* name */"RIGHT_SIDE_BASEBOARD" === propertyName)) {
                this.__parent.resetAreaCache();
                var wall_1 = ev.getSource();
                if (!wall_1.isAtLevel(this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedLevel())) {
                    var selectedItems = (this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.getSelectedItems().slice(0));
                    if ( /* remove */(function (a) { var index = a.indexOf(wall_1); if (index >= 0) {
                        a.splice(index, 1);
                        return true;
                    }
                    else {
                        return false;
                    } })(selectedItems)) {
                        this.__parent.selectItems(selectedItems, this.__parent.__com_eteks_sweethome3d_viewcontroller_PlanController_home.isAllLevelsSelection());
                    }
                }
            }
        };
        return PlanController$3;
    }());
    PlanController.PlanController$3 = PlanController$3;
    var PlanController$4 = /** @class */ (function () {
        function PlanController$4(__parent) {
            this.__parent = __parent;
        }
        PlanController$4.prototype.propertyChange = function (ev) {
            var propertyName = ev.getPropertyName();
            if (( /* name */"X" === propertyName) || ( /* name */"Y" === propertyName) || ( /* name */"WIDTH_IN_PLAN" === propertyName) || ( /* name */"DEPTH_IN_PLAN" === propertyName)) {
                /* remove */ (function (m, k) { if (m.entries == null)
                    m.entries = []; for (var i = 0; i < m.entries.length; i++)
                    if (m.entries[i].key == null && k == null || m.entries[i].key.equals != null && m.entries[i].key.equals(k) || m.entries[i].key === k) {
                        return m.entries.splice(i, 1)[0];
                    } })(this.__parent.furnitureSidesCache, ev.getSource());
            }
        };
        return PlanController$4;
    }());
    PlanController.PlanController$4 = PlanController$4;
    var PlanController$5 = /** @class */ (function () {
        function PlanController$5(__parent) {
            this.__parent = __parent;
        }
        PlanController$5.prototype.propertyChange = function (ev) {
            var piece = ev.getSource();
            var propertyName = ev.getPropertyName();
            if (( /* name */"MODEL" === propertyName) || ( /* name */"MODEL_MIRRORED" === propertyName) || ( /* name */"MODEL_ROTATION" === propertyName) || ( /* name */"WIDTH" === propertyName) || ( /* name */"DEPTH" === propertyName) || ( /* name */"HEIGHT" === propertyName) || ( /* name */"ROLL" === propertyName) || ( /* name */"PITCH" === propertyName)) {
                var size = this.__parent.getView().getPieceOfFurnitureSizeInPlan(piece);
                if (size != null) {
                    piece.setWidthInPlan(size[0]);
                    piece.setDepthInPlan(size[1]);
                    piece.setHeightInPlan(size[2]);
                }
                else if ( /* name */"WIDTH" === propertyName) {
                    var scale = piece.getWidth() / /* floatValue */ ev.getOldValue();
                    piece.setWidthInPlan(scale * piece.getWidthInPlan());
                    piece.setDepthInPlan(scale * piece.getDepthInPlan());
                    piece.setHeightInPlan(scale * piece.getHeightInPlan());
                }
            }
        };
        return PlanController$5;
    }());
    PlanController.PlanController$5 = PlanController$5;
    var PlanController$6 = /** @class */ (function () {
        function PlanController$6(__parent) {
            this.__parent = __parent;
        }
        PlanController$6.prototype.propertyChange = function (ev) {
            this.__parent.resetAreaCache();
        };
        return PlanController$6;
    }());
    PlanController.PlanController$6 = PlanController$6;
    var PlanController$7 = /** @class */ (function () {
        function PlanController$7(__parent) {
            this.__parent = __parent;
        }
        PlanController$7.prototype.compare = function (p1, p2) {
            return -(p1.getGroundElevation() - p2.getGroundElevation());
        };
        return PlanController$7;
    }());
    PlanController.PlanController$7 = PlanController$7;
})(PlanController || (PlanController = {}));
/**
 * Creates a camera at given location and angle.
 * @param {string} id
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @param {number} yaw
 * @param {number} pitch
 * @param {number} fieldOfView
 * @class
 * @extends Camera
 * @author Emmanuel Puybaret
 */
var ObserverCamera = /** @class */ (function (_super) {
    __extends(ObserverCamera, _super);
    function ObserverCamera(id, x, y, z, yaw, pitch, fieldOfView) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof yaw === 'number') || yaw === null) && ((typeof pitch === 'number') || pitch === null) && ((typeof fieldOfView === 'number') || fieldOfView === null)) {
            var __args = arguments;
            _this = _super.call(this, id, x, y, z, yaw, pitch, fieldOfView) || this;
            if (_this.fixedSize === undefined) {
                _this.fixedSize = false;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.rectangleShapeCache === undefined) {
                _this.rectangleShapeCache = null;
            }
        }
        else if (((typeof id === 'number') || id === null) && ((typeof x === 'number') || x === null) && ((typeof y === 'number') || y === null) && ((typeof z === 'number') || z === null) && ((typeof yaw === 'number') || yaw === null) && ((typeof pitch === 'number') || pitch === null) && fieldOfView === undefined) {
            var __args = arguments;
            var x_6 = __args[0];
            var y_6 = __args[1];
            var z_3 = __args[2];
            var yaw_3 = __args[3];
            var pitch_3 = __args[4];
            var fieldOfView_3 = __args[5];
            {
                var __args_90 = arguments;
                var id_22 = HomeObject.createId("observerCamera");
                _this = _super.call(this, id_22, x_6, y_6, z_3, yaw_3, pitch_3, fieldOfView_3) || this;
                if (_this.fixedSize === undefined) {
                    _this.fixedSize = false;
                }
                if (_this.shapeCache === undefined) {
                    _this.shapeCache = null;
                }
                if (_this.rectangleShapeCache === undefined) {
                    _this.rectangleShapeCache = null;
                }
            }
            if (_this.fixedSize === undefined) {
                _this.fixedSize = false;
            }
            if (_this.shapeCache === undefined) {
                _this.shapeCache = null;
            }
            if (_this.rectangleShapeCache === undefined) {
                _this.rectangleShapeCache = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Sets whether camera size should depends on its elevation and will notify listeners
     * bound to size properties of the size change.
     * @param {boolean} fixedSize
     */
    ObserverCamera.prototype.setFixedSize = function (fixedSize) {
        if (this.fixedSize !== fixedSize) {
            var oldWidth = this.getWidth();
            var oldDepth = this.getDepth();
            var oldHeight = this.getHeight();
            this.fixedSize = fixedSize;
            this.shapeCache = null;
            this.rectangleShapeCache = null;
            this.firePropertyChange(/* name */ "WIDTH", oldWidth, this.getWidth());
            this.firePropertyChange(/* name */ "DEPTH", oldDepth, this.getDepth());
            this.firePropertyChange(/* name */ "HEIGHT", oldHeight, this.getHeight());
        }
    };
    /**
     * Returns <code>true</code> if the camera size doesn't change according to its elevation.
     * @return {boolean}
     */
    ObserverCamera.prototype.isFixedSize = function () {
        return this.fixedSize;
    };
    /**
     * Sets the yaw angle in radians of this camera.
     * @param {number} yaw
     */
    ObserverCamera.prototype.setYaw = function (yaw) {
        _super.prototype.setYaw.call(this, yaw);
        this.shapeCache = null;
        this.rectangleShapeCache = null;
    };
    /**
     * Sets the abscissa of this camera.
     * @param {number} x
     */
    ObserverCamera.prototype.setX = function (x) {
        _super.prototype.setX.call(this, x);
        this.shapeCache = null;
        this.rectangleShapeCache = null;
    };
    /**
     * Sets the ordinate of this camera.
     * @param {number} y
     */
    ObserverCamera.prototype.setY = function (y) {
        _super.prototype.setY.call(this, y);
        this.shapeCache = null;
        this.rectangleShapeCache = null;
    };
    /**
     * Sets the elevation of this camera.
     * @param {number} z
     */
    ObserverCamera.prototype.setZ = function (z) {
        var oldWidth = this.getWidth();
        var oldDepth = this.getDepth();
        var oldHeight = this.getHeight();
        _super.prototype.setZ.call(this, z);
        this.shapeCache = null;
        this.rectangleShapeCache = null;
        this.firePropertyChange(/* name */ "WIDTH", oldWidth, this.getWidth());
        this.firePropertyChange(/* name */ "DEPTH", oldDepth, this.getDepth());
        this.firePropertyChange(/* name */ "HEIGHT", oldHeight, this.getHeight());
    };
    /**
     * Returns the width of this observer camera according to
     * human proportions with an eyes elevation at z.
     * @return {number}
     */
    ObserverCamera.prototype.getWidth = function () {
        if (this.fixedSize) {
            return 46.6;
        }
        else {
            var width = this.getZ() * 4 / 14;
            return Math.min(Math.max(width, 20), 62.5);
        }
    };
    /**
     * Returns the depth of this observer camera according to
     * human proportions with an eyes elevation at z.
     * @return {number}
     */
    ObserverCamera.prototype.getDepth = function () {
        if (this.fixedSize) {
            return 18.6;
        }
        else {
            var depth = this.getZ() * 8 / 70;
            return Math.min(Math.max(depth, 8), 25);
        }
    };
    /**
     * Returns the height of this observer camera according to
     * human proportions with an eyes elevation at z.
     * @return {number}
     */
    ObserverCamera.prototype.getHeight = function () {
        if (this.fixedSize) {
            return 175.0;
        }
        else {
            return this.getZ() * 15 / 14;
        }
    };
    /**
     * Returns the points of each corner of the rectangle surrounding this camera.
     * @return {float[][]} an array of the 4 (x,y) coordinates of the camera corners.
     */
    ObserverCamera.prototype.getPoints = function () {
        var cameraPoints = (function (dims) { var allocate = function (dims) { if (dims.length === 0) {
            return 0;
        }
        else {
            var array = [];
            for (var i = 0; i < dims[0]; i++) {
                array.push(allocate(dims.slice(1)));
            }
            return array;
        } }; return allocate(dims); })([4, 2]);
        var it = this.getRectangleShape().getPathIterator(null);
        for (var i = 0; i < cameraPoints.length; i++) {
            {
                it.currentSegment(cameraPoints[i]);
                it.next();
            }
            ;
        }
        return cameraPoints;
    };
    /**
     * Returns <code>true</code> if this camera intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    ObserverCamera.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        var rectangle = new java.awt.geom.Rectangle2D.Float(x0, y0, 0, 0);
        rectangle.add(x1, y1);
        return this.getShape().intersects(rectangle);
    };
    /**
     * Returns <code>true</code> if this camera contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    ObserverCamera.prototype.containsPoint = function (x, y, margin) {
        if (margin === 0) {
            return this.getShape().contains(x, y);
        }
        else {
            return this.getShape().intersects(x - margin, y - margin, 2 * margin, 2 * margin);
        }
    };
    /**
     * Returns the ellipse shape matching this camera.
     * @return {Object}
     * @private
     */
    ObserverCamera.prototype.getShape = function () {
        if (this.shapeCache == null) {
            var cameraEllipse = new java.awt.geom.Ellipse2D.Float(this.getX() - this.getWidth() / 2, this.getY() - this.getDepth() / 2, this.getWidth(), this.getDepth());
            var rotation = java.awt.geom.AffineTransform.getRotateInstance(this.getYaw(), this.getX(), this.getY());
            var it = cameraEllipse.getPathIterator(rotation);
            var pieceShape = new java.awt.geom.GeneralPath();
            pieceShape.append(it, false);
            this.shapeCache = pieceShape;
        }
        return this.shapeCache;
    };
    /**
     * Returns the rectangle shape matching this camera.
     * @return {Object}
     * @private
     */
    ObserverCamera.prototype.getRectangleShape = function () {
        if (this.rectangleShapeCache == null) {
            var cameraRectangle = new java.awt.geom.Rectangle2D.Float(this.getX() - this.getWidth() / 2, this.getY() - this.getDepth() / 2, this.getWidth(), this.getDepth());
            var rotation = java.awt.geom.AffineTransform.getRotateInstance(this.getYaw(), this.getX(), this.getY());
            var it = cameraRectangle.getPathIterator(rotation);
            var cameraRectangleShape = new java.awt.geom.GeneralPath();
            cameraRectangleShape.append(it, false);
            this.rectangleShapeCache = cameraRectangleShape;
        }
        return this.rectangleShapeCache;
    };
    /**
     * Moves this camera of (<code>dx</code>, <code>dy</code>) units.
     * @param {number} dx
     * @param {number} dy
     */
    ObserverCamera.prototype.move = function (dx, dy) {
        this.setX(this.getX() + dx);
        this.setY(this.getY() + dy);
    };
    /**
     * Returns a clone of this camera.
     * @return {ObserverCamera}
     */
    ObserverCamera.prototype.clone = function () {
        var _this = this;
        return (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(this);
    };
    return ObserverCamera;
}(Camera));
ObserverCamera["__class"] = "com.eteks.sweethome3d.model.ObserverCamera";
ObserverCamera["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable"];
ObserverCamera['__transients'] = ['shapeCache', 'rectangleShapeCache', 'lens', 'propertyChangeSupport'];
/**
 * Creates a home with no furniture and no walls.
 * @param {number} wallHeight default height for home walls
 * @class
 * @author Emmanuel Puybaret
 */
var Home = /** @class */ (function () {
    function Home(furniture, wallHeight) {
        if (((furniture != null && (furniture instanceof Array)) || furniture === null) && ((typeof wallHeight === 'number') || wallHeight === null)) {
            var __args = arguments;
            if (this.furniture === undefined) {
                this.furniture = null;
            }
            if (this.furnitureChangeSupport === undefined) {
                this.furnitureChangeSupport = null;
            }
            if (this.selectedItems === undefined) {
                this.selectedItems = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.allLevelsSelection === undefined) {
                this.allLevelsSelection = false;
            }
            if (this.levels === undefined) {
                this.levels = null;
            }
            if (this.selectedLevel === undefined) {
                this.selectedLevel = null;
            }
            if (this.levelsChangeSupport === undefined) {
                this.levelsChangeSupport = null;
            }
            if (this.walls === undefined) {
                this.walls = null;
            }
            if (this.wallsChangeSupport === undefined) {
                this.wallsChangeSupport = null;
            }
            if (this.rooms === undefined) {
                this.rooms = null;
            }
            if (this.roomsChangeSupport === undefined) {
                this.roomsChangeSupport = null;
            }
            if (this.polylines === undefined) {
                this.polylines = null;
            }
            if (this.polylinesChangeSupport === undefined) {
                this.polylinesChangeSupport = null;
            }
            if (this.dimensionLines === undefined) {
                this.dimensionLines = null;
            }
            if (this.dimensionLinesChangeSupport === undefined) {
                this.dimensionLinesChangeSupport = null;
            }
            if (this.labels === undefined) {
                this.labels = null;
            }
            if (this.labelsChangeSupport === undefined) {
                this.labelsChangeSupport = null;
            }
            if (this.camera === undefined) {
                this.camera = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.modified === undefined) {
                this.modified = false;
            }
            if (this.recovered === undefined) {
                this.recovered = false;
            }
            if (this.repaired === undefined) {
                this.repaired = false;
            }
            if (this.backgroundImage === undefined) {
                this.backgroundImage = null;
            }
            if (this.observerCamera === undefined) {
                this.observerCamera = null;
            }
            if (this.topCamera === undefined) {
                this.topCamera = null;
            }
            if (this.storedCameras === undefined) {
                this.storedCameras = null;
            }
            if (this.environment === undefined) {
                this.environment = null;
            }
            if (this.print === undefined) {
                this.print = null;
            }
            if (this.furnitureSortedPropertyName === undefined) {
                this.furnitureSortedPropertyName = null;
            }
            if (this.furnitureVisiblePropertyNames === undefined) {
                this.furnitureVisiblePropertyNames = null;
            }
            if (this.furnitureDescendingSorted === undefined) {
                this.furnitureDescendingSorted = false;
            }
            if (this.visualProperties === undefined) {
                this.visualProperties = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.version === undefined) {
                this.version = 0;
            }
            if (this.basePlanLocked === undefined) {
                this.basePlanLocked = false;
            }
            if (this.compass === undefined) {
                this.compass = null;
            }
            if (this.skyColor === undefined) {
                this.skyColor = 0;
            }
            if (this.groundColor === undefined) {
                this.groundColor = 0;
            }
            if (this.groundTexture === undefined) {
                this.groundTexture = null;
            }
            if (this.lightColor === undefined) {
                this.lightColor = 0;
            }
            if (this.wallsAlpha === undefined) {
                this.wallsAlpha = 0;
            }
            if (this.furnitureSortedProperty === undefined) {
                this.furnitureSortedProperty = null;
            }
            if (this.furnitureVisibleProperties === undefined) {
                this.furnitureVisibleProperties = null;
            }
            if (this.furnitureWithDoorsAndWindows === undefined) {
                this.furnitureWithDoorsAndWindows = null;
            }
            if (this.furnitureWithGroups === undefined) {
                this.furnitureWithGroups = null;
            }
            this.furniture = (furniture.slice(0));
            this.walls = ([]);
            this.wallHeight = wallHeight;
            this.furnitureVisibleProperties = /* asList */ ["NAME", "WIDTH", "DEPTH", "HEIGHT", "VISIBLE"].slice(0);
            this.init(true);
            this.addModelListeners();
        }
        else if (((furniture != null && (furniture instanceof Array)) || furniture === null) && wallHeight === undefined) {
            var __args = arguments;
            {
                var __args_91 = arguments;
                var wallHeight_1 = 250;
                if (this.furniture === undefined) {
                    this.furniture = null;
                }
                if (this.furnitureChangeSupport === undefined) {
                    this.furnitureChangeSupport = null;
                }
                if (this.selectedItems === undefined) {
                    this.selectedItems = null;
                }
                if (this.selectionListeners === undefined) {
                    this.selectionListeners = null;
                }
                if (this.allLevelsSelection === undefined) {
                    this.allLevelsSelection = false;
                }
                if (this.levels === undefined) {
                    this.levels = null;
                }
                if (this.selectedLevel === undefined) {
                    this.selectedLevel = null;
                }
                if (this.levelsChangeSupport === undefined) {
                    this.levelsChangeSupport = null;
                }
                if (this.walls === undefined) {
                    this.walls = null;
                }
                if (this.wallsChangeSupport === undefined) {
                    this.wallsChangeSupport = null;
                }
                if (this.rooms === undefined) {
                    this.rooms = null;
                }
                if (this.roomsChangeSupport === undefined) {
                    this.roomsChangeSupport = null;
                }
                if (this.polylines === undefined) {
                    this.polylines = null;
                }
                if (this.polylinesChangeSupport === undefined) {
                    this.polylinesChangeSupport = null;
                }
                if (this.dimensionLines === undefined) {
                    this.dimensionLines = null;
                }
                if (this.dimensionLinesChangeSupport === undefined) {
                    this.dimensionLinesChangeSupport = null;
                }
                if (this.labels === undefined) {
                    this.labels = null;
                }
                if (this.labelsChangeSupport === undefined) {
                    this.labelsChangeSupport = null;
                }
                if (this.camera === undefined) {
                    this.camera = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.wallHeight === undefined) {
                    this.wallHeight = 0;
                }
                if (this.modified === undefined) {
                    this.modified = false;
                }
                if (this.recovered === undefined) {
                    this.recovered = false;
                }
                if (this.repaired === undefined) {
                    this.repaired = false;
                }
                if (this.backgroundImage === undefined) {
                    this.backgroundImage = null;
                }
                if (this.observerCamera === undefined) {
                    this.observerCamera = null;
                }
                if (this.topCamera === undefined) {
                    this.topCamera = null;
                }
                if (this.storedCameras === undefined) {
                    this.storedCameras = null;
                }
                if (this.environment === undefined) {
                    this.environment = null;
                }
                if (this.print === undefined) {
                    this.print = null;
                }
                if (this.furnitureSortedPropertyName === undefined) {
                    this.furnitureSortedPropertyName = null;
                }
                if (this.furnitureVisiblePropertyNames === undefined) {
                    this.furnitureVisiblePropertyNames = null;
                }
                if (this.furnitureDescendingSorted === undefined) {
                    this.furnitureDescendingSorted = false;
                }
                if (this.visualProperties === undefined) {
                    this.visualProperties = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (this.version === undefined) {
                    this.version = 0;
                }
                if (this.basePlanLocked === undefined) {
                    this.basePlanLocked = false;
                }
                if (this.compass === undefined) {
                    this.compass = null;
                }
                if (this.skyColor === undefined) {
                    this.skyColor = 0;
                }
                if (this.groundColor === undefined) {
                    this.groundColor = 0;
                }
                if (this.groundTexture === undefined) {
                    this.groundTexture = null;
                }
                if (this.lightColor === undefined) {
                    this.lightColor = 0;
                }
                if (this.wallsAlpha === undefined) {
                    this.wallsAlpha = 0;
                }
                if (this.furnitureSortedProperty === undefined) {
                    this.furnitureSortedProperty = null;
                }
                if (this.furnitureVisibleProperties === undefined) {
                    this.furnitureVisibleProperties = null;
                }
                if (this.furnitureWithDoorsAndWindows === undefined) {
                    this.furnitureWithDoorsAndWindows = null;
                }
                if (this.furnitureWithGroups === undefined) {
                    this.furnitureWithGroups = null;
                }
                this.furniture = (furniture.slice(0));
                this.walls = ([]);
                this.wallHeight = wallHeight_1;
                this.furnitureVisibleProperties = /* asList */ ["NAME", "WIDTH", "DEPTH", "HEIGHT", "VISIBLE"].slice(0);
                this.init(true);
                this.addModelListeners();
            }
            if (this.furniture === undefined) {
                this.furniture = null;
            }
            if (this.furnitureChangeSupport === undefined) {
                this.furnitureChangeSupport = null;
            }
            if (this.selectedItems === undefined) {
                this.selectedItems = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.allLevelsSelection === undefined) {
                this.allLevelsSelection = false;
            }
            if (this.levels === undefined) {
                this.levels = null;
            }
            if (this.selectedLevel === undefined) {
                this.selectedLevel = null;
            }
            if (this.levelsChangeSupport === undefined) {
                this.levelsChangeSupport = null;
            }
            if (this.walls === undefined) {
                this.walls = null;
            }
            if (this.wallsChangeSupport === undefined) {
                this.wallsChangeSupport = null;
            }
            if (this.rooms === undefined) {
                this.rooms = null;
            }
            if (this.roomsChangeSupport === undefined) {
                this.roomsChangeSupport = null;
            }
            if (this.polylines === undefined) {
                this.polylines = null;
            }
            if (this.polylinesChangeSupport === undefined) {
                this.polylinesChangeSupport = null;
            }
            if (this.dimensionLines === undefined) {
                this.dimensionLines = null;
            }
            if (this.dimensionLinesChangeSupport === undefined) {
                this.dimensionLinesChangeSupport = null;
            }
            if (this.labels === undefined) {
                this.labels = null;
            }
            if (this.labelsChangeSupport === undefined) {
                this.labelsChangeSupport = null;
            }
            if (this.camera === undefined) {
                this.camera = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.modified === undefined) {
                this.modified = false;
            }
            if (this.recovered === undefined) {
                this.recovered = false;
            }
            if (this.repaired === undefined) {
                this.repaired = false;
            }
            if (this.backgroundImage === undefined) {
                this.backgroundImage = null;
            }
            if (this.observerCamera === undefined) {
                this.observerCamera = null;
            }
            if (this.topCamera === undefined) {
                this.topCamera = null;
            }
            if (this.storedCameras === undefined) {
                this.storedCameras = null;
            }
            if (this.environment === undefined) {
                this.environment = null;
            }
            if (this.print === undefined) {
                this.print = null;
            }
            if (this.furnitureSortedPropertyName === undefined) {
                this.furnitureSortedPropertyName = null;
            }
            if (this.furnitureVisiblePropertyNames === undefined) {
                this.furnitureVisiblePropertyNames = null;
            }
            if (this.furnitureDescendingSorted === undefined) {
                this.furnitureDescendingSorted = false;
            }
            if (this.visualProperties === undefined) {
                this.visualProperties = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.version === undefined) {
                this.version = 0;
            }
            if (this.basePlanLocked === undefined) {
                this.basePlanLocked = false;
            }
            if (this.compass === undefined) {
                this.compass = null;
            }
            if (this.skyColor === undefined) {
                this.skyColor = 0;
            }
            if (this.groundColor === undefined) {
                this.groundColor = 0;
            }
            if (this.groundTexture === undefined) {
                this.groundTexture = null;
            }
            if (this.lightColor === undefined) {
                this.lightColor = 0;
            }
            if (this.wallsAlpha === undefined) {
                this.wallsAlpha = 0;
            }
            if (this.furnitureSortedProperty === undefined) {
                this.furnitureSortedProperty = null;
            }
            if (this.furnitureVisibleProperties === undefined) {
                this.furnitureVisibleProperties = null;
            }
            if (this.furnitureWithDoorsAndWindows === undefined) {
                this.furnitureWithDoorsAndWindows = null;
            }
            if (this.furnitureWithGroups === undefined) {
                this.furnitureWithGroups = null;
            }
        }
        else if (((furniture != null && furniture instanceof Home) || furniture === null) && wallHeight === undefined) {
            var __args = arguments;
            var home = __args[0];
            if (this.furniture === undefined) {
                this.furniture = null;
            }
            if (this.furnitureChangeSupport === undefined) {
                this.furnitureChangeSupport = null;
            }
            if (this.selectedItems === undefined) {
                this.selectedItems = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.allLevelsSelection === undefined) {
                this.allLevelsSelection = false;
            }
            if (this.levels === undefined) {
                this.levels = null;
            }
            if (this.selectedLevel === undefined) {
                this.selectedLevel = null;
            }
            if (this.levelsChangeSupport === undefined) {
                this.levelsChangeSupport = null;
            }
            if (this.walls === undefined) {
                this.walls = null;
            }
            if (this.wallsChangeSupport === undefined) {
                this.wallsChangeSupport = null;
            }
            if (this.rooms === undefined) {
                this.rooms = null;
            }
            if (this.roomsChangeSupport === undefined) {
                this.roomsChangeSupport = null;
            }
            if (this.polylines === undefined) {
                this.polylines = null;
            }
            if (this.polylinesChangeSupport === undefined) {
                this.polylinesChangeSupport = null;
            }
            if (this.dimensionLines === undefined) {
                this.dimensionLines = null;
            }
            if (this.dimensionLinesChangeSupport === undefined) {
                this.dimensionLinesChangeSupport = null;
            }
            if (this.labels === undefined) {
                this.labels = null;
            }
            if (this.labelsChangeSupport === undefined) {
                this.labelsChangeSupport = null;
            }
            if (this.camera === undefined) {
                this.camera = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.modified === undefined) {
                this.modified = false;
            }
            if (this.recovered === undefined) {
                this.recovered = false;
            }
            if (this.repaired === undefined) {
                this.repaired = false;
            }
            if (this.backgroundImage === undefined) {
                this.backgroundImage = null;
            }
            if (this.observerCamera === undefined) {
                this.observerCamera = null;
            }
            if (this.topCamera === undefined) {
                this.topCamera = null;
            }
            if (this.storedCameras === undefined) {
                this.storedCameras = null;
            }
            if (this.environment === undefined) {
                this.environment = null;
            }
            if (this.print === undefined) {
                this.print = null;
            }
            if (this.furnitureSortedPropertyName === undefined) {
                this.furnitureSortedPropertyName = null;
            }
            if (this.furnitureVisiblePropertyNames === undefined) {
                this.furnitureVisiblePropertyNames = null;
            }
            if (this.furnitureDescendingSorted === undefined) {
                this.furnitureDescendingSorted = false;
            }
            if (this.visualProperties === undefined) {
                this.visualProperties = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.version === undefined) {
                this.version = 0;
            }
            if (this.basePlanLocked === undefined) {
                this.basePlanLocked = false;
            }
            if (this.compass === undefined) {
                this.compass = null;
            }
            if (this.skyColor === undefined) {
                this.skyColor = 0;
            }
            if (this.groundColor === undefined) {
                this.groundColor = 0;
            }
            if (this.groundTexture === undefined) {
                this.groundTexture = null;
            }
            if (this.lightColor === undefined) {
                this.lightColor = 0;
            }
            if (this.wallsAlpha === undefined) {
                this.wallsAlpha = 0;
            }
            if (this.furnitureSortedProperty === undefined) {
                this.furnitureSortedProperty = null;
            }
            if (this.furnitureVisibleProperties === undefined) {
                this.furnitureVisibleProperties = null;
            }
            if (this.furnitureWithDoorsAndWindows === undefined) {
                this.furnitureWithDoorsAndWindows = null;
            }
            if (this.furnitureWithGroups === undefined) {
                this.furnitureWithGroups = null;
            }
            this.wallHeight = home.getWallHeight();
            Home.copyHomeData(home, this);
            Home.initListenersSupport(this);
            this.addModelListeners();
        }
        else if (((typeof furniture === 'number') || furniture === null) && wallHeight === undefined) {
            var __args = arguments;
            var wallHeight_2 = __args[0];
            {
                var __args_92 = arguments;
                var furniture_1 = [];
                if (this.furniture === undefined) {
                    this.furniture = null;
                }
                if (this.furnitureChangeSupport === undefined) {
                    this.furnitureChangeSupport = null;
                }
                if (this.selectedItems === undefined) {
                    this.selectedItems = null;
                }
                if (this.selectionListeners === undefined) {
                    this.selectionListeners = null;
                }
                if (this.allLevelsSelection === undefined) {
                    this.allLevelsSelection = false;
                }
                if (this.levels === undefined) {
                    this.levels = null;
                }
                if (this.selectedLevel === undefined) {
                    this.selectedLevel = null;
                }
                if (this.levelsChangeSupport === undefined) {
                    this.levelsChangeSupport = null;
                }
                if (this.walls === undefined) {
                    this.walls = null;
                }
                if (this.wallsChangeSupport === undefined) {
                    this.wallsChangeSupport = null;
                }
                if (this.rooms === undefined) {
                    this.rooms = null;
                }
                if (this.roomsChangeSupport === undefined) {
                    this.roomsChangeSupport = null;
                }
                if (this.polylines === undefined) {
                    this.polylines = null;
                }
                if (this.polylinesChangeSupport === undefined) {
                    this.polylinesChangeSupport = null;
                }
                if (this.dimensionLines === undefined) {
                    this.dimensionLines = null;
                }
                if (this.dimensionLinesChangeSupport === undefined) {
                    this.dimensionLinesChangeSupport = null;
                }
                if (this.labels === undefined) {
                    this.labels = null;
                }
                if (this.labelsChangeSupport === undefined) {
                    this.labelsChangeSupport = null;
                }
                if (this.camera === undefined) {
                    this.camera = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.wallHeight === undefined) {
                    this.wallHeight = 0;
                }
                if (this.modified === undefined) {
                    this.modified = false;
                }
                if (this.recovered === undefined) {
                    this.recovered = false;
                }
                if (this.repaired === undefined) {
                    this.repaired = false;
                }
                if (this.backgroundImage === undefined) {
                    this.backgroundImage = null;
                }
                if (this.observerCamera === undefined) {
                    this.observerCamera = null;
                }
                if (this.topCamera === undefined) {
                    this.topCamera = null;
                }
                if (this.storedCameras === undefined) {
                    this.storedCameras = null;
                }
                if (this.environment === undefined) {
                    this.environment = null;
                }
                if (this.print === undefined) {
                    this.print = null;
                }
                if (this.furnitureSortedPropertyName === undefined) {
                    this.furnitureSortedPropertyName = null;
                }
                if (this.furnitureVisiblePropertyNames === undefined) {
                    this.furnitureVisiblePropertyNames = null;
                }
                if (this.furnitureDescendingSorted === undefined) {
                    this.furnitureDescendingSorted = false;
                }
                if (this.visualProperties === undefined) {
                    this.visualProperties = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (this.version === undefined) {
                    this.version = 0;
                }
                if (this.basePlanLocked === undefined) {
                    this.basePlanLocked = false;
                }
                if (this.compass === undefined) {
                    this.compass = null;
                }
                if (this.skyColor === undefined) {
                    this.skyColor = 0;
                }
                if (this.groundColor === undefined) {
                    this.groundColor = 0;
                }
                if (this.groundTexture === undefined) {
                    this.groundTexture = null;
                }
                if (this.lightColor === undefined) {
                    this.lightColor = 0;
                }
                if (this.wallsAlpha === undefined) {
                    this.wallsAlpha = 0;
                }
                if (this.furnitureSortedProperty === undefined) {
                    this.furnitureSortedProperty = null;
                }
                if (this.furnitureVisibleProperties === undefined) {
                    this.furnitureVisibleProperties = null;
                }
                if (this.furnitureWithDoorsAndWindows === undefined) {
                    this.furnitureWithDoorsAndWindows = null;
                }
                if (this.furnitureWithGroups === undefined) {
                    this.furnitureWithGroups = null;
                }
                this.furniture = (furniture_1.slice(0));
                this.walls = ([]);
                this.wallHeight = wallHeight_2;
                this.furnitureVisibleProperties = /* asList */ ["NAME", "WIDTH", "DEPTH", "HEIGHT", "VISIBLE"].slice(0);
                this.init(true);
                this.addModelListeners();
            }
            if (this.furniture === undefined) {
                this.furniture = null;
            }
            if (this.furnitureChangeSupport === undefined) {
                this.furnitureChangeSupport = null;
            }
            if (this.selectedItems === undefined) {
                this.selectedItems = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.allLevelsSelection === undefined) {
                this.allLevelsSelection = false;
            }
            if (this.levels === undefined) {
                this.levels = null;
            }
            if (this.selectedLevel === undefined) {
                this.selectedLevel = null;
            }
            if (this.levelsChangeSupport === undefined) {
                this.levelsChangeSupport = null;
            }
            if (this.walls === undefined) {
                this.walls = null;
            }
            if (this.wallsChangeSupport === undefined) {
                this.wallsChangeSupport = null;
            }
            if (this.rooms === undefined) {
                this.rooms = null;
            }
            if (this.roomsChangeSupport === undefined) {
                this.roomsChangeSupport = null;
            }
            if (this.polylines === undefined) {
                this.polylines = null;
            }
            if (this.polylinesChangeSupport === undefined) {
                this.polylinesChangeSupport = null;
            }
            if (this.dimensionLines === undefined) {
                this.dimensionLines = null;
            }
            if (this.dimensionLinesChangeSupport === undefined) {
                this.dimensionLinesChangeSupport = null;
            }
            if (this.labels === undefined) {
                this.labels = null;
            }
            if (this.labelsChangeSupport === undefined) {
                this.labelsChangeSupport = null;
            }
            if (this.camera === undefined) {
                this.camera = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.modified === undefined) {
                this.modified = false;
            }
            if (this.recovered === undefined) {
                this.recovered = false;
            }
            if (this.repaired === undefined) {
                this.repaired = false;
            }
            if (this.backgroundImage === undefined) {
                this.backgroundImage = null;
            }
            if (this.observerCamera === undefined) {
                this.observerCamera = null;
            }
            if (this.topCamera === undefined) {
                this.topCamera = null;
            }
            if (this.storedCameras === undefined) {
                this.storedCameras = null;
            }
            if (this.environment === undefined) {
                this.environment = null;
            }
            if (this.print === undefined) {
                this.print = null;
            }
            if (this.furnitureSortedPropertyName === undefined) {
                this.furnitureSortedPropertyName = null;
            }
            if (this.furnitureVisiblePropertyNames === undefined) {
                this.furnitureVisiblePropertyNames = null;
            }
            if (this.furnitureDescendingSorted === undefined) {
                this.furnitureDescendingSorted = false;
            }
            if (this.visualProperties === undefined) {
                this.visualProperties = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.version === undefined) {
                this.version = 0;
            }
            if (this.basePlanLocked === undefined) {
                this.basePlanLocked = false;
            }
            if (this.compass === undefined) {
                this.compass = null;
            }
            if (this.skyColor === undefined) {
                this.skyColor = 0;
            }
            if (this.groundColor === undefined) {
                this.groundColor = 0;
            }
            if (this.groundTexture === undefined) {
                this.groundTexture = null;
            }
            if (this.lightColor === undefined) {
                this.lightColor = 0;
            }
            if (this.wallsAlpha === undefined) {
                this.wallsAlpha = 0;
            }
            if (this.furnitureSortedProperty === undefined) {
                this.furnitureSortedProperty = null;
            }
            if (this.furnitureVisibleProperties === undefined) {
                this.furnitureVisibleProperties = null;
            }
            if (this.furnitureWithDoorsAndWindows === undefined) {
                this.furnitureWithDoorsAndWindows = null;
            }
            if (this.furnitureWithGroups === undefined) {
                this.furnitureWithGroups = null;
            }
        }
        else if (furniture === undefined && wallHeight === undefined) {
            var __args = arguments;
            {
                var __args_93 = arguments;
                var wallHeight_3 = 250;
                {
                    var __args_94 = arguments;
                    var furniture_2 = [];
                    if (this.furniture === undefined) {
                        this.furniture = null;
                    }
                    if (this.furnitureChangeSupport === undefined) {
                        this.furnitureChangeSupport = null;
                    }
                    if (this.selectedItems === undefined) {
                        this.selectedItems = null;
                    }
                    if (this.selectionListeners === undefined) {
                        this.selectionListeners = null;
                    }
                    if (this.allLevelsSelection === undefined) {
                        this.allLevelsSelection = false;
                    }
                    if (this.levels === undefined) {
                        this.levels = null;
                    }
                    if (this.selectedLevel === undefined) {
                        this.selectedLevel = null;
                    }
                    if (this.levelsChangeSupport === undefined) {
                        this.levelsChangeSupport = null;
                    }
                    if (this.walls === undefined) {
                        this.walls = null;
                    }
                    if (this.wallsChangeSupport === undefined) {
                        this.wallsChangeSupport = null;
                    }
                    if (this.rooms === undefined) {
                        this.rooms = null;
                    }
                    if (this.roomsChangeSupport === undefined) {
                        this.roomsChangeSupport = null;
                    }
                    if (this.polylines === undefined) {
                        this.polylines = null;
                    }
                    if (this.polylinesChangeSupport === undefined) {
                        this.polylinesChangeSupport = null;
                    }
                    if (this.dimensionLines === undefined) {
                        this.dimensionLines = null;
                    }
                    if (this.dimensionLinesChangeSupport === undefined) {
                        this.dimensionLinesChangeSupport = null;
                    }
                    if (this.labels === undefined) {
                        this.labels = null;
                    }
                    if (this.labelsChangeSupport === undefined) {
                        this.labelsChangeSupport = null;
                    }
                    if (this.camera === undefined) {
                        this.camera = null;
                    }
                    if (this.name === undefined) {
                        this.name = null;
                    }
                    if (this.wallHeight === undefined) {
                        this.wallHeight = 0;
                    }
                    if (this.modified === undefined) {
                        this.modified = false;
                    }
                    if (this.recovered === undefined) {
                        this.recovered = false;
                    }
                    if (this.repaired === undefined) {
                        this.repaired = false;
                    }
                    if (this.backgroundImage === undefined) {
                        this.backgroundImage = null;
                    }
                    if (this.observerCamera === undefined) {
                        this.observerCamera = null;
                    }
                    if (this.topCamera === undefined) {
                        this.topCamera = null;
                    }
                    if (this.storedCameras === undefined) {
                        this.storedCameras = null;
                    }
                    if (this.environment === undefined) {
                        this.environment = null;
                    }
                    if (this.print === undefined) {
                        this.print = null;
                    }
                    if (this.furnitureSortedPropertyName === undefined) {
                        this.furnitureSortedPropertyName = null;
                    }
                    if (this.furnitureVisiblePropertyNames === undefined) {
                        this.furnitureVisiblePropertyNames = null;
                    }
                    if (this.furnitureDescendingSorted === undefined) {
                        this.furnitureDescendingSorted = false;
                    }
                    if (this.visualProperties === undefined) {
                        this.visualProperties = null;
                    }
                    if (this.properties === undefined) {
                        this.properties = null;
                    }
                    if (this.propertyChangeSupport === undefined) {
                        this.propertyChangeSupport = null;
                    }
                    if (this.version === undefined) {
                        this.version = 0;
                    }
                    if (this.basePlanLocked === undefined) {
                        this.basePlanLocked = false;
                    }
                    if (this.compass === undefined) {
                        this.compass = null;
                    }
                    if (this.skyColor === undefined) {
                        this.skyColor = 0;
                    }
                    if (this.groundColor === undefined) {
                        this.groundColor = 0;
                    }
                    if (this.groundTexture === undefined) {
                        this.groundTexture = null;
                    }
                    if (this.lightColor === undefined) {
                        this.lightColor = 0;
                    }
                    if (this.wallsAlpha === undefined) {
                        this.wallsAlpha = 0;
                    }
                    if (this.furnitureSortedProperty === undefined) {
                        this.furnitureSortedProperty = null;
                    }
                    if (this.furnitureVisibleProperties === undefined) {
                        this.furnitureVisibleProperties = null;
                    }
                    if (this.furnitureWithDoorsAndWindows === undefined) {
                        this.furnitureWithDoorsAndWindows = null;
                    }
                    if (this.furnitureWithGroups === undefined) {
                        this.furnitureWithGroups = null;
                    }
                    this.furniture = (furniture_2.slice(0));
                    this.walls = ([]);
                    this.wallHeight = wallHeight_3;
                    this.furnitureVisibleProperties = /* asList */ ["NAME", "WIDTH", "DEPTH", "HEIGHT", "VISIBLE"].slice(0);
                    this.init(true);
                    this.addModelListeners();
                }
                if (this.furniture === undefined) {
                    this.furniture = null;
                }
                if (this.furnitureChangeSupport === undefined) {
                    this.furnitureChangeSupport = null;
                }
                if (this.selectedItems === undefined) {
                    this.selectedItems = null;
                }
                if (this.selectionListeners === undefined) {
                    this.selectionListeners = null;
                }
                if (this.allLevelsSelection === undefined) {
                    this.allLevelsSelection = false;
                }
                if (this.levels === undefined) {
                    this.levels = null;
                }
                if (this.selectedLevel === undefined) {
                    this.selectedLevel = null;
                }
                if (this.levelsChangeSupport === undefined) {
                    this.levelsChangeSupport = null;
                }
                if (this.walls === undefined) {
                    this.walls = null;
                }
                if (this.wallsChangeSupport === undefined) {
                    this.wallsChangeSupport = null;
                }
                if (this.rooms === undefined) {
                    this.rooms = null;
                }
                if (this.roomsChangeSupport === undefined) {
                    this.roomsChangeSupport = null;
                }
                if (this.polylines === undefined) {
                    this.polylines = null;
                }
                if (this.polylinesChangeSupport === undefined) {
                    this.polylinesChangeSupport = null;
                }
                if (this.dimensionLines === undefined) {
                    this.dimensionLines = null;
                }
                if (this.dimensionLinesChangeSupport === undefined) {
                    this.dimensionLinesChangeSupport = null;
                }
                if (this.labels === undefined) {
                    this.labels = null;
                }
                if (this.labelsChangeSupport === undefined) {
                    this.labelsChangeSupport = null;
                }
                if (this.camera === undefined) {
                    this.camera = null;
                }
                if (this.name === undefined) {
                    this.name = null;
                }
                if (this.wallHeight === undefined) {
                    this.wallHeight = 0;
                }
                if (this.modified === undefined) {
                    this.modified = false;
                }
                if (this.recovered === undefined) {
                    this.recovered = false;
                }
                if (this.repaired === undefined) {
                    this.repaired = false;
                }
                if (this.backgroundImage === undefined) {
                    this.backgroundImage = null;
                }
                if (this.observerCamera === undefined) {
                    this.observerCamera = null;
                }
                if (this.topCamera === undefined) {
                    this.topCamera = null;
                }
                if (this.storedCameras === undefined) {
                    this.storedCameras = null;
                }
                if (this.environment === undefined) {
                    this.environment = null;
                }
                if (this.print === undefined) {
                    this.print = null;
                }
                if (this.furnitureSortedPropertyName === undefined) {
                    this.furnitureSortedPropertyName = null;
                }
                if (this.furnitureVisiblePropertyNames === undefined) {
                    this.furnitureVisiblePropertyNames = null;
                }
                if (this.furnitureDescendingSorted === undefined) {
                    this.furnitureDescendingSorted = false;
                }
                if (this.visualProperties === undefined) {
                    this.visualProperties = null;
                }
                if (this.properties === undefined) {
                    this.properties = null;
                }
                if (this.propertyChangeSupport === undefined) {
                    this.propertyChangeSupport = null;
                }
                if (this.version === undefined) {
                    this.version = 0;
                }
                if (this.basePlanLocked === undefined) {
                    this.basePlanLocked = false;
                }
                if (this.compass === undefined) {
                    this.compass = null;
                }
                if (this.skyColor === undefined) {
                    this.skyColor = 0;
                }
                if (this.groundColor === undefined) {
                    this.groundColor = 0;
                }
                if (this.groundTexture === undefined) {
                    this.groundTexture = null;
                }
                if (this.lightColor === undefined) {
                    this.lightColor = 0;
                }
                if (this.wallsAlpha === undefined) {
                    this.wallsAlpha = 0;
                }
                if (this.furnitureSortedProperty === undefined) {
                    this.furnitureSortedProperty = null;
                }
                if (this.furnitureVisibleProperties === undefined) {
                    this.furnitureVisibleProperties = null;
                }
                if (this.furnitureWithDoorsAndWindows === undefined) {
                    this.furnitureWithDoorsAndWindows = null;
                }
                if (this.furnitureWithGroups === undefined) {
                    this.furnitureWithGroups = null;
                }
            }
            if (this.furniture === undefined) {
                this.furniture = null;
            }
            if (this.furnitureChangeSupport === undefined) {
                this.furnitureChangeSupport = null;
            }
            if (this.selectedItems === undefined) {
                this.selectedItems = null;
            }
            if (this.selectionListeners === undefined) {
                this.selectionListeners = null;
            }
            if (this.allLevelsSelection === undefined) {
                this.allLevelsSelection = false;
            }
            if (this.levels === undefined) {
                this.levels = null;
            }
            if (this.selectedLevel === undefined) {
                this.selectedLevel = null;
            }
            if (this.levelsChangeSupport === undefined) {
                this.levelsChangeSupport = null;
            }
            if (this.walls === undefined) {
                this.walls = null;
            }
            if (this.wallsChangeSupport === undefined) {
                this.wallsChangeSupport = null;
            }
            if (this.rooms === undefined) {
                this.rooms = null;
            }
            if (this.roomsChangeSupport === undefined) {
                this.roomsChangeSupport = null;
            }
            if (this.polylines === undefined) {
                this.polylines = null;
            }
            if (this.polylinesChangeSupport === undefined) {
                this.polylinesChangeSupport = null;
            }
            if (this.dimensionLines === undefined) {
                this.dimensionLines = null;
            }
            if (this.dimensionLinesChangeSupport === undefined) {
                this.dimensionLinesChangeSupport = null;
            }
            if (this.labels === undefined) {
                this.labels = null;
            }
            if (this.labelsChangeSupport === undefined) {
                this.labelsChangeSupport = null;
            }
            if (this.camera === undefined) {
                this.camera = null;
            }
            if (this.name === undefined) {
                this.name = null;
            }
            if (this.wallHeight === undefined) {
                this.wallHeight = 0;
            }
            if (this.modified === undefined) {
                this.modified = false;
            }
            if (this.recovered === undefined) {
                this.recovered = false;
            }
            if (this.repaired === undefined) {
                this.repaired = false;
            }
            if (this.backgroundImage === undefined) {
                this.backgroundImage = null;
            }
            if (this.observerCamera === undefined) {
                this.observerCamera = null;
            }
            if (this.topCamera === undefined) {
                this.topCamera = null;
            }
            if (this.storedCameras === undefined) {
                this.storedCameras = null;
            }
            if (this.environment === undefined) {
                this.environment = null;
            }
            if (this.print === undefined) {
                this.print = null;
            }
            if (this.furnitureSortedPropertyName === undefined) {
                this.furnitureSortedPropertyName = null;
            }
            if (this.furnitureVisiblePropertyNames === undefined) {
                this.furnitureVisiblePropertyNames = null;
            }
            if (this.furnitureDescendingSorted === undefined) {
                this.furnitureDescendingSorted = false;
            }
            if (this.visualProperties === undefined) {
                this.visualProperties = null;
            }
            if (this.properties === undefined) {
                this.properties = null;
            }
            if (this.propertyChangeSupport === undefined) {
                this.propertyChangeSupport = null;
            }
            if (this.version === undefined) {
                this.version = 0;
            }
            if (this.basePlanLocked === undefined) {
                this.basePlanLocked = false;
            }
            if (this.compass === undefined) {
                this.compass = null;
            }
            if (this.skyColor === undefined) {
                this.skyColor = 0;
            }
            if (this.groundColor === undefined) {
                this.groundColor = 0;
            }
            if (this.groundTexture === undefined) {
                this.groundTexture = null;
            }
            if (this.lightColor === undefined) {
                this.lightColor = 0;
            }
            if (this.wallsAlpha === undefined) {
                this.wallsAlpha = 0;
            }
            if (this.furnitureSortedProperty === undefined) {
                this.furnitureSortedProperty = null;
            }
            if (this.furnitureVisibleProperties === undefined) {
                this.furnitureVisibleProperties = null;
            }
            if (this.furnitureWithDoorsAndWindows === undefined) {
                this.furnitureWithDoorsAndWindows = null;
            }
            if (this.furnitureWithGroups === undefined) {
                this.furnitureWithGroups = null;
            }
        }
        else
            throw new Error('invalid overload');
    }
    Home.LEVEL_ELEVATION_COMPARATOR_$LI$ = function () {
        if (Home.LEVEL_ELEVATION_COMPARATOR == null) {
            Home.LEVEL_ELEVATION_COMPARATOR = function (level1, level2) {
                var elevationComparison = (level1.getElevation() - level2.getElevation());
                if (elevationComparison !== 0) {
                    return elevationComparison;
                }
                else {
                    return level1.getElevationIndex() - level2.getElevationIndex();
                }
            };
        }
        return Home.LEVEL_ELEVATION_COMPARATOR;
    };
    Home.prototype.moveVisualProperty = function (visualPropertyName) {
        var _this = this;
        if ( /* containsKey */this.visualProperties.hasOwnProperty(visualPropertyName)) {
            var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.visualProperties, visualPropertyName);
            /* put */ (this.properties[visualPropertyName] = value != null ? /* valueOf */ String(value).toString() : null);
            /* remove */ (function (map) { var deleted = _this.visualProperties[visualPropertyName]; delete _this.visualProperties[visualPropertyName]; return deleted; })(this.visualProperties);
        }
    };
    Home.prototype.init = function (newHome) {
        this.selectedItems = ([]);
        Home.initListenersSupport(this);
        if (this.furnitureVisibleProperties == null) {
            this.furnitureVisibleProperties = /* asList */ ["NAME", "WIDTH", "DEPTH", "HEIGHT", "COLOR", "MOVABLE", "DOOR_OR_WINDOW", "VISIBLE"].slice(0);
        }
        this.topCamera = new Camera(Home.HOME_TOP_CAMERA_ID, 50, 1050, 1010, Math.PI, Math.PI / 4, Math.PI * 90 / 180);
        this.observerCamera = new ObserverCamera(Home.HOME_OBSERVER_CAMERA_ID, 50, 50, 120, 7 * Math.PI / 4, Math.PI / 16, Math.PI * 90 / 180);
        this.storedCameras = /* emptyList */ [];
        this.environment = new HomeEnvironment(Home.HOME_ENVIRONMENT_ID);
        this.rooms = ([]);
        this.polylines = ([]);
        this.dimensionLines = ([]);
        this.labels = ([]);
        this.compass = new Compass(Home.HOME_COMPASS_ID, -100, 50, 100);
        this.levels = ([]);
        this.compass.setVisible(newHome);
        this.visualProperties = ({});
        this.properties = ({});
        this.version = Home.CURRENT_VERSION;
    };
    Home.initListenersSupport = function (home) {
        home.furnitureChangeSupport = (new CollectionChangeSupport(home));
        home.selectionListeners = ([]);
        home.levelsChangeSupport = (new CollectionChangeSupport(home));
        home.wallsChangeSupport = (new CollectionChangeSupport(home));
        home.roomsChangeSupport = (new CollectionChangeSupport(home));
        home.polylinesChangeSupport = (new CollectionChangeSupport(home));
        home.dimensionLinesChangeSupport = (new CollectionChangeSupport(home));
        home.labelsChangeSupport = (new CollectionChangeSupport(home));
        home.propertyChangeSupport = new PropertyChangeSupport(home);
    };
    /**
     * Adds listeners to model.
     * @private
     */
    Home.prototype.addModelListeners = function () {
        var levelElevationChangeListener = new Home.Home$0(this);
        for (var index = 0; index < this.levels.length; index++) {
            var level = this.levels[index];
            {
                level.addPropertyChangeListener(levelElevationChangeListener);
            }
        }
        this.addLevelsListener(function (ev) {
            switch ((ev.getType())) {
                case CollectionEvent.Type.ADD:
                    ev.getItem().addPropertyChangeListener(levelElevationChangeListener);
                    break;
                case CollectionEvent.Type.DELETE:
                    ev.getItem().removePropertyChangeListener(levelElevationChangeListener);
                    break;
            }
        });
    };
    /**
     * Returns <code>true</code> if the given <code>property</code> is compatible
     * with the first set of sortable properties that existed in <code>HomePieceOfFurniture</code> class.
     * @param {string} property
     * @return {boolean}
     * @private
     */
    Home.prototype.isFurnitureSortedPropertyBackwardCompatible = function (property) {
        switch ((property)) {
            case "NAME":
            case "WIDTH":
            case "DEPTH":
            case "HEIGHT":
            case "MOVABLE":
            case "DOOR_OR_WINDOW":
            case "COLOR":
            case "VISIBLE":
            case "X":
            case "Y":
            case "ELEVATION":
            case "ANGLE":
                return true;
            default:
                return false;
        }
    };
    /**
     * Returns all the pieces of the given <code>furnitureGroup</code>.
     * @param {HomeFurnitureGroup} furnitureGroup
     * @return {HomePieceOfFurniture[]}
     * @private
     */
    Home.prototype.getGroupFurniture = function (furnitureGroup) {
        var groupFurniture = ([]);
        {
            var array = furnitureGroup.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(groupFurniture, this.getGroupFurniture(piece));
                    }
                    else {
                        /* add */ (groupFurniture.push(piece) > 0);
                    }
                }
            }
        }
        return groupFurniture;
    };
    /**
     * Adds the level <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addLevelsListener = function (listener) {
        this.levelsChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the level <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeLevelsListener = function (listener) {
        this.levelsChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a collection of the levels of this home.
     * @return {Level[]}
     */
    Home.prototype.getLevels = function () {
        return /* unmodifiableList */ this.levels.slice(0);
    };
    /**
     * Adds the given <code>level</code> to the list of levels of this home.
     * Once the <code>level</code> is added, level listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {Level} level  the level to add
     */
    Home.prototype.addLevel = function (level) {
        if (level.getElevationIndex() < 0) {
            var elevationIndex = 0;
            for (var index_2 = 0; index_2 < this.levels.length; index_2++) {
                var homeLevel = this.levels[index_2];
                {
                    if (homeLevel.getElevation() === level.getElevation()) {
                        elevationIndex = homeLevel.getElevationIndex() + 1;
                    }
                    else if (homeLevel.getElevation() > level.getElevation()) {
                        break;
                    }
                }
            }
            level.setElevationIndex(elevationIndex);
        }
        this.levels = (this.levels.slice(0));
        var index = (function (l, key, c) { var comp = c; if (typeof c != 'function') {
            comp = function (a, b) { return c.compare(a, b); };
        } var low = 0; var high = l.length - 1; while (low <= high) {
            var mid = (low + high) >>> 1;
            var midVal = l[mid];
            var cmp = comp(midVal, key);
            if (cmp < 0)
                low = mid + 1;
            else if (cmp > 0)
                high = mid - 1;
            else
                return mid;
        } return -(low + 1); })(this.levels, level, Home.LEVEL_ELEVATION_COMPARATOR_$LI$());
        var levelIndex;
        if (index >= 0) {
            levelIndex = index;
        }
        else {
            levelIndex = -(index + 1);
        }
        /* add */ this.levels.splice(levelIndex, 0, level);
        this.levelsChangeSupport.fireCollectionChanged(level, levelIndex, CollectionEvent.Type.ADD);
    };
    /**
     * Removes the given <code>level</code> from the set of levels of this home
     * and all the furniture, walls, rooms, dimension lines and labels that belong to this level.
     * Once the <code>level</code> is removed, level listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * @param {Level} level  the level to remove
     */
    Home.prototype.deleteLevel = function (level) {
        var index = this.levels.indexOf(level);
        if (index !== -1) {
            for (var index1 = 0; index1 < this.furniture.length; index1++) {
                var piece = this.furniture[index1];
                {
                    if (piece.getLevel() === level) {
                        this.deletePieceOfFurniture(piece);
                    }
                }
            }
            for (var index1 = 0; index1 < this.rooms.length; index1++) {
                var room = this.rooms[index1];
                {
                    if (room.getLevel() === level) {
                        this.deleteRoom(room);
                    }
                }
            }
            for (var index1 = 0; index1 < this.walls.length; index1++) {
                var wall = this.walls[index1];
                {
                    if (wall.getLevel() === level) {
                        this.deleteWall(wall);
                    }
                }
            }
            for (var index1 = 0; index1 < this.polylines.length; index1++) {
                var polyline = this.polylines[index1];
                {
                    if (polyline.getLevel() === level) {
                        this.deletePolyline(polyline);
                    }
                }
            }
            for (var index1 = 0; index1 < this.dimensionLines.length; index1++) {
                var dimensionLine = this.dimensionLines[index1];
                {
                    if (dimensionLine.getLevel() === level) {
                        this.deleteDimensionLine(dimensionLine);
                    }
                }
            }
            for (var index1 = 0; index1 < this.labels.length; index1++) {
                var label = this.labels[index1];
                {
                    if (label.getLevel() === level) {
                        this.deleteLabel(label);
                    }
                }
            }
            if (this.selectedLevel === level) {
                if ( /* size */this.levels.length === 1) {
                    this.setSelectedLevel(null);
                    this.setAllLevelsSelection(false);
                }
                else {
                    this.setSelectedLevel(/* get */ this.levels[index >= 1 ? index - 1 : index + 1]);
                }
            }
            this.levels = (this.levels.slice(0));
            /* remove */ this.levels.splice(index, 1)[0];
            this.levelsChangeSupport.fireCollectionChanged(level, index, CollectionEvent.Type.DELETE);
        }
    };
    /**
     * Returns the selected level in home or <code>null</code> if home has no level.
     * @return {Level}
     */
    Home.prototype.getSelectedLevel = function () {
        return this.selectedLevel;
    };
    /**
     * Sets the selected level in home and notifies listeners of the change.
     * @param {Level} selectedLevel  the level to select
     */
    Home.prototype.setSelectedLevel = function (selectedLevel) {
        if (selectedLevel !== this.selectedLevel) {
            var oldSelectedLevel = this.selectedLevel;
            this.selectedLevel = selectedLevel;
            this.propertyChangeSupport.firePropertyChange(/* name */ "SELECTED_LEVEL", oldSelectedLevel, selectedLevel);
        }
    };
    /**
     * Returns <code>true</code> if the selected items in this home are from all levels.
     * @return {boolean}
     */
    Home.prototype.isAllLevelsSelection = function () {
        return this.allLevelsSelection;
    };
    /**
     * Sets whether the selected items in this home are from all levels, and notifies listeners of the change.
     * @param {boolean} selectionAtAllLevels
     */
    Home.prototype.setAllLevelsSelection = function (selectionAtAllLevels) {
        if (selectionAtAllLevels !== this.allLevelsSelection) {
            this.allLevelsSelection = selectionAtAllLevels;
            this.propertyChangeSupport.firePropertyChange(/* name */ "ALL_LEVELS_SELECTION", !selectionAtAllLevels, selectionAtAllLevels);
        }
    };
    /**
     * Adds the furniture <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addFurnitureListener = function (listener) {
        this.furnitureChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the furniture <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeFurnitureListener = function (listener) {
        this.furnitureChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a list of the furniture managed by this home.
     * This furniture in this list is always sorted in the index order they were added to home.
     * @return {HomePieceOfFurniture[]}
     */
    Home.prototype.getFurniture = function () {
        return /* unmodifiableList */ this.furniture.slice(0);
    };
    Home.prototype.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture = function (piece) {
        this.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$int(piece, /* size */ this.furniture.length);
    };
    Home.prototype.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$int = function (piece, index) {
        this.furniture = (this.furniture.slice(0));
        piece.setLevel(this.selectedLevel);
        /* add */ this.furniture.splice(index, 0, piece);
        this.furnitureChangeSupport.fireCollectionChanged(piece, index, CollectionEvent.Type.ADD);
    };
    /**
     * Adds the <code>piece</code> in parameter at a given <code>index</code>.
     * Once the <code>piece</code> is added, furniture listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification.
     * @param {HomePieceOfFurniture} piece  the piece to add
     * @param {number} index  the index at which the piece will be added
     */
    Home.prototype.addPieceOfFurniture = function (piece, index) {
        if (((piece != null && piece instanceof HomePieceOfFurniture) || piece === null) && ((typeof index === 'number') || index === null)) {
            return this.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture$int(piece, index);
        }
        else if (((piece != null && piece instanceof HomePieceOfFurniture) || piece === null) && index === undefined) {
            return this.addPieceOfFurniture$com_eteks_sweethome3d_model_HomePieceOfFurniture(piece);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Adds the <code>piece</code> in parameter at the <code>index</code> in the given <code>group</code>.
     * Once the <code>piece</code> is added, furniture listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification with an event {@link CollectionEvent#getIndex() index} equal to -1.
     * @param {HomePieceOfFurniture} piece  the piece to add
     * @param {HomeFurnitureGroup} group  the group to which the piece will be added
     * @param {number} index  the index at which the piece will be added
     */
    Home.prototype.addPieceOfFurnitureToGroup = function (piece, group, index) {
        piece.setLevel(this.selectedLevel);
        group.addPieceOfFurniture(piece, index);
        this.furnitureChangeSupport.fireCollectionChanged(piece, CollectionEvent.Type.ADD);
    };
    /**
     * Deletes the <code>piece</code> in parameter from this home.
     * Once the <code>piece</code> is deleted, furniture listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification. If the removed <code>piece</code> belongs to a group, the
     * {@link CollectionEvent#getIndex() index} of the event will be -1.
     * @param {HomePieceOfFurniture} piece  the piece to remove
     */
    Home.prototype.deletePieceOfFurniture = function (piece) {
        this.deselectItem(piece);
        var index = this.furniture.indexOf(piece);
        var group = index === -1 ? this.getPieceOfFurnitureGroup(piece, null, this.furniture) : null;
        if (index !== -1 || group != null) {
            piece.setLevel(null);
            this.furniture = (this.furniture.slice(0));
            if (group != null) {
                group.deletePieceOfFurniture(piece);
                this.furnitureChangeSupport.fireCollectionChanged(piece, CollectionEvent.Type.DELETE);
            }
            else {
                /* remove */ this.furniture.splice(index, 1)[0];
                this.furnitureChangeSupport.fireCollectionChanged(piece, index, CollectionEvent.Type.DELETE);
            }
        }
    };
    /**
     * Returns the furniture group that contains the given <code>piece</code> or <code>null</code>
     * if it can't be found.
     * @param {HomePieceOfFurniture} piece
     * @param {HomeFurnitureGroup} furnitureGroup
     * @param {HomePieceOfFurniture[]} furniture
     * @return {HomeFurnitureGroup}
     * @private
     */
    Home.prototype.getPieceOfFurnitureGroup = function (piece, furnitureGroup, furniture) {
        for (var index = 0; index < furniture.length; index++) {
            var homePiece = furniture[index];
            {
                if ( /* equals */(function (o1, o2) { if (o1 && o1.equals) {
                    return o1.equals(o2);
                }
                else {
                    return o1 === o2;
                } })(homePiece, piece)) {
                    return furnitureGroup;
                }
                else if (homePiece != null && homePiece instanceof HomeFurnitureGroup) {
                    var group = this.getPieceOfFurnitureGroup(piece, homePiece, homePiece.getFurniture());
                    if (group != null) {
                        return group;
                    }
                }
            }
        }
        return null;
    };
    /**
     * Adds the selection <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addSelectionListener = function (listener) {
        /* add */ (this.selectionListeners.push(listener) > 0);
    };
    /**
     * Removes the selection <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeSelectionListener = function (listener) {
        /* remove */ (function (a) { var index = a.indexOf(listener); if (index >= 0) {
            a.splice(index, 1);
            return true;
        }
        else {
            return false;
        } })(this.selectionListeners);
    };
    /**
     * Returns a list of the selected items in home.
     * @return {*[]}
     */
    Home.prototype.getSelectedItems = function () {
        return /* unmodifiableList */ this.selectedItems.slice(0);
    };
    /**
     * Sets the selected items in home and notifies listeners selection change.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} selectedItems the list of selected items
     */
    Home.prototype.setSelectedItems = function (selectedItems) {
        this.selectedItems = (selectedItems.slice(0));
        if (!(this.selectionListeners.length == 0)) {
            var selectionEvent = new SelectionEvent(this, this.getSelectedItems());
            var listeners = this.selectionListeners.slice(0);
            for (var index = 0; index < listeners.length; index++) {
                var listener = listeners[index];
                {
                    listener.selectionChanged(selectionEvent);
                }
            }
        }
    };
    /**
     * Deselects <code>item</code> if it's selected and notifies listeners selection change.
     * @param {Object} item  the item to remove from selected items
     */
    Home.prototype.deselectItem = function (item) {
        var pieceSelectionIndex = this.selectedItems.indexOf(item);
        if (pieceSelectionIndex !== -1) {
            var selectedItems = (this.getSelectedItems().slice(0));
            /* remove */ selectedItems.splice(pieceSelectionIndex, 1)[0];
            this.setSelectedItems(selectedItems);
        }
    };
    /**
     * Adds the room <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addRoomsListener = function (listener) {
        this.roomsChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the room <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeRoomsListener = function (listener) {
        this.roomsChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a collection of the rooms of this home.
     * @return {Room[]}
     */
    Home.prototype.getRooms = function () {
        return /* unmodifiableList */ this.rooms.slice(0);
    };
    Home.prototype.addRoom$com_eteks_sweethome3d_model_Room = function (room) {
        this.addRoom$com_eteks_sweethome3d_model_Room$int(room, /* size */ this.rooms.length);
    };
    Home.prototype.addRoom$com_eteks_sweethome3d_model_Room$int = function (room, index) {
        this.rooms = (this.rooms.slice(0));
        /* add */ this.rooms.splice(index, 0, room);
        room.setLevel(this.selectedLevel);
        this.roomsChangeSupport.fireCollectionChanged(room, index, CollectionEvent.Type.ADD);
    };
    /**
     * Adds the <code>room</code> in parameter at a given <code>index</code>.
     * Once the <code>room</code> is added, room listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {Room} room   the room to add
     * @param {number} index  the index at which the room will be added
     */
    Home.prototype.addRoom = function (room, index) {
        if (((room != null && room instanceof Room) || room === null) && ((typeof index === 'number') || index === null)) {
            return this.addRoom$com_eteks_sweethome3d_model_Room$int(room, index);
        }
        else if (((room != null && room instanceof Room) || room === null) && index === undefined) {
            return this.addRoom$com_eteks_sweethome3d_model_Room(room);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Removes the given <code>room</code> from the set of rooms of this home.
     * Once the <code>room</code> is removed, room listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * @param {Room} room  the room to remove
     */
    Home.prototype.deleteRoom = function (room) {
        this.deselectItem(room);
        var index = this.rooms.indexOf(room);
        if (index !== -1) {
            room.setLevel(null);
            this.rooms = (this.rooms.slice(0));
            /* remove */ this.rooms.splice(index, 1)[0];
            this.roomsChangeSupport.fireCollectionChanged(room, index, CollectionEvent.Type.DELETE);
        }
    };
    /**
     * Adds the wall <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addWallsListener = function (listener) {
        this.wallsChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the wall <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeWallsListener = function (listener) {
        this.wallsChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a collection of the walls of this home.
     * @return {Wall[]}
     */
    Home.prototype.getWalls = function () {
        return /* unmodifiableCollection */ this.walls.slice(0);
    };
    /**
     * Adds the given <code>wall</code> to the set of walls of this home.
     * Once the <code>wall</code> is added, wall listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {Wall} wall  the wall to add
     */
    Home.prototype.addWall = function (wall) {
        this.walls = (this.walls.slice(0));
        /* add */ (this.walls.push(wall) > 0);
        wall.setLevel(this.selectedLevel);
        this.wallsChangeSupport.fireCollectionChanged(wall, CollectionEvent.Type.ADD);
    };
    /**
     * Removes the given <code>wall</code> from the set of walls of this home.
     * Once the <code>wall</code> is removed, wall listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * If any wall is attached to <code>wall</code> they will be detached from it.
     * @param {Wall} wall  the wall to remove
     */
    Home.prototype.deleteWall = function (wall) {
        this.deselectItem(wall);
        {
            var array = this.getWalls();
            for (var index_3 = 0; index_3 < array.length; index_3++) {
                var otherWall = array[index_3];
                {
                    if ( /* equals */(function (o1, o2) { if (o1 && o1.equals) {
                        return o1.equals(o2);
                    }
                    else {
                        return o1 === o2;
                    } })(wall, otherWall.getWallAtStart())) {
                        otherWall.setWallAtStart(null);
                    }
                    else if ( /* equals */(function (o1, o2) { if (o1 && o1.equals) {
                        return o1.equals(o2);
                    }
                    else {
                        return o1 === o2;
                    } })(wall, otherWall.getWallAtEnd())) {
                        otherWall.setWallAtEnd(null);
                    }
                }
            }
        }
        var index = this.walls.indexOf(wall);
        if (index !== -1) {
            wall.setLevel(null);
            this.walls = (this.walls.slice(0));
            /* remove */ this.walls.splice(index, 1)[0];
            this.wallsChangeSupport.fireCollectionChanged(wall, CollectionEvent.Type.DELETE);
        }
    };
    /**
     * Adds the polyline <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addPolylinesListener = function (listener) {
        this.polylinesChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the polyline <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removePolylinesListener = function (listener) {
        this.polylinesChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a collection of the polylines of this home.
     * @return {Polyline[]}
     */
    Home.prototype.getPolylines = function () {
        return /* unmodifiableList */ this.polylines.slice(0);
    };
    Home.prototype.addPolyline$com_eteks_sweethome3d_model_Polyline = function (polyline) {
        this.addPolyline$com_eteks_sweethome3d_model_Polyline$int(polyline, /* size */ this.polylines.length);
    };
    Home.prototype.addPolyline$com_eteks_sweethome3d_model_Polyline$int = function (polyline, index) {
        this.polylines = (this.polylines.slice(0));
        /* add */ this.polylines.splice(index, 0, polyline);
        polyline.setLevel(this.selectedLevel);
        this.polylinesChangeSupport.fireCollectionChanged(polyline, CollectionEvent.Type.ADD);
    };
    /**
     * Adds a <code>polyline</code> at a given <code>index</code> of the set of polylines of this home.
     * Once the <code>polyline</code> is added, polyline listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {Polyline} polyline  the polyline to add
     * @param {number} index  the index at which the polyline will be added
     */
    Home.prototype.addPolyline = function (polyline, index) {
        if (((polyline != null && polyline instanceof Polyline) || polyline === null) && ((typeof index === 'number') || index === null)) {
            return this.addPolyline$com_eteks_sweethome3d_model_Polyline$int(polyline, index);
        }
        else if (((polyline != null && polyline instanceof Polyline) || polyline === null) && index === undefined) {
            return this.addPolyline$com_eteks_sweethome3d_model_Polyline(polyline);
        }
        else
            throw new Error('invalid overload');
    };
    /**
     * Removes a given <code>polyline</code> from the set of polylines of this home.
     * Once the <code>polyline</code> is removed, polyline listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * @param {Polyline} polyline  the polyline to remove
     */
    Home.prototype.deletePolyline = function (polyline) {
        this.deselectItem(polyline);
        var index = this.polylines.indexOf(polyline);
        if (index !== -1) {
            polyline.setLevel(null);
            this.polylines = (this.polylines.slice(0));
            /* remove */ this.polylines.splice(index, 1)[0];
            this.polylinesChangeSupport.fireCollectionChanged(polyline, CollectionEvent.Type.DELETE);
        }
    };
    /**
     * Adds the dimension line <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addDimensionLinesListener = function (listener) {
        this.dimensionLinesChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the dimension line <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeDimensionLinesListener = function (listener) {
        this.dimensionLinesChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a collection of the dimension lines of this home.
     * @return {DimensionLine[]}
     */
    Home.prototype.getDimensionLines = function () {
        return /* unmodifiableCollection */ this.dimensionLines.slice(0);
    };
    /**
     * Adds the given dimension line to the set of dimension lines of this home.
     * Once <code>dimensionLine</code> is added, dimension line listeners added
     * to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {DimensionLine} dimensionLine  the dimension line to add
     */
    Home.prototype.addDimensionLine = function (dimensionLine) {
        this.dimensionLines = (this.dimensionLines.slice(0));
        /* add */ (this.dimensionLines.push(dimensionLine) > 0);
        dimensionLine.setLevel(this.selectedLevel);
        this.dimensionLinesChangeSupport.fireCollectionChanged(dimensionLine, CollectionEvent.Type.ADD);
    };
    /**
     * Removes the given dimension line from the set of dimension lines of this home.
     * Once <code>dimensionLine</code> is removed, dimension line listeners added
     * to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * @param {DimensionLine} dimensionLine  the dimension line to remove
     */
    Home.prototype.deleteDimensionLine = function (dimensionLine) {
        this.deselectItem(dimensionLine);
        var index = this.dimensionLines.indexOf(dimensionLine);
        if (index !== -1) {
            dimensionLine.setLevel(null);
            this.dimensionLines = (this.dimensionLines.slice(0));
            /* remove */ this.dimensionLines.splice(index, 1)[0];
            this.dimensionLinesChangeSupport.fireCollectionChanged(dimensionLine, CollectionEvent.Type.DELETE);
        }
    };
    /**
     * Adds the label <code>listener</code> in parameter to this home.
     * @param {Object} listener the listener to add
     */
    Home.prototype.addLabelsListener = function (listener) {
        this.labelsChangeSupport.addCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Removes the label <code>listener</code> in parameter from this home.
     * @param {Object} listener the listener to remove
     */
    Home.prototype.removeLabelsListener = function (listener) {
        this.labelsChangeSupport.removeCollectionListener(((function (funcInst) { if (funcInst == null || typeof funcInst == 'function') {
            return funcInst;
        } return function (ev) { return (funcInst['collectionChanged'] ? funcInst['collectionChanged'] : funcInst).call(funcInst, ev); }; })(listener)));
    };
    /**
     * Returns a collection of the labels of this home.
     * @return {Label[]}
     */
    Home.prototype.getLabels = function () {
        return /* unmodifiableCollection */ this.labels.slice(0);
    };
    /**
     * Adds the given label to the set of labels of this home.
     * Once <code>label</code> is added, label listeners added
     * to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#ADD}.
     * @param {Label} label  the label to add
     */
    Home.prototype.addLabel = function (label) {
        this.labels = (this.labels.slice(0));
        /* add */ (this.labels.push(label) > 0);
        label.setLevel(this.selectedLevel);
        this.labelsChangeSupport.fireCollectionChanged(label, CollectionEvent.Type.ADD);
    };
    /**
     * Removes the given label from the set of labels of this home.
     * Once <code>label</code> is removed, label listeners added to this home will receive a
     * {@link CollectionListener#collectionChanged(CollectionEvent) collectionChanged}
     * notification, with an {@link CollectionEvent#getType() event type}
     * equal to {@link CollectionEvent.Type#DELETE}.
     * @param {Label} label  the label to remove
     */
    Home.prototype.deleteLabel = function (label) {
        this.deselectItem(label);
        var index = this.labels.indexOf(label);
        if (index !== -1) {
            label.setLevel(null);
            this.labels = (this.labels.slice(0));
            /* remove */ this.labels.splice(index, 1)[0];
            this.labelsChangeSupport.fireCollectionChanged(label, CollectionEvent.Type.DELETE);
        }
    };
    /**
     * Returns all the selectable and viewable items in this home, except the observer camera.
     * @return {*[]} a list containing viewable walls, rooms, furniture, dimension lines, polylines, labels and compass.
     */
    Home.prototype.getSelectableViewableItems = function () {
        var items = ([]);
        this.addViewableItems(this.walls, items);
        this.addViewableItems(this.rooms, items);
        this.addViewableItems(this.dimensionLines, items);
        this.addViewableItems(this.polylines, items);
        this.addViewableItems(this.labels, items);
        {
            var array = this.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    if (piece.isVisible() && (piece.getLevel() == null || piece.getLevel().isViewable())) {
                        /* add */ (items.push(piece) > 0);
                    }
                }
            }
        }
        if (this.compass.isVisible()) {
            /* add */ (items.push(this.compass) > 0);
        }
        return items;
    };
    /**
     * Adds the viewable items to the set of selectable viewable items.
     * @param {*[]} items
     * @param {*[]} selectableViewableItems
     * @private
     */
    Home.prototype.addViewableItems = function (items, selectableViewableItems) {
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (item != null && (item.constructor != null && item.constructor["__interfaces"] != null && item.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Elevatable") >= 0)) {
                    var elevatableItem = item;
                    if (elevatableItem.getLevel() == null || elevatableItem.getLevel().isViewable()) {
                        /* add */ (selectableViewableItems.push(item) > 0);
                    }
                }
            }
        }
    };
    /**
     * Returns all the mutable objects handled by this home.
     * @return {HomeObject[]} a list containing environment, compass, levels, walls, rooms, furniture and their possible children,
     * polylines, dimension lines, labels and cameras.
     */
    Home.prototype.getHomeObjects = function () {
        var homeItems = ([]);
        /* add */ (homeItems.push(this.environment) > 0);
        /* add */ (homeItems.push(this.compass) > 0);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.levels);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.walls);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.rooms);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.dimensionLines);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.polylines);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.labels);
        {
            var array = this.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    /* add */ (homeItems.push(piece) > 0);
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, piece.getAllFurniture());
                    }
                }
            }
        }
        /* add */ (homeItems.push(this.topCamera) > 0);
        /* add */ (homeItems.push(this.observerCamera) > 0);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.storedCameras);
        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(homeItems, this.environment.getVideoCameraPath());
        return homeItems;
    };
    /**
     * Returns <code>true</code> if this home doesn't contain any item i.e.
     * no piece of furniture, no wall, no room, no dimension line and no label.
     * @return {boolean}
     */
    Home.prototype.isEmpty = function () {
        return /* isEmpty */ (this.furniture.length == 0) && /* isEmpty */ (this.walls.length == 0) && /* isEmpty */ (this.rooms.length == 0) && /* isEmpty */ (this.dimensionLines.length == 0) && /* isEmpty */ (this.polylines.length == 0) && /* isEmpty */ (this.labels.length == 0);
    };
    /**
     * Returns the wall height of this home.
     * @return {number}
     */
    Home.prototype.getWallHeight = function () {
        return this.wallHeight;
    };
    /**
     * Returns the name of this home.
     * @return {string}
     */
    Home.prototype.getName = function () {
        return this.name;
    };
    /**
     * Sets the name of this home and fires a <code>PropertyChangeEvent</code>.
     * @param {string} name  the new name of this home
     */
    Home.prototype.setName = function (name) {
        if (name !== this.name && (name == null || !(name === this.name))) {
            var oldName = this.name;
            this.name = name;
            this.propertyChangeSupport.firePropertyChange(/* name */ "NAME", oldName, name);
        }
    };
    /**
     * Returns whether the state of this home is modified or not.
     * @return {boolean}
     */
    Home.prototype.isModified = function () {
        return this.modified;
    };
    /**
     * Sets the modified state of this home and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} modified
     */
    Home.prototype.setModified = function (modified) {
        if (modified !== this.modified) {
            this.modified = modified;
            this.propertyChangeSupport.firePropertyChange(/* name */ "MODIFIED", !modified, modified);
        }
    };
    /**
     * Returns whether this home was recovered or not.
     * @return {boolean}
     */
    Home.prototype.isRecovered = function () {
        return this.recovered;
    };
    /**
     * Sets whether this home was recovered or not and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} recovered
     */
    Home.prototype.setRecovered = function (recovered) {
        if (recovered !== this.recovered) {
            this.recovered = recovered;
            this.propertyChangeSupport.firePropertyChange(/* name */ "RECOVERED", !recovered, recovered);
        }
    };
    /**
     * Returns whether this home was repaired or not.
     * @return {boolean}
     */
    Home.prototype.isRepaired = function () {
        return this.repaired;
    };
    /**
     * Sets whether this home is repaired or not and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} repaired
     */
    Home.prototype.setRepaired = function (repaired) {
        if (repaired !== this.repaired) {
            this.repaired = repaired;
            this.propertyChangeSupport.firePropertyChange(/* name */ "REPAIRED", !repaired, repaired);
        }
    };
    /**
     * Returns the furniture property on which home is sorted or <code>null</code> if
     * home furniture isn't sorted.
     * @return {string}
     */
    Home.prototype.getFurnitureSortedProperty = function () {
        return this.furnitureSortedProperty;
    };
    /**
     * Sets the furniture property on which this home should be sorted
     * and fires a <code>PropertyChangeEvent</code>.
     * @param {string} furnitureSortedProperty the new property
     */
    Home.prototype.setFurnitureSortedProperty = function (furnitureSortedProperty) {
        if (furnitureSortedProperty !== this.furnitureSortedProperty && (furnitureSortedProperty == null || !(furnitureSortedProperty == this.furnitureSortedProperty))) {
            var oldFurnitureSortedProperty = this.furnitureSortedProperty;
            this.furnitureSortedProperty = furnitureSortedProperty;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FURNITURE_SORTED_PROPERTY", oldFurnitureSortedProperty, furnitureSortedProperty);
        }
    };
    /**
     * Returns whether furniture is sorted in ascending or descending order.
     * @return {boolean}
     */
    Home.prototype.isFurnitureDescendingSorted = function () {
        return this.furnitureDescendingSorted;
    };
    /**
     * Sets the furniture sort order on which home should be sorted
     * and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} furnitureDescendingSorted
     */
    Home.prototype.setFurnitureDescendingSorted = function (furnitureDescendingSorted) {
        if (furnitureDescendingSorted !== this.furnitureDescendingSorted) {
            this.furnitureDescendingSorted = furnitureDescendingSorted;
            this.propertyChangeSupport.firePropertyChange(/* name */ "FURNITURE_DESCENDING_SORTED", !furnitureDescendingSorted, furnitureDescendingSorted);
        }
    };
    /**
     * Returns a list of the furniture properties that are visible.
     * @return {string[]}
     */
    Home.prototype.getFurnitureVisibleProperties = function () {
        if (this.furnitureVisibleProperties == null) {
            return /* emptyList */ [];
        }
        else {
            return /* unmodifiableList */ this.furnitureVisibleProperties.slice(0);
        }
    };
    /**
     * Sets the furniture properties that are visible and the order in which they are visible,
     * then fires a <code>PropertyChangeEvent</code>.
     * @param {string[]} furnitureVisibleProperties  the properties to display
     */
    Home.prototype.setFurnitureVisibleProperties = function (furnitureVisibleProperties) {
        if (furnitureVisibleProperties !== this.furnitureVisibleProperties && (furnitureVisibleProperties == null || !(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(furnitureVisibleProperties, this.furnitureVisibleProperties))) {
            var oldFurnitureVisibleProperties = this.furnitureVisibleProperties;
            this.furnitureVisibleProperties = (furnitureVisibleProperties.slice(0));
            this.propertyChangeSupport.firePropertyChange(/* name */ "FURNITURE_VISIBLE_PROPERTIES", /* unmodifiableList */ oldFurnitureVisibleProperties.slice(0), /* unmodifiableList */ furnitureVisibleProperties.slice(0));
        }
    };
    /**
     * Returns the plan background image of this home.
     * @return {BackgroundImage}
     */
    Home.prototype.getBackgroundImage = function () {
        return this.backgroundImage;
    };
    /**
     * Sets the plan background image of this home and fires a <code>PropertyChangeEvent</code>.
     * @param {BackgroundImage} backgroundImage  the new background image
     */
    Home.prototype.setBackgroundImage = function (backgroundImage) {
        if (backgroundImage !== this.backgroundImage) {
            var oldBackgroundImage = this.backgroundImage;
            this.backgroundImage = backgroundImage;
            this.propertyChangeSupport.firePropertyChange(/* name */ "BACKGROUND_IMAGE", oldBackgroundImage, backgroundImage);
        }
    };
    /**
     * Returns the camera used to display this home from a top point of view.
     * @return {Camera}
     */
    Home.prototype.getTopCamera = function () {
        return this.topCamera;
    };
    /**
     * Returns the camera used to display this home from an observer point of view.
     * @return {ObserverCamera}
     */
    Home.prototype.getObserverCamera = function () {
        return this.observerCamera;
    };
    /**
     * Sets the camera used to display this home and fires a <code>PropertyChangeEvent</code>.
     * @param {Camera} camera  the camera to use
     */
    Home.prototype.setCamera = function (camera) {
        if (camera !== this.camera) {
            var oldCamera = this.camera;
            this.camera = camera;
            this.propertyChangeSupport.firePropertyChange(/* name */ "CAMERA", oldCamera, camera);
        }
    };
    /**
     * Returns the camera used to display this home.
     * @return {Camera}
     */
    Home.prototype.getCamera = function () {
        if (this.camera == null) {
            this.camera = this.getTopCamera();
        }
        return this.camera;
    };
    /**
     * Sets the cameras stored by this home and fires a <code>PropertyChangeEvent</code>.
     * The list given as parameter is cloned but not the camera instances it contains.
     * @param {Camera[]} storedCameras  the new list of cameras
     */
    Home.prototype.setStoredCameras = function (storedCameras) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(this.storedCameras, storedCameras)) {
            var oldStoredCameras = this.storedCameras;
            if (storedCameras == null) {
                this.storedCameras = /* emptyList */ [];
            }
            else {
                this.storedCameras = (storedCameras.slice(0));
            }
            this.propertyChangeSupport.firePropertyChange(/* name */ "STORED_CAMERAS", /* unmodifiableList */ oldStoredCameras.slice(0), /* unmodifiableList */ storedCameras.slice(0));
        }
    };
    /**
     * Returns a list of the cameras stored by this home.
     * @return {Camera[]}
     */
    Home.prototype.getStoredCameras = function () {
        return /* unmodifiableList */ this.storedCameras.slice(0);
    };
    /**
     * Returns the environment attributes of this home.
     * @return {HomeEnvironment}
     */
    Home.prototype.getEnvironment = function () {
        return this.environment;
    };
    /**
     * Returns the compass associated to this home.
     * @return {Compass}
     */
    Home.prototype.getCompass = function () {
        return this.compass;
    };
    /**
     * Returns the print attributes of this home.
     * @return {HomePrint}
     */
    Home.prototype.getPrint = function () {
        return this.print;
    };
    /**
     * Sets the print attributes of this home and fires a <code>PropertyChangeEvent</code>.
     * @param {HomePrint} print  the new print attributes
     */
    Home.prototype.setPrint = function (print) {
        if (print !== this.print) {
            var oldPrint = this.print;
            this.print = print;
            this.propertyChangeSupport.firePropertyChange(/* name */ "PRINT", oldPrint, print);
        }
        this.print = print;
    };
    /**
     * Returns the value of the visual property <code>name</code> associated with this home.
     * @deprecated {@link #getVisualProperty(String)} and {@link #setVisualProperty(String, Object)}
     * should be replaced by calls to {@link #getProperty(String)} and {@link #setProperty(String, String)}
     * to ensure they can be easily saved and read. Future file format might not save visual properties anymore.
     * @param {string} name
     * @return {Object}
     */
    Home.prototype.getVisualProperty = function (name) {
        return /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.visualProperties, name);
    };
    /**
     * Sets a visual property associated with this home.
     * @deprecated {@link #getVisualProperty(String)} and {@link #setVisualProperty(String, Object)}
     * should be replaced by calls to {@link #getProperty(String)} and {@link #setProperty(String, String)}
     * to ensure they can be easily saved and read. Future file format might not save visual properties anymore.
     * @param {string} name
     * @param {Object} value
     */
    Home.prototype.setVisualProperty = function (name, value) {
        /* put */ (this.visualProperties[name] = value);
    };
    /**
     * Returns the value of the property <code>name</code> associated with this home.
     * @return {string} the value of the property or <code>null</code> if it doesn't exist.
     * @param {string} name
     */
    Home.prototype.getProperty = function (name) {
        return /* get */ (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.properties, name);
    };
    /**
     * Returns the numeric value of the property <code>name</code> associated with this home.
     * @return {number} an instance of {@link Long}, {@link Double} or <code>null</code> if the property
     * doesn't exist or can't be parsed.
     * @param {string} name
     */
    Home.prototype.getNumericProperty = function (name) {
        var value = (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.properties, name);
        if (value != null) {
            try {
                return new Number(value).valueOf();
            }
            catch (ex) {
                try {
                    return new Number(value).valueOf();
                }
                catch (ex1) {
                }
            }
        }
        return null;
    };
    /**
     * Sets a property associated with this home. Once the property is updated,
     * listeners added to this home will receive a change event of
     * {@link PropertyChangeEvent} class.<br>
     * To avoid any issue with existing or future properties of Sweet Home 3D classes,
     * do not use property names written with only upper case letters.
     * @param {string} name   the name of the property to set
     * @param {string} value  the new value of the property
     */
    Home.prototype.setProperty = function (name, value) {
        var _this = this;
        var oldValue = (function (m, k) { return m[k] === undefined ? null : m[k]; })(this.properties, name);
        if (value == null) {
            if (oldValue != null) {
                /* remove */ (function (map) { var deleted = _this.properties[name]; delete _this.properties[name]; return deleted; })(this.properties);
                this.propertyChangeSupport.firePropertyChange(name, oldValue, null);
            }
        }
        else {
            /* put */ (this.properties[name] = value);
            this.propertyChangeSupport.firePropertyChange(name, oldValue, value);
        }
    };
    /**
     * Returns the property names.
     * @return {string[]} a collection of all the names of the properties set with {@link #setProperty(String, String) setProperty}
     */
    Home.prototype.getPropertyNames = function () {
        return /* keySet */ Object.keys(this.properties);
    };
    /**
     * Adds the property change <code>listener</code> in parameter to this home for a specific property name.
     * Properties set with {@link #setProperty(String, String) setProperty} will be notified with
     * an event of {@link PropertyChangeEvent} class which property name will be equal to the property,
     * whereas changes on properties of {@link Property} enum will be notified with an event where
     * the property name will be equal to the value returned by {@link Property#name()} call.
     * @param {string} propertyName
     * @param {PropertyChangeListener} listener
     */
    Home.prototype.addPropertyChangeListener = function (propertyName, listener) {
        this.propertyChangeSupport.addPropertyChangeListener(propertyName, listener);
    };
    /**
     * Removes the property change <code>listener</code> in parameter from this object.
     * @param {string} propertyName
     * @param {PropertyChangeListener} listener
     */
    Home.prototype.removePropertyChangeListener = function (propertyName, listener) {
        this.propertyChangeSupport.removePropertyChangeListener(propertyName, listener);
    };
    /**
     * Returns <code>true</code> if the home objects belonging to the base plan
     * (generally walls, rooms, dimension lines and texts) are locked.
     * @return {boolean}
     */
    Home.prototype.isBasePlanLocked = function () {
        return this.basePlanLocked;
    };
    /**
     * Sets whether home objects belonging to the base plan (generally walls, rooms,
     * dimension lines and texts) are locked and fires a <code>PropertyChangeEvent</code>.
     * @param {boolean} basePlanLocked
     */
    Home.prototype.setBasePlanLocked = function (basePlanLocked) {
        if (basePlanLocked !== this.basePlanLocked) {
            this.basePlanLocked = basePlanLocked;
            this.propertyChangeSupport.firePropertyChange(/* name */ "BASE_PLAN_LOCKED", !basePlanLocked, basePlanLocked);
        }
    };
    /**
     * Returns the version of this home, the last time it was serialized or
     * or {@link #CURRENT_VERSION} if it is not serialized yet or
     * was serialized with Sweet Home 3D 0.x.
     * Version is useful to know with which Sweet Home 3D version this home was saved
     * and warn user that he may lose information if he saves with
     * current application a home created by a more recent version.
     * @return {number}
     */
    Home.prototype.getVersion = function () {
        return this.version;
    };
    /**
     * Sets the version of this home.
     * @return {void} version  the new version
     * @param {number} version
     */
    Home.prototype.setVersion = function (version) {
        this.version = version;
    };
    /**
     * Returns a clone of this home and the objects it contains.
     * Listeners bound to this home aren't added to the returned home.
     * @return {Home}
     */
    Home.prototype.clone = function () {
        try {
            var clone = (function (o) { var clone = Object.create(o); for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            } return clone; })(this);
            Home.copyHomeData(this, clone);
            Home.initListenersSupport(clone);
            clone.addModelListeners();
            return clone;
        }
        catch (ex) {
            throw new IllegalStateException("Super class isn\'t cloneable");
        }
    };
    /**
     * Copies all data of a <code>source</code> home to a <code>destination</code> home.
     * @param {Home} source
     * @param {Home} destination
     * @private
     */
    Home.copyHomeData = function (source, destination) {
        destination.allLevelsSelection = source.allLevelsSelection;
        destination.name = source.name;
        destination.modified = source.modified;
        destination.recovered = source.recovered;
        destination.repaired = source.repaired;
        destination.backgroundImage = source.backgroundImage;
        destination.print = source.print;
        destination.furnitureDescendingSorted = source.furnitureDescendingSorted;
        destination.version = source.version;
        destination.basePlanLocked = source.basePlanLocked;
        destination.skyColor = source.skyColor;
        destination.groundColor = source.groundColor;
        destination.lightColor = source.lightColor;
        destination.wallsAlpha = source.wallsAlpha;
        destination.furnitureSortedProperty = source.furnitureSortedProperty;
        destination.selectedItems = ([]);
        destination.furniture = Home.cloneSelectableItems(source.furniture, source.selectedItems, destination.selectedItems);
        destination.rooms = Home.cloneSelectableItems(source.rooms, source.selectedItems, destination.selectedItems);
        destination.dimensionLines = Home.cloneSelectableItems(source.dimensionLines, source.selectedItems, destination.selectedItems);
        destination.polylines = Home.cloneSelectableItems(source.polylines, source.selectedItems, destination.selectedItems);
        destination.labels = Home.cloneSelectableItems(source.labels, source.selectedItems, destination.selectedItems);
        destination.walls = /* clone */ Wall.clone(source.walls);
        for (var i = 0; i < /* size */ source.walls.length; i++) {
            {
                var wall = source.walls[i];
                if ( /* contains */(source.selectedItems.indexOf((wall)) >= 0)) {
                    /* add */ (destination.selectedItems.push(/* get */ destination.walls[i]) > 0);
                }
            }
            ;
        }
        destination.levels = ([]);
        if ( /* size */source.levels.length > 0) {
            for (var index = 0; index < source.levels.length; index++) {
                var level = source.levels[index];
                {
                    /* add */ (destination.levels.push(/* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                        return o.clone();
                    }
                    else {
                        var clone = Object.create(o);
                        for (var p in o) {
                            if (o.hasOwnProperty(p))
                                clone[p] = o[p];
                        }
                        return clone;
                    } })(level)) > 0);
                }
            }
            for (var i = 0; i < /* size */ source.furniture.length; i++) {
                {
                    var pieceLevel = source.furniture[i].getLevel();
                    if (pieceLevel != null) {
                        /* get */ destination.furniture[i].setLevel(/* get */ destination.levels[source.levels.indexOf(pieceLevel)]);
                    }
                }
                ;
            }
            for (var i = 0; i < /* size */ source.rooms.length; i++) {
                {
                    var roomLevel = source.rooms[i].getLevel();
                    if (roomLevel != null) {
                        /* get */ destination.rooms[i].setLevel(/* get */ destination.levels[source.levels.indexOf(roomLevel)]);
                    }
                }
                ;
            }
            for (var i = 0; i < /* size */ source.dimensionLines.length; i++) {
                {
                    var dimensionLineLevel = source.dimensionLines[i].getLevel();
                    if (dimensionLineLevel != null) {
                        /* get */ destination.dimensionLines[i].setLevel(/* get */ destination.levels[source.levels.indexOf(dimensionLineLevel)]);
                    }
                }
                ;
            }
            for (var i = 0; i < /* size */ source.polylines.length; i++) {
                {
                    var polylineLevel = source.polylines[i].getLevel();
                    if (polylineLevel != null) {
                        /* get */ destination.polylines[i].setLevel(/* get */ destination.levels[source.levels.indexOf(polylineLevel)]);
                    }
                }
                ;
            }
            for (var i = 0; i < /* size */ source.labels.length; i++) {
                {
                    var labelLevel = source.labels[i].getLevel();
                    if (labelLevel != null) {
                        /* get */ destination.labels[i].setLevel(/* get */ destination.levels[source.levels.indexOf(labelLevel)]);
                    }
                }
                ;
            }
            for (var i = 0; i < /* size */ source.walls.length; i++) {
                {
                    var wallLevel = source.walls[i].getLevel();
                    if (wallLevel != null) {
                        /* get */ destination.walls[i].setLevel(/* get */ destination.levels[source.levels.indexOf(wallLevel)]);
                    }
                }
                ;
            }
            if (source.selectedLevel != null) {
                destination.selectedLevel = /* get */ destination.levels[source.levels.indexOf(source.selectedLevel)];
            }
        }
        destination.observerCamera = /* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
            return o.clone();
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(source.observerCamera);
        destination.topCamera = /* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
            return o.clone();
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(source.topCamera);
        if (source.camera === source.observerCamera) {
            destination.camera = destination.observerCamera;
            if ( /* contains */(source.selectedItems.indexOf((source.observerCamera)) >= 0)) {
                /* add */ (destination.selectedItems.push(destination.observerCamera) > 0);
            }
        }
        else {
            destination.camera = destination.topCamera;
        }
        destination.storedCameras = ([]);
        for (var index = 0; index < source.storedCameras.length; index++) {
            var camera = source.storedCameras[index];
            {
                /* add */ (destination.storedCameras.push(/* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                    return o.clone();
                }
                else {
                    var clone = Object.create(o);
                    for (var p in o) {
                        if (o.hasOwnProperty(p))
                            clone[p] = o[p];
                    }
                    return clone;
                } })(camera)) > 0);
            }
        }
        destination.environment = /* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
            return o.clone();
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(source.environment);
        destination.compass = /* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
            return o.clone();
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(source.compass);
        destination.furnitureVisibleProperties = (source.furnitureVisibleProperties.slice(0));
        destination.visualProperties = ((function (o) { var r = {}; for (var p in o)
            r[p] = o[p]; return r; })(source.visualProperties));
        destination.properties = ((function (o) { var r = {}; for (var p in o)
            r[p] = o[p]; return r; })(source.properties));
    };
    /**
     * Returns the list of cloned items in <code>source</code>.
     * If a cloned item is selected its clone will be selected too (ie added to
     * <code>destinationSelectedItems</code>).
     * @param {*[]} source
     * @param {*[]} sourceSelectedItems
     * @param {*[]} destinationSelectedItems
     * @return {*[]}
     * @private
     */
    Home.cloneSelectableItems = function (source, sourceSelectedItems, destinationSelectedItems) {
        var destination = ([]);
        for (var index = 0; index < source.length; index++) {
            var item = source[index];
            {
                var clone = (function (o) { if (o.clone != undefined) {
                    return o.clone();
                }
                else {
                    var clone_9 = Object.create(o);
                    for (var p in o) {
                        if (o.hasOwnProperty(p))
                            clone_9[p] = o[p];
                    }
                    return clone_9;
                } })(item);
                /* add */ (destination.push(clone) > 0);
                if ( /* contains */(sourceSelectedItems.indexOf((item)) >= 0)) {
                    /* add */ (destinationSelectedItems.push(clone) > 0);
                }
                else if (item != null && item instanceof HomeFurnitureGroup) {
                    var sourceFurnitureGroup = item.getAllFurniture();
                    var destinationFurnitureGroup = null;
                    for (var i = 0, n = sourceFurnitureGroup.length; i < n; i++) {
                        {
                            var piece = sourceFurnitureGroup[i];
                            if ( /* contains */(sourceSelectedItems.indexOf((piece)) >= 0)) {
                                if (destinationFurnitureGroup == null) {
                                    destinationFurnitureGroup = clone.getAllFurniture();
                                }
                                /* add */ (destinationSelectedItems.push(/* get */ destinationFurnitureGroup[i]) > 0);
                            }
                        }
                        ;
                    }
                }
            }
        }
        return destination;
    };
    /**
     * Returns a deep copy of home selectable <code>items</code>.
     * Duplicated items are at the same index as their original and use different ids.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items to duplicate
     * @return {*[]}
     */
    Home.duplicate = function (items) {
        var list = ([]);
        var duplicatedWalls = Wall.duplicate(Home.getWallsSubList(items));
        var wallIndex = 0;
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if (item != null && item instanceof Wall) {
                    /* add */ (list.push(/* get */ duplicatedWalls[wallIndex++]) > 0);
                }
                else if (item != null && item instanceof HomeObject) {
                    /* add */ (list.push(item.duplicate()) > 0);
                }
                else {
                    /* add */ (list.push(/* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                        return o.clone();
                    }
                    else {
                        var clone = Object.create(o);
                        for (var p in o) {
                            if (o.hasOwnProperty(p))
                                clone[p] = o[p];
                        }
                        return clone;
                    } })(item)) > 0);
                }
            }
        }
        return list;
    };
    /**
     * Returns a sub list of <code>items</code> that contains only home furniture.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items among which the search is done
     * @return {HomePieceOfFurniture[]}
     */
    Home.getFurnitureSubList = function (items) {
        return Home.getSubList(items, HomePieceOfFurniture);
    };
    /**
     * Returns a sub list of <code>items</code> that contains only walls.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items among which the search is done
     * @return {Wall[]}
     */
    Home.getWallsSubList = function (items) {
        return Home.getSubList(items, Wall);
    };
    /**
     * Returns a sub list of <code>items</code> that contains only rooms.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items among which the search is done
     * @return {Room[]}
     */
    Home.getRoomsSubList = function (items) {
        return Home.getSubList(items, Room);
    };
    /**
     * Returns a sub list of <code>items</code> that contains only labels.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items among which the search is done
     * @return {Polyline[]}
     */
    Home.getPolylinesSubList = function (items) {
        return Home.getSubList(items, Polyline);
    };
    /**
     * Returns a sub list of <code>items</code> that contains only dimension lines.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items among which the search is done
     * @return {DimensionLine[]}
     */
    Home.getDimensionLinesSubList = function (items) {
        return Home.getSubList(items, DimensionLine);
    };
    /**
     * Returns a sub list of <code>items</code> that contains only labels.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items  the items among which the search is done
     * @return {Label[]}
     */
    Home.getLabelsSubList = function (items) {
        return Home.getSubList(items, Label);
    };
    /**
     * Returns a sub list of <code>items</code> that contains only instances of <code>subListClass</code>.
     * @param {? extends com.eteks.sweethome3d.model.Selectable[]} items         the items among which the search is done
     * @param {Object} subListClass  the class of the searched items
     * @return {*[]}
     */
    Home.getSubList = function (items, subListClass) {
        var subList = ([]);
        for (var index = 0; index < items.length; index++) {
            var item = items[index];
            {
                if ( /* isInstance */(function (c, o) { if (typeof c === 'string')
                    return (o.constructor && o.constructor["__interfaces"] && o.constructor["__interfaces"].indexOf(c) >= 0) || (o["__interfaces"] && o["__interfaces"].indexOf(c) >= 0);
                else if (typeof c === 'function')
                    return (o instanceof c) || (o.constructor && o.constructor === c); })(subListClass, item)) {
                    /* add */ (subList.push(item) > 0);
                }
            }
        }
        return subList;
    };
    /**
     * The current version of this home. Each time the field list is changed
     * in <code>Home</code> class or in one of the classes that it uses,
     * this number is increased.
     */
    Home.CURRENT_VERSION = 6500;
    Home.HOME_TOP_CAMERA_ID = "camera-homeTopCamera";
    Home.HOME_OBSERVER_CAMERA_ID = "observerCamera-homeObserverCamera";
    Home.HOME_ENVIRONMENT_ID = "environment-homeEnvironment";
    Home.HOME_COMPASS_ID = "compass-homeCompass";
    Home.KEEP_BACKWARD_COMPATIBLITY = true;
    return Home;
}());
Home["__class"] = "com.eteks.sweethome3d.model.Home";
(function (Home) {
    var Home$0 = /** @class */ (function () {
        function Home$0(__parent) {
            this.__parent = __parent;
        }
        Home$0.prototype.propertyChange = function (ev) {
            if (( /* name */"ELEVATION" === ev.getPropertyName()) || ( /* name */"ELEVATION_INDEX" === ev.getPropertyName())) {
                this.__parent.levels = (this.__parent.levels.slice(0));
                /* sort */ (function (l, c) { if (c.compare)
                    l.sort(function (e1, e2) { return c.compare(e1, e2); });
                else
                    l.sort(c); })(this.__parent.levels, Home.LEVEL_ELEVATION_COMPARATOR_$LI$());
            }
        };
        return Home$0;
    }());
    Home.Home$0 = Home$0;
})(Home || (Home = {}));
Home['__transients'] = ['furnitureChangeSupport', 'selectedItems', 'selectionListeners', 'allLevelsSelection', 'levelsChangeSupport', 'wallsChangeSupport', 'roomsChangeSupport', 'polylinesChangeSupport', 'dimensionLinesChangeSupport', 'labelsChangeSupport', 'modified', 'recovered', 'repaired', 'propertyChangeSupport'];
/**
 * Creates a home door or window from an existing one.
 * @param {string} id           the ID of the object
 * @param {Object} doorOrWindow the door or window from which data are copied
 * @class
 * @extends HomePieceOfFurniture
 * @author Emmanuel Puybaret
 */
var HomeDoorOrWindow = /** @class */ (function (_super) {
    __extends(HomeDoorOrWindow, _super);
    function HomeDoorOrWindow(id, doorOrWindow) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((doorOrWindow != null && (doorOrWindow.constructor != null && doorOrWindow.constructor["__interfaces"] != null && doorOrWindow.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.DoorOrWindow") >= 0)) || doorOrWindow === null)) {
            var __args = arguments;
            _this = _super.call(this, id, doorOrWindow) || this;
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallWidth === undefined) {
                _this.wallWidth = 0;
            }
            if (_this.wallLeft === undefined) {
                _this.wallLeft = 0;
            }
            if (_this.wallHeight === undefined) {
                _this.wallHeight = 0;
            }
            if (_this.wallTop === undefined) {
                _this.wallTop = 0;
            }
            if (_this.wallCutOutOnBothSides === undefined) {
                _this.wallCutOutOnBothSides = false;
            }
            if (_this.widthDepthDeformable === undefined) {
                _this.widthDepthDeformable = false;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.cutOutShape === undefined) {
                _this.cutOutShape = null;
            }
            if (_this.boundToWall === undefined) {
                _this.boundToWall = false;
            }
            _this.wallThickness = doorOrWindow.getWallThickness();
            _this.wallDistance = doorOrWindow.getWallDistance();
            _this.wallWidth = 1;
            _this.wallLeft = 0;
            _this.wallHeight = 1;
            _this.wallTop = 0;
            _this.wallCutOutOnBothSides = doorOrWindow.isWallCutOutOnBothSides();
            _this.widthDepthDeformable = doorOrWindow.isWidthDepthDeformable();
            _this.sashes = doorOrWindow.getSashes();
            _this.cutOutShape = doorOrWindow.getCutOutShape();
        }
        else if (((id != null && (id.constructor != null && id.constructor["__interfaces"] != null && id.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.DoorOrWindow") >= 0)) || id === null) && doorOrWindow === undefined) {
            var __args = arguments;
            var doorOrWindow_6 = __args[0];
            {
                var __args_95 = arguments;
                var id_23 = HomeObject.createId("doorOrWindow");
                _this = _super.call(this, id_23, doorOrWindow_6) || this;
                if (_this.wallThickness === undefined) {
                    _this.wallThickness = 0;
                }
                if (_this.wallDistance === undefined) {
                    _this.wallDistance = 0;
                }
                if (_this.wallWidth === undefined) {
                    _this.wallWidth = 0;
                }
                if (_this.wallLeft === undefined) {
                    _this.wallLeft = 0;
                }
                if (_this.wallHeight === undefined) {
                    _this.wallHeight = 0;
                }
                if (_this.wallTop === undefined) {
                    _this.wallTop = 0;
                }
                if (_this.wallCutOutOnBothSides === undefined) {
                    _this.wallCutOutOnBothSides = false;
                }
                if (_this.widthDepthDeformable === undefined) {
                    _this.widthDepthDeformable = false;
                }
                if (_this.sashes === undefined) {
                    _this.sashes = null;
                }
                if (_this.cutOutShape === undefined) {
                    _this.cutOutShape = null;
                }
                if (_this.boundToWall === undefined) {
                    _this.boundToWall = false;
                }
                _this.wallThickness = doorOrWindow_6.getWallThickness();
                _this.wallDistance = doorOrWindow_6.getWallDistance();
                _this.wallWidth = 1;
                _this.wallLeft = 0;
                _this.wallHeight = 1;
                _this.wallTop = 0;
                _this.wallCutOutOnBothSides = doorOrWindow_6.isWallCutOutOnBothSides();
                _this.widthDepthDeformable = doorOrWindow_6.isWidthDepthDeformable();
                _this.sashes = doorOrWindow_6.getSashes();
                _this.cutOutShape = doorOrWindow_6.getCutOutShape();
            }
            if (_this.wallThickness === undefined) {
                _this.wallThickness = 0;
            }
            if (_this.wallDistance === undefined) {
                _this.wallDistance = 0;
            }
            if (_this.wallWidth === undefined) {
                _this.wallWidth = 0;
            }
            if (_this.wallLeft === undefined) {
                _this.wallLeft = 0;
            }
            if (_this.wallHeight === undefined) {
                _this.wallHeight = 0;
            }
            if (_this.wallTop === undefined) {
                _this.wallTop = 0;
            }
            if (_this.wallCutOutOnBothSides === undefined) {
                _this.wallCutOutOnBothSides = false;
            }
            if (_this.widthDepthDeformable === undefined) {
                _this.widthDepthDeformable = false;
            }
            if (_this.sashes === undefined) {
                _this.sashes = null;
            }
            if (_this.cutOutShape === undefined) {
                _this.cutOutShape = null;
            }
            if (_this.boundToWall === undefined) {
                _this.boundToWall = false;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the thickness of the wall in which this door or window should be placed.
     * @return {number} a value in percentage of the depth of the door or the window.
     */
    HomeDoorOrWindow.prototype.getWallThickness = function () {
        return this.wallThickness;
    };
    /**
     * Sets the thickness of the wall in which this door or window should be placed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} wallThickness a value in percentage of the depth of the door or the window.
     */
    HomeDoorOrWindow.prototype.setWallThickness = function (wallThickness) {
        if (wallThickness !== this.wallThickness) {
            var oldWallThickness = this.wallThickness;
            this.wallThickness = wallThickness;
            this.firePropertyChange(/* name */ "WALL_THICKNESS", oldWallThickness, wallThickness);
        }
    };
    /**
     * Returns the distance between the back side of this door or window and the wall where it's located.
     * @return {number} a distance in percentage of the depth of the door or the window.
     */
    HomeDoorOrWindow.prototype.getWallDistance = function () {
        return this.wallDistance;
    };
    /**
     * Sets the distance between the back side of this door or window and the wall where it's located.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} wallDistance a distance in percentage of the depth of the door or the window.
     */
    HomeDoorOrWindow.prototype.setWallDistance = function (wallDistance) {
        if (wallDistance !== this.wallDistance) {
            var oldWallDistance = this.wallDistance;
            this.wallDistance = wallDistance;
            this.firePropertyChange(/* name */ "WALL_DISTANCE", oldWallDistance, wallDistance);
        }
    };
    /**
     * Returns the width of the wall part in which this door or window should be placed.
     * @return {number} a value in percentage of the width of the door or the window.
     */
    HomeDoorOrWindow.prototype.getWallWidth = function () {
        return this.wallWidth;
    };
    /**
     * Sets the width of the wall part in which this door or window should be placed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} wallWidth a value in percentage of the width of the door or the window.
     */
    HomeDoorOrWindow.prototype.setWallWidth = function (wallWidth) {
        if (wallWidth !== this.wallWidth) {
            var oldWallWidth = this.wallWidth;
            this.wallWidth = wallWidth;
            this.firePropertyChange(/* name */ "WALL_WIDTH", oldWallWidth, wallWidth);
        }
    };
    /**
     * Returns the distance between the left side of this door or window and the wall part where it should be placed.
     * @return {number} a distance in percentage of the width of the door or the window.
     */
    HomeDoorOrWindow.prototype.getWallLeft = function () {
        return this.wallLeft;
    };
    /**
     * Sets the distance between the left side of this door or window and the wall part where it should be placed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} wallLeft a distance in percentage of the width of the door or the window.
     */
    HomeDoorOrWindow.prototype.setWallLeft = function (wallLeft) {
        if (wallLeft !== this.wallLeft) {
            var oldWallLeft = this.wallLeft;
            this.wallLeft = wallLeft;
            this.firePropertyChange(/* name */ "WALL_LEFT", oldWallLeft, wallLeft);
        }
    };
    /**
     * Returns the height of the wall part in which this door or window should be placed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @return {number} a value in percentage of the height of the door or the window.
     */
    HomeDoorOrWindow.prototype.getWallHeight = function () {
        return this.wallHeight;
    };
    /**
     * Sets the height of the wall part in which this door or window should be placed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} wallHeight a value in percentage of the height of the door or the window.
     */
    HomeDoorOrWindow.prototype.setWallHeight = function (wallHeight) {
        if (wallHeight !== this.wallHeight) {
            var oldWallHeight = this.wallHeight;
            this.wallHeight = wallHeight;
            this.firePropertyChange(/* name */ "WALL_HEIGHT", oldWallHeight, wallHeight);
        }
    };
    /**
     * Returns the distance between the left side of this door or window and the wall part where it should be placed.
     * @return {number} a distance in percentage of the height of the door or the window.
     */
    HomeDoorOrWindow.prototype.getWallTop = function () {
        return this.wallTop;
    };
    /**
     * Sets the distance between the top side of this door or window and the wall part where it should be placed.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {number} wallTop a distance in percentage of the height of the door or the window.
     */
    HomeDoorOrWindow.prototype.setWallTop = function (wallTop) {
        if (wallTop !== this.wallTop) {
            var oldWallTop = this.wallTop;
            this.wallTop = wallTop;
            this.firePropertyChange(/* name */ "WALL_TOP", oldWallTop, wallTop);
        }
    };
    /**
     * Returns a copy of the sashes attached to this door or window.
     * If no sash is defined an empty array is returned.
     * @return {com.eteks.sweethome3d.model.Sash[]}
     */
    HomeDoorOrWindow.prototype.getSashes = function () {
        if (this.sashes.length === 0) {
            return this.sashes;
        }
        else {
            return /* clone */ this.sashes.slice(0);
        }
    };
    /**
     * Sets the sashes attached to this door or window. Once this piece is updated,
     * listeners added to this piece will receive a change notification.
     * @param {com.eteks.sweethome3d.model.Sash[]} sashes sashes of this window.
     */
    HomeDoorOrWindow.prototype.setSashes = function (sashes) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(sashes, this.sashes)) {
            var oldSashes = this.sashes.length === 0 ? this.sashes : /* clone */ this.sashes.slice(0);
            this.sashes = sashes.length === 0 ? sashes : /* clone */ sashes.slice(0);
            this.firePropertyChange(/* name */ "SASHES", oldSashes, sashes);
        }
    };
    /**
     * Returns the shape used to cut out walls that intersect this door or window.
     * @return {string}
     */
    HomeDoorOrWindow.prototype.getCutOutShape = function () {
        return this.cutOutShape;
    };
    /**
     * Sets the shape used to cut out walls that intersect this door or window.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {string} cutOutShape a SVG path element.
     */
    HomeDoorOrWindow.prototype.setCutOutShape = function (cutOutShape) {
        if (cutOutShape !== this.cutOutShape && (cutOutShape == null || !(cutOutShape === this.cutOutShape))) {
            var oldCutOutShape = this.cutOutShape;
            this.cutOutShape = cutOutShape;
            this.firePropertyChange(/* name */ "CUT_OUT_SHAPE", oldCutOutShape, cutOutShape);
        }
    };
    /**
     * Returns <code>true</code> if this door or window should cut out the both sides
     * of the walls it intersects, even if its front or back side are within the wall thickness.
     * @return {boolean}
     */
    HomeDoorOrWindow.prototype.isWallCutOutOnBothSides = function () {
        return this.wallCutOutOnBothSides;
    };
    /**
     * Sets whether the width and depth of the new door or window may
     * be changed independently from each other.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {boolean} wallCutOutOnBothSides
     */
    HomeDoorOrWindow.prototype.setWallCutOutOnBothSides = function (wallCutOutOnBothSides) {
        if (wallCutOutOnBothSides !== this.wallCutOutOnBothSides) {
            this.wallCutOutOnBothSides = wallCutOutOnBothSides;
            this.firePropertyChange(/* name */ "WALL_CUT_OUT_ON_BOTH_SIDES", !wallCutOutOnBothSides, wallCutOutOnBothSides);
        }
    };
    /**
     * Returns <code>false</code> if the width and depth of this door or window may
     * not be changed independently from each other. When <code>false</code>, this door or window
     * will also make a hole in the wall when it's placed whatever its depth if its
     * {@link #isBoundToWall() bouldToWall} flag is <code>true</code>.
     * @return {boolean}
     */
    HomeDoorOrWindow.prototype.isWidthDepthDeformable = function () {
        return this.widthDepthDeformable;
    };
    /**
     * Sets whether the width and depth of the new door or window may
     * be changed independently from each other.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {boolean} widthDepthDeformable
     */
    HomeDoorOrWindow.prototype.setWidthDepthDeformable = function (widthDepthDeformable) {
        if (widthDepthDeformable !== this.widthDepthDeformable) {
            this.widthDepthDeformable = widthDepthDeformable;
            this.firePropertyChange(/* name */ "WIDTH_DEPTH_DEFORMABLE", !widthDepthDeformable, widthDepthDeformable);
        }
    };
    /**
     * Returns <code>true</code> if the location and the size of this door or window
     * were bound to a wall, last time they were updated.
     * @return {boolean}
     */
    HomeDoorOrWindow.prototype.isBoundToWall = function () {
        return this.boundToWall;
    };
    /**
     * Sets whether the location and the size of this door or window
     * were bound to a wall, last time they were updated.
     * Once this piece is updated, listeners added to this piece will receive a change notification.
     * @param {boolean} boundToWall
     */
    HomeDoorOrWindow.prototype.setBoundToWall = function (boundToWall) {
        if (boundToWall !== this.boundToWall) {
            this.boundToWall = boundToWall;
            this.firePropertyChange(/* name */ "BOUND_TO_WALL", !boundToWall, boundToWall);
        }
    };
    /**
     * Sets the abscissa of this door or window and
     * resets its {@link #isBoundToWall() boundToWall} flag if the abscissa changed.
     * @param {number} x
     */
    HomeDoorOrWindow.prototype.setX = function (x) {
        if (this.getX() !== x) {
            this.boundToWall = false;
        }
        _super.prototype.setX.call(this, x);
    };
    /**
     * Sets the ordinate of this door or window and
     * resets its {@link #isBoundToWall() boundToWall} flag if the ordinate changed.
     * @param {number} y
     */
    HomeDoorOrWindow.prototype.setY = function (y) {
        if (this.getY() !== y) {
            this.boundToWall = false;
        }
        _super.prototype.setY.call(this, y);
    };
    /**
     * Sets the angle of this door or window and
     * resets its {@link #isBoundToWall() boundToWall} flag if the angle changed.
     * @param {number} angle
     */
    HomeDoorOrWindow.prototype.setAngle = function (angle) {
        if (this.getAngle() !== angle) {
            this.boundToWall = false;
        }
        _super.prototype.setAngle.call(this, angle);
    };
    /**
     * Sets the depth of this door or window and
     * resets its {@link #isBoundToWall() boundToWall} flag if the depth changed.
     * @param {number} depth
     */
    HomeDoorOrWindow.prototype.setDepth = function (depth) {
        if (this.getDepth() !== depth) {
            this.boundToWall = false;
        }
        _super.prototype.setDepth.call(this, depth);
    };
    /**
     * Returns always <code>true</code>.
     * @return {boolean}
     */
    HomeDoorOrWindow.prototype.isDoorOrWindow = function () {
        return true;
    };
    /**
     * Returns a copy of this door or window.
     * @return {HomeObject}
     */
    HomeDoorOrWindow.prototype.duplicate = function () {
        var copy = _super.prototype.duplicate.call(this);
        copy.boundToWall = false;
        return copy;
    };
    return HomeDoorOrWindow;
}(HomePieceOfFurniture));
HomeDoorOrWindow["__class"] = "com.eteks.sweethome3d.model.HomeDoorOrWindow";
HomeDoorOrWindow["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.DoorOrWindow", "com.eteks.sweethome3d.model.PieceOfFurniture", "com.eteks.sweethome3d.model.Elevatable"];
HomeDoorOrWindow['__transients'] = ['shapeCache', 'propertyChangeSupport'];
/**
 * Creates a home light from an existing one.
 * @param {string} id    the ID of the light
 * @param {Object} light the light from which data are copied
 * @class
 * @extends HomePieceOfFurniture
 * @author Emmanuel Puybaret
 */
var HomeLight = /** @class */ (function (_super) {
    __extends(HomeLight, _super);
    function HomeLight(id, light) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((light != null && (light.constructor != null && light.constructor["__interfaces"] != null && light.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Light") >= 0)) || light === null)) {
            var __args = arguments;
            _this = _super.call(this, id, light) || this;
            if (_this.lightSources === undefined) {
                _this.lightSources = null;
            }
            if (_this.power === undefined) {
                _this.power = 0;
            }
            _this.lightSources = light.getLightSources();
            _this.power = 0.5;
        }
        else if (((id != null && (id.constructor != null && id.constructor["__interfaces"] != null && id.constructor["__interfaces"].indexOf("com.eteks.sweethome3d.model.Light") >= 0)) || id === null) && light === undefined) {
            var __args = arguments;
            var light_1 = __args[0];
            {
                var __args_96 = arguments;
                var id_24 = HomeObject.createId("light");
                _this = _super.call(this, id_24, light_1) || this;
                if (_this.lightSources === undefined) {
                    _this.lightSources = null;
                }
                if (_this.power === undefined) {
                    _this.power = 0;
                }
                _this.lightSources = light_1.getLightSources();
                _this.power = 0.5;
            }
            if (_this.lightSources === undefined) {
                _this.lightSources = null;
            }
            if (_this.power === undefined) {
                _this.power = 0;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Returns the sources managed by this light. Each light source point
     * is a percentage of the width, the depth and the height of this light.
     * with the abscissa origin at the left side of the piece,
     * the ordinate origin at the front side of the piece
     * and the elevation origin at the bottom side of the piece.
     * @return {com.eteks.sweethome3d.model.LightSource[]} a copy of light sources array.
     */
    HomeLight.prototype.getLightSources = function () {
        if (this.lightSources.length === 0) {
            return this.lightSources;
        }
        else {
            return /* clone */ this.lightSources.slice(0);
        }
    };
    /**
     * Sets the sources managed by this light. Once this light is updated,
     * listeners added to this light will receive a change notification.
     * @param {com.eteks.sweethome3d.model.LightSource[]} lightSources sources of the light
     */
    HomeLight.prototype.setLightSources = function (lightSources) {
        if (!(function (a1, a2) { if (a1 == null && a2 == null)
            return true; if (a1 == null || a2 == null)
            return false; if (a1.length != a2.length)
            return false; for (var i = 0; i < a1.length; i++) {
            if (a1[i] != a2[i])
                return false;
        } return true; })(lightSources, this.lightSources)) {
            var oldLightSources = this.lightSources.length === 0 ? this.lightSources : /* clone */ this.lightSources.slice(0);
            this.lightSources = lightSources.length === 0 ? lightSources : /* clone */ lightSources.slice(0);
            this.firePropertyChange(/* name */ "LIGHT_SOURCES", oldLightSources, lightSources);
        }
    };
    /**
     * Returns the power of this light.
     * @return {number}
     */
    HomeLight.prototype.getPower = function () {
        return this.power;
    };
    /**
     * Sets the power of this light. Once this light is updated,
     * listeners added to this light will receive a change notification.
     * @param {number} power power of the light
     */
    HomeLight.prototype.setPower = function (power) {
        if (power !== this.power) {
            var oldPower = this.power;
            this.power = power;
            this.firePropertyChange(/* name */ "POWER", oldPower, power);
        }
    };
    /**
     * Returns a clone of this light.
     * @return {HomeLight}
     */
    HomeLight.prototype.clone = function () {
        var _this = this;
        return (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone[p] = o[p];
            }
            return clone;
        } })(this);
    };
    return HomeLight;
}(HomePieceOfFurniture));
HomeLight["__class"] = "com.eteks.sweethome3d.model.HomeLight";
HomeLight["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.PieceOfFurniture", "com.eteks.sweethome3d.model.Elevatable", "com.eteks.sweethome3d.model.Light"];
HomeLight['__transients'] = ['shapeCache', 'propertyChangeSupport'];
/**
 * Creates a group from the given <code>furniture</code> list.
 * The level of each piece of furniture of the group will be reset to <code>null</code> and if they belong to levels
 * with different elevations, their elevation will be updated to be relative to the elevation of the lowest level.
 * @param {string} id
 * @param {HomePieceOfFurniture[]} furniture
 * @param {number} angle
 * @param {boolean} modelMirrored
 * @param {string} name
 * @class
 * @extends HomePieceOfFurniture
 * @author Emmanuel Puybaret
 */
var HomeFurnitureGroup = /** @class */ (function (_super) {
    __extends(HomeFurnitureGroup, _super);
    function HomeFurnitureGroup(id, furniture, angle, modelMirrored, name) {
        var _this = this;
        if (((typeof id === 'string') || id === null) && ((furniture != null && (furniture instanceof Array)) || furniture === null) && ((typeof angle === 'number') || angle === null) && ((typeof modelMirrored === 'boolean') || modelMirrored === null) && ((typeof name === 'string') || name === null)) {
            var __args = arguments;
            _this = _super.call(this, id, /* get */ furniture[0]) || this;
            if (_this.furniture === undefined) {
                _this.furniture = null;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
            }
            if (_this.fixedWidth === undefined) {
                _this.fixedWidth = 0;
            }
            if (_this.fixedDepth === undefined) {
                _this.fixedDepth = 0;
            }
            if (_this.fixedHeight === undefined) {
                _this.fixedHeight = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
            }
            if (_this.furnitureListener === undefined) {
                _this.furnitureListener = null;
            }
            _this.furniture = /* unmodifiableList */ furniture.slice(0);
            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = true;
            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = true;
            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = true;
            var movable = true;
            var visible = false;
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    movable = piece.isMovable() && movable;
                    visible = piece.isVisible() || visible;
                }
            }
            _this.setName(name);
            _this.setCatalogId(null);
            _this.setDescription(null);
            _this.setInformation(null);
            _this.setCreator(null);
            _this.setNameVisible(false);
            _this.setNameXOffset(0);
            _this.setNameYOffset(0);
            _this.setNameAngle(0);
            _this.setNameStyle(null);
            _super.prototype.setMovable.call(_this, movable);
            _super.prototype.setAngle.call(_this, angle);
            _super.prototype.setModelMirrored.call(_this, modelMirrored);
            _this.setVisible(visible);
            _this.updateLocationAndSize(furniture, angle, true);
            _this.addFurnitureListener();
        }
        else if (((id != null && (id instanceof Array)) || id === null) && ((typeof furniture === 'number') || furniture === null) && ((typeof angle === 'boolean') || angle === null) && ((typeof modelMirrored === 'string') || modelMirrored === null) && name === undefined) {
            var __args = arguments;
            var furniture_3 = __args[0];
            var angle_5 = __args[1];
            var modelMirrored_1 = __args[2];
            var name_11 = __args[3];
            {
                var __args_97 = arguments;
                var id_25 = HomeObject.createId("furnitureGroup");
                _this = _super.call(this, id_25, /* get */ furniture_3[0]) || this;
                if (_this.furniture === undefined) {
                    _this.furniture = null;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
                }
                if (_this.fixedWidth === undefined) {
                    _this.fixedWidth = 0;
                }
                if (_this.fixedDepth === undefined) {
                    _this.fixedDepth = 0;
                }
                if (_this.fixedHeight === undefined) {
                    _this.fixedHeight = 0;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                }
                if (_this.furnitureListener === undefined) {
                    _this.furnitureListener = null;
                }
                _this.furniture = /* unmodifiableList */ furniture_3.slice(0);
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = true;
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = true;
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = true;
                var movable = true;
                var visible = false;
                for (var index = 0; index < furniture_3.length; index++) {
                    var piece = furniture_3[index];
                    {
                        movable = piece.isMovable() && movable;
                        visible = piece.isVisible() || visible;
                    }
                }
                _this.setName(name_11);
                _this.setCatalogId(null);
                _this.setDescription(null);
                _this.setInformation(null);
                _this.setCreator(null);
                _this.setNameVisible(false);
                _this.setNameXOffset(0);
                _this.setNameYOffset(0);
                _this.setNameAngle(0);
                _this.setNameStyle(null);
                _super.prototype.setMovable.call(_this, movable);
                _super.prototype.setAngle.call(_this, angle_5);
                _super.prototype.setModelMirrored.call(_this, modelMirrored_1);
                _this.setVisible(visible);
                _this.updateLocationAndSize(furniture_3, angle_5, true);
                _this.addFurnitureListener();
            }
            if (_this.furniture === undefined) {
                _this.furniture = null;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
            }
            if (_this.fixedWidth === undefined) {
                _this.fixedWidth = 0;
            }
            if (_this.fixedDepth === undefined) {
                _this.fixedDepth = 0;
            }
            if (_this.fixedHeight === undefined) {
                _this.fixedHeight = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
            }
            if (_this.furnitureListener === undefined) {
                _this.furnitureListener = null;
            }
        }
        else if (((id != null && (id instanceof Array)) || id === null) && ((furniture != null && furniture instanceof HomePieceOfFurniture) || furniture === null) && ((typeof angle === 'string') || angle === null) && modelMirrored === undefined && name === undefined) {
            var __args = arguments;
            var furniture_4 = __args[0];
            var leadingPiece = __args[1];
            var name_12 = __args[2];
            {
                var __args_98 = arguments;
                var angle_6 = leadingPiece.getAngle();
                var modelMirrored_2 = false;
                {
                    var __args_99 = arguments;
                    var id_26 = HomeObject.createId("furnitureGroup");
                    _this = _super.call(this, id_26, /* get */ furniture_4[0]) || this;
                    if (_this.furniture === undefined) {
                        _this.furniture = null;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
                    }
                    if (_this.fixedWidth === undefined) {
                        _this.fixedWidth = 0;
                    }
                    if (_this.fixedDepth === undefined) {
                        _this.fixedDepth = 0;
                    }
                    if (_this.fixedHeight === undefined) {
                        _this.fixedHeight = 0;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                    }
                    if (_this.furnitureListener === undefined) {
                        _this.furnitureListener = null;
                    }
                    _this.furniture = /* unmodifiableList */ furniture_4.slice(0);
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = true;
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = true;
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = true;
                    var movable = true;
                    var visible = false;
                    for (var index = 0; index < furniture_4.length; index++) {
                        var piece = furniture_4[index];
                        {
                            movable = piece.isMovable() && movable;
                            visible = piece.isVisible() || visible;
                        }
                    }
                    _this.setName(name_12);
                    _this.setCatalogId(null);
                    _this.setDescription(null);
                    _this.setInformation(null);
                    _this.setCreator(null);
                    _this.setNameVisible(false);
                    _this.setNameXOffset(0);
                    _this.setNameYOffset(0);
                    _this.setNameAngle(0);
                    _this.setNameStyle(null);
                    _super.prototype.setMovable.call(_this, movable);
                    _super.prototype.setAngle.call(_this, angle_6);
                    _super.prototype.setModelMirrored.call(_this, modelMirrored_2);
                    _this.setVisible(visible);
                    _this.updateLocationAndSize(furniture_4, angle_6, true);
                    _this.addFurnitureListener();
                }
                if (_this.furniture === undefined) {
                    _this.furniture = null;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
                }
                if (_this.fixedWidth === undefined) {
                    _this.fixedWidth = 0;
                }
                if (_this.fixedDepth === undefined) {
                    _this.fixedDepth = 0;
                }
                if (_this.fixedHeight === undefined) {
                    _this.fixedHeight = 0;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                }
                if (_this.furnitureListener === undefined) {
                    _this.furnitureListener = null;
                }
            }
            if (_this.furniture === undefined) {
                _this.furniture = null;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
            }
            if (_this.fixedWidth === undefined) {
                _this.fixedWidth = 0;
            }
            if (_this.fixedDepth === undefined) {
                _this.fixedDepth = 0;
            }
            if (_this.fixedHeight === undefined) {
                _this.fixedHeight = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
            }
            if (_this.furnitureListener === undefined) {
                _this.furnitureListener = null;
            }
        }
        else if (((id != null && (id instanceof Array)) || id === null) && ((typeof furniture === 'string') || furniture === null) && angle === undefined && modelMirrored === undefined && name === undefined) {
            var __args = arguments;
            var furniture_5 = __args[0];
            var name_13 = __args[1];
            {
                var __args_100 = arguments;
                var leadingPiece = __args_100[0][0];
                {
                    var __args_101 = arguments;
                    var angle_7 = leadingPiece.getAngle();
                    var modelMirrored_3 = false;
                    {
                        var __args_102 = arguments;
                        var id_27 = HomeObject.createId("furnitureGroup");
                        _this = _super.call(this, id_27, /* get */ furniture_5[0]) || this;
                        if (_this.furniture === undefined) {
                            _this.furniture = null;
                        }
                        if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
                        }
                        if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
                        }
                        if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
                        }
                        if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
                        }
                        if (_this.fixedWidth === undefined) {
                            _this.fixedWidth = 0;
                        }
                        if (_this.fixedDepth === undefined) {
                            _this.fixedDepth = 0;
                        }
                        if (_this.fixedHeight === undefined) {
                            _this.fixedHeight = 0;
                        }
                        if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
                        }
                        if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                            _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                        }
                        if (_this.furnitureListener === undefined) {
                            _this.furnitureListener = null;
                        }
                        _this.furniture = /* unmodifiableList */ furniture_5.slice(0);
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = true;
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = true;
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = true;
                        var movable = true;
                        var visible = false;
                        for (var index = 0; index < furniture_5.length; index++) {
                            var piece = furniture_5[index];
                            {
                                movable = piece.isMovable() && movable;
                                visible = piece.isVisible() || visible;
                            }
                        }
                        _this.setName(name_13);
                        _this.setCatalogId(null);
                        _this.setDescription(null);
                        _this.setInformation(null);
                        _this.setCreator(null);
                        _this.setNameVisible(false);
                        _this.setNameXOffset(0);
                        _this.setNameYOffset(0);
                        _this.setNameAngle(0);
                        _this.setNameStyle(null);
                        _super.prototype.setMovable.call(_this, movable);
                        _super.prototype.setAngle.call(_this, angle_7);
                        _super.prototype.setModelMirrored.call(_this, modelMirrored_3);
                        _this.setVisible(visible);
                        _this.updateLocationAndSize(furniture_5, angle_7, true);
                        _this.addFurnitureListener();
                    }
                    if (_this.furniture === undefined) {
                        _this.furniture = null;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
                    }
                    if (_this.fixedWidth === undefined) {
                        _this.fixedWidth = 0;
                    }
                    if (_this.fixedDepth === undefined) {
                        _this.fixedDepth = 0;
                    }
                    if (_this.fixedHeight === undefined) {
                        _this.fixedHeight = 0;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
                    }
                    if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                        _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                    }
                    if (_this.furnitureListener === undefined) {
                        _this.furnitureListener = null;
                    }
                }
                if (_this.furniture === undefined) {
                    _this.furniture = null;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
                }
                if (_this.fixedWidth === undefined) {
                    _this.fixedWidth = 0;
                }
                if (_this.fixedDepth === undefined) {
                    _this.fixedDepth = 0;
                }
                if (_this.fixedHeight === undefined) {
                    _this.fixedHeight = 0;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
                }
                if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                    _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                }
                if (_this.furnitureListener === undefined) {
                    _this.furnitureListener = null;
                }
            }
            if (_this.furniture === undefined) {
                _this.furniture = null;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = false;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = false;
            }
            if (_this.fixedWidth === undefined) {
                _this.fixedWidth = 0;
            }
            if (_this.fixedDepth === undefined) {
                _this.fixedDepth = 0;
            }
            if (_this.fixedHeight === undefined) {
                _this.fixedHeight = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = 0;
            }
            if (_this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency === undefined) {
                _this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
            }
            if (_this.furnitureListener === undefined) {
                _this.furnitureListener = null;
            }
        }
        else
            throw new Error('invalid overload');
        return _this;
    }
    /**
     * Updates the location and size of this group from the furniture it contains.
     * @param {HomePieceOfFurniture[]} furniture
     * @param {number} angle
     * @param {boolean} init
     * @private
     */
    HomeFurnitureGroup.prototype.updateLocationAndSize = function (furniture, angle, init) {
        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = true;
        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = true;
        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = true;
        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = true;
        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = /* get */ furniture[0].getCurrency();
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable = piece.isResizable() && this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable;
                this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable = piece.isDeformable() && this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable;
                this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable = piece.isTexturable() && this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable;
                this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow = piece.isDoorOrWindow() && this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow;
                if (this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency != null) {
                    if (piece.getCurrency() == null || !(piece.getCurrency() === this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency)) {
                        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency = null;
                    }
                }
            }
        }
        var elevation = 3.4028235E38;
        if (init) {
            var minLevel = null;
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    var level = piece.getLevel();
                    if (level != null && (minLevel == null || level.getElevation() < minLevel.getElevation())) {
                        minLevel = level;
                    }
                }
            }
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    if (piece.getLevel() != null) {
                        elevation = Math.min(elevation, piece.getGroundElevation() - minLevel.getElevation());
                        piece.setElevation(piece.getGroundElevation() - minLevel.getElevation());
                        piece.setLevel(null);
                    }
                    else {
                        elevation = Math.min(elevation, piece.getElevation());
                    }
                }
            }
        }
        else {
            for (var index = 0; index < furniture.length; index++) {
                var piece = furniture[index];
                {
                    elevation = Math.min(elevation, piece.getElevation());
                }
            }
        }
        var height = 0;
        var dropOnTopElevation = -1;
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                height = Math.max(height, piece.getElevation() + piece.getHeightInPlan());
                if (piece.getDropOnTopElevation() >= 0) {
                    dropOnTopElevation = Math.max(dropOnTopElevation, piece.getElevation() + piece.getHeightInPlan() * piece.getDropOnTopElevation());
                }
            }
        }
        height -= elevation;
        dropOnTopElevation -= elevation;
        var rotation = java.awt.geom.AffineTransform.getRotateInstance(-angle);
        var unrotatedBoundingRectangle = null;
        {
            var array = this.getFurnitureWithoutGroups(furniture);
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    var pieceShape = new java.awt.geom.GeneralPath();
                    var points = piece.getPoints();
                    pieceShape.moveTo(points[0][0], points[0][1]);
                    for (var i = 1; i < points.length; i++) {
                        {
                            pieceShape.lineTo(points[i][0], points[i][1]);
                        }
                        ;
                    }
                    pieceShape.closePath();
                    if (unrotatedBoundingRectangle == null) {
                        unrotatedBoundingRectangle = pieceShape.createTransformedShape(rotation).getBounds2D();
                    }
                    else {
                        unrotatedBoundingRectangle.add(pieceShape.createTransformedShape(rotation).getBounds2D());
                    }
                }
            }
        }
        var center = new java.awt.geom.Point2D.Float(unrotatedBoundingRectangle.getCenterX(), unrotatedBoundingRectangle.getCenterY());
        rotation.setToRotation(angle);
        rotation.transform(center, center);
        if (this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable) {
            var width = unrotatedBoundingRectangle.getWidth();
            _super.prototype.setWidth.call(this, width);
            _super.prototype.setWidthInPlan.call(this, width);
            var depth = unrotatedBoundingRectangle.getHeight();
            _super.prototype.setDepth.call(this, depth);
            _super.prototype.setDepthInPlan.call(this, depth);
            _super.prototype.setHeight.call(this, height);
            _super.prototype.setHeightInPlan.call(this, height);
        }
        else {
            this.fixedWidth = unrotatedBoundingRectangle.getWidth();
            this.fixedDepth = unrotatedBoundingRectangle.getHeight();
            this.fixedHeight = height;
        }
        this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation = dropOnTopElevation / height;
        _super.prototype.setX.call(this, center.getX());
        _super.prototype.setY.call(this, center.getY());
        _super.prototype.setElevation.call(this, elevation);
    };
    /**
     * Adds a listener to the furniture of this group that will update the size and location
     * of the group when its furniture is moved or resized.
     * @private
     */
    HomeFurnitureGroup.prototype.addFurnitureListener = function () {
        this.furnitureListener = new HomeFurnitureGroup.LocationAndSizeChangeListener(this);
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                piece.addPropertyChangeListener(this.furnitureListener);
            }
        }
    };
    /**
     * Returns all the pieces of the given <code>furniture</code> list.
     * @param {HomePieceOfFurniture[]} furniture
     * @return {HomePieceOfFurniture[]}
     * @private
     */
    HomeFurnitureGroup.prototype.getFurnitureWithoutGroups = function (furniture) {
        var pieces = ([]);
        for (var index = 0; index < furniture.length; index++) {
            var piece = furniture[index];
            {
                if (piece != null && piece instanceof HomeFurnitureGroup) {
                    /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(pieces, this.getFurnitureWithoutGroups(piece.getFurniture()));
                }
                else {
                    /* add */ (pieces.push(piece) > 0);
                }
            }
        }
        return pieces;
    };
    /**
     * Returns the furniture of this group and of all its subgroups, including the possible child furniture groups.
     * @return {HomePieceOfFurniture[]}
     */
    HomeFurnitureGroup.prototype.getAllFurniture = function () {
        var pieces = (this.furniture.slice(0));
        {
            var array = this.getFurniture();
            for (var index = 0; index < array.length; index++) {
                var piece = array[index];
                {
                    if (piece != null && piece instanceof HomeFurnitureGroup) {
                        /* addAll */ (function (l1, l2) { return l1.push.apply(l1, l2); })(pieces, piece.getAllFurniture());
                    }
                }
            }
        }
        return pieces;
    };
    /**
     * Returns a list of the furniture of this group.
     * @return {HomePieceOfFurniture[]}
     */
    HomeFurnitureGroup.prototype.getFurniture = function () {
        return /* unmodifiableList */ this.furniture.slice(0);
    };
    /**
     * Adds the <code>piece</code> in parameter at the given <code>index</code>.
     * @param {HomePieceOfFurniture} piece
     * @param {number} index
     * @private
     */
    HomeFurnitureGroup.prototype.addPieceOfFurniture = function (piece, index) {
        this.furniture = (this.furniture.slice(0));
        piece.setLevel(this.getLevel());
        /* add */ this.furniture.splice(index, 0, piece);
        piece.addPropertyChangeListener(this.furnitureListener);
        this.updateLocationAndSize(this.furniture, this.getAngle(), false);
    };
    /**
     * Deletes the <code>piece</code> in parameter from this group.
     * @throws IllegalStateException if the last piece in this group is the one in parameter
     * @param {HomePieceOfFurniture} piece
     * @private
     */
    HomeFurnitureGroup.prototype.deletePieceOfFurniture = function (piece) {
        var index = this.furniture.indexOf(piece);
        if (index !== -1) {
            if ( /* size */this.furniture.length > 1) {
                piece.setLevel(null);
                piece.removePropertyChangeListener(this.furnitureListener);
                this.furniture = (this.furniture.slice(0));
                /* remove */ this.furniture.splice(index, 1)[0];
                this.updateLocationAndSize(this.furniture, this.getAngle(), false);
            }
            else {
                throw new IllegalStateException("Group can\'t be empty");
            }
        }
    };
    /**
     * Returns the catalog ID of this group.
     * @return {string}
     */
    HomeFurnitureGroup.prototype.getCatalogId = function () {
        return _super.prototype.getCatalogId.call(this);
    };
    /**
     * Returns the information associated with this group.
     * @return {string}
     */
    HomeFurnitureGroup.prototype.getInformation = function () {
        return _super.prototype.getInformation.call(this);
    };
    /**
     * Returns <code>true</code> if this group is movable.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isMovable = function () {
        return _super.prototype.isMovable.call(this);
    };
    /**
     * Sets whether this group is movable or not.
     * @param {boolean} movable
     */
    HomeFurnitureGroup.prototype.setMovable = function (movable) {
        _super.prototype.setMovable.call(this, movable);
    };
    /**
     * Returns <code>true</code> if all furniture of this group are doors or windows.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isDoorOrWindow = function () {
        return this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_doorOrWindow;
    };
    /**
     * Returns <code>true</code> if all furniture of this group are resizable.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isResizable = function () {
        return this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable;
    };
    /**
     * Returns <code>true</code> if all furniture of this group are deformable.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isDeformable = function () {
        return this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_deformable;
    };
    /**
     * Returns <code>true</code> if all furniture of this group are texturable.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isTexturable = function () {
        return this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_texturable;
    };
    /**
     * Returns <code>false</code>.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isHorizontallyRotatable = function () {
        return false;
    };
    /**
     * Returns the width of this group.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getWidth = function () {
        if (!this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable) {
            return this.fixedWidth;
        }
        else {
            return _super.prototype.getWidth.call(this);
        }
    };
    /**
     * Returns the width of this group. As a group can't be rotated around an horizontal axis,
     * its width in the horizontal plan is equal to its width.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getWidthInPlan = function () {
        return this.getWidth();
    };
    /**
     * Returns the depth of this group.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getDepth = function () {
        if (!this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable) {
            return this.fixedDepth;
        }
        else {
            return _super.prototype.getDepth.call(this);
        }
    };
    /**
     * Returns the depth of this group. As a group can't be rotated around an horizontal axis,
     * its depth in the horizontal plan is equal to its depth.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getDepthInPlan = function () {
        return this.getDepth();
    };
    /**
     * Returns the height of this group.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getHeight = function () {
        if (!this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_resizable) {
            return this.fixedHeight;
        }
        else {
            return _super.prototype.getHeight.call(this);
        }
    };
    /**
     * Returns the height of this group. As a group can't be rotated around an horizontal axis,
     * its height in the horizontal plan is equal to its height.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getHeightInPlan = function () {
        return this.getHeight();
    };
    /**
     * Returns <code>true</code> if this piece or a child of this group is rotated around an horizontal axis.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isHorizontallyRotated = function () {
        if (_super.prototype.isHorizontallyRotated.call(this)) {
            return true;
        }
        else {
            {
                var array = this.getFurniture();
                for (var index = 0; index < array.length; index++) {
                    var childPiece = array[index];
                    {
                        if (childPiece.isHorizontallyRotated()) {
                            return true;
                        }
                    }
                }
            }
            return false;
        }
    };
    /**
     * Returns the elevation at which should be placed an object dropped on this group.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getDropOnTopElevation = function () {
        return this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_dropOnTopElevation;
    };
    /**
     * Returns <code>null</code>.
     * @return {Object}
     */
    HomeFurnitureGroup.prototype.getIcon = function () {
        return null;
    };
    /**
     * @throws IllegalStateException
     * @param {Object} icon
     */
    HomeFurnitureGroup.prototype.setIcon = function (icon) {
        throw new IllegalStateException("Can\'t set icon of a group");
    };
    /**
     * Returns <code>null</code>.
     * @return {Object}
     */
    HomeFurnitureGroup.prototype.getPlanIcon = function () {
        return null;
    };
    /**
     * @throws IllegalStateException
     * @param {Object} planIcon
     */
    HomeFurnitureGroup.prototype.setPlanIcon = function (planIcon) {
        throw new IllegalStateException("Can\'t set plan icon of a group");
    };
    /**
     * Returns <code>null</code>.
     * @return {Object}
     */
    HomeFurnitureGroup.prototype.getModel = function () {
        return null;
    };
    /**
     * @throws IllegalStateException
     * @param {Object} model
     */
    HomeFurnitureGroup.prototype.setModel = function (model) {
        throw new IllegalStateException("Can\'t set model of a group");
    };
    /**
     * Returns <code>null</code>.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getModelSize = function () {
        return null;
    };
    /**
     * @throws IllegalStateException
     * @param {number} modelSize
     */
    HomeFurnitureGroup.prototype.setModelSize = function (modelSize) {
        throw new IllegalStateException("Can\'t set model size of a group");
    };
    /**
     * Returns an identity matrix.
     * @return {float[][]}
     */
    HomeFurnitureGroup.prototype.getModelRotation = function () {
        return PieceOfFurniture.IDENTITY_ROTATION_$LI$();
    };
    /**
     * @throws IllegalStateException
     * @param {float[][]} modelRotation
     */
    HomeFurnitureGroup.prototype.setModelRotation = function (modelRotation) {
        throw new IllegalStateException("Can\'t set model rotation of a group");
    };
    /**
     * Returns <code>true</code>.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isModelCenteredAtOrigin = function () {
        return true;
    };
    /**
     * Returns <code>false</code>.
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.isBackFaceShown = function () {
        return false;
    };
    /**
     * @throws IllegalStateException
     * @param {boolean} backFaceShown
     */
    HomeFurnitureGroup.prototype.setBackFaceShown = function (backFaceShown) {
        throw new IllegalStateException("Can\'t set back face shown attribute of a group");
    };
    /**
     * Returns <code>null</code>.
     * @return {com.eteks.sweethome3d.model.Transformation[]}
     */
    HomeFurnitureGroup.prototype.getModelTransformations = function () {
        return null;
    };
    /**
     * Sets the transformations of this group.
     * @param {com.eteks.sweethome3d.model.Transformation[]} modelTransformations
     */
    HomeFurnitureGroup.prototype.setModelTransformations = function (modelTransformations) {
        if (this.isDeformable()) {
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.setModelTransformations(modelTransformations);
                }
            }
        }
    };
    /**
     * Returns 0.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getPitch = function () {
        return 0;
    };
    /**
     * Returns 0.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getRoll = function () {
        return 0;
    };
    /**
     * Returns <code>null</code>.
     * @return {string}
     */
    HomeFurnitureGroup.prototype.getStaircaseCutOutShape = function () {
        return null;
    };
    /**
     * @throws IllegalStateException
     * @param {string} staircaseCutOutShape
     */
    HomeFurnitureGroup.prototype.setStaircaseCutOutShape = function (staircaseCutOutShape) {
        throw new IllegalStateException("Can\'t set staircase cut out shape of a group");
    };
    /**
     * Returns the creator set for this group.
     * @return {string}
     */
    HomeFurnitureGroup.prototype.getCreator = function () {
        return _super.prototype.getCreator.call(this);
    };
    /**
     * Returns the price of the furniture of this group with a price.
     * @return {Big}
     */
    HomeFurnitureGroup.prototype.getPrice = function () {
        var price = null;
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                if (piece.getPrice() != null) {
                    if (price == null) {
                        price = piece.getPrice();
                    }
                    else {
                        price = /* add */ price.plus(piece.getPrice());
                    }
                }
            }
        }
        if (price == null) {
            return _super.prototype.getPrice.call(this);
        }
        else {
            return price;
        }
    };
    /**
     * Sets the price of this group.
     * @throws UnsupportedOperationException if the price of one of the pieces is set
     * @param {Big} price
     */
    HomeFurnitureGroup.prototype.setPrice = function (price) {
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                if (piece.getPrice() != null) {
                    throw new UnsupportedOperationException("Can\'t change the price of a group containing pieces with a price");
                }
            }
        }
        _super.prototype.setPrice.call(this, price);
    };
    /**
     * Returns the VAT percentage of the furniture of this group
     * or <code>null</code> if one piece has no VAT percentage
     * or has a VAT percentage different from the other furniture.
     * @return {Big}
     */
    HomeFurnitureGroup.prototype.getValueAddedTaxPercentage = function () {
        var valueAddedTaxPercentage = this.furniture[0].getValueAddedTaxPercentage();
        if (valueAddedTaxPercentage != null) {
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    var pieceValueAddedTaxPercentage = piece.getValueAddedTaxPercentage();
                    if (pieceValueAddedTaxPercentage == null || !((valueAddedTaxPercentage) != null ? pieceValueAddedTaxPercentage.eq(valueAddedTaxPercentage) : (pieceValueAddedTaxPercentage === (valueAddedTaxPercentage)))) {
                        return null;
                    }
                }
            }
        }
        return valueAddedTaxPercentage;
    };
    /**
     * Returns the currency of the furniture of this group
     * or <code>null</code> if one piece has no currency
     * or has a currency different from the other furniture.
     * @return {string}
     */
    HomeFurnitureGroup.prototype.getCurrency = function () {
        return this.__com_eteks_sweethome3d_model_HomeFurnitureGroup_currency;
    };
    /**
     * Returns the VAT of the furniture of this group.
     * @return {Big}
     */
    HomeFurnitureGroup.prototype.getValueAddedTax = function () {
        var valueAddedTax = null;
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                var pieceValueAddedTax = piece.getValueAddedTax();
                if (pieceValueAddedTax != null) {
                    if (valueAddedTax == null) {
                        valueAddedTax = pieceValueAddedTax;
                    }
                    else {
                        valueAddedTax = /* add */ valueAddedTax.plus(pieceValueAddedTax);
                    }
                }
            }
        }
        return valueAddedTax;
    };
    /**
     * Returns the total price of the furniture of this group.
     * @return {Big}
     */
    HomeFurnitureGroup.prototype.getPriceValueAddedTaxIncluded = function () {
        var priceValueAddedTaxIncluded = null;
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                if (piece.getPrice() != null) {
                    if (priceValueAddedTaxIncluded == null) {
                        priceValueAddedTaxIncluded = piece.getPriceValueAddedTaxIncluded();
                    }
                    else {
                        priceValueAddedTaxIncluded = /* add */ priceValueAddedTaxIncluded.plus(piece.getPriceValueAddedTaxIncluded());
                    }
                }
            }
        }
        return priceValueAddedTaxIncluded;
    };
    /**
     * Returns <code>null</code>.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getColor = function () {
        return null;
    };
    /**
     * Sets the <code>color</code> of the furniture of this group.
     * @param {number} color
     */
    HomeFurnitureGroup.prototype.setColor = function (color) {
        if (this.isTexturable()) {
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.setColor(color);
                }
            }
        }
    };
    /**
     * Returns <code>null</code>.
     * @return {HomeTexture}
     */
    HomeFurnitureGroup.prototype.getTexture = function () {
        return null;
    };
    /**
     * Sets the <code>texture</code> of the furniture of this group.
     * @param {HomeTexture} texture
     */
    HomeFurnitureGroup.prototype.setTexture = function (texture) {
        if (this.isTexturable()) {
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.setTexture(texture);
                }
            }
        }
    };
    /**
     * Returns <code>null</code>.
     * @return {com.eteks.sweethome3d.model.HomeMaterial[]}
     */
    HomeFurnitureGroup.prototype.getModelMaterials = function () {
        return null;
    };
    /**
     * Sets the materials of the furniture of this group.
     * @param {com.eteks.sweethome3d.model.HomeMaterial[]} modelMaterials
     */
    HomeFurnitureGroup.prototype.setModelMaterials = function (modelMaterials) {
        if (this.isTexturable()) {
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.setModelMaterials(modelMaterials);
                }
            }
        }
    };
    /**
     * Returns <code>null</code>.
     * @return {number}
     */
    HomeFurnitureGroup.prototype.getShininess = function () {
        return null;
    };
    /**
     * Sets the shininess of the furniture of this group.
     * @param {number} shininess
     */
    HomeFurnitureGroup.prototype.setShininess = function (shininess) {
        if (this.isTexturable()) {
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.setShininess(shininess);
                }
            }
        }
    };
    /**
     * Sets the <code>angle</code> of the furniture of this group.
     * @param {number} angle
     */
    HomeFurnitureGroup.prototype.setAngle = function (angle) {
        if (angle !== this.getAngle()) {
            var angleDelta = angle - this.getAngle();
            var cosAngleDelta = Math.cos(angleDelta);
            var sinAngleDelta = Math.sin(angleDelta);
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    piece.setAngle(piece.getAngle() + angleDelta);
                    var newX = this.getX() + ((piece.getX() - this.getX()) * cosAngleDelta - (piece.getY() - this.getY()) * sinAngleDelta);
                    var newY = this.getY() + ((piece.getX() - this.getX()) * sinAngleDelta + (piece.getY() - this.getY()) * cosAngleDelta);
                    piece.setX(newX);
                    piece.setY(newY);
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setAngle.call(this, angle);
        }
    };
    /**
     * Sets the <code>abscissa</code> of this group and moves its furniture accordingly.
     * @param {number} x
     */
    HomeFurnitureGroup.prototype.setX = function (x) {
        if (x !== this.getX()) {
            var dx = x - this.getX();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    piece.setX(piece.getX() + dx);
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setX.call(this, x);
        }
    };
    /**
     * Sets the <code>ordinate</code> of this group and moves its furniture accordingly.
     * @param {number} y
     */
    HomeFurnitureGroup.prototype.setY = function (y) {
        if (y !== this.getY()) {
            var dy = y - this.getY();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    piece.setY(piece.getY() + dy);
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setY.call(this, y);
        }
    };
    /**
     * Sets the <code>width</code> of this group, then moves and resizes its furniture accordingly.
     * This method shouldn't be called on a group that contain furniture rotated around an horizontal axis.
     * @param {number} width
     */
    HomeFurnitureGroup.prototype.setWidth = function (width) {
        if (width !== this.getWidth()) {
            var widthFactor = width / this.getWidth();
            var angle = this.getAngle();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    var angleDelta = piece.getAngle() - angle;
                    var pieceWidth = piece.getWidth();
                    var pieceDepth = piece.getDepth();
                    piece.setWidth(pieceWidth + pieceWidth * (widthFactor - 1) * Math.abs(Math.cos(angleDelta)));
                    piece.setDepth(pieceDepth + pieceDepth * (widthFactor - 1) * Math.abs(Math.sin(angleDelta)));
                    var cosAngle = Math.cos(angle);
                    var sinAngle = Math.sin(angle);
                    var newX = this.getX() + ((piece.getX() - this.getX()) * cosAngle + (piece.getY() - this.getY()) * sinAngle);
                    var newY = this.getY() + ((piece.getX() - this.getX()) * -sinAngle + (piece.getY() - this.getY()) * cosAngle);
                    newX = this.getX() + (newX - this.getX()) * widthFactor;
                    piece.setX(this.getX() + ((newX - this.getX()) * cosAngle - (newY - this.getY()) * sinAngle));
                    piece.setY(this.getY() + ((newX - this.getX()) * sinAngle + (newY - this.getY()) * cosAngle));
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setWidth.call(this, width);
        }
    };
    /**
     * Sets the <code>depth</code> of this group, then moves and resizes its furniture accordingly.
     * This method shouldn't be called on a group that contain furniture rotated around an horizontal axis.
     * @param {number} depth
     */
    HomeFurnitureGroup.prototype.setDepth = function (depth) {
        if (depth !== this.getDepth()) {
            var depthFactor = depth / this.getDepth();
            var angle = this.getAngle();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    var angleDelta = piece.getAngle() - angle;
                    var pieceWidth = piece.getWidth();
                    var pieceDepth = piece.getDepth();
                    piece.setWidth(pieceWidth + pieceWidth * (depthFactor - 1) * Math.abs(Math.sin(angleDelta)));
                    piece.setDepth(pieceDepth + pieceDepth * (depthFactor - 1) * Math.abs(Math.cos(angleDelta)));
                    var cosAngle = Math.cos(angle);
                    var sinAngle = Math.sin(angle);
                    var newX = this.getX() + ((piece.getX() - this.getX()) * cosAngle + (piece.getY() - this.getY()) * sinAngle);
                    var newY = this.getY() + ((piece.getX() - this.getX()) * -sinAngle + (piece.getY() - this.getY()) * cosAngle);
                    newY = this.getY() + (newY - this.getY()) * depthFactor;
                    piece.setX(this.getX() + ((newX - this.getX()) * cosAngle - (newY - this.getY()) * sinAngle));
                    piece.setY(this.getY() + ((newX - this.getX()) * sinAngle + (newY - this.getY()) * cosAngle));
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setDepth.call(this, depth);
        }
    };
    /**
     * Sets the <code>height</code> of this group, then moves and resizes its furniture accordingly.
     * This method shouldn't be called on a group that contain furniture rotated around an horizontal axis.
     * @param {number} height
     */
    HomeFurnitureGroup.prototype.setHeight = function (height) {
        if (height !== this.getHeight()) {
            var heightFactor = height / this.getHeight();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    piece.setHeight(piece.getHeight() * heightFactor);
                    piece.setElevation(this.getElevation() + (piece.getElevation() - this.getElevation()) * heightFactor);
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setHeight.call(this, height);
        }
    };
    /**
     * Scales this group and its children with the given <code>ratio</code>.
     * @param {number} scale
     */
    HomeFurnitureGroup.prototype.scale = function (scale) {
        var angle = this.getAngle();
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                piece.removePropertyChangeListener(this.furnitureListener);
                piece.setWidth(piece.getWidth() * scale);
                piece.setDepth(piece.getDepth() * scale);
                piece.setHeight(piece.getHeight() * scale);
                var cosAngle = Math.cos(angle);
                var sinAngle = Math.sin(angle);
                var newX = this.getX() + ((piece.getX() - this.getX()) * cosAngle + (piece.getY() - this.getY()) * sinAngle);
                var newY = this.getY() + ((piece.getX() - this.getX()) * -sinAngle + (piece.getY() - this.getY()) * cosAngle);
                newX = this.getX() + (newX - this.getX()) * scale;
                newY = this.getY() + (newY - this.getY()) * scale;
                piece.setX(this.getX() + ((newX - this.getX()) * cosAngle - (newY - this.getY()) * sinAngle));
                piece.setY(this.getY() + ((newX - this.getX()) * sinAngle + (newY - this.getY()) * cosAngle));
                piece.setElevation(this.getElevation() + (piece.getElevation() - this.getElevation()) * scale);
                piece.addPropertyChangeListener(this.furnitureListener);
            }
        }
        _super.prototype.setWidth.call(this, this.getWidth() * scale);
        _super.prototype.setDepth.call(this, this.getDepth() * scale);
        _super.prototype.setHeight.call(this, this.getHeight() * scale);
    };
    /**
     * Sets the <code>elevation</code> of this group, then moves its furniture accordingly.
     * @param {number} elevation
     */
    HomeFurnitureGroup.prototype.setElevation = function (elevation) {
        if (elevation !== this.getElevation()) {
            var elevationDelta = elevation - this.getElevation();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    piece.setElevation(piece.getElevation() + elevationDelta);
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setElevation.call(this, elevation);
        }
    };
    /**
     * Sets whether the furniture of this group should be mirrored or not.
     * @param {boolean} modelMirrored
     */
    HomeFurnitureGroup.prototype.setModelMirrored = function (modelMirrored) {
        if (modelMirrored !== this.isModelMirrored()) {
            var angle = this.getAngle();
            for (var index = 0; index < this.furniture.length; index++) {
                var piece = this.furniture[index];
                {
                    piece.removePropertyChangeListener(this.furnitureListener);
                    piece.setModelMirrored(!piece.isModelMirrored());
                    var cosAngle = Math.cos(angle);
                    var sinAngle = Math.sin(angle);
                    var newX = this.getX() + ((piece.getX() - this.getX()) * cosAngle + (piece.getY() - this.getY()) * sinAngle);
                    var newY = this.getY() + ((piece.getX() - this.getX()) * -sinAngle + (piece.getY() - this.getY()) * cosAngle);
                    newX = this.getX() - (newX - this.getX());
                    piece.setX(this.getX() + ((newX - this.getX()) * cosAngle - (newY - this.getY()) * sinAngle));
                    piece.setY(this.getY() + ((newX - this.getX()) * sinAngle + (newY - this.getY()) * cosAngle));
                    piece.addPropertyChangeListener(this.furnitureListener);
                }
            }
            _super.prototype.setModelMirrored.call(this, modelMirrored);
        }
    };
    /**
     * Sets whether the furniture of this group should be visible or not.
     * @param {boolean} visible
     */
    HomeFurnitureGroup.prototype.setVisible = function (visible) {
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                piece.setVisible(visible);
            }
        }
        _super.prototype.setVisible.call(this, visible);
    };
    /**
     * Set the level of this group and the furniture it contains.
     * @param {Level} level
     */
    HomeFurnitureGroup.prototype.setLevel = function (level) {
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                piece.setLevel(level);
            }
        }
        _super.prototype.setLevel.call(this, level);
    };
    /**
     * Returns <code>true</code> if one of the pieces of this group intersects
     * with the horizontal rectangle which opposite corners are at points
     * (<code>x0</code>, <code>y0</code>) and (<code>x1</code>, <code>y1</code>).
     * @param {number} x0
     * @param {number} y0
     * @param {number} x1
     * @param {number} y1
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.intersectsRectangle = function (x0, y0, x1, y1) {
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                if (piece.intersectsRectangle(x0, y0, x1, y1)) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * Returns <code>true</code> if one of the pieces of this group contains
     * the point at (<code>x</code>, <code>y</code>)
     * with a given <code>margin</code>.
     * @param {number} x
     * @param {number} y
     * @param {number} margin
     * @return {boolean}
     */
    HomeFurnitureGroup.prototype.containsPoint = function (x, y, margin) {
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                if (piece.containsPoint(x, y, margin)) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * Returns a copy of this object and its children with new ids.
     * @return {HomeObject}
     */
    HomeFurnitureGroup.prototype.duplicate = function () {
        var copy = _super.prototype.duplicate.call(this);
        var duplicatedFurniture = ([]);
        for (var index = 0; index < copy.furniture.length; index++) {
            var piece = copy.furniture[index];
            {
                piece.removePropertyChangeListener(copy.furnitureListener);
                var duplicatedPiece = piece.duplicate();
                /* add */ (duplicatedFurniture.push(duplicatedPiece) > 0);
                duplicatedPiece.addPropertyChangeListener(copy.furnitureListener);
            }
        }
        copy.furniture = /* unmodifiableList */ duplicatedFurniture.slice(0);
        return copy;
    };
    /**
     * Returns a clone of this group with cloned furniture.
     * @return {HomeFurnitureGroup}
     */
    HomeFurnitureGroup.prototype.clone = function () {
        var _this = this;
        var clone = (function (o) { if (_super.prototype.clone != undefined) {
            return _super.prototype.clone.call(_this);
        }
        else {
            var clone_10 = Object.create(o);
            for (var p in o) {
                if (o.hasOwnProperty(p))
                    clone_10[p] = o[p];
            }
            return clone_10;
        } })(this);
        clone.furniture = ([]);
        for (var index = 0; index < this.furniture.length; index++) {
            var piece = this.furniture[index];
            {
                /* add */ (clone.furniture.push(/* clone */ /* clone */ (function (o) { if (o.clone != undefined) {
                    return o.clone();
                }
                else {
                    var clone_11 = Object.create(o);
                    for (var p in o) {
                        if (o.hasOwnProperty(p))
                            clone_11[p] = o[p];
                    }
                    return clone_11;
                } })(piece)) > 0);
            }
        }
        clone.furniture = /* unmodifiableList */ clone.furniture.slice(0);
        clone.addFurnitureListener();
        return clone;
    };
    return HomeFurnitureGroup;
}(HomePieceOfFurniture));
HomeFurnitureGroup["__class"] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
HomeFurnitureGroup["__interfaces"] = ["com.eteks.sweethome3d.model.Selectable", "com.eteks.sweethome3d.model.PieceOfFurniture", "com.eteks.sweethome3d.model.Elevatable"];
(function (HomeFurnitureGroup) {
    /**
     * Properties listener that updates the size and location of this group.
     * This listener is bound to this group with a weak reference to avoid a strong link
     * of this group towards the furniture it contains.
     * @param {HomeFurnitureGroup} group
     * @class
     */
    var LocationAndSizeChangeListener = /** @class */ (function () {
        function LocationAndSizeChangeListener(group) {
            if (this.group === undefined) {
                this.group = null;
            }
            this.group = (group);
        }
        LocationAndSizeChangeListener.prototype.propertyChange = function (ev) {
            var group = this.group;
            if (group == null) {
                ev.getSource().removePropertyChangeListener(this);
            }
            else if (( /* name */"X" === ev.getPropertyName()) || ( /* name */"Y" === ev.getPropertyName()) || ( /* name */"ELEVATION" === ev.getPropertyName()) || ( /* name */"ANGLE" === ev.getPropertyName()) || ( /* name */"WIDTH_IN_PLAN" === ev.getPropertyName()) || ( /* name */"DEPTH_IN_PLAN" === ev.getPropertyName()) || ( /* name */"HEIGHT_IN_PLAN" === ev.getPropertyName())) {
                group.updateLocationAndSize(group.getFurniture(), group.getAngle(), false);
            }
        };
        return LocationAndSizeChangeListener;
    }());
    HomeFurnitureGroup.LocationAndSizeChangeListener = LocationAndSizeChangeListener;
    LocationAndSizeChangeListener["__class"] = "com.eteks.sweethome3d.model.HomeFurnitureGroup.LocationAndSizeChangeListener";
})(HomeFurnitureGroup || (HomeFurnitureGroup = {}));
HomeFurnitureGroup['__transients'] = ['furnitureListener', 'shapeCache', 'propertyChangeSupport'];
Home.LEVEL_ELEVATION_COMPARATOR_$LI$();
PlanController.Mode.LABEL_CREATION_$LI$();
PlanController.Mode.DIMENSION_LINE_CREATION_$LI$();
PlanController.Mode.POLYLINE_CREATION_$LI$();
PlanController.Mode.ROOM_CREATION_$LI$();
PlanController.Mode.WALL_CREATION_$LI$();
PlanController.Mode.PANNING_$LI$();
PlanController.Mode.SELECTION_$LI$();
HomePieceOfFurniture.SORTABLE_PROPERTY_COMPARATORS_$LI$();
HomePieceOfFurniture.ROUND_WALL_ANGLE_MARGIN_$LI$();
HomePieceOfFurniture.STRAIGHT_WALL_ANGLE_MARGIN_$LI$();
HomePieceOfFurniture.TWICE_PI_$LI$();
HomePieceOfFurniture.__static_initialize();
Room.TWICE_PI_$LI$();
Label.TWICE_PI_$LI$();
HomeController.UserPreferencesChangeListener.writingPreferences_$LI$();
CatalogTexture.recentFilters_$LI$();
CatalogTexture.COMPARATOR_$LI$();
CatalogTexture.EMPTY_CRITERIA_$LI$();
CatalogTexture.__static_initialize();
CatalogPieceOfFurniture.recentFilters_$LI$();
CatalogPieceOfFurniture.COMPARATOR_$LI$();
CatalogPieceOfFurniture.EMPTY_CRITERIA_$LI$();
CatalogPieceOfFurniture.__static_initialize();
TextStyle.textStylesCache_$LI$();
FurnitureCategory.COMPARATOR_$LI$();
Baseboard.baseboardsCache_$LI$();
TexturesCategory.COMPARATOR_$LI$();
TransferableView.DataType.FURNITURE_LIST_$LI$();
TransferableView.DataType.PLAN_IMAGE_$LI$();
ExportableView.FormatType.CSV_$LI$();
ExportableView.FormatType.SVG_$LI$();
